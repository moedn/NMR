
RFplaform3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bea2  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000e000  8000e000  0000e400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000009cc  8000e200  8000e200  0000e600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  8000ebcc  8000ebcc  0000efcc  2**0
                  ALLOC
  6 .data         00000530  000001dc  8000ebd0  0000f1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000070c  8000f100  0000f70c  2**0
                  ALLOC
  8 .bss          00008ed8  00000710  8000f100  0000f710  2**2
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000f70c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001380  00000000  00000000  0000f73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00002ff9  00000000  00000000  00010abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0003d7f4  00000000  00000000  00013ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000073d8  00000000  00000000  000512a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f18a  00000000  00000000  00058681  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000033d4  00000000  00000000  0007780c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007c53  00000000  00000000  0007abe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000e76c  00000000  00000000  00082833  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 018a31f1  00000000  00000000  00090f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 00005ca8  00000000  00000000  01934190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf a6 5c 	sub	pc,pc,-22948

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	eb cd 40 c0 	pushm	r6-r7,lr
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
80002008:	4b f9       	lddpc	r9,80002104 <sd_mmc_spi_get_capacity+0x100>
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
8000200a:	4c 08       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
  if (card_type == SD_CARD_2_SDHC) {
8000200c:	13 8b       	ld.ub	r11,r9[0x0]
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
8000200e:	11 dc       	ld.ub	r12,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
80002010:	30 39       	mov	r9,3
80002012:	f2 0b 18 00 	cp.b	r11,r9
80002016:	c4 30       	breq	8000209c <sd_mmc_spi_get_capacity+0x98>
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002018:	11 fe       	ld.ub	lr,r8[0x7]
8000201a:	f1 37 00 08 	ld.ub	r7,r8[8]
8000201e:	a7 87       	lsr	r7,0x6
80002020:	ee 0e 00 27 	add	r7,r7,lr<<0x2
80002024:	11 ee       	ld.ub	lr,r8[0x6]
80002026:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000202a:	ab 6e       	lsl	lr,0xa
    capacity = (uint64_t)c_size << 19;
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
8000202c:	f1 39 00 0a 	ld.ub	r9,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002030:	1c 07       	add	r7,lr
80002032:	f2 06 16 07 	lsr	r6,r9,0x7
80002036:	2f f7       	sub	r7,-1
80002038:	f1 3e 00 09 	ld.ub	lr,r8[9]
8000203c:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80002040:	ec 0e 00 1e 	add	lr,r6,lr<<0x1
80002044:	2f ee       	sub	lr,-2
80002046:	ee 0e 09 4e 	lsl	lr,r7,lr
8000204a:	20 1e       	sub	lr,1
8000204c:	4b 0a       	lddpc	r10,8000210c <sd_mmc_spi_get_capacity+0x108>
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
8000204e:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002052:	95 0e       	st.w	r10[0x0],lr
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80002054:	74 0e       	ld.w	lr,r10[0x0]
80002056:	2f fe       	sub	lr,-1
80002058:	fc 0c 09 4e 	lsl	lr,lr,r12
8000205c:	1c 96       	mov	r6,lr
8000205e:	30 0e       	mov	lr,0
80002060:	1c 97       	mov	r7,lr
80002062:	4a ce       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
80002064:	fc e7 00 00 	st.d	lr[0],r6
    capacity_mult = 0;
80002068:	4a b7       	lddpc	r7,80002114 <sd_mmc_spi_get_capacity+0x110>
8000206a:	30 0e       	mov	lr,0
8000206c:	ae 0e       	st.h	r7[0x0],lr
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
8000206e:	30 97       	mov	r7,9
80002070:	ee 0c 18 00 	cp.b	r12,r7
80002074:	e0 88 00 07 	brls	80002082 <sd_mmc_spi_get_capacity+0x7e>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
80002078:	74 0e       	ld.w	lr,r10[0x0]
8000207a:	20 9c       	sub	r12,9
8000207c:	fc 0c 09 4c 	lsl	r12,lr,r12
80002080:	95 0c       	st.w	r10[0x0],r12
    }
  }
  if (card_type == MMC_CARD)
80002082:	58 0b       	cp.w	r11,0
80002084:	c3 21       	brne	800020e8 <sd_mmc_spi_get_capacity+0xe4>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80002086:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
8000208a:	f1 38 00 0b 	ld.ub	r8,r8[11]
8000208e:	f3 d9 c0 45 	bfextu	r9,r9,0x2,0x5
80002092:	a5 98       	lsr	r8,0x5
80002094:	f1 ea 10 38 	or	r8,r8,r10<<0x3
80002098:	2f f8       	sub	r8,-1
8000209a:	c2 f8       	rjmp	800020f8 <sd_mmc_spi_get_capacity+0xf4>
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
8000209c:	f1 3e 00 08 	ld.ub	lr,r8[8]
800020a0:	f1 39 00 09 	ld.ub	r9,r8[9]
800020a4:	f3 ee 10 89 	or	r9,r9,lr<<0x8
800020a8:	11 fe       	ld.ub	lr,r8[0x7]
800020aa:	fd de c0 06 	bfextu	lr,lr,0x0,0x6
800020ae:	f3 ee 11 0e 	or	lr,r9,lr<<0x10
    ++c_size;
800020b2:	2f fe       	sub	lr,-1
    capacity = (uint64_t)c_size << 19;
800020b4:	fc 09 16 0d 	lsr	r9,lr,0xd
800020b8:	fc 0a 15 13 	lsl	r10,lr,0x13
800020bc:	49 5c       	lddpc	r12,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020be:	12 9b       	mov	r11,r9
800020c0:	f8 eb 00 00 	st.d	r12[0],r10
    capacity_mult = (c_size >> 13) & 0x01FF;
800020c4:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
800020c8:	49 39       	lddpc	r9,80002114 <sd_mmc_spi_get_capacity+0x110>
800020ca:	b2 0a       	st.h	r9[0x0],r10
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
800020cc:	f8 ea 00 00 	ld.d	r10,r12[0]
800020d0:	92 0c       	ld.sh	r12,r9[0x0]
800020d2:	f4 09 16 09 	lsr	r9,r10,0x9
800020d6:	b7 7c       	lsl	r12,0x17
800020d8:	f3 eb 11 79 	or	r9,r9,r11<<0x17
800020dc:	20 19       	sub	r9,1
800020de:	18 09       	add	r9,r12
800020e0:	48 ba       	lddpc	r10,8000210c <sd_mmc_spi_get_capacity+0x108>
800020e2:	95 09       	st.w	r10[0x0],r9
800020e4:	f1 39 00 0a 	ld.ub	r9,r8[10]
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e8:	f1 38 00 0b 	ld.ub	r8,r8[11]
800020ec:	a7 98       	lsr	r8,0x7
800020ee:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020f2:	f0 09 00 19 	add	r9,r8,r9<<0x1
800020f6:	30 18       	mov	r8,1
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020f8:	2f f9       	sub	r9,-1
800020fa:	b1 39       	mul	r9,r8
800020fc:	48 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020fe:	b0 09       	st.h	r8[0x0],r9
}
80002100:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002104:	00 00       	add	r0,r0
80002106:	0b 4e       	ld.w	lr,--r5
80002108:	00 00       	add	r0,r0
8000210a:	0b 50       	ld.sh	r0,--r5
8000210c:	00 00       	add	r0,r0
8000210e:	0b 48       	ld.w	r8,--r5
80002110:	00 00       	add	r0,r0
80002112:	0b 3c       	ld.ub	r12,r5++
80002114:	00 00       	add	r0,r0
80002116:	0b 44       	ld.w	r4,--r5
80002118:	00 00       	add	r0,r0
8000211a:	0b 46       	ld.w	r6,--r5

8000211c <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
8000211c:	d4 01       	pushm	lr
8000211e:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002120:	18 9b       	mov	r11,r12
80002122:	fc 7c 18 00 	mov	r12,-190464
80002126:	e0 a0 22 87 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000212a:	fa cb ff fe 	sub	r11,sp,-2
8000212e:	fc 7c 18 00 	mov	r12,-190464
80002132:	e0 a0 22 8f 	rcall	80006650 <spi_read>
80002136:	58 1c       	cp.w	r12,1
80002138:	c0 40       	breq	80002140 <sd_mmc_spi_send_and_read+0x24>
     return 0xFF;
   return data_read;
8000213a:	1b bc       	ld.ub	r12,sp[0x3]
}
8000213c:	2f fd       	sub	sp,-4
8000213e:	d8 02       	popm	pc
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002140:	e0 6c 00 ff 	mov	r12,255
     return 0xFF;
   return data_read;
}
80002144:	2f fd       	sub	sp,-4
80002146:	d8 02       	popm	pc

80002148 <sd_mmc_spi_wait_not_busy>:
80002148:	d4 21       	pushm	r4-r7,lr
8000214a:	20 1d       	sub	sp,4
8000214c:	30 0b       	mov	r11,0
8000214e:	fc 7c 18 00 	mov	r12,-190464
bool sd_mmc_spi_wait_not_busy(void)
{
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002152:	fa c6 ff fe 	sub	r6,sp,-2
80002156:	e0 a0 21 d7 	rcall	80006504 <spi_selectChip>
8000215a:	49 65       	lddpc	r5,800021b0 <sd_mmc_spi_wait_not_busy+0x68>
8000215c:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000215e:	3f f4       	mov	r4,-1
80002160:	c0 98       	rjmp	80002172 <sd_mmc_spi_wait_not_busy+0x2a>
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
80002162:	1b b8       	ld.ub	r8,sp[0x3]
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002164:	aa 88       	st.b	r5[0x0],r8
80002166:	e8 08 18 00 	cp.b	r8,r4
8000216a:	c1 40       	breq	80002192 <sd_mmc_spi_wait_not_busy+0x4a>
  {
    retry++;
    if (retry == 200000)
8000216c:	e2 57 0d 40 	cp.w	r7,200000
80002170:	c1 80       	breq	800021a0 <sd_mmc_spi_wait_not_busy+0x58>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002172:	e0 6b 00 ff 	mov	r11,255
80002176:	fc 7c 18 00 	mov	r12,-190464
8000217a:	e0 a0 22 5d 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000217e:	0c 9b       	mov	r11,r6
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002180:	2f f7       	sub	r7,-1
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002182:	fc 7c 18 00 	mov	r12,-190464
80002186:	e0 a0 22 65 	rcall	80006650 <spi_read>
8000218a:	58 1c       	cp.w	r12,1
8000218c:	ce b1       	brne	80002162 <sd_mmc_spi_wait_not_busy+0x1a>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000218e:	3f f8       	mov	r8,-1
80002190:	aa 88       	st.b	r5[0x0],r8
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fc 7c 18 00 	mov	r12,-190464
80002198:	e0 a0 21 de 	rcall	80006554 <spi_unselectChip>
8000219c:	2f fd       	sub	sp,-4
8000219e:	da 2a       	popm	r4-r7,pc,r12=1
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800021a0:	30 0b       	mov	r11,0
800021a2:	fc 7c 18 00 	mov	r12,-190464
800021a6:	e0 a0 21 d7 	rcall	80006554 <spi_unselectChip>
800021aa:	2f fd       	sub	sp,-4
800021ac:	d8 2a       	popm	r4-r7,pc,r12=0
800021ae:	d7 03       	nop
800021b0:	00 00       	add	r0,r0
800021b2:	0b 60       	ld.uh	r0,--r5

800021b4 <sd_mmc_spi_command>:
800021b4:	eb cd 40 e0 	pushm	r5-r7,lr
800021b8:	20 1d       	sub	sp,4
800021ba:	16 97       	mov	r7,r11
800021bc:	18 96       	mov	r6,r12
800021be:	e0 6b 00 ff 	mov	r11,255
800021c2:	fc 7c 18 00 	mov	r12,-190464
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021c6:	e0 a0 22 37 	rcall	80006634 <spi_write>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
800021ca:	fc 7c 18 00 	mov	r12,-190464
800021ce:	0c 9b       	mov	r11,r6
800021d0:	a7 ab       	sbr	r11,0x6
800021d2:	5c 5b       	castu.b	r11
800021d4:	e0 a0 22 30 	rcall	80006634 <spi_write>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
800021d8:	ee 0b 16 18 	lsr	r11,r7,0x18
800021dc:	fc 7c 18 00 	mov	r12,-190464
800021e0:	e0 a0 22 2a 	rcall	80006634 <spi_write>
  spi_write(SD_MMC_SPI, arg>>16);
800021e4:	ee 0b 16 10 	lsr	r11,r7,0x10
800021e8:	fc 7c 18 00 	mov	r12,-190464
800021ec:	e0 a0 22 24 	rcall	80006634 <spi_write>
  spi_write(SD_MMC_SPI, arg>>8 );
800021f0:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
800021f4:	fc 7c 18 00 	mov	r12,-190464
800021f8:	e0 a0 22 1e 	rcall	80006634 <spi_write>
  spi_write(SD_MMC_SPI, arg    );
800021fc:	0e 9b       	mov	r11,r7
800021fe:	fc 7c 18 00 	mov	r12,-190464
80002202:	5c 7b       	castu.h	r11
80002204:	e0 a0 22 18 	rcall	80006634 <spi_write>
  switch(command)
80002208:	30 08       	mov	r8,0
8000220a:	f0 06 18 00 	cp.b	r6,r8
8000220e:	e0 80 00 ec 	breq	800023e6 <sd_mmc_spi_command+0x232>
80002212:	30 88       	mov	r8,8
80002214:	f0 06 18 00 	cp.b	r6,r8
80002218:	e0 80 00 ee 	breq	800023f4 <sd_mmc_spi_command+0x240>
         break;
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
         break;
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000221c:	e0 6b 00 ff 	mov	r11,255
80002220:	fc 7c 18 00 	mov	r12,-190464
80002224:	e0 a0 22 08 	rcall	80006634 <spi_write>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002228:	e0 6b 00 ff 	mov	r11,255

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
8000222c:	fe f7 02 20 	ld.w	r7,pc[544]
80002230:	3f f5       	mov	r5,-1
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002232:	fc 7c 18 00 	mov	r12,-190464

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002236:	ae 85       	st.b	r7[0x0],r5
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002238:	e0 a0 21 fe 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000223c:	fa c6 ff fe 	sub	r6,sp,-2
80002240:	fc 7c 18 00 	mov	r12,-190464
80002244:	0c 9b       	mov	r11,r6
80002246:	e0 a0 22 05 	rcall	80006650 <spi_read>
8000224a:	58 1c       	cp.w	r12,1
8000224c:	e0 80 00 db 	breq	80002402 <sd_mmc_spi_command+0x24e>
     return 0xFF;
   return data_read;
80002250:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002252:	ae 8c       	st.b	r7[0x0],r12
80002254:	ea 0c 18 00 	cp.b	r12,r5
80002258:	e0 81 00 c4 	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000225c:	e0 6b 00 ff 	mov	r11,255
80002260:	fc 7c 18 00 	mov	r12,-190464
80002264:	e0 a0 21 e8 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002268:	0c 9b       	mov	r11,r6
8000226a:	fc 7c 18 00 	mov	r12,-190464
8000226e:	e0 a0 21 f1 	rcall	80006650 <spi_read>
80002272:	58 1c       	cp.w	r12,1
80002274:	e0 80 00 c9 	breq	80002406 <sd_mmc_spi_command+0x252>
     return 0xFF;
   return data_read;
80002278:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000227a:	ae 8c       	st.b	r7[0x0],r12
8000227c:	3f f8       	mov	r8,-1
8000227e:	f0 0c 18 00 	cp.b	r12,r8
80002282:	e0 81 00 af 	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002286:	e0 6b 00 ff 	mov	r11,255
8000228a:	fc 7c 18 00 	mov	r12,-190464
8000228e:	e0 a0 21 d3 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002292:	0c 9b       	mov	r11,r6
80002294:	fc 7c 18 00 	mov	r12,-190464
80002298:	e0 a0 21 dc 	rcall	80006650 <spi_read>
8000229c:	58 1c       	cp.w	r12,1
8000229e:	e0 80 00 b7 	breq	8000240c <sd_mmc_spi_command+0x258>
     return 0xFF;
   return data_read;
800022a2:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800022a4:	ae 8c       	st.b	r7[0x0],r12
800022a6:	3f f8       	mov	r8,-1
800022a8:	f0 0c 18 00 	cp.b	r12,r8
800022ac:	e0 81 00 9a 	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800022b0:	e0 6b 00 ff 	mov	r11,255
800022b4:	fc 7c 18 00 	mov	r12,-190464
800022b8:	e0 a0 21 be 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800022bc:	0c 9b       	mov	r11,r6
800022be:	fc 7c 18 00 	mov	r12,-190464
800022c2:	e0 a0 21 c7 	rcall	80006650 <spi_read>
800022c6:	58 1c       	cp.w	r12,1
800022c8:	e0 80 00 a5 	breq	80002412 <sd_mmc_spi_command+0x25e>
     return 0xFF;
   return data_read;
800022cc:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800022ce:	ae 8c       	st.b	r7[0x0],r12
800022d0:	3f f8       	mov	r8,-1
800022d2:	f0 0c 18 00 	cp.b	r12,r8
800022d6:	e0 81 00 85 	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800022da:	e0 6b 00 ff 	mov	r11,255
800022de:	fc 7c 18 00 	mov	r12,-190464
800022e2:	e0 a0 21 a9 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800022e6:	0c 9b       	mov	r11,r6
800022e8:	fc 7c 18 00 	mov	r12,-190464
800022ec:	e0 a0 21 b2 	rcall	80006650 <spi_read>
800022f0:	58 1c       	cp.w	r12,1
800022f2:	e0 80 00 93 	breq	80002418 <sd_mmc_spi_command+0x264>
     return 0xFF;
   return data_read;
800022f6:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800022f8:	ae 8c       	st.b	r7[0x0],r12
800022fa:	3f f8       	mov	r8,-1
800022fc:	f0 0c 18 00 	cp.b	r12,r8
80002300:	c7 01       	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002302:	e0 6b 00 ff 	mov	r11,255
80002306:	fc 7c 18 00 	mov	r12,-190464
8000230a:	e0 a0 21 95 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000230e:	0c 9b       	mov	r11,r6
80002310:	fc 7c 18 00 	mov	r12,-190464
80002314:	e0 a0 21 9e 	rcall	80006650 <spi_read>
80002318:	58 1c       	cp.w	r12,1
8000231a:	e0 80 00 82 	breq	8000241e <sd_mmc_spi_command+0x26a>
     return 0xFF;
   return data_read;
8000231e:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002320:	ae 8c       	st.b	r7[0x0],r12
80002322:	3f f8       	mov	r8,-1
80002324:	f0 0c 18 00 	cp.b	r12,r8
80002328:	c5 c1       	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000232a:	e0 6b 00 ff 	mov	r11,255
8000232e:	fc 7c 18 00 	mov	r12,-190464
80002332:	e0 a0 21 81 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002336:	0c 9b       	mov	r11,r6
80002338:	fc 7c 18 00 	mov	r12,-190464
8000233c:	e0 a0 21 8a 	rcall	80006650 <spi_read>
80002340:	58 1c       	cp.w	r12,1
80002342:	c7 10       	breq	80002424 <sd_mmc_spi_command+0x270>
     return 0xFF;
   return data_read;
80002344:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002346:	ae 8c       	st.b	r7[0x0],r12
80002348:	3f f8       	mov	r8,-1
8000234a:	f0 0c 18 00 	cp.b	r12,r8
8000234e:	c4 91       	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002350:	e0 6b 00 ff 	mov	r11,255
80002354:	fc 7c 18 00 	mov	r12,-190464
80002358:	e0 a0 21 6e 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000235c:	0c 9b       	mov	r11,r6
8000235e:	fc 7c 18 00 	mov	r12,-190464
80002362:	e0 a0 21 77 	rcall	80006650 <spi_read>
80002366:	58 1c       	cp.w	r12,1
80002368:	c6 10       	breq	8000242a <sd_mmc_spi_command+0x276>
     return 0xFF;
   return data_read;
8000236a:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000236c:	ae 8c       	st.b	r7[0x0],r12
8000236e:	3f f8       	mov	r8,-1
80002370:	f0 0c 18 00 	cp.b	r12,r8
80002374:	c3 61       	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002376:	e0 6b 00 ff 	mov	r11,255
8000237a:	fc 7c 18 00 	mov	r12,-190464
8000237e:	e0 a0 21 5b 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002382:	0c 9b       	mov	r11,r6
80002384:	fc 7c 18 00 	mov	r12,-190464
80002388:	e0 a0 21 64 	rcall	80006650 <spi_read>
8000238c:	58 1c       	cp.w	r12,1
8000238e:	c5 10       	breq	80002430 <sd_mmc_spi_command+0x27c>
     return 0xFF;
   return data_read;
80002390:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002392:	ae 8c       	st.b	r7[0x0],r12
80002394:	3f f8       	mov	r8,-1
80002396:	f0 0c 18 00 	cp.b	r12,r8
8000239a:	c2 31       	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000239c:	e0 6b 00 ff 	mov	r11,255
800023a0:	fc 7c 18 00 	mov	r12,-190464
800023a4:	e0 a0 21 48 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800023a8:	0c 9b       	mov	r11,r6
800023aa:	fc 7c 18 00 	mov	r12,-190464
800023ae:	e0 a0 21 51 	rcall	80006650 <spi_read>
800023b2:	58 1c       	cp.w	r12,1
800023b4:	c4 10       	breq	80002436 <sd_mmc_spi_command+0x282>
     return 0xFF;
   return data_read;
800023b6:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800023b8:	ae 8c       	st.b	r7[0x0],r12
800023ba:	3f f8       	mov	r8,-1
800023bc:	f0 0c 18 00 	cp.b	r12,r8
800023c0:	c1 01       	brne	800023e0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800023c2:	e0 6b 00 ff 	mov	r11,255
800023c6:	fc 7c 18 00 	mov	r12,-190464
800023ca:	e0 a0 21 35 	rcall	80006634 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800023ce:	0c 9b       	mov	r11,r6
800023d0:	fc 7c 18 00 	mov	r12,-190464
800023d4:	e0 a0 21 3e 	rcall	80006650 <spi_read>
800023d8:	58 1c       	cp.w	r12,1
800023da:	c3 10       	breq	8000243c <sd_mmc_spi_command+0x288>
     return 0xFF;
   return data_read;
800023dc:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800023de:	ae 8c       	st.b	r7[0x0],r12
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800023e0:	2f fd       	sub	sp,-4
800023e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  spi_write(SD_MMC_SPI, arg>>8 );
  spi_write(SD_MMC_SPI, arg    );
  switch(command)
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
800023e6:	e0 6b 00 95 	mov	r11,149
800023ea:	fc 7c 18 00 	mov	r12,-190464
800023ee:	e0 a0 21 23 	rcall	80006634 <spi_write>
         break;
800023f2:	c1 bb       	rjmp	80002228 <sd_mmc_spi_command+0x74>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
800023f4:	e0 6b 00 87 	mov	r11,135
800023f8:	fc 7c 18 00 	mov	r12,-190464
800023fc:	e0 a0 21 1c 	rcall	80006634 <spi_write>
         break;
80002400:	c1 4b       	rjmp	80002228 <sd_mmc_spi_command+0x74>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002402:	ae 85       	st.b	r7[0x0],r5
80002404:	c2 cb       	rjmp	8000225c <sd_mmc_spi_command+0xa8>
80002406:	3f f8       	mov	r8,-1
80002408:	ae 88       	st.b	r7[0x0],r8
8000240a:	c3 eb       	rjmp	80002286 <sd_mmc_spi_command+0xd2>
8000240c:	3f f8       	mov	r8,-1
8000240e:	ae 88       	st.b	r7[0x0],r8
80002410:	c5 0b       	rjmp	800022b0 <sd_mmc_spi_command+0xfc>
80002412:	3f f8       	mov	r8,-1
80002414:	ae 88       	st.b	r7[0x0],r8
80002416:	c6 2b       	rjmp	800022da <sd_mmc_spi_command+0x126>
80002418:	3f f8       	mov	r8,-1
8000241a:	ae 88       	st.b	r7[0x0],r8
8000241c:	c7 3b       	rjmp	80002302 <sd_mmc_spi_command+0x14e>
8000241e:	3f f8       	mov	r8,-1
80002420:	ae 88       	st.b	r7[0x0],r8
80002422:	c8 4b       	rjmp	8000232a <sd_mmc_spi_command+0x176>
80002424:	3f f8       	mov	r8,-1
80002426:	ae 88       	st.b	r7[0x0],r8
80002428:	c9 4b       	rjmp	80002350 <sd_mmc_spi_command+0x19c>
8000242a:	3f f8       	mov	r8,-1
8000242c:	ae 88       	st.b	r7[0x0],r8
8000242e:	ca 4b       	rjmp	80002376 <sd_mmc_spi_command+0x1c2>
80002430:	3f f8       	mov	r8,-1
80002432:	ae 88       	st.b	r7[0x0],r8
80002434:	cb 4b       	rjmp	8000239c <sd_mmc_spi_command+0x1e8>
80002436:	3f f8       	mov	r8,-1
80002438:	ae 88       	st.b	r7[0x0],r8
8000243a:	cc 4b       	rjmp	800023c2 <sd_mmc_spi_command+0x20e>
8000243c:	3f f8       	mov	r8,-1
8000243e:	e0 6c 00 ff 	mov	r12,255
80002442:	ae 88       	st.b	r7[0x0],r8
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80002444:	2f fd       	sub	sp,-4
80002446:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000244a:	d7 03       	nop
8000244c:	00 00       	add	r0,r0
8000244e:	0b 60       	ld.uh	r0,--r5

80002450 <sd_mmc_spi_check_hc>:
80002450:	eb cd 40 e0 	pushm	r5-r7,lr
80002454:	20 1d       	sub	sp,4
80002456:	c7 9e       	rcall	80002148 <sd_mmc_spi_wait_not_busy>

int sd_mmc_spi_check_hc(void)
{
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002458:	c0 61       	brne	80002464 <sd_mmc_spi_check_hc+0x14>
8000245a:	3f f7       	mov	r7,-1

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
  // check for valid response
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000245c:	0e 9c       	mov	r12,r7
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000245e:	2f fd       	sub	sp,-4
80002460:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002464:	30 0b       	mov	r11,0
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002466:	fc 7c 18 00 	mov	r12,-190464
8000246a:	e0 a0 20 4d 	rcall	80006504 <spi_selectChip>
8000246e:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80002470:	33 ac       	mov	r12,58
80002472:	4a f6       	lddpc	r6,8000252c <sd_mmc_spi_check_hc+0xdc>
80002474:	ca 0e       	rcall	800021b4 <sd_mmc_spi_command>
80002476:	ac 8c       	st.b	r6[0x0],r12
80002478:	c5 41       	brne	80002520 <sd_mmc_spi_check_hc+0xd0>
8000247a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000247e:	fc 7c 18 00 	mov	r12,-190464
80002482:	e0 a0 20 d9 	rcall	80006634 <spi_write>
80002486:	fa c5 ff fe 	sub	r5,sp,-2
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000248a:	fc 7c 18 00 	mov	r12,-190464
8000248e:	0a 9b       	mov	r11,r5
80002490:	e0 a0 20 e0 	rcall	80006650 <spi_read>
80002494:	58 1c       	cp.w	r12,1
80002496:	c3 a0       	breq	8000250a <sd_mmc_spi_check_hc+0xba>
80002498:	1b b7       	ld.ub	r7,sp[0x3]
8000249a:	ef d7 c0 c1 	bfextu	r7,r7,0x6,0x1
8000249e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800024a2:	fc 7c 18 00 	mov	r12,-190464
800024a6:	e0 a0 20 c7 	rcall	80006634 <spi_write>
800024aa:	0a 9b       	mov	r11,r5
800024ac:	fc 7c 18 00 	mov	r12,-190464
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800024b0:	e0 a0 20 d0 	rcall	80006650 <spi_read>
800024b4:	58 1c       	cp.w	r12,1
800024b6:	c3 20       	breq	8000251a <sd_mmc_spi_check_hc+0xca>
800024b8:	1b b8       	ld.ub	r8,sp[0x3]
800024ba:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800024be:	ac 88       	st.b	r6[0x0],r8
800024c0:	fc 7c 18 00 	mov	r12,-190464
800024c4:	e0 a0 20 b8 	rcall	80006634 <spi_write>
800024c8:	0a 9b       	mov	r11,r5
800024ca:	fc 7c 18 00 	mov	r12,-190464
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800024ce:	e0 a0 20 c1 	rcall	80006650 <spi_read>
800024d2:	58 1c       	cp.w	r12,1
800024d4:	c2 00       	breq	80002514 <sd_mmc_spi_check_hc+0xc4>
800024d6:	1b b8       	ld.ub	r8,sp[0x3]
800024d8:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800024dc:	ac 88       	st.b	r6[0x0],r8
800024de:	fc 7c 18 00 	mov	r12,-190464
800024e2:	e0 a0 20 a9 	rcall	80006634 <spi_write>
800024e6:	0a 9b       	mov	r11,r5
800024e8:	fc 7c 18 00 	mov	r12,-190464
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800024ec:	e0 a0 20 b2 	rcall	80006650 <spi_read>
800024f0:	58 1c       	cp.w	r12,1
800024f2:	c0 e0       	breq	8000250e <sd_mmc_spi_check_hc+0xbe>
800024f4:	1b b8       	ld.ub	r8,sp[0x3]
800024f6:	ac 88       	st.b	r6[0x0],r8
     return 0xFF;
   return data_read;
800024f8:	30 0b       	mov	r11,0
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fa:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024fe:	e0 a0 20 2b 	rcall	80006554 <spi_unselectChip>
80002502:	0e 9c       	mov	r12,r7
80002504:	2f fd       	sub	sp,-4
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
80002506:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000250a:	18 97       	mov	r7,r12
8000250c:	cc 9b       	rjmp	8000249e <sd_mmc_spi_check_hc+0x4e>
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000250e:	e0 68 00 ff 	mov	r8,255
80002512:	cf 2b       	rjmp	800024f6 <sd_mmc_spi_check_hc+0xa6>
80002514:	e0 68 00 ff 	mov	r8,255
80002518:	ce 0b       	rjmp	800024d8 <sd_mmc_spi_check_hc+0x88>
8000251a:	e0 68 00 ff 	mov	r8,255
8000251e:	cc eb       	rjmp	800024ba <sd_mmc_spi_check_hc+0x6a>
80002520:	30 0b       	mov	r11,0
80002522:	fc 7c 18 00 	mov	r12,-190464

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
  // check for valid response
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002526:	e0 a0 20 17 	rcall	80006554 <spi_unselectChip>
8000252a:	c9 8b       	rjmp	8000245a <sd_mmc_spi_check_hc+0xa>
8000252c:	00 00       	add	r0,r0
8000252e:	0b 60       	ld.uh	r0,--r5

80002530 <sd_mmc_spi_get_if>:
80002530:	eb cd 40 e0 	pushm	r5-r7,lr
80002534:	20 1d       	sub	sp,4
80002536:	c0 9e       	rcall	80002148 <sd_mmc_spi_wait_not_busy>
80002538:	c0 51       	brne	80002542 <sd_mmc_spi_get_if+0x12>
8000253a:	3f fc       	mov	r12,-1
8000253c:	2f fd       	sub	sp,-4
8000253e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002542:	30 0b       	mov	r11,0
80002544:	fc 7c 18 00 	mov	r12,-190464
80002548:	e0 a0 1f de 	rcall	80006504 <spi_selectChip>
{
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000254c:	e0 6b 01 aa 	mov	r11,426
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002550:	4b b7       	lddpc	r7,8000263c <sd_mmc_spi_get_if+0x10c>
80002552:	30 8c       	mov	r12,8
80002554:	c3 0e       	rcall	800021b4 <sd_mmc_spi_command>
80002556:	ae 8c       	st.b	r7[0x0],r12
80002558:	ed bc 00 02 	bld	r12,0x2
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000255c:	c4 f0       	breq	800025fa <sd_mmc_spi_get_if+0xca>
8000255e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002562:	fc 7c 18 00 	mov	r12,-190464
80002566:	e0 a0 20 67 	rcall	80006634 <spi_write>
8000256a:	fa c6 ff fe 	sub	r6,sp,-2
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000256e:	fc 7c 18 00 	mov	r12,-190464
80002572:	0c 9b       	mov	r11,r6
80002574:	e0 a0 20 6e 	rcall	80006650 <spi_read>
80002578:	58 1c       	cp.w	r12,1
8000257a:	c4 80       	breq	8000260a <sd_mmc_spi_get_if+0xda>
8000257c:	1b b8       	ld.ub	r8,sp[0x3]
8000257e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002582:	ae 88       	st.b	r7[0x0],r8
80002584:	fc 7c 18 00 	mov	r12,-190464
80002588:	e0 a0 20 56 	rcall	80006634 <spi_write>
8000258c:	0c 9b       	mov	r11,r6
8000258e:	fc 7c 18 00 	mov	r12,-190464
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002592:	e0 a0 20 5f 	rcall	80006650 <spi_read>
80002596:	58 1c       	cp.w	r12,1
80002598:	c3 f0       	breq	80002616 <sd_mmc_spi_get_if+0xe6>
8000259a:	1b b8       	ld.ub	r8,sp[0x3]
8000259c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800025a0:	ae 88       	st.b	r7[0x0],r8
800025a2:	fc 7c 18 00 	mov	r12,-190464
800025a6:	e0 a0 20 47 	rcall	80006634 <spi_write>
800025aa:	0c 9b       	mov	r11,r6
800025ac:	fc 7c 18 00 	mov	r12,-190464
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800025b0:	4a 35       	lddpc	r5,8000263c <sd_mmc_spi_get_if+0x10c>
800025b2:	e0 a0 20 4f 	rcall	80006650 <spi_read>
800025b6:	58 1c       	cp.w	r12,1
800025b8:	c2 c0       	breq	80002610 <sd_mmc_spi_get_if+0xe0>
800025ba:	1b b8       	ld.ub	r8,sp[0x3]
800025bc:	aa 88       	st.b	r5[0x0],r8
     return 0xFF;
   return data_read;
800025be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
800025c2:	c3 60       	breq	8000262e <sd_mmc_spi_get_if+0xfe>
800025c4:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800025c8:	fc 7c 18 00 	mov	r12,-190464
800025cc:	e0 a0 20 34 	rcall	80006634 <spi_write>
800025d0:	0c 9b       	mov	r11,r6
800025d2:	fc 7c 18 00 	mov	r12,-190464
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800025d6:	e0 a0 20 3d 	rcall	80006650 <spi_read>
800025da:	58 1c       	cp.w	r12,1
800025dc:	c2 00       	breq	8000261c <sd_mmc_spi_get_if+0xec>
800025de:	1b b8       	ld.ub	r8,sp[0x3]
800025e0:	ae 88       	st.b	r7[0x0],r8
     return 0xFF;
   return data_read;
800025e2:	3a a9       	mov	r9,-86
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025e4:	f2 08 18 00 	cp.b	r8,r9
  if(r1 != 0xaa) {
800025e8:	c1 c1       	brne	80002620 <sd_mmc_spi_get_if+0xf0>
800025ea:	30 0b       	mov	r11,0
800025ec:	fc 7c 18 00 	mov	r12,-190464
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025f0:	e0 a0 1f b2 	rcall	80006554 <spi_unselectChip>
800025f4:	2f fd       	sub	sp,-4
800025f6:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800025fa:	30 0b       	mov	r11,0
800025fc:	fc 7c 18 00 	mov	r12,-190464

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002600:	e0 a0 1f aa 	rcall	80006554 <spi_unselectChip>
80002604:	2f fd       	sub	sp,-4
80002606:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000260a:	e0 68 00 ff 	mov	r8,255
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000260e:	cb 8b       	rjmp	8000257e <sd_mmc_spi_get_if+0x4e>
80002610:	3f f8       	mov	r8,-1
80002612:	aa 88       	st.b	r5[0x0],r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002614:	cd 8b       	rjmp	800025c4 <sd_mmc_spi_get_if+0x94>
80002616:	e0 68 00 ff 	mov	r8,255
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000261a:	cc 1b       	rjmp	8000259c <sd_mmc_spi_get_if+0x6c>
8000261c:	3f f8       	mov	r8,-1
8000261e:	ae 88       	st.b	r7[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002620:	30 0b       	mov	r11,0
80002622:	fc 7c 18 00 	mov	r12,-190464
  if(r1 != 0xaa) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002626:	e0 a0 1f 97 	rcall	80006554 <spi_unselectChip>
8000262a:	3f fc       	mov	r12,-1
8000262c:	c8 8b       	rjmp	8000253c <sd_mmc_spi_get_if+0xc>
8000262e:	10 9b       	mov	r11,r8
    return SD_FAILURE; /* wrong test pattern */
80002630:	fc 7c 18 00 	mov	r12,-190464
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002634:	e0 a0 1f 90 	rcall	80006554 <spi_unselectChip>
80002638:	c8 1b       	rjmp	8000253a <sd_mmc_spi_get_if+0xa>
8000263a:	d7 03       	nop
8000263c:	00 00       	add	r0,r0
8000263e:	0b 60       	ld.uh	r0,--r5

80002640 <sd_mmc_spi_internal_init>:
80002640:	d4 31       	pushm	r0-r7,lr
80002642:	20 1d       	sub	sp,4
80002644:	e6 68 1a 80 	mov	r8,400000
80002648:	fe f9 07 84 	ld.w	r9,pc[1924]
8000264c:	fe f7 07 84 	ld.w	r7,pc[1924]
80002650:	72 0a       	ld.w	r10,r9[0x0]
80002652:	8f 18       	st.w	r7[0x4],r8
80002654:	0e 9b       	mov	r11,r7
80002656:	fc 7c 18 00 	mov	r12,-190464
8000265a:	e0 a0 1f 90 	rcall	8000657a <spi_setupChipReg>
  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000265e:	30 0b       	mov	r11,0
80002660:	fc 7c 18 00 	mov	r12,-190464
80002664:	e0 a0 1f 50 	rcall	80006504 <spi_selectChip>
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
80002668:	e0 6b 00 ff 	mov	r11,255
8000266c:	fc 7c 18 00 	mov	r12,-190464
80002670:	e0 a0 1f e2 	rcall	80006634 <spi_write>
80002674:	e0 6b 00 ff 	mov	r11,255
80002678:	fc 7c 18 00 	mov	r12,-190464
8000267c:	e0 a0 1f dc 	rcall	80006634 <spi_write>
80002680:	e0 6b 00 ff 	mov	r11,255
80002684:	fc 7c 18 00 	mov	r12,-190464
80002688:	e0 a0 1f d6 	rcall	80006634 <spi_write>
8000268c:	e0 6b 00 ff 	mov	r11,255
80002690:	fc 7c 18 00 	mov	r12,-190464
80002694:	e0 a0 1f d0 	rcall	80006634 <spi_write>
80002698:	e0 6b 00 ff 	mov	r11,255
8000269c:	fc 7c 18 00 	mov	r12,-190464
800026a0:	e0 a0 1f ca 	rcall	80006634 <spi_write>
800026a4:	e0 6b 00 ff 	mov	r11,255
800026a8:	fc 7c 18 00 	mov	r12,-190464
800026ac:	e0 a0 1f c4 	rcall	80006634 <spi_write>
800026b0:	e0 6b 00 ff 	mov	r11,255
800026b4:	fc 7c 18 00 	mov	r12,-190464
800026b8:	e0 a0 1f be 	rcall	80006634 <spi_write>
800026bc:	e0 6b 00 ff 	mov	r11,255
800026c0:	fc 7c 18 00 	mov	r12,-190464
800026c4:	e0 a0 1f b8 	rcall	80006634 <spi_write>
800026c8:	e0 6b 00 ff 	mov	r11,255
800026cc:	fc 7c 18 00 	mov	r12,-190464
800026d0:	e0 a0 1f b2 	rcall	80006634 <spi_write>
800026d4:	e0 6b 00 ff 	mov	r11,255
800026d8:	fc 7c 18 00 	mov	r12,-190464
800026dc:	e0 a0 1f ac 	rcall	80006634 <spi_write>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026e0:	30 0b       	mov	r11,0
800026e2:	fc 7c 18 00 	mov	r12,-190464
800026e6:	e0 a0 1f 37 	rcall	80006554 <spi_unselectChip>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
800026ea:	30 08       	mov	r8,0
800026ec:	fe f9 06 e8 	ld.w	r9,pc[1768]
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800026f0:	30 0b       	mov	r11,0
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
800026f2:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
800026f4:	fe f1 06 e4 	ld.w	r1,pc[1764]
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800026f8:	fc 7c 18 00 	mov	r12,-190464
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
  card_type = MMC_CARD;
800026fc:	a2 88       	st.b	r1[0x0],r8
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800026fe:	e0 a0 1f 03 	rcall	80006504 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80002702:	30 0b       	mov	r11,0
80002704:	16 9c       	mov	r12,r11
80002706:	fe b0 fd 57 	rcall	800021b4 <sd_mmc_spi_command>
8000270a:	fe f6 06 d2 	ld.w	r6,pc[1746]
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000270e:	30 0b       	mov	r11,0
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80002710:	ac 8c       	st.b	r6[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002712:	fc 7c 18 00 	mov	r12,-190464
80002716:	e0 a0 1f 1f 	rcall	80006554 <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000271a:	e0 6b 00 ff 	mov	r11,255
8000271e:	fc 7c 18 00 	mov	r12,-190464
80002722:	30 05       	mov	r5,0
80002724:	e0 a0 1f 88 	rcall	80006634 <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
80002728:	0c 90       	mov	r0,r6
8000272a:	30 12       	mov	r2,1
8000272c:	c1 78       	rjmp	8000275a <sd_mmc_spi_internal_init+0x11a>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000272e:	e0 a0 1e eb 	rcall	80006504 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80002732:	30 0b       	mov	r11,0
80002734:	16 9c       	mov	r12,r11
80002736:	fe b0 fd 3f 	rcall	800021b4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000273a:	30 0b       	mov	r11,0
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000273c:	a0 8c       	st.b	r0[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000273e:	fc 7c 18 00 	mov	r12,-190464
80002742:	e0 a0 1f 09 	rcall	80006554 <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002746:	e0 6b 00 ff 	mov	r11,255
8000274a:	fc 7c 18 00 	mov	r12,-190464
8000274e:	e0 a0 1f 73 	rcall	80006634 <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
80002752:	e0 45 00 64 	cp.w	r5,100
80002756:	e0 80 00 b4 	breq	800028be <sd_mmc_spi_internal_init+0x27e>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275a:	30 0b       	mov	r11,0
8000275c:	fc 7c 18 00 	mov	r12,-190464
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002760:	2f f5       	sub	r5,-1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
80002762:	0d 84       	ld.ub	r4,r6[0x0]
80002764:	fe f3 06 78 	ld.w	r3,pc[1656]
80002768:	e4 04 18 00 	cp.b	r4,r2
8000276c:	ce 11       	brne	8000272e <sd_mmc_spi_internal_init+0xee>

  if_cond = sd_mmc_spi_get_if();
8000276e:	ce 1e       	rcall	80002530 <sd_mmc_spi_get_if>
80002770:	5b fc       	cp.w	r12,-1
  if(if_cond == -1) {
80002772:	e0 80 00 a6 	breq	800028be <sd_mmc_spi_internal_init+0x27e>
80002776:	58 1c       	cp.w	r12,1
      return false; // card is bad
  } else if (if_cond == 1) {
80002778:	e0 80 00 a6 	breq	800028c4 <sd_mmc_spi_internal_init+0x284>
8000277c:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000277e:	fc 7c 18 00 	mov	r12,-190464
80002782:	e0 a0 1e c1 	rcall	80006504 <spi_selectChip>
80002786:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80002788:	33 7c       	mov	r12,55
8000278a:	fe b0 fd 15 	rcall	800021b4 <sd_mmc_spi_command>
8000278e:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002790:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80002792:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002796:	e0 a0 1e df 	rcall	80006554 <spi_unselectChip>
8000279a:	e0 6b 00 ff 	mov	r11,255
      card_type = SD_CARD_2;
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
8000279e:	fc 7c 18 00 	mov	r12,-190464
800027a2:	e0 a0 1f 49 	rcall	80006634 <spi_write>
800027a6:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800027a8:	fc 7c 18 00 	mov	r12,-190464
800027ac:	e0 a0 1e ac 	rcall	80006504 <spi_selectChip>
800027b0:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800027b2:	32 9c       	mov	r12,41
800027b4:	fe b0 fd 00 	rcall	800021b4 <sd_mmc_spi_command>
800027b8:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027ba:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800027bc:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027c0:	e0 a0 1e ca 	rcall	80006554 <spi_unselectChip>
800027c4:	e0 6b 00 ff 	mov	r11,255
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
800027c8:	fc 7c 18 00 	mov	r12,-190464
800027cc:	e0 a0 1f 34 	rcall	80006634 <spi_write>
800027d0:	07 88       	ld.ub	r8,r3[0x0]

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
800027d2:	e2 18 00 fe 	andl	r8,0xfe,COH
800027d6:	e0 80 00 d3 	breq	8000297c <sd_mmc_spi_internal_init+0x33c>
800027da:	30 08       	mov	r8,0
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
800027dc:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800027de:	a2 88       	st.b	r1[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
800027e0:	fc 7c 18 00 	mov	r12,-190464
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800027e4:	e0 a0 1e 90 	rcall	80006504 <spi_selectChip>
800027e8:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800027ea:	16 9c       	mov	r12,r11
800027ec:	fe b0 fc e4 	rcall	800021b4 <sd_mmc_spi_command>
800027f0:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027f2:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800027f4:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027f8:	e0 a0 1e ae 	rcall	80006554 <spi_unselectChip>
800027fc:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002800:	fc 7c 18 00 	mov	r12,-190464
80002804:	30 05       	mov	r5,0
80002806:	e0 a0 1f 17 	rcall	80006634 <spi_write>
8000280a:	30 14       	mov	r4,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
8000280c:	c1 68       	rjmp	80002838 <sd_mmc_spi_internal_init+0x1f8>
8000280e:	e0 a0 1e 7b 	rcall	80006504 <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002812:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80002814:	16 9c       	mov	r12,r11
80002816:	fe b0 fc cf 	rcall	800021b4 <sd_mmc_spi_command>
8000281a:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000281c:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000281e:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002822:	e0 a0 1e 99 	rcall	80006554 <spi_unselectChip>
80002826:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000282a:	fc 7c 18 00 	mov	r12,-190464
8000282e:	e0 a0 1f 03 	rcall	80006634 <spi_write>
80002832:	e0 45 00 64 	cp.w	r5,100
        // do retry counter
        retry++;
        if(retry > 100)
80002836:	c4 40       	breq	800028be <sd_mmc_spi_internal_init+0x27e>
80002838:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000283a:	fc 7c 18 00 	mov	r12,-190464
8000283e:	2f f5       	sub	r5,-1
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002840:	0d 88       	ld.ub	r8,r6[0x0]
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002842:	e8 08 18 00 	cp.b	r8,r4
80002846:	ce 41       	brne	8000280e <sd_mmc_spi_internal_init+0x1ce>
80002848:	03 88       	ld.ub	r8,r1[0x0]
8000284a:	c4 08       	rjmp	800028ca <sd_mmc_spi_internal_init+0x28a>
8000284c:	03 89       	ld.ub	r9,r1[0x0]
     if(retry == 50000)    // measured approx. 500 on several cards
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
8000284e:	30 28       	mov	r8,2
80002850:	f0 09 18 00 	cp.b	r9,r8
80002854:	e0 80 01 77 	breq	80002b42 <sd_mmc_spi_internal_init+0x502>
80002858:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285a:	fc 7c 18 00 	mov	r12,-190464
8000285e:	e0 a0 1e 53 	rcall	80006504 <spi_selectChip>
80002862:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80002864:	33 bc       	mov	r12,59
80002866:	fe b0 fc a7 	rcall	800021b4 <sd_mmc_spi_command>
8000286a:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000286c:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000286e:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002872:	e0 a0 1e 71 	rcall	80006554 <spi_unselectChip>
80002876:	e0 6b 00 ff 	mov	r11,255
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000287a:	fc 7c 18 00 	mov	r12,-190464
8000287e:	e0 a0 1e db 	rcall	80006634 <spi_write>
80002882:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002884:	fc 7c 18 00 	mov	r12,-190464
80002888:	e0 a0 1e 3e 	rcall	80006504 <spi_selectChip>
8000288c:	e0 6b 02 00 	mov	r11,512
  r1 = sd_mmc_spi_command(command, arg);
80002890:	31 0c       	mov	r12,16
80002892:	fe b0 fc 91 	rcall	800021b4 <sd_mmc_spi_command>
80002896:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002898:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000289a:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000289e:	e0 a0 1e 5b 	rcall	80006554 <spi_unselectChip>
800028a2:	e0 6b 00 ff 	mov	r11,255
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	fc 7c 18 00 	mov	r12,-190464
800028aa:	fe f4 05 32 	ld.w	r4,pc[1330]
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800028ae:	e0 a0 1e c3 	rcall	80006634 <spi_write>
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028b2:	0d 85       	ld.ub	r5,r6[0x0]
  if (r1 != 0x00)
800028b4:	58 05       	cp.w	r5,0
800028b6:	c0 41       	brne	800028be <sd_mmc_spi_internal_init+0x27e>
800028b8:	fe b0 fc 48 	rcall	80002148 <sd_mmc_spi_wait_not_busy>
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800028bc:	c6 31       	brne	80002982 <sd_mmc_spi_internal_init+0x342>
800028be:	30 0c       	mov	r12,0
  sd_mmc_spi_init_done = true;

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_SPI_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
  return true;
800028c0:	2f fd       	sub	sp,-4
}
800028c2:	d8 32       	popm	r0-r7,pc
800028c4:	30 28       	mov	r8,2

  if_cond = sd_mmc_spi_get_if();
  if(if_cond == -1) {
      return false; // card is bad
  } else if (if_cond == 1) {
      card_type = SD_CARD_2;
800028c6:	a2 88       	st.b	r1[0x0],r8
800028c8:	30 28       	mov	r8,2
800028ca:	30 05       	mov	r5,0
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
800028cc:	30 14       	mov	r4,1

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800028ce:	30 23       	mov	r3,2
800028d0:	c1 d8       	rjmp	8000290a <sd_mmc_spi_internal_init+0x2ca>
800028d2:	e0 a0 1e 19 	rcall	80006504 <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800028d6:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800028d8:	30 1c       	mov	r12,1
800028da:	fe b0 fc 6d 	rcall	800021b4 <sd_mmc_spi_command>
800028de:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800028e0:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800028e2:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800028e6:	e0 a0 1e 37 	rcall	80006554 <spi_unselectChip>
800028ea:	e0 6b 00 ff 	mov	r11,255
      break;
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028ee:	fc 7c 18 00 	mov	r12,-190464
800028f2:	e0 a0 1e a1 	rcall	80006634 <spi_write>
800028f6:	e0 45 c3 4f 	cp.w	r5,49999
      break;
    }
     // do retry counter
     retry++;
     if(retry == 50000)    // measured approx. 500 on several cards
800028fa:	ce 20       	breq	800028be <sd_mmc_spi_internal_init+0x27e>
800028fc:	2f f5       	sub	r5,-1
800028fe:	0d 89       	ld.ub	r9,r6[0x0]
        return false;
  } while (r1);
80002900:	30 08       	mov	r8,0
80002902:	f0 09 18 00 	cp.b	r9,r8
80002906:	ca 30       	breq	8000284c <sd_mmc_spi_internal_init+0x20c>
80002908:	03 88       	ld.ub	r8,r1[0x0]
8000290a:	e8 08 18 00 	cp.b	r8,r4

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000290e:	c2 00       	breq	8000294e <sd_mmc_spi_internal_init+0x30e>
80002910:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002912:	fc 7c 18 00 	mov	r12,-190464
80002916:	cd e3       	brcs	800028d2 <sd_mmc_spi_internal_init+0x292>

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002918:	e6 08 18 00 	cp.b	r8,r3
8000291c:	ce d1       	brne	800028f6 <sd_mmc_spi_internal_init+0x2b6>
8000291e:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002920:	fc 7c 18 00 	mov	r12,-190464
80002924:	e0 a0 1d f0 	rcall	80006504 <spi_selectChip>
80002928:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
8000292a:	33 7c       	mov	r12,55
8000292c:	fe b0 fc 44 	rcall	800021b4 <sd_mmc_spi_command>
80002930:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002932:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80002934:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002938:	e0 a0 1e 0e 	rcall	80006554 <spi_unselectChip>
8000293c:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000293e:	fc 7c 18 00 	mov	r12,-190464
80002942:	e0 a0 1d e1 	rcall	80006504 <spi_selectChip>
80002946:	fc 1b 40 00 	movh	r11,0x4000
  r1 = sd_mmc_spi_command(command, arg);
8000294a:	32 9c       	mov	r12,41
8000294c:	cc 7b       	rjmp	800028da <sd_mmc_spi_internal_init+0x29a>
8000294e:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002950:	fc 7c 18 00 	mov	r12,-190464
80002954:	e0 a0 1d d8 	rcall	80006504 <spi_selectChip>
80002958:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
8000295a:	33 7c       	mov	r12,55
8000295c:	fe b0 fc 2c 	rcall	800021b4 <sd_mmc_spi_command>
80002960:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002962:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80002964:	fc 7c 18 00 	mov	r12,-190464
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002968:	e0 a0 1d f6 	rcall	80006554 <spi_unselectChip>
8000296c:	30 0b       	mov	r11,0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000296e:	fc 7c 18 00 	mov	r12,-190464
80002972:	e0 a0 1d c9 	rcall	80006504 <spi_selectChip>
80002976:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80002978:	32 9c       	mov	r12,41
8000297a:	cb 0b       	rjmp	800028da <sd_mmc_spi_internal_init+0x29a>
8000297c:	a2 84       	st.b	r1[0x0],r4

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000297e:	30 18       	mov	r8,1
80002980:	ca 5b       	rjmp	800028ca <sd_mmc_spi_internal_init+0x28a>
80002982:	30 0b       	mov	r11,0
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002984:	fc 7c 18 00 	mov	r12,-190464
80002988:	e0 a0 1d be 	rcall	80006504 <spi_selectChip>
8000298c:	30 0b       	mov	r11,0
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
8000298e:	30 9c       	mov	r12,9
80002990:	fe b0 fc 12 	rcall	800021b4 <sd_mmc_spi_command>
80002994:	a8 8c       	st.b	r4[0x0],r12
80002996:	e0 81 01 ee 	brne	80002d72 <sd_mmc_spi_internal_init+0x732>
  // check for valid response
  if(r1 != 0x00)
8000299a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000299e:	fc 7c 18 00 	mov	r12,-190464
800029a2:	e0 a0 1e 49 	rcall	80006634 <spi_write>
800029a6:	1a 95       	mov	r5,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800029a8:	fc 7c 18 00 	mov	r12,-190464
800029ac:	1a 9b       	mov	r11,sp
800029ae:	e0 a0 1e 51 	rcall	80006650 <spi_read>
800029b2:	58 1c       	cp.w	r12,1
800029b4:	e0 80 01 e9 	breq	80002d86 <sd_mmc_spi_internal_init+0x746>
800029b8:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800029ba:	a8 88       	st.b	r4[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800029bc:	3f e9       	mov	r9,-2
800029be:	f2 08 18 00 	cp.b	r8,r9
800029c2:	e0 80 00 d1 	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
800029c6:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800029ca:	fc 7c 18 00 	mov	r12,-190464
800029ce:	e0 a0 1e 33 	rcall	80006634 <spi_write>
800029d2:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800029d4:	fc 7c 18 00 	mov	r12,-190464
800029d8:	e0 a0 1e 3c 	rcall	80006650 <spi_read>
800029dc:	58 1c       	cp.w	r12,1
800029de:	e0 80 00 c0 	breq	80002b5e <sd_mmc_spi_internal_init+0x51e>
800029e2:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800029e4:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800029e6:	3f e9       	mov	r9,-2
800029e8:	f2 08 18 00 	cp.b	r8,r9
800029ec:	e0 80 00 bc 	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
800029f0:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800029f4:	fc 7c 18 00 	mov	r12,-190464
800029f8:	e0 a0 1e 1e 	rcall	80006634 <spi_write>
800029fc:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800029fe:	fc 7c 18 00 	mov	r12,-190464
80002a02:	e0 a0 1e 27 	rcall	80006650 <spi_read>
80002a06:	58 1c       	cp.w	r12,1
80002a08:	e0 80 01 c7 	breq	80002d96 <sd_mmc_spi_internal_init+0x756>
80002a0c:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80002a0e:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002a10:	3f e9       	mov	r9,-2
80002a12:	f2 08 18 00 	cp.b	r8,r9
80002a16:	e0 80 00 a7 	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
80002a1a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002a1e:	fc 7c 18 00 	mov	r12,-190464
80002a22:	e0 a0 1e 09 	rcall	80006634 <spi_write>
80002a26:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002a28:	fc 7c 18 00 	mov	r12,-190464
80002a2c:	e0 a0 1e 12 	rcall	80006650 <spi_read>
80002a30:	58 1c       	cp.w	r12,1
80002a32:	e0 80 01 ae 	breq	80002d8e <sd_mmc_spi_internal_init+0x74e>
80002a36:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80002a38:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002a3a:	3f e9       	mov	r9,-2
80002a3c:	f2 08 18 00 	cp.b	r8,r9
80002a40:	e0 80 00 92 	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
80002a44:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002a48:	fc 7c 18 00 	mov	r12,-190464
80002a4c:	e0 a0 1d f4 	rcall	80006634 <spi_write>
80002a50:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002a52:	fc 7c 18 00 	mov	r12,-190464
80002a56:	e0 a0 1d fd 	rcall	80006650 <spi_read>
80002a5a:	58 1c       	cp.w	r12,1
80002a5c:	e0 80 01 a5 	breq	80002da6 <sd_mmc_spi_internal_init+0x766>
80002a60:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80002a62:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002a64:	3f e9       	mov	r9,-2
80002a66:	f2 08 18 00 	cp.b	r8,r9
80002a6a:	c7 d0       	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
80002a6c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002a70:	fc 7c 18 00 	mov	r12,-190464
80002a74:	e0 a0 1d e0 	rcall	80006634 <spi_write>
80002a78:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002a7a:	fc 7c 18 00 	mov	r12,-190464
80002a7e:	e0 a0 1d e9 	rcall	80006650 <spi_read>
80002a82:	58 1c       	cp.w	r12,1
80002a84:	e0 80 01 8d 	breq	80002d9e <sd_mmc_spi_internal_init+0x75e>
80002a88:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80002a8a:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002a8c:	3f e9       	mov	r9,-2
80002a8e:	f2 08 18 00 	cp.b	r8,r9
80002a92:	c6 90       	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
80002a94:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002a98:	fc 7c 18 00 	mov	r12,-190464
80002a9c:	e0 a0 1d cc 	rcall	80006634 <spi_write>
80002aa0:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002aa2:	fc 7c 18 00 	mov	r12,-190464
80002aa6:	e0 a0 1d d5 	rcall	80006650 <spi_read>
80002aaa:	58 1c       	cp.w	r12,1
80002aac:	e0 80 01 81 	breq	80002dae <sd_mmc_spi_internal_init+0x76e>
80002ab0:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80002ab2:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002ab4:	3f e9       	mov	r9,-2
80002ab6:	f2 08 18 00 	cp.b	r8,r9
80002aba:	c5 50       	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
80002abc:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002ac0:	fc 7c 18 00 	mov	r12,-190464
80002ac4:	e0 a0 1d b8 	rcall	80006634 <spi_write>
80002ac8:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002aca:	fc 7c 18 00 	mov	r12,-190464
80002ace:	e0 a0 1d c1 	rcall	80006650 <spi_read>
80002ad2:	58 1c       	cp.w	r12,1
80002ad4:	e0 80 01 71 	breq	80002db6 <sd_mmc_spi_internal_init+0x776>
80002ad8:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80002ada:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002adc:	3f e9       	mov	r9,-2
80002ade:	f2 08 18 00 	cp.b	r8,r9
80002ae2:	c4 10       	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
80002ae4:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002ae8:	fc 7c 18 00 	mov	r12,-190464
80002aec:	e0 a0 1d a4 	rcall	80006634 <spi_write>
80002af0:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002af2:	fc 7c 18 00 	mov	r12,-190464
80002af6:	e0 a0 1d ad 	rcall	80006650 <spi_read>
80002afa:	58 1c       	cp.w	r12,1
80002afc:	e0 80 01 64 	breq	80002dc4 <sd_mmc_spi_internal_init+0x784>
80002b00:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80002b02:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002b04:	3f e9       	mov	r9,-2
80002b06:	f2 08 18 00 	cp.b	r8,r9
80002b0a:	c2 d0       	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
80002b0c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002b10:	fc 7c 18 00 	mov	r12,-190464
80002b14:	e0 a0 1d 90 	rcall	80006634 <spi_write>
80002b18:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002b1a:	fc 7c 18 00 	mov	r12,-190464
80002b1e:	e0 a0 1d 99 	rcall	80006650 <spi_read>
80002b22:	58 1c       	cp.w	r12,1
80002b24:	e0 80 01 4d 	breq	80002dbe <sd_mmc_spi_internal_init+0x77e>
80002b28:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80002b2a:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002b2c:	3f e9       	mov	r9,-2
80002b2e:	f2 08 18 00 	cp.b	r8,r9
80002b32:	c1 90       	breq	80002b64 <sd_mmc_spi_internal_init+0x524>
80002b34:	30 0b       	mov	r11,0
  {
    if (retry > 8)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002b36:	fc 7c 18 00 	mov	r12,-190464
80002b3a:	e0 a0 1d 0d 	rcall	80006554 <spi_unselectChip>
80002b3e:	30 0c       	mov	r12,0
80002b40:	cc 0a       	rjmp	800028c0 <sd_mmc_spi_internal_init+0x280>
80002b42:	fe b0 fc 87 	rcall	80002450 <sd_mmc_spi_check_hc>
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
    if_cond = sd_mmc_spi_check_hc();
80002b46:	5b fc       	cp.w	r12,-1
    if (if_cond == -1) {
80002b48:	fe 90 fe bb 	breq	800028be <sd_mmc_spi_internal_init+0x27e>
80002b4c:	58 1c       	cp.w	r12,1
      return false;
    } else if (if_cond == 1){
80002b4e:	fe 91 fe 85 	brne	80002858 <sd_mmc_spi_internal_init+0x218>
80002b52:	30 39       	mov	r9,3
          card_type = SD_CARD_2_SDHC;
80002b54:	fe f8 02 84 	ld.w	r8,pc[644]
80002b58:	b0 89       	st.b	r8[0x0],r9
80002b5a:	fe 9f fe 7f 	bral	80002858 <sd_mmc_spi_internal_init+0x218>
80002b5e:	3f f8       	mov	r8,-1
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002b60:	ac 88       	st.b	r6[0x0],r8
80002b62:	c4 7b       	rjmp	800029f0 <sd_mmc_spi_internal_init+0x3b0>
80002b64:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002b68:	fc 7c 18 00 	mov	r12,-190464
80002b6c:	e0 a0 1d 64 	rcall	80006634 <spi_write>
80002b70:	fa c5 ff fe 	sub	r5,sp,-2
   spi_read(SD_MMC_SPI,&data_read);
80002b74:	fc 7c 18 00 	mov	r12,-190464
80002b78:	0a 9b       	mov	r11,r5
80002b7a:	e0 a0 1d 6b 	rcall	80006650 <spi_read>
80002b7e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002b80:	fe f6 02 60 	ld.w	r6,pc[608]
80002b84:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002b88:	ac 88       	st.b	r6[0x0],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002b8a:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002b8e:	e0 a0 1d 53 	rcall	80006634 <spi_write>
80002b92:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002b94:	fc 7c 18 00 	mov	r12,-190464
80002b98:	e0 a0 1d 5c 	rcall	80006650 <spi_read>
80002b9c:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002b9e:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002ba2:	ac 98       	st.b	r6[0x1],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002ba4:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002ba8:	e0 a0 1d 46 	rcall	80006634 <spi_write>
80002bac:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002bae:	fc 7c 18 00 	mov	r12,-190464
80002bb2:	e0 a0 1d 4f 	rcall	80006650 <spi_read>
80002bb6:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002bb8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002bbc:	ac a8       	st.b	r6[0x2],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002bbe:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002bc2:	e0 a0 1d 39 	rcall	80006634 <spi_write>
80002bc6:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002bc8:	fc 7c 18 00 	mov	r12,-190464
80002bcc:	e0 a0 1d 42 	rcall	80006650 <spi_read>
80002bd0:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002bd2:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002bd6:	ac b8       	st.b	r6[0x3],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002bd8:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002bdc:	e0 a0 1d 2c 	rcall	80006634 <spi_write>
80002be0:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002be2:	fc 7c 18 00 	mov	r12,-190464
80002be6:	e0 a0 1d 35 	rcall	80006650 <spi_read>
80002bea:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002bec:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002bf0:	ac c8       	st.b	r6[0x4],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002bf2:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002bf6:	e0 a0 1d 1f 	rcall	80006634 <spi_write>
80002bfa:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002bfc:	fc 7c 18 00 	mov	r12,-190464
80002c00:	e0 a0 1d 28 	rcall	80006650 <spi_read>
80002c04:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002c06:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c0a:	ac d8       	st.b	r6[0x5],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002c0c:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c10:	e0 a0 1d 12 	rcall	80006634 <spi_write>
80002c14:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002c16:	fc 7c 18 00 	mov	r12,-190464
80002c1a:	e0 a0 1d 1b 	rcall	80006650 <spi_read>
80002c1e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002c20:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c24:	ac e8       	st.b	r6[0x6],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002c26:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c2a:	e0 a0 1d 05 	rcall	80006634 <spi_write>
80002c2e:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002c30:	fc 7c 18 00 	mov	r12,-190464
80002c34:	e0 a0 1d 0e 	rcall	80006650 <spi_read>
80002c38:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002c3a:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c3e:	ac f8       	st.b	r6[0x7],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002c40:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c44:	e0 a0 1c f8 	rcall	80006634 <spi_write>
80002c48:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002c4a:	fc 7c 18 00 	mov	r12,-190464
80002c4e:	e0 a0 1d 01 	rcall	80006650 <spi_read>
80002c52:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002c54:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c58:	ed 68 00 08 	st.b	r6[8],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002c5c:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c60:	e0 a0 1c ea 	rcall	80006634 <spi_write>
80002c64:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002c66:	fc 7c 18 00 	mov	r12,-190464
80002c6a:	e0 a0 1c f3 	rcall	80006650 <spi_read>
80002c6e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002c70:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c74:	ed 68 00 09 	st.b	r6[9],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002c78:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c7c:	e0 a0 1c dc 	rcall	80006634 <spi_write>
80002c80:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002c82:	fc 7c 18 00 	mov	r12,-190464
80002c86:	e0 a0 1c e5 	rcall	80006650 <spi_read>
80002c8a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002c8c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c90:	ed 68 00 0a 	st.b	r6[10],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002c94:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002c98:	e0 a0 1c ce 	rcall	80006634 <spi_write>
80002c9c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002c9e:	fc 7c 18 00 	mov	r12,-190464
80002ca2:	e0 a0 1c d7 	rcall	80006650 <spi_read>
80002ca6:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002ca8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002cac:	ed 68 00 0b 	st.b	r6[11],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002cb0:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002cb4:	e0 a0 1c c0 	rcall	80006634 <spi_write>
80002cb8:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002cba:	fc 7c 18 00 	mov	r12,-190464
80002cbe:	e0 a0 1c c9 	rcall	80006650 <spi_read>
80002cc2:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002cc4:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002cc8:	ed 68 00 0c 	st.b	r6[12],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002ccc:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002cd0:	e0 a0 1c b2 	rcall	80006634 <spi_write>
80002cd4:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002cd6:	fc 7c 18 00 	mov	r12,-190464
80002cda:	e0 a0 1c bb 	rcall	80006650 <spi_read>
80002cde:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002ce0:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002ce4:	ed 68 00 0d 	st.b	r6[13],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002ce8:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002cec:	e0 a0 1c a4 	rcall	80006634 <spi_write>
80002cf0:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002cf2:	fc 7c 18 00 	mov	r12,-190464
80002cf6:	e0 a0 1c ad 	rcall	80006650 <spi_read>
80002cfa:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002cfc:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002d00:	ed 68 00 0e 	st.b	r6[14],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002d04:	fc 7c 18 00 	mov	r12,-190464
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002d08:	e0 a0 1c 96 	rcall	80006634 <spi_write>
80002d0c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80002d0e:	fc 7c 18 00 	mov	r12,-190464
80002d12:	e0 a0 1c 9f 	rcall	80006650 <spi_read>
80002d16:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80002d18:	e0 6b 00 ff 	mov	r11,255
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80002d1c:	ed 68 00 0f 	st.b	r6[15],r8
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80002d20:	fc 7c 18 00 	mov	r12,-190464
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80002d24:	e0 a0 1c 88 	rcall	80006634 <spi_write>
80002d28:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);
80002d2c:	fc 7c 18 00 	mov	r12,-190464
80002d30:	e0 a0 1c 82 	rcall	80006634 <spi_write>
80002d34:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002d38:	fc 7c 18 00 	mov	r12,-190464
80002d3c:	e0 a0 1c 7c 	rcall	80006634 <spi_write>
80002d40:	30 0b       	mov	r11,0
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002d42:	fc 7c 18 00 	mov	r12,-190464
80002d46:	e0 a0 1c 07 	rcall	80006554 <spi_unselectChip>
80002d4a:	fe b0 f9 5d 	rcall	80002004 <sd_mmc_spi_get_capacity>
  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002d4e:	4a 09       	lddpc	r9,80002dcc <sd_mmc_spi_internal_init+0x78c>

  sd_mmc_spi_init_done = true;

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_SPI_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002d50:	30 18       	mov	r8,1
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002d52:	72 0a       	ld.w	r10,r9[0x0]

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_SPI_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002d54:	4a 09       	lddpc	r9,80002dd4 <sd_mmc_spi_internal_init+0x794>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002d56:	b2 88       	st.b	r9[0x0],r8
80002d58:	e0 68 2d 00 	mov	r8,11520

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_SPI_SPEED;
80002d5c:	ea 18 01 31 	orh	r8,0x131
80002d60:	49 cb       	lddpc	r11,80002dd0 <sd_mmc_spi_internal_init+0x790>
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002d62:	8f 18       	st.w	r7[0x4],r8
#endif

  sd_mmc_spi_init_done = true;

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_SPI_SPEED;
80002d64:	fc 7c 18 00 	mov	r12,-190464
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002d68:	e0 a0 1c 09 	rcall	8000657a <spi_setupChipReg>
80002d6c:	30 1c       	mov	r12,1
80002d6e:	fe 9f fd a9 	bral	800028c0 <sd_mmc_spi_internal_init+0x280>
  return true;
80002d72:	30 0b       	mov	r11,0
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002d74:	fc 7c 18 00 	mov	r12,-190464
80002d78:	e0 a0 1b ee 	rcall	80006554 <spi_unselectChip>
80002d7c:	49 68       	lddpc	r8,80002dd4 <sd_mmc_spi_internal_init+0x794>
    sd_mmc_spi_init_done = false;
80002d7e:	30 0c       	mov	r12,0
80002d80:	b0 85       	st.b	r8[0x0],r5
80002d82:	fe 9f fd 9f 	bral	800028c0 <sd_mmc_spi_internal_init+0x280>
80002d86:	3f f8       	mov	r8,-1
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002d88:	a8 88       	st.b	r4[0x0],r8
80002d8a:	fe 9f fe 1e 	bral	800029c6 <sd_mmc_spi_internal_init+0x386>
80002d8e:	3f f8       	mov	r8,-1
80002d90:	ac 88       	st.b	r6[0x0],r8
80002d92:	fe 9f fe 59 	bral	80002a44 <sd_mmc_spi_internal_init+0x404>
80002d96:	3f f8       	mov	r8,-1
80002d98:	ac 88       	st.b	r6[0x0],r8
80002d9a:	fe 9f fe 40 	bral	80002a1a <sd_mmc_spi_internal_init+0x3da>
80002d9e:	3f f8       	mov	r8,-1
80002da0:	ac 88       	st.b	r6[0x0],r8
80002da2:	fe 9f fe 79 	bral	80002a94 <sd_mmc_spi_internal_init+0x454>
80002da6:	3f f8       	mov	r8,-1
80002da8:	ac 88       	st.b	r6[0x0],r8
80002daa:	fe 9f fe 61 	bral	80002a6c <sd_mmc_spi_internal_init+0x42c>
80002dae:	3f f8       	mov	r8,-1
80002db0:	ac 88       	st.b	r6[0x0],r8
80002db2:	fe 9f fe 85 	bral	80002abc <sd_mmc_spi_internal_init+0x47c>
80002db6:	3f f8       	mov	r8,-1
80002db8:	ac 88       	st.b	r6[0x0],r8
80002dba:	fe 9f fe 95 	bral	80002ae4 <sd_mmc_spi_internal_init+0x4a4>
80002dbe:	3f f8       	mov	r8,-1
80002dc0:	ac 88       	st.b	r6[0x0],r8
80002dc2:	cb 9a       	rjmp	80002b34 <sd_mmc_spi_internal_init+0x4f4>
80002dc4:	3f f8       	mov	r8,-1
80002dc6:	ac 88       	st.b	r6[0x0],r8
80002dc8:	fe 9f fe a2 	bral	80002b0c <sd_mmc_spi_internal_init+0x4cc>
80002dcc:	00 00       	add	r0,r0
80002dce:	07 20       	ld.uh	r0,r3++
80002dd0:	00 00       	add	r0,r0
80002dd2:	07 10       	ld.sh	r0,r3++
80002dd4:	00 00       	add	r0,r0
80002dd6:	07 24       	ld.uh	r4,r3++
80002dd8:	00 00       	add	r0,r0
80002dda:	0b 4e       	ld.w	lr,--r5
80002ddc:	00 00       	add	r0,r0
80002dde:	0b 60       	ld.uh	r0,--r5
80002de0:	00 00       	add	r0,r0
80002de2:	0b 50       	ld.sh	r0,--r5

80002de4 <sd_mmc_spi_init>:
80002de4:	eb cd 40 10 	pushm	r4,lr
80002de8:	fa c4 ff f8 	sub	r4,sp,-8
80002dec:	68 39       	ld.w	r9,r4[0xc]
80002dee:	48 88       	lddpc	r8,80002e0c <sd_mmc_spi_init+0x28>
80002df0:	91 39       	st.w	r8[0xc],r9
80002df2:	48 89       	lddpc	r9,80002e10 <sd_mmc_spi_init+0x2c>
80002df4:	93 0c       	st.w	r9[0x0],r12
80002df6:	68 09       	ld.w	r9,r4[0x0]
80002df8:	91 09       	st.w	r8[0x0],r9
80002dfa:	68 19       	ld.w	r9,r4[0x4]
80002dfc:	91 19       	st.w	r8[0x4],r9
80002dfe:	68 29       	ld.w	r9,r4[0x8]
80002e00:	91 29       	st.w	r8[0x8],r9
80002e02:	fe b0 fc 1f 	rcall	80002640 <sd_mmc_spi_internal_init>
80002e06:	e3 cd 80 10 	ldm	sp++,r4,pc
80002e0a:	d7 03       	nop
80002e0c:	00 00       	add	r0,r0
80002e0e:	07 10       	ld.sh	r0,r3++
  sd_mmc_pba_hz = pba_hz;
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
}
80002e10:	00 00       	add	r0,r0
80002e12:	07 20       	ld.uh	r0,r3++

80002e14 <reset_DDS_local>:
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80002e14:	fc 18 40 00 	movh	r8,0x4000
80002e18:	e0 69 20 00 	mov	r9,8192
80002e1c:	f1 49 00 54 	st.w	r8[84],r9


void reset_DDS_local(void)
{
	gpio_local_set_gpio_pin(DDS_RESET_pin);
	asm volatile("nop\n"); 
80002e20:	d7 03       	nop
	asm volatile("nop\n"); 
80002e22:	d7 03       	nop
	asm volatile("nop\n"); 
80002e24:	d7 03       	nop
	asm volatile("nop\n"); 
80002e26:	d7 03       	nop
	asm volatile("nop\n"); 
80002e28:	d7 03       	nop
	asm volatile("nop\n"); 
80002e2a:	d7 03       	nop
	asm volatile("nop\n"); 
80002e2c:	d7 03       	nop
	asm volatile("nop\n"); 
80002e2e:	d7 03       	nop
	asm volatile("nop\n"); 
80002e30:	d7 03       	nop
	asm volatile("nop\n");
80002e32:	d7 03       	nop
	asm volatile("nop\n"); 
80002e34:	d7 03       	nop
	asm volatile("nop\n"); 
80002e36:	d7 03       	nop
	asm volatile("nop\n"); 
80002e38:	d7 03       	nop
	asm volatile("nop\n"); 
80002e3a:	d7 03       	nop
	asm volatile("nop\n");
80002e3c:	d7 03       	nop
	asm volatile("nop\n");
80002e3e:	d7 03       	nop
	asm volatile("nop\n"); 
80002e40:	d7 03       	nop
	asm volatile("nop\n"); 
80002e42:	d7 03       	nop
	asm volatile("nop\n");
80002e44:	d7 03       	nop
	asm volatile("nop\n");
80002e46:	d7 03       	nop
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80002e48:	f1 49 00 58 	st.w	r8[88],r9
	gpio_local_clr_gpio_pin(DDS_RESET_pin);
}
80002e4c:	5e fc       	retal	r12

80002e4e <IO_UPDATE_local>:

void IO_UPDATE_local(void)
{
	while (!(DDS_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));  //pulse lasts ~180ns, seems to be enough to reliably be recognized
80002e4e:	fe 79 34 00 	mov	r9,-52224
80002e52:	72 48       	ld.w	r8,r9[0x10]
80002e54:	ed b8 00 09 	bld	r8,0x9
80002e58:	cf d1       	brne	80002e52 <IO_UPDATE_local+0x4>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80002e5a:	fc 18 40 00 	movh	r8,0x4000
80002e5e:	fc 19 00 80 	movh	r9,0x80
80002e62:	f1 49 01 54 	st.w	r8[340],r9
	gpio_local_set_gpio_pin(DDS_IOUD_pin);
	asm volatile("nop\n"); 
80002e66:	d7 03       	nop
	asm volatile("nop\n"); 
80002e68:	d7 03       	nop
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80002e6a:	f1 49 01 58 	st.w	r8[344],r9
	gpio_local_clr_gpio_pin(DDS_IOUD_pin);
}
80002e6e:	5e fc       	retal	r12

80002e70 <IO_UPDATE_local_long>:

void IO_UPDATE_local_long(void)
{
	while (!(DDS_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));  //pulse lasts ~180ns, seems to be enough to reliably be recognized
80002e70:	fe 79 34 00 	mov	r9,-52224
80002e74:	72 48       	ld.w	r8,r9[0x10]
80002e76:	ed b8 00 09 	bld	r8,0x9
80002e7a:	cf d1       	brne	80002e74 <IO_UPDATE_local_long+0x4>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80002e7c:	fc 18 40 00 	movh	r8,0x4000
80002e80:	fc 19 00 80 	movh	r9,0x80
80002e84:	f1 49 01 54 	st.w	r8[340],r9
	gpio_local_set_gpio_pin(DDS_IOUD_pin);
	asm volatile("nop\n"); 
80002e88:	d7 03       	nop
	asm volatile("nop\n"); 
80002e8a:	d7 03       	nop
	asm volatile("nop\n"); 
80002e8c:	d7 03       	nop
	asm volatile("nop\n"); 
80002e8e:	d7 03       	nop
	asm volatile("nop\n"); 
80002e90:	d7 03       	nop
	asm volatile("nop\n"); 
80002e92:	d7 03       	nop
	asm volatile("nop\n"); 
80002e94:	d7 03       	nop
	asm volatile("nop\n"); 
80002e96:	d7 03       	nop
	asm volatile("nop\n"); 
80002e98:	d7 03       	nop
	asm volatile("nop\n");
80002e9a:	d7 03       	nop
	asm volatile("nop\n"); 
80002e9c:	d7 03       	nop
	asm volatile("nop\n"); 
80002e9e:	d7 03       	nop
	asm volatile("nop\n"); 
80002ea0:	d7 03       	nop
	asm volatile("nop\n"); 
80002ea2:	d7 03       	nop
	asm volatile("nop\n");
80002ea4:	d7 03       	nop
	asm volatile("nop\n");
80002ea6:	d7 03       	nop
	asm volatile("nop\n"); 
80002ea8:	d7 03       	nop
	asm volatile("nop\n"); 
80002eaa:	d7 03       	nop
	asm volatile("nop\n");
80002eac:	d7 03       	nop
	asm volatile("nop\n");
80002eae:	d7 03       	nop
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80002eb0:	f1 49 01 58 	st.w	r8[344],r9
	gpio_local_clr_gpio_pin(DDS_IOUD_pin);
}
80002eb4:	5e fc       	retal	r12
80002eb6:	d7 03       	nop

80002eb8 <write_profile_word_asf>:
	my_fast_SPI_write(DDS_SPI,0,DDS_options->pcs,1);
}


void write_profile_word_asf(uint16_t asf, uint8_t word, volatile DDS_channel_options_t *DDS_options)
{
80002eb8:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t asf_32=((uint32_t)asf)<<22;
	my_fast_SPI_write(DDS_SPI, (register_write | (CW1_ADDR+word-1)),DDS_options->pcs, 0);
80002ebc:	30 09       	mov	r9,0
	my_fast_SPI_write(DDS_SPI,0,DDS_options->pcs,1);
}


void write_profile_word_asf(uint16_t asf, uint8_t word, volatile DDS_channel_options_t *DDS_options)
{
80002ebe:	14 97       	mov	r7,r10
	uint32_t asf_32=((uint32_t)asf)<<22;
80002ec0:	f8 06 15 16 	lsl	r6,r12,0x16
	my_fast_SPI_write(DDS_SPI, (register_write | (CW1_ADDR+word-1)),DDS_options->pcs, 0);
80002ec4:	15 8a       	ld.ub	r10,r10[0x0]
80002ec6:	fe 7c 34 00 	mov	r12,-52224
80002eca:	2f 7b       	sub	r11,-9
80002ecc:	5c 7b       	castu.h	r11
80002ece:	e0 a0 03 df 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,asf_32>>24,DDS_options->pcs, 0);
80002ed2:	0f 8a       	ld.ub	r10,r7[0x0]
80002ed4:	ec 0b 16 18 	lsr	r11,r6,0x18
80002ed8:	30 09       	mov	r9,0
80002eda:	fe 7c 34 00 	mov	r12,-52224
80002ede:	e0 a0 03 d7 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,asf_32>>16,DDS_options->pcs,0);
80002ee2:	ec 0b 16 10 	lsr	r11,r6,0x10
80002ee6:	0f 8a       	ld.ub	r10,r7[0x0]
80002ee8:	30 09       	mov	r9,0
80002eea:	fe 7c 34 00 	mov	r12,-52224
80002eee:	e0 a0 03 cf 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,0,DDS_options->pcs,0);
80002ef2:	30 09       	mov	r9,0
80002ef4:	0f 8a       	ld.ub	r10,r7[0x0]
80002ef6:	12 9b       	mov	r11,r9
80002ef8:	fe 7c 34 00 	mov	r12,-52224
80002efc:	e0 a0 03 c8 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,0,DDS_options->pcs,1);
80002f00:	0f 8a       	ld.ub	r10,r7[0x0]
80002f02:	30 19       	mov	r9,1
80002f04:	30 0b       	mov	r11,0
80002f06:	fe 7c 34 00 	mov	r12,-52224
80002f0a:	e0 a0 03 c1 	rcall	8000368c <my_fast_SPI_write>
}
80002f0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002f12:	d7 03       	nop

80002f14 <write_POW0>:
80002f14:	eb cd 40 80 	pushm	r7,lr
}	


void write_POW0(volatile DDS_channel_options_t *DDS_options)
{
	my_fast_SPI_write(DDS_SPI, (register_write | CPOW0_ADDR),DDS_options->pcs, 0);
80002f18:	30 09       	mov	r9,0
	my_fast_SPI_write(DDS_SPI,(DDS_options->FTW),DDS_options->pcs, 1);
}	


void write_POW0(volatile DDS_channel_options_t *DDS_options)
{
80002f1a:	18 97       	mov	r7,r12
	my_fast_SPI_write(DDS_SPI, (register_write | CPOW0_ADDR),DDS_options->pcs, 0);
80002f1c:	19 8a       	ld.ub	r10,r12[0x0]
80002f1e:	30 5b       	mov	r11,5
80002f20:	fe 7c 34 00 	mov	r12,-52224
80002f24:	e0 a0 03 b4 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->POW)>>8,DDS_options->pcs, 0);
80002f28:	0f 8a       	ld.ub	r10,r7[0x0]
80002f2a:	30 09       	mov	r9,0
80002f2c:	ef 0b 00 10 	ld.sh	r11,r7[16]
80002f30:	fe 7c 34 00 	mov	r12,-52224
80002f34:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80002f38:	e0 a0 03 aa 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->POW),DDS_options->pcs, 1);
80002f3c:	0f 8a       	ld.ub	r10,r7[0x0]
80002f3e:	30 19       	mov	r9,1
80002f40:	ef 0b 00 10 	ld.sh	r11,r7[16]
80002f44:	fe 7c 34 00 	mov	r12,-52224
80002f48:	5c 7b       	castu.h	r11
80002f4a:	e0 a0 03 a1 	rcall	8000368c <my_fast_SPI_write>
}
80002f4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f52:	d7 03       	nop

80002f54 <write_FTW0>:
80002f54:	eb cd 40 80 	pushm	r7,lr
	my_fast_SPI_write(DDS_SPI,(DDS_options->ASF) & 255,DDS_options->pcs, 1);
}

void write_FTW0(volatile DDS_channel_options_t *DDS_options)
{
	my_fast_SPI_write(DDS_SPI, (register_write | CFTW0_ADDR),DDS_options->pcs, 0);
80002f58:	30 09       	mov	r9,0
	my_fast_SPI_write(DDS_SPI, (DDS_options->ampmulenable)<<(AMP_MUL_EN_OFFSET-8) | (DDS_options->RURDenable)<<(AMP_RURD_EN_OFFSET-8) | (DDS_options->ASF)>>8,DDS_options->pcs, 0);
	my_fast_SPI_write(DDS_SPI,(DDS_options->ASF) & 255,DDS_options->pcs, 1);
}

void write_FTW0(volatile DDS_channel_options_t *DDS_options)
{
80002f5a:	18 97       	mov	r7,r12
	my_fast_SPI_write(DDS_SPI, (register_write | CFTW0_ADDR),DDS_options->pcs, 0);
80002f5c:	19 8a       	ld.ub	r10,r12[0x0]
80002f5e:	30 4b       	mov	r11,4
80002f60:	fe 7c 34 00 	mov	r12,-52224
80002f64:	e0 a0 03 94 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->FTW)>>24,DDS_options->pcs, 0);
80002f68:	0f 8a       	ld.ub	r10,r7[0x0]
80002f6a:	30 09       	mov	r9,0
80002f6c:	6e 3b       	ld.w	r11,r7[0xc]
80002f6e:	fe 7c 34 00 	mov	r12,-52224
80002f72:	b9 8b       	lsr	r11,0x18
80002f74:	e0 a0 03 8c 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->FTW)>>16,DDS_options->pcs, 0);
80002f78:	0f 8a       	ld.ub	r10,r7[0x0]
80002f7a:	30 09       	mov	r9,0
80002f7c:	6e 3b       	ld.w	r11,r7[0xc]
80002f7e:	fe 7c 34 00 	mov	r12,-52224
80002f82:	b1 8b       	lsr	r11,0x10
80002f84:	e0 a0 03 84 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->FTW)>>8,DDS_options->pcs, 0);
80002f88:	0f 8a       	ld.ub	r10,r7[0x0]
80002f8a:	30 09       	mov	r9,0
80002f8c:	6e 3b       	ld.w	r11,r7[0xc]
80002f8e:	fe 7c 34 00 	mov	r12,-52224
80002f92:	f7 db c1 10 	bfextu	r11,r11,0x8,0x10
80002f96:	e0 a0 03 7b 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->FTW),DDS_options->pcs, 1);
80002f9a:	0f 8a       	ld.ub	r10,r7[0x0]
80002f9c:	30 19       	mov	r9,1
80002f9e:	6e 3b       	ld.w	r11,r7[0xc]
80002fa0:	fe 7c 34 00 	mov	r12,-52224
80002fa4:	5c 7b       	castu.h	r11
80002fa6:	e0 a0 03 73 	rcall	8000368c <my_fast_SPI_write>
}	
80002faa:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fae:	d7 03       	nop

80002fb0 <write_ACR>:
80002fb0:	eb cd 40 80 	pushm	r7,lr
}	


void write_ACR(volatile DDS_channel_options_t *DDS_options)
{
	my_fast_SPI_write(DDS_SPI, (register_write | ACR_ADDR),DDS_options->pcs, 0);
80002fb4:	30 09       	mov	r9,0
	my_fast_SPI_write(DDS_SPI, (DDS_options->coreenable)<<(DCPDN_OFFSET) | (DDS_options->DACenable)<<(DACPDN_OFFSET) | (DDS_options->matchedpipes)<<(MATCHED_PIPES_OFFSET) | (DDS_options->sinorcos)<<(SIN_OUT_OFFSET),DDS_options->pcs, 1);
}	


void write_ACR(volatile DDS_channel_options_t *DDS_options)
{
80002fb6:	18 97       	mov	r7,r12
	my_fast_SPI_write(DDS_SPI, (register_write | ACR_ADDR),DDS_options->pcs, 0);
80002fb8:	19 8a       	ld.ub	r10,r12[0x0]
80002fba:	30 6b       	mov	r11,6
80002fbc:	fe 7c 34 00 	mov	r12,-52224
80002fc0:	e0 a0 03 66 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,0,DDS_options->pcs, 0); //first byte is amplitude ramp rate, not using ramp so leave at 0
80002fc4:	30 09       	mov	r9,0
80002fc6:	0f 8a       	ld.ub	r10,r7[0x0]
80002fc8:	12 9b       	mov	r11,r9
80002fca:	fe 7c 34 00 	mov	r12,-52224
80002fce:	e0 a0 03 5f 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI, (DDS_options->ampmulenable)<<(AMP_MUL_EN_OFFSET-8) | (DDS_options->RURDenable)<<(AMP_RURD_EN_OFFSET-8) | (DDS_options->ASF)>>8,DDS_options->pcs, 0);
80002fd2:	0f 8a       	ld.ub	r10,r7[0x0]
80002fd4:	ef 38 00 08 	ld.ub	r8,r7[8]
80002fd8:	ef 3b 00 09 	ld.ub	r11,r7[9]
80002fdc:	a3 7b       	lsl	r11,0x3
80002fde:	f7 e8 10 4b 	or	r11,r11,r8<<0x4
80002fe2:	8e 58       	ld.sh	r8,r7[0xa]
80002fe4:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
80002fe8:	30 09       	mov	r9,0
80002fea:	10 4b       	or	r11,r8
80002fec:	fe 7c 34 00 	mov	r12,-52224
80002ff0:	e0 a0 03 4e 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->ASF) & 255,DDS_options->pcs, 1);
80002ff4:	0f 8a       	ld.ub	r10,r7[0x0]
80002ff6:	30 19       	mov	r9,1
80002ff8:	8e 5b       	ld.sh	r11,r7[0xa]
80002ffa:	fe 7c 34 00 	mov	r12,-52224
80002ffe:	5c 5b       	castu.b	r11
80003000:	e0 a0 03 46 	rcall	8000368c <my_fast_SPI_write>
}
80003004:	e3 cd 80 80 	ldm	sp++,r7,pc

80003008 <write_CFR>:
80003008:	eb cd 40 80 	pushm	r7,lr
}	


void write_CFR(volatile DDS_channel_options_t *DDS_options)
{
	my_fast_SPI_write(DDS_SPI, (register_write | CFR_ADDR),DDS_options->pcs, 0);
8000300c:	30 09       	mov	r9,0
	my_fast_SPI_write(DDS_SPI, MY_DEFAULT_FR2,DDS_options->pcs, 1);
}	


void write_CFR(volatile DDS_channel_options_t *DDS_options)
{
8000300e:	18 97       	mov	r7,r12
	my_fast_SPI_write(DDS_SPI, (register_write | CFR_ADDR),DDS_options->pcs, 0);
80003010:	19 8a       	ld.ub	r10,r12[0x0]
80003012:	30 3b       	mov	r11,3
80003014:	fe 7c 34 00 	mov	r12,-52224
80003018:	e0 a0 03 3a 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->AFPmod)<<(AFP_OFFSET-16),DDS_options->pcs, 0);
8000301c:	0f 8a       	ld.ub	r10,r7[0x0]
8000301e:	30 09       	mov	r9,0
80003020:	0f ab       	ld.ub	r11,r7[0x2]
80003022:	fe 7c 34 00 	mov	r12,-52224
80003026:	a7 6b       	lsl	r11,0x6
80003028:	e0 a0 03 32 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI,(DDS_options->DACfsc)<<(DAC_FSC_OFFSET-8),DDS_options->pcs, 0);
8000302c:	0f 8a       	ld.ub	r10,r7[0x0]
8000302e:	30 09       	mov	r9,0
80003030:	0f bb       	ld.ub	r11,r7[0x3]
80003032:	fe 7c 34 00 	mov	r12,-52224
80003036:	e0 a0 03 2b 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI, (DDS_options->coreenable)<<(DCPDN_OFFSET) | (DDS_options->DACenable)<<(DACPDN_OFFSET) | (DDS_options->matchedpipes)<<(MATCHED_PIPES_OFFSET) | (DDS_options->sinorcos)<<(SIN_OUT_OFFSET),DDS_options->pcs, 1);
8000303a:	0f 8a       	ld.ub	r10,r7[0x0]
8000303c:	0f cb       	ld.ub	r11,r7[0x4]
8000303e:	0f d8       	ld.ub	r8,r7[0x5]
80003040:	a7 68       	lsl	r8,0x6
80003042:	f1 eb 10 78 	or	r8,r8,r11<<0x7
80003046:	0f eb       	ld.ub	r11,r7[0x6]
80003048:	0f f7       	ld.ub	r7,r7[0x7]
8000304a:	0e 48       	or	r8,r7
8000304c:	30 19       	mov	r9,1
8000304e:	fe 7c 34 00 	mov	r12,-52224
80003052:	f1 eb 10 5b 	or	r11,r8,r11<<0x5
80003056:	e0 a0 03 1b 	rcall	8000368c <my_fast_SPI_write>
}	
8000305a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000305e:	d7 03       	nop

80003060 <write_FR2>:
80003060:	eb cd 40 80 	pushm	r7,lr
}	


void write_FR2(volatile DDS_options_t *DDS_options)
{
	my_fast_SPI_write(DDS_SPI, (register_write | FR2_ADDR),DDS_options->pcs, 0);
80003064:	30 09       	mov	r9,0
	my_fast_SPI_write(DDS_SPI, 0,DDS_options->pcs, 1); //last byte should all be default values
}	


void write_FR2(volatile DDS_options_t *DDS_options)
{
80003066:	18 97       	mov	r7,r12
	my_fast_SPI_write(DDS_SPI, (register_write | FR2_ADDR),DDS_options->pcs, 0);
80003068:	19 8a       	ld.ub	r10,r12[0x0]
8000306a:	30 2b       	mov	r11,2
8000306c:	fe 7c 34 00 	mov	r12,-52224
80003070:	e0 a0 03 0e 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI, MY_DEFAULT_FR2,DDS_options->pcs, 0);
80003074:	30 09       	mov	r9,0
80003076:	0f 8a       	ld.ub	r10,r7[0x0]
80003078:	12 9b       	mov	r11,r9
8000307a:	fe 7c 34 00 	mov	r12,-52224
8000307e:	e0 a0 03 07 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI, MY_DEFAULT_FR2,DDS_options->pcs, 1);
80003082:	0f 8a       	ld.ub	r10,r7[0x0]
80003084:	30 19       	mov	r9,1
80003086:	30 0b       	mov	r11,0
80003088:	fe 7c 34 00 	mov	r12,-52224
8000308c:	e0 a0 03 00 	rcall	8000368c <my_fast_SPI_write>
}	
80003090:	e3 cd 80 80 	ldm	sp++,r7,pc

80003094 <write_FR1>:
80003094:	eb cd 40 80 	pushm	r7,lr
}


void write_FR1(volatile DDS_options_t *DDS_options)
{
	my_fast_SPI_write(DDS_SPI, (register_write | FR1_ADDR),DDS_options->pcs, 0);
80003098:	30 09       	mov	r9,0
	my_fast_SPI_write(DDS_SPI, ((DDS_options->channels)<<CH_EN_OFFSET | (DDS_options->SERmode)<<SER_MODE_OFFSET | (DDS_options->LSBfirst)<<LSB_FIRST_OFFSET),DDS_options->pcs, 1);
}


void write_FR1(volatile DDS_options_t *DDS_options)
{
8000309a:	18 97       	mov	r7,r12
	my_fast_SPI_write(DDS_SPI, (register_write | FR1_ADDR),DDS_options->pcs, 0);
8000309c:	19 8a       	ld.ub	r10,r12[0x0]
8000309e:	30 1b       	mov	r11,1
800030a0:	fe 7c 34 00 	mov	r12,-52224
800030a4:	e0 a0 02 f4 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI, ((DDS_options->VCOgain)<<(VCO_GAIN_OFFSET-16) | (DDS_options->PLLdiv)<<(PLL_DIV_OFFSET-16) | (DDS_options->PLLdiv)<<(PLL_DIV_OFFSET-16) | (DDS_options->CHRGPMP)<<(CHRGPMP_OFFSET-16)),DDS_options->pcs, 0);
800030a8:	0f 8a       	ld.ub	r10,r7[0x0]
800030aa:	0f cb       	ld.ub	r11,r7[0x4]
800030ac:	0f d8       	ld.ub	r8,r7[0x5]
800030ae:	a3 68       	lsl	r8,0x2
800030b0:	f1 eb 10 78 	or	r8,r8,r11<<0x7
800030b4:	0f db       	ld.ub	r11,r7[0x5]
800030b6:	0f ee       	ld.ub	lr,r7[0x6]
800030b8:	1c 48       	or	r8,lr
800030ba:	30 09       	mov	r9,0
800030bc:	f1 eb 10 2b 	or	r11,r8,r11<<0x2
800030c0:	fe 7c 34 00 	mov	r12,-52224
800030c4:	e0 a0 02 e4 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI, ((DDS_options->PPC)<<(PPC_OFFSET-8) | (DDS_options->MODLEVEL)<<(MODLEVEL_OFFSET-8)),DDS_options->pcs, 0);
800030c8:	0f 8a       	ld.ub	r10,r7[0x0]
800030ca:	0f fb       	ld.ub	r11,r7[0x7]
800030cc:	ef 38 00 08 	ld.ub	r8,r7[8]
800030d0:	30 09       	mov	r9,0
800030d2:	f1 eb 10 4b 	or	r11,r8,r11<<0x4
800030d6:	fe 7c 34 00 	mov	r12,-52224
800030da:	e0 a0 02 d9 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI, 0,DDS_options->pcs, 1); //last byte should all be default values
800030de:	0f 8a       	ld.ub	r10,r7[0x0]
800030e0:	30 19       	mov	r9,1
800030e2:	30 0b       	mov	r11,0
800030e4:	fe 7c 34 00 	mov	r12,-52224
800030e8:	e0 a0 02 d2 	rcall	8000368c <my_fast_SPI_write>
}	
800030ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800030f0 <write_CSR>:
800030f0:	eb cd 40 80 	pushm	r7,lr
	gpio_local_clr_gpio_pin(DDS_IOUD_pin);
}

void write_CSR(volatile DDS_options_t *DDS_options)
{
	my_fast_SPI_write(DDS_SPI, (register_write | CSR_ADDR),DDS_options->pcs, 0);
800030f4:	30 09       	mov	r9,0
	asm volatile("nop\n");
	gpio_local_clr_gpio_pin(DDS_IOUD_pin);
}

void write_CSR(volatile DDS_options_t *DDS_options)
{
800030f6:	18 97       	mov	r7,r12
	my_fast_SPI_write(DDS_SPI, (register_write | CSR_ADDR),DDS_options->pcs, 0);
800030f8:	19 8a       	ld.ub	r10,r12[0x0]
800030fa:	12 9b       	mov	r11,r9
800030fc:	fe 7c 34 00 	mov	r12,-52224
80003100:	e0 a0 02 c6 	rcall	8000368c <my_fast_SPI_write>
	my_fast_SPI_write(DDS_SPI, ((DDS_options->channels)<<CH_EN_OFFSET | (DDS_options->SERmode)<<SER_MODE_OFFSET | (DDS_options->LSBfirst)<<LSB_FIRST_OFFSET),DDS_options->pcs, 1);
80003104:	0f 8a       	ld.ub	r10,r7[0x0]
80003106:	0f 9e       	ld.ub	lr,r7[0x1]
80003108:	0f ab       	ld.ub	r11,r7[0x2]
8000310a:	0f b8       	ld.ub	r8,r7[0x3]
8000310c:	30 19       	mov	r9,1
8000310e:	fe 7c 34 00 	mov	r12,-52224
80003112:	f6 09 09 4b 	lsl	r11,r11,r9
80003116:	f7 ee 10 6b 	or	r11,r11,lr<<0x6
8000311a:	10 4b       	or	r11,r8
8000311c:	e0 a0 02 b8 	rcall	8000368c <my_fast_SPI_write>
}
80003120:	e3 cd 80 80 	ldm	sp++,r7,pc

80003124 <dacifb_set_value>:
                      U32 value)
{
  Assert( dacifb != NULL );

  // Set new conversion value
  switch(channel)
80003124:	30 28       	mov	r8,2
80003126:	f0 0b 18 00 	cp.b	r11,r8
8000312a:	c0 b0       	breq	80003140 <dacifb_set_value+0x1c>
8000312c:	30 38       	mov	r8,3
8000312e:	f0 0b 18 00 	cp.b	r11,r8
80003132:	c0 90       	breq	80003144 <dacifb_set_value+0x20>
80003134:	30 18       	mov	r8,1
80003136:	f0 0b 18 00 	cp.b	r11,r8
8000313a:	5e 1c       	retne	r12
       {
         dacifb->dr0 = value;
       }
       else
       {
           dacifb->dr0 = ((value&0x00FF) | ( (value&0xFF00>>16)<<16));
8000313c:	99 b9       	st.w	r12[0x2c],r9
8000313e:	5e fc       	retal	r12
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->dr0 = (value);
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->dr1 = (value);
80003140:	99 c9       	st.w	r12[0x30],r9
      break;
80003142:	5e fc       	retal	r12
    case DACIFB_CHANNEL_SELECTION_AB:
       if(dual==true)
80003144:	58 0a       	cp.w	r10,0
80003146:	cf b1       	brne	8000313c <dacifb_set_value+0x18>
       {
         dacifb->dr0 = value;
       }
       else
       {
           dacifb->dr0 = ((value&0x00FF) | ( (value&0xFF00>>16)<<16));
80003148:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
8000314c:	99 b9       	st.w	r12[0x2c],r9
8000314e:	5e fc       	retal	r12

80003150 <dacifb_start_channel>:
}

void dacifb_start_channel(volatile avr32_dacifb_t * dacifb,
                          U8 channel,
                          U32 cpu_hz)
{
80003150:	eb cd 40 e0 	pushm	r5-r7,lr
80003154:	18 95       	mov	r5,r12
80003156:	16 97       	mov	r7,r11
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003158:	e1 b6 00 42 	mfsr	r6,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000315c:	30 28       	mov	r8,2
8000315e:	f4 08 06 4a 	mulu.d	r10,r10,r8
80003162:	ee 78 42 3f 	mov	r8,999999
80003166:	30 09       	mov	r9,0
80003168:	10 0a       	add	r10,r8
8000316a:	f6 09 00 4b 	adc	r11,r11,r9
8000316e:	ee 78 42 40 	mov	r8,1000000
80003172:	30 09       	mov	r9,0
80003174:	e0 a0 2d 55 	rcall	80008c1e <__avr32_udiv64>
80003178:	ec 0a 00 0a 	add	r10,r6,r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000317c:	e1 b8 00 42 	mfsr	r8,0x108
80003180:	14 36       	cp.w	r6,r10
80003182:	e0 8b 00 17 	brhi	800031b0 <dacifb_start_channel+0x60>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003186:	10 36       	cp.w	r6,r8
80003188:	e0 8b 00 04 	brhi	80003190 <dacifb_start_channel+0x40>
8000318c:	10 3a       	cp.w	r10,r8
8000318e:	c1 f2       	brcc	800031cc <dacifb_start_channel+0x7c>
  Assert( dacifb!=NULL );

  // Wait 2us
  dacifb_us_delay(2,cpu_hz);

  switch(channel)
80003190:	30 28       	mov	r8,2
80003192:	f0 07 18 00 	cp.b	r7,r8
80003196:	c1 60       	breq	800031c2 <dacifb_start_channel+0x72>
80003198:	30 38       	mov	r8,3
8000319a:	f0 07 18 00 	cp.b	r7,r8
8000319e:	c1 f0       	breq	800031dc <dacifb_start_channel+0x8c>
800031a0:	30 18       	mov	r8,1
800031a2:	f0 07 18 00 	cp.b	r7,r8
800031a6:	c1 60       	breq	800031d2 <dacifb_start_channel+0x82>
800031a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031ac:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800031b0:	10 36       	cp.w	r6,r8
800031b2:	fe 98 ff fd 	brls	800031ac <dacifb_start_channel+0x5c>
800031b6:	10 3a       	cp.w	r10,r8
800031b8:	cf a2       	brcc	800031ac <dacifb_start_channel+0x5c>
800031ba:	30 28       	mov	r8,2
800031bc:	f0 07 18 00 	cp.b	r7,r8
800031c0:	ce c1       	brne	80003198 <dacifb_start_channel+0x48>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK);
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->cr |= (AVR32_DACIFB_CR_BOE_MASK );
800031c2:	6a 08       	ld.w	r8,r5[0x0]
800031c4:	b1 b8       	sbr	r8,0x11
800031c6:	8b 08       	st.w	r5[0x0],r8
      break;
800031c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031cc:	e1 b8 00 42 	mfsr	r8,0x108
800031d0:	cd bb       	rjmp	80003186 <dacifb_start_channel+0x36>
  dacifb_us_delay(2,cpu_hz);

  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK);
800031d2:	6a 08       	ld.w	r8,r5[0x0]
800031d4:	b1 a8       	sbr	r8,0x10
800031d6:	8b 08       	st.w	r5[0x0],r8
      break;
800031d8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->cr |= (AVR32_DACIFB_CR_BOE_MASK );
      break;
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK | AVR32_DACIFB_CR_BOE_MASK );
800031dc:	6a 08       	ld.w	r8,r5[0x0]
800031de:	ea 18 00 03 	orh	r8,0x3
800031e2:	8b 08       	st.w	r5[0x0],r8
800031e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800031e8 <dacifb_configure_channel>:
800031e8:	eb cd 40 c0 	pushm	r6-r7,lr

U8 dacifb_configure_channel( volatile avr32_dacifb_t * dacifb,
                             U8 channel,
                             dacifb_channel_opt_t * p_dacifb_channel_opt,
                             U32 prescaler_clock_hz)
{
800031ec:	18 98       	mov	r8,r12
  U32 prescaler = 0;

  Assert( dacifb!=NULL );

  // Auto-refresh Mode
  if (p_dacifb_channel_opt->auto_refresh_mode == true)
800031ee:	15 8e       	ld.ub	lr,r10[0x0]
800031f0:	30 0c       	mov	r12,0
800031f2:	f8 0e 18 00 	cp.b	lr,r12
800031f6:	c0 e0       	breq	80003212 <dacifb_configure_channel+0x2a>
  {
    switch(channel)
800031f8:	30 2c       	mov	r12,2
800031fa:	f8 0b 18 00 	cp.b	r11,r12
800031fe:	c5 e0       	breq	800032ba <dacifb_configure_channel+0xd2>
80003200:	30 3c       	mov	r12,3
80003202:	f8 0b 18 00 	cp.b	r11,r12
80003206:	e0 80 00 87 	breq	80003314 <dacifb_configure_channel+0x12c>
8000320a:	30 1c       	mov	r12,1
8000320c:	f8 0b 18 00 	cp.b	r11,r12
80003210:	c5 90       	breq	800032c2 <dacifb_configure_channel+0xda>
        break;
    }
  }

  // Compute CHRA/CHRB fields  ( min value of 25us)
  prescaler_min = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MIN_VALUE);
80003212:	e0 67 17 59 	mov	r7,5977
80003216:	ea 17 d1 b7 	orh	r7,0xd1b7
8000321a:	f2 07 06 46 	mulu.d	r6,r9,r7
8000321e:	0e 9e       	mov	lr,r7
80003220:	af 9e       	lsr	lr,0xf
80003222:	fc 0e 12 00 	clz	lr,lr
80003226:	fc 0e 11 1f 	rsub	lr,lr,31
  if (prescaler_min > 0) prescaler_min --;
8000322a:	c0 70       	breq	80003238 <dacifb_configure_channel+0x50>
8000322c:	20 1e       	sub	lr,1

  // Check CHRA/CHRB fields
  if ( (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
8000322e:	59 0e       	cp.w	lr,16
80003230:	e0 88 00 04 	brls	80003238 <dacifb_configure_channel+0x50>
      break;
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80003234:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
  if ( (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
       (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;

  // Compute CHRA/CHRB fields  ( max value of 35us)
  prescaler_max = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MAX_VALUE);
80003238:	e0 67 27 59 	mov	r7,10073
8000323c:	ea 17 fb a9 	orh	r7,0xfba9
80003240:	f2 07 06 46 	mulu.d	r6,r9,r7
80003244:	af 97       	lsr	r7,0xf
80003246:	ee 07 12 00 	clz	r7,r7
8000324a:	ee 07 11 1f 	rsub	r7,r7,31
  if (prescaler_max > 0) prescaler_max --;
8000324e:	c3 01       	brne	800032ae <dacifb_configure_channel+0xc6>
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;

  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
80003250:	58 0e       	cp.w	lr,0
80003252:	e0 80 00 be 	breq	800033ce <dacifb_configure_channel+0x1e6>
80003256:	30 09       	mov	r9,0
  {
      prescaler++;
80003258:	2f f9       	sub	r9,-1
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;

  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
8000325a:	f2 0c 15 01 	lsl	r12,r9,0x1
8000325e:	1c 3c       	cp.w	r12,lr
80003260:	cf c3       	brcs	80003258 <dacifb_configure_channel+0x70>
  {
      prescaler++;
  }
  // If value found is out of range, configuration refused
  if ((prescaler<<1) > prescaler_max)
80003262:	0e 3c       	cp.w	r12,r7
80003264:	fe 9b ff e8 	brhi	80003234 <dacifb_configure_channel+0x4c>
    return DACIFB_CONFIGURATION_REFUSED;

  // Refresh Time
  switch(channel)
80003268:	30 2c       	mov	r12,2
8000326a:	f8 0b 18 00 	cp.b	r11,r12
8000326e:	c2 e0       	breq	800032ca <dacifb_configure_channel+0xe2>
80003270:	30 3e       	mov	lr,3
80003272:	fc 0b 18 00 	cp.b	r11,lr
80003276:	c7 a0       	breq	8000336a <dacifb_configure_channel+0x182>
80003278:	30 17       	mov	r7,1
8000327a:	ee 0b 18 00 	cp.b	r11,r7
8000327e:	c5 00       	breq	8000331e <dacifb_configure_channel+0x136>
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
      break;
  }

  // Trigger Mode
  switch(channel)
80003280:	f8 0b 18 00 	cp.b	r11,r12
80003284:	c2 90       	breq	800032d6 <dacifb_configure_channel+0xee>
80003286:	fc 0b 18 00 	cp.b	r11,lr
8000328a:	c7 b0       	breq	80003380 <dacifb_configure_channel+0x198>
8000328c:	ee 0b 18 00 	cp.b	r11,r7
80003290:	c4 c0       	breq	80003328 <dacifb_configure_channel+0x140>
      break;
  }


  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
80003292:	30 29       	mov	r9,2
80003294:	f2 0b 18 00 	cp.b	r11,r9
80003298:	c2 c0       	breq	800032f0 <dacifb_configure_channel+0x108>
8000329a:	30 39       	mov	r9,3
8000329c:	f2 0b 18 00 	cp.b	r11,r9
800032a0:	c7 f0       	breq	8000339e <dacifb_configure_channel+0x1b6>
800032a2:	30 19       	mov	r9,1
800032a4:	f2 0b 18 00 	cp.b	r11,r9
800032a8:	c4 d0       	breq	80003342 <dacifb_configure_channel+0x15a>
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800032aa:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
       (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;

  // Compute CHRA/CHRB fields  ( max value of 35us)
  prescaler_max = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MAX_VALUE);
  if (prescaler_max > 0) prescaler_max --;
800032ae:	20 17       	sub	r7,1

  // Check CHRA/CHRB fields
  if ( (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
800032b0:	59 07       	cp.w	r7,16
800032b2:	fe 98 ff cf 	brls	80003250 <dacifb_configure_channel+0x68>
      break;
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800032b6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK);
        break;
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->cr |= (AVR32_DACIFB_CR_ARBE_MASK );
800032ba:	70 0c       	ld.w	r12,r8[0x0]
800032bc:	bb bc       	sbr	r12,0x1b
800032be:	91 0c       	st.w	r8[0x0],r12
        break;
800032c0:	ca 9b       	rjmp	80003212 <dacifb_configure_channel+0x2a>
  if (p_dacifb_channel_opt->auto_refresh_mode == true)
  {
    switch(channel)
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK);
800032c2:	70 0c       	ld.w	r12,r8[0x0]
800032c4:	bb ac       	sbr	r12,0x1a
800032c6:	91 0c       	st.w	r8[0x0],r12
        break;
800032c8:	ca 5b       	rjmp	80003212 <dacifb_configure_channel+0x2a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK);
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
800032ca:	70 3c       	ld.w	r12,r8[0xc]
800032cc:	a9 69       	lsl	r9,0x8
800032ce:	e2 19 0f 00 	andl	r9,0xf00,COH
800032d2:	18 49       	or	r9,r12
800032d4:	91 39       	st.w	r8[0xc],r9
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
800032d6:	15 99       	ld.ub	r9,r10[0x1]
800032d8:	58 09       	cp.w	r9,0
800032da:	cd c0       	breq	80003292 <dacifb_configure_channel+0xaa>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_ABE_MASK);
800032dc:	70 1c       	ld.w	r12,r8[0x4]
800032de:	b1 bc       	sbr	r12,0x11
800032e0:	91 1c       	st.w	r8[0x4],r12
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
800032e2:	30 2c       	mov	r12,2
800032e4:	f8 09 18 00 	cp.b	r9,r12
800032e8:	c7 51       	brne	800033d2 <dacifb_configure_channel+0x1ea>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
800032ea:	70 29       	ld.w	r9,r8[0x8]
800032ec:	a9 a9       	sbr	r9,0x8
800032ee:	91 29       	st.w	r8[0x8],r9
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800032f0:	15 ce       	ld.ub	lr,r10[0x4]
800032f2:	70 ac       	ld.w	r12,r8[0x28]
800032f4:	15 ab       	ld.ub	r11,r10[0x2]
800032f6:	15 b9       	ld.ub	r9,r10[0x3]
800032f8:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
800032fc:	ab 7b       	lsl	r11,0xb
800032fe:	a9 69       	lsl	r9,0x8
80003300:	e2 1b 08 00 	andl	r11,0x800,COH
80003304:	e2 19 07 00 	andl	r9,0x700,COH
80003308:	f7 e9 10 09 	or	r9,r11,r9
8000330c:	1c 49       	or	r9,lr
8000330e:	18 49       	or	r9,r12
80003310:	91 a9       	st.w	r8[0x28],r9
80003312:	cc cb       	rjmp	800032aa <dacifb_configure_channel+0xc2>
        break;
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->cr |= (AVR32_DACIFB_CR_ARBE_MASK );
        break;
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK)|(AVR32_DACIFB_CR_ARBE_MASK );
80003314:	70 0c       	ld.w	r12,r8[0x0]
80003316:	ea 1c 0c 00 	orh	r12,0xc00
8000331a:	91 0c       	st.w	r8[0x0],r12
8000331c:	c7 bb       	rjmp	80003212 <dacifb_configure_channel+0x2a>

  // Refresh Time
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK);
8000331e:	70 3c       	ld.w	r12,r8[0xc]
80003320:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80003324:	18 49       	or	r9,r12
80003326:	91 39       	st.w	r8[0xc],r9

  // Trigger Mode
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80003328:	15 99       	ld.ub	r9,r10[0x1]
8000332a:	58 09       	cp.w	r9,0
8000332c:	cb 30       	breq	80003292 <dacifb_configure_channel+0xaa>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK);
8000332e:	70 1c       	ld.w	r12,r8[0x4]
80003330:	b1 ac       	sbr	r12,0x10
80003332:	91 1c       	st.w	r8[0x4],r12
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80003334:	30 2c       	mov	r12,2
80003336:	f8 09 18 00 	cp.b	r9,r12
8000333a:	c5 f1       	brne	800033f8 <dacifb_configure_channel+0x210>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
8000333c:	70 29       	ld.w	r9,r8[0x8]
8000333e:	a1 a9       	sbr	r9,0x0
80003340:	91 29       	st.w	r8[0x8],r9

  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80003342:	70 9c       	ld.w	r12,r8[0x24]
80003344:	15 ce       	ld.ub	lr,r10[0x4]
80003346:	15 ab       	ld.ub	r11,r10[0x2]
80003348:	15 b9       	ld.ub	r9,r10[0x3]
8000334a:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
8000334e:	ab 7b       	lsl	r11,0xb
80003350:	a9 69       	lsl	r9,0x8
80003352:	e2 1b 08 00 	andl	r11,0x800,COH
80003356:	e2 19 07 00 	andl	r9,0x700,COH
8000335a:	f7 e9 10 09 	or	r9,r11,r9
8000335e:	1c 49       	or	r9,lr
80003360:	18 49       	or	r9,r12
80003362:	30 1c       	mov	r12,1
80003364:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));
      break;
80003366:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
      break;
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
8000336a:	f2 0c 15 08 	lsl	r12,r9,0x8
8000336e:	70 3e       	ld.w	lr,r8[0xc]
80003370:	e2 1c 0f 00 	andl	r12,0xf00,COH
80003374:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80003378:	1c 49       	or	r9,lr
8000337a:	f3 ec 10 0c 	or	r12,r9,r12
8000337e:	91 3c       	st.w	r8[0xc],r12
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;
    case DACIFB_CHANNEL_SELECTION_AB:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80003380:	15 99       	ld.ub	r9,r10[0x1]
80003382:	58 09       	cp.w	r9,0
80003384:	c8 70       	breq	80003292 <dacifb_configure_channel+0xaa>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK)|(AVR32_DACIFB_CFR_ABE_MASK);
80003386:	70 1c       	ld.w	r12,r8[0x4]
80003388:	ea 1c 00 03 	orh	r12,0x3
8000338c:	91 1c       	st.w	r8[0x4],r12
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
8000338e:	30 2c       	mov	r12,2
80003390:	f8 09 18 00 	cp.b	r9,r12
80003394:	c2 81       	brne	800033e4 <dacifb_configure_channel+0x1fc>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK)|(AVR32_DACIFB_ECR_ESLB_MASK);
80003396:	70 29       	ld.w	r9,r8[0x8]
80003398:	e8 19 01 01 	orl	r9,0x101
8000339c:	91 29       	st.w	r8[0x8],r9
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));
      break;
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
8000339e:	70 9c       	ld.w	r12,r8[0x24]
800033a0:	15 ce       	ld.ub	lr,r10[0x4]
800033a2:	15 ab       	ld.ub	r11,r10[0x2]
800033a4:	15 b9       	ld.ub	r9,r10[0x3]
800033a6:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
800033aa:	ab 7b       	lsl	r11,0xb
800033ac:	a9 69       	lsl	r9,0x8
800033ae:	e2 1b 08 00 	andl	r11,0x800,COH
800033b2:	e2 19 07 00 	andl	r9,0x700,COH
800033b6:	f7 e9 10 09 	or	r9,r11,r9
800033ba:	1c 49       	or	r9,lr
800033bc:	f3 ec 10 0a 	or	r10,r9,r12
800033c0:	91 9a       	st.w	r8[0x24],r10
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800033c2:	30 1c       	mov	r12,1
800033c4:	70 aa       	ld.w	r10,r8[0x28]
800033c6:	14 49       	or	r9,r10
800033c8:	91 a9       	st.w	r8[0x28],r9
800033ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;

  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
800033ce:	1c 99       	mov	r9,lr
800033d0:	c4 cb       	rjmp	80003268 <dacifb_configure_channel+0x80>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
800033d2:	30 1c       	mov	r12,1
800033d4:	f8 09 18 00 	cp.b	r9,r12
800033d8:	fe 91 ff 5d 	brne	80003292 <dacifb_configure_channel+0xaa>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
800033dc:	70 09       	ld.w	r9,r8[0x0]
800033de:	b9 b9       	sbr	r9,0x19
800033e0:	91 09       	st.w	r8[0x0],r9
800033e2:	c5 8b       	rjmp	80003292 <dacifb_configure_channel+0xaa>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK)|(AVR32_DACIFB_ECR_ESLB_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
800033e4:	30 1c       	mov	r12,1
800033e6:	f8 09 18 00 	cp.b	r9,r12
800033ea:	fe 91 ff 54 	brne	80003292 <dacifb_configure_channel+0xaa>
         {
           dacifb->cr  |= (AVR32_DACIFB_CR_TRAE_MASK)|(AVR32_DACIFB_CR_TRBE_MASK);
800033ee:	70 09       	ld.w	r9,r8[0x0]
800033f0:	ea 19 03 00 	orh	r9,0x300
800033f4:	91 09       	st.w	r8[0x0],r9
800033f6:	c4 eb       	rjmp	80003292 <dacifb_configure_channel+0xaa>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
800033f8:	30 1c       	mov	r12,1
800033fa:	f8 09 18 00 	cp.b	r9,r12
800033fe:	fe 91 ff 4a 	brne	80003292 <dacifb_configure_channel+0xaa>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
80003402:	70 09       	ld.w	r9,r8[0x0]
80003404:	b9 a9       	sbr	r9,0x18
80003406:	91 09       	st.w	r8[0x0],r9
80003408:	c4 5b       	rjmp	80003292 <dacifb_configure_channel+0xaa>

8000340a <dacifb_configure>:
}

U8 dacifb_configure(volatile avr32_dacifb_t * dacifb,
                           dacifb_opt_t * p_dacifb_opt,
                           U32 pb_hz)
{
8000340a:	eb cd 00 c0 	pushm	r6-r7
8000340e:	18 98       	mov	r8,r12
  U32 counter = 0;

  Assert( dacifb!=NULL );

  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80003410:	96 99       	ld.uh	r9,r11[0x2]
80003412:	96 ac       	ld.uh	r12,r11[0x4]
80003414:	b1 69       	lsl	r9,0x10
80003416:	f9 dc c0 09 	bfextu	r12,r12,0x0,0x9
8000341a:	e6 19 01 ff 	andh	r9,0x1ff,COH
8000341e:	18 49       	or	r9,r12
80003420:	91 d9       	st.w	r8[0x34],r9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));

  // Compute PRESC field
  prescaler = 31 - clz(pb_hz/p_dacifb_opt->prescaler_clock_hz);
80003422:	76 27       	ld.w	r7,r11[0x8]
80003424:	f4 07 0d 06 	divu	r6,r10,r7
80003428:	ec 09 12 00 	clz	r9,r6
8000342c:	f2 09 11 1f 	rsub	r9,r9,31

  // Check PRESC value
  if (prescaler > (1<<AVR32_DACIFB_TCR_PRESC_SIZE))
80003430:	58 89       	cp.w	r9,8
80003432:	e0 8b 00 3d 	brhi	800034ac <dacifb_configure+0xa2>
    return DACIFB_CONFIGURATION_REFUSED;

  // Update prescaler_clock_hz value
  p_dacifb_opt->prescaler_clock_hz = pb_hz / (1<<prescaler);
80003436:	f4 09 0a 4a 	lsr	r10,r10,r9
8000343a:	97 2a       	st.w	r11[0x8],r10

  // Compute CHI field  ( minimum value of 2us)
  counter = (p_dacifb_opt->prescaler_clock_hz/DACIFB_CHI_MIN_VALUE);
8000343c:	e0 67 de 83 	mov	r7,56963
80003440:	ea 17 43 1b 	orh	r7,0x431b
80003444:	f4 07 06 46 	mulu.d	r6,r10,r7
80003448:	0e 9a       	mov	r10,r7
8000344a:	b1 9a       	lsr	r10,0x11

  // Check CHI value
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
8000344c:	e0 4a 00 80 	cp.w	r10,128
80003450:	e0 8b 00 2e 	brhi	800034ac <dacifb_configure+0xa2>
    return DACIFB_CONFIGURATION_REFUSED;


  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80003454:	70 3c       	ld.w	r12,r8[0xc]
80003456:	b9 69       	lsl	r9,0x18
80003458:	b1 6a       	lsl	r10,0x10
8000345a:	e6 19 07 00 	andh	r9,0x700,COH
8000345e:	e6 1a 00 7f 	andh	r10,0x7f,COH
80003462:	18 49       	or	r9,r12
80003464:	f3 ea 10 0a 	or	r10,r9,r10
80003468:	91 3a       	st.w	r8[0xc],r10
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );

  // Channel Selection
  dacifb->cfr |= ((p_dacifb_opt->channel_selection<<AVR32_DACIFB_CFR_CHC_OFFSET)&AVR32_DACIFB_CFR_CHC_MASK);
8000346a:	70 1a       	ld.w	r10,r8[0x4]
8000346c:	17 99       	ld.ub	r9,r11[0x1]
8000346e:	b9 69       	lsl	r9,0x18
80003470:	e6 19 03 00 	andh	r9,0x300,COH
80003474:	14 49       	or	r9,r10
80003476:	91 19       	st.w	r8[0x4],r9

  // Reference Selection
  dacifb->cfr |= ((p_dacifb_opt->reference <<AVR32_DACIFB_CFR_REF_OFFSET)&AVR32_DACIFB_CFR_REF_MASK);
80003478:	70 1a       	ld.w	r10,r8[0x4]
8000347a:	17 89       	ld.ub	r9,r11[0x0]
8000347c:	a9 69       	lsl	r9,0x8
8000347e:	e2 19 01 00 	andl	r9,0x100,COH
80003482:	14 49       	or	r9,r10
80003484:	91 19       	st.w	r8[0x4],r9

  // Dual Data
  dacifb->cfr |= ((p_dacifb_opt->dual<<AVR32_DACIFB_CFR_DDA_OFFSET)&AVR32_DACIFB_CFR_DDA_MASK);
80003486:	70 1a       	ld.w	r10,r8[0x4]
80003488:	17 f9       	ld.ub	r9,r11[0x7]
8000348a:	a1 79       	lsl	r9,0x1
8000348c:	e2 19 00 02 	andl	r9,0x2,COH
80003490:	14 49       	or	r9,r10
80003492:	91 19       	st.w	r8[0x4],r9

  // Low Power Mode
  dacifb->cfr |= ((p_dacifb_opt->low_power <<AVR32_DACIFB_CFR_LP_OFFSET)&AVR32_DACIFB_CFR_LP_MASK);
80003494:	70 19       	ld.w	r9,r8[0x4]
80003496:	17 ea       	ld.ub	r10,r11[0x6]
80003498:	f5 e9 10 09 	or	r9,r10,r9
8000349c:	91 19       	st.w	r8[0x4],r9

  // Enable DAC
  dacifb->cr |= AVR32_DACIFB_CR_EN_MASK;
8000349e:	30 1c       	mov	r12,1
800034a0:	70 09       	ld.w	r9,r8[0x0]
800034a2:	18 49       	or	r9,r12
800034a4:	91 09       	st.w	r8[0x0],r9

  return DACIFB_CONFIGURATION_ACCEPTED;
}
800034a6:	e3 cd 00 c0 	ldm	sp++,r6-r7
800034aa:	5e fc       	retal	r12
  dacifb->cfr |= ((p_dacifb_opt->low_power <<AVR32_DACIFB_CFR_LP_OFFSET)&AVR32_DACIFB_CFR_LP_MASK);

  // Enable DAC
  dacifb->cr |= AVR32_DACIFB_CR_EN_MASK;

  return DACIFB_CONFIGURATION_ACCEPTED;
800034ac:	e3 cd 00 c0 	ldm	sp++,r6-r7
800034b0:	5e fd       	retal	0

800034b2 <flashc_default_wait_until_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800034b2:	fe 6a 00 00 	mov	r10,-131072
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
800034b6:	30 09       	mov	r9,0
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800034b8:	74 28       	ld.w	r8,r10[0x8]
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
800034ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800034be:	f2 08 18 00 	cp.b	r8,r9
800034c2:	cf b0       	breq	800034b8 <flashc_default_wait_until_ready+0x6>
}
800034c4:	5e fc       	retal	r12
800034c6:	d7 03       	nop

800034c8 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800034c8:	eb cd 40 c0 	pushm	r6-r7,lr
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
800034cc:	e0 68 8a 40 	mov	r8,35392
800034d0:	ea 18 01 f7 	orh	r8,0x1f7
800034d4:	10 3c       	cp.w	r12,r8
800034d6:	e0 88 00 2a 	brls	8000352a <flashc_set_flash_waitstate_and_readmode+0x62>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800034da:	fe 67 00 00 	mov	r7,-131072
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800034de:	30 19       	mov	r9,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800034e0:	6e 08       	ld.w	r8,r7[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800034e2:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800034e6:	8f 08       	st.w	r7[0x0],r8
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
		// Set a wait-state
		flashc_set_wait_state(1);
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
800034e8:	e0 68 14 80 	mov	r8,5248
800034ec:	ea 18 03 ef 	orh	r8,0x3ef
800034f0:	10 3c       	cp.w	r12,r8
800034f2:	e0 8b 00 08 	brhi	80003502 <flashc_set_flash_waitstate_and_readmode+0x3a>

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800034f6:	49 26       	lddpc	r6,8000353c <flashc_set_flash_waitstate_and_readmode+0x74>
800034f8:	6c 08       	ld.w	r8,r6[0x0]
800034fa:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800034fc:	6e 18       	ld.w	r8,r7[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800034fe:	31 19       	mov	r9,17
80003500:	c0 68       	rjmp	8000350c <flashc_set_flash_waitstate_and_readmode+0x44>

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003502:	48 f6       	lddpc	r6,8000353c <flashc_set_flash_waitstate_and_readmode+0x74>
80003504:	6c 08       	ld.w	r8,r6[0x0]
80003506:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80003508:	6e 18       	ld.w	r8,r7[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8000350a:	31 09       	mov	r9,16
8000350c:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80003510:	3a 59       	mov	r9,-91
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80003512:	48 ca       	lddpc	r10,80003540 <flashc_set_flash_waitstate_and_readmode+0x78>
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80003514:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80003518:	8f 18       	st.w	r7[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8000351a:	6e 29       	ld.w	r9,r7[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8000351c:	e2 19 00 0c 	andl	r9,0xc,COH
	flashc_wait_until_ready();
80003520:	6c 08       	ld.w	r8,r6[0x0]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80003522:	95 09       	st.w	r10[0x0],r9
	flashc_wait_until_ready();
80003524:	5d 18       	icall	r8
80003526:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000352a:	fe 67 00 00 	mov	r7,-131072
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000352e:	30 09       	mov	r9,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003530:	6e 08       	ld.w	r8,r7[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003532:	48 36       	lddpc	r6,8000353c <flashc_set_flash_waitstate_and_readmode+0x74>


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003534:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80003538:	8f 08       	st.w	r7[0x0],r8
8000353a:	cd fb       	rjmp	800034f8 <flashc_set_flash_waitstate_and_readmode+0x30>
8000353c:	00 00       	add	r0,r0
8000353e:	01 dc       	ld.ub	r12,r0[0x5]
80003540:	00 00       	add	r0,r0
80003542:	07 28       	ld.uh	r8,r3++

80003544 <gpio_enable_module_pin>:
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80003544:	f8 08 16 05 	lsr	r8,r12,0x5
80003548:	a9 78       	lsl	r8,0x9
8000354a:	e0 28 e0 00 	sub	r8,57344

  // Enable the correct function.
  switch (function)
8000354e:	58 7b       	cp.w	r11,7
80003550:	e0 88 00 03 	brls	80003556 <gpio_enable_module_pin+0x12>
80003554:	5e ff       	retal	1
80003556:	4a 29       	lddpc	r9,800035dc <gpio_enable_module_pin+0x98>
80003558:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
    gpio_port->pmr1c = 1 << (pin & 0x1F);
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000355c:	30 19       	mov	r9,1
8000355e:	f2 0c 09 4c 	lsl	r12,r9,r12
80003562:	91 6c       	st.w	r8[0x18],r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80003564:	91 9c       	st.w	r8[0x24],r12
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80003566:	91 dc       	st.w	r8[0x34],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80003568:	91 2c       	st.w	r8[0x8],r12
8000356a:	5e fd       	retal	0
    gpio_port->pmr1s = 1 << (pin & 0x1F);
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000356c:	30 19       	mov	r9,1
8000356e:	f2 0c 09 4c 	lsl	r12,r9,r12
80003572:	91 5c       	st.w	r8[0x14],r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80003574:	91 9c       	st.w	r8[0x24],r12
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80003576:	91 dc       	st.w	r8[0x34],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80003578:	91 2c       	st.w	r8[0x8],r12
8000357a:	5e fd       	retal	0

  // Enable the correct function.
  switch (function)
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000357c:	30 19       	mov	r9,1
8000357e:	f2 0c 09 4c 	lsl	r12,r9,r12
80003582:	91 6c       	st.w	r8[0x18],r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80003584:	91 ac       	st.w	r8[0x28],r12
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80003586:	91 ec       	st.w	r8[0x38],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80003588:	91 2c       	st.w	r8[0x8],r12
8000358a:	5e fd       	retal	0
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000358c:	30 19       	mov	r9,1
8000358e:	f2 0c 09 4c 	lsl	r12,r9,r12
80003592:	91 5c       	st.w	r8[0x14],r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80003594:	91 ac       	st.w	r8[0x28],r12
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80003596:	91 ec       	st.w	r8[0x38],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80003598:	91 2c       	st.w	r8[0x8],r12
8000359a:	5e fd       	retal	0
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000359c:	30 19       	mov	r9,1
8000359e:	f2 0c 09 4c 	lsl	r12,r9,r12
800035a2:	91 6c       	st.w	r8[0x18],r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800035a4:	91 9c       	st.w	r8[0x24],r12
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800035a6:	91 ec       	st.w	r8[0x38],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800035a8:	91 2c       	st.w	r8[0x8],r12
800035aa:	5e fd       	retal	0
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800035ac:	30 19       	mov	r9,1
800035ae:	f2 0c 09 4c 	lsl	r12,r9,r12
800035b2:	91 5c       	st.w	r8[0x14],r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800035b4:	91 9c       	st.w	r8[0x24],r12
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800035b6:	91 ec       	st.w	r8[0x38],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800035b8:	91 2c       	st.w	r8[0x8],r12
800035ba:	5e fd       	retal	0
#endif
    break;

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800035bc:	30 19       	mov	r9,1
800035be:	f2 0c 09 4c 	lsl	r12,r9,r12
800035c2:	91 6c       	st.w	r8[0x18],r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800035c4:	91 ac       	st.w	r8[0x28],r12
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800035c6:	91 dc       	st.w	r8[0x34],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800035c8:	91 2c       	st.w	r8[0x8],r12
800035ca:	5e fd       	retal	0
    gpio_port->pmr1c = 1 << (pin & 0x1F);
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800035cc:	30 19       	mov	r9,1
800035ce:	f2 0c 09 4c 	lsl	r12,r9,r12
800035d2:	91 5c       	st.w	r8[0x14],r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800035d4:	91 ac       	st.w	r8[0x28],r12
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800035d6:	91 dc       	st.w	r8[0x34],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800035d8:	91 2c       	st.w	r8[0x8],r12
800035da:	5e fd       	retal	0
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	e2 00       	*unknown*

800035e0 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800035e0:	d4 21       	pushm	r4-r7,lr
800035e2:	18 97       	mov	r7,r12
800035e4:	16 94       	mov	r4,r11
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800035e6:	58 0b       	cp.w	r11,0
800035e8:	c0 e0       	breq	80003604 <gpio_enable_module+0x24>
800035ea:	30 06       	mov	r6,0
800035ec:	0c 95       	mov	r5,r6
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800035ee:	0f 9b       	ld.ub	r11,r7[0x1]
800035f0:	0f 8c       	ld.ub	r12,r7[0x0]
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800035f2:	2f f6       	sub	r6,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
800035f4:	2f e7       	sub	r7,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800035f6:	ca 7f       	rcall	80003544 <gpio_enable_module_pin>
800035f8:	18 45       	or	r5,r12
800035fa:	0c 34       	cp.w	r4,r6
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800035fc:	fe 9b ff f9 	brhi	800035ee <gpio_enable_module+0xe>
80003600:	0a 9c       	mov	r12,r5
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
80003602:	d8 22       	popm	r4-r7,pc
80003604:	16 95       	mov	r5,r11
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80003606:	cf db       	rjmp	80003600 <gpio_enable_module+0x20>

80003608 <gpio_get_pin_value>:
80003608:	f8 08 16 05 	lsr	r8,r12,0x5
8000360c:	a9 78       	lsl	r8,0x9
8000360e:	e0 28 e0 00 	sub	r8,57344
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80003612:	71 88       	ld.w	r8,r8[0x60]
80003614:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80003618:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000361c:	5e fc       	retal	r12

8000361e <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000361e:	30 18       	mov	r8,1
80003620:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80003624:	a5 9c       	lsr	r12,0x5
80003626:	a9 7c       	lsl	r12,0x9
80003628:	e0 2c e0 00 	sub	r12,57344
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000362c:	f9 48 00 54 	st.w	r12[84],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80003630:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80003634:	99 18       	st.w	r12[0x4],r8
}
80003636:	5e fc       	retal	r12

80003638 <gpio_clr_gpio_pin>:
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80003638:	30 18       	mov	r8,1
8000363a:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000363e:	a5 9c       	lsr	r12,0x5
80003640:	a9 7c       	lsl	r12,0x9
80003642:	e0 2c e0 00 	sub	r12,57344
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80003646:	f9 48 00 58 	st.w	r12[88],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000364a:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000364e:	99 18       	st.w	r12[0x4],r8
}
80003650:	5e fc       	retal	r12
80003652:	d7 03       	nop

80003654 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003654:	e0 68 00 83 	mov	r8,131
80003658:	f0 0c 01 0c 	sub	r12,r8,r12
8000365c:	fe 78 00 00 	mov	r8,-65536
80003660:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003664:	f2 ca ff c0 	sub	r10,r9,-64
80003668:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000366c:	58 0c       	cp.w	r12,0
8000366e:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003670:	48 68       	lddpc	r8,80003688 <_get_interrupt_handler+0x34>
80003672:	f8 0c 12 00 	clz	r12,r12
80003676:	f0 09 00 39 	add	r9,r8,r9<<0x3
8000367a:	f8 0c 11 1f 	rsub	r12,r12,31
8000367e:	72 18       	ld.w	r8,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003680:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003684:	5e fc       	retal	r12
80003686:	d7 03       	nop
80003688:	80 00       	ld.sh	r0,r0[0x0]
8000368a:	e2 20 78 48 	sub	r0,161864

8000368c <my_fast_SPI_write>:
#include <asf.h>
#include <my_misc_functions.h>

void my_fast_SPI_write(volatile avr32_spi_t *spi, uint16_t data,uint8_t pcs, uint8_t lastxfer)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
8000368c:	78 48       	ld.w	r8,r12[0x10]
8000368e:	ed b8 00 01 	bld	r8,0x1
80003692:	cf d1       	brne	8000368c <my_fast_SPI_write>
	spi->tdr = (data & 0x00FF) | (pcs << AVR32_SPI_TDR_PCS_OFFSET) | (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET); 
80003694:	5c 5b       	castu.b	r11
80003696:	f7 ea 11 0a 	or	r10,r11,r10<<0x10
8000369a:	f5 e9 11 89 	or	r9,r10,r9<<0x18
8000369e:	99 39       	st.w	r12[0xc],r9
}
800036a0:	5e fc       	retal	r12

800036a2 <my_delay>:
	while (!(spi->sr & AVR32_SPI_SR_RDRF_MASK));
	return spi->rdr;
}

void my_delay(volatile uint16_t count)	//rough time delay
{
800036a2:	20 2d       	sub	sp,8
800036a4:	ba 0c       	st.h	sp[0x0],r12
	for(volatile int16_t i=0;i<count;i++)
800036a6:	30 0b       	mov	r11,0
800036a8:	ba 3b       	st.h	sp[0x6],r11
800036aa:	9a 39       	ld.sh	r9,sp[0x6]
800036ac:	9a 08       	ld.sh	r8,sp[0x0]
800036ae:	5c 78       	castu.h	r8
800036b0:	10 39       	cp.w	r9,r8
800036b2:	c1 84       	brge	800036e2 <my_delay+0x40>
	{
		for(volatile int16_t j=0;j<5;j++)
800036b4:	30 49       	mov	r9,4
800036b6:	ba 2b       	st.h	sp[0x4],r11
800036b8:	9a 28       	ld.sh	r8,sp[0x4]
800036ba:	f2 08 19 00 	cp.h	r8,r9
800036be:	e0 89 00 0a 	brgt	800036d2 <my_delay+0x30>
800036c2:	9a 28       	ld.sh	r8,sp[0x4]
800036c4:	2f f8       	sub	r8,-1
800036c6:	ba 28       	st.h	sp[0x4],r8
800036c8:	9a 28       	ld.sh	r8,sp[0x4]
800036ca:	f2 08 19 00 	cp.h	r8,r9
800036ce:	fe 9a ff fa 	brle	800036c2 <my_delay+0x20>
	return spi->rdr;
}

void my_delay(volatile uint16_t count)	//rough time delay
{
	for(volatile int16_t i=0;i<count;i++)
800036d2:	9a 38       	ld.sh	r8,sp[0x6]
800036d4:	2f f8       	sub	r8,-1
800036d6:	ba 38       	st.h	sp[0x6],r8
800036d8:	9a 3a       	ld.sh	r10,sp[0x6]
800036da:	9a 08       	ld.sh	r8,sp[0x0]
800036dc:	5c 78       	castu.h	r8
800036de:	10 3a       	cp.w	r10,r8
800036e0:	ce b5       	brlt	800036b6 <my_delay+0x14>
		for(volatile int16_t j=0;j<5;j++)
		{
			
		}
	}
}
800036e2:	2f ed       	sub	sp,-8
800036e4:	5e fc       	retal	r12
800036e6:	d7 03       	nop

800036e8 <fnEnterAVRInterrupt>:
{
    unsigned long *ptrEventTable = (unsigned long *)EXCEPTION_VECTOR_BASE_ADDRESS; //start *ptr event table as EVBA
    unsigned long *ptrIntPriority = (unsigned long *)AVR32_INTC_ADDRESS;
    unsigned long ulGroupLocation;
    ptrIntPriority += iIntGroup;
    if (iIntGroup >= 3) {		//find offset of interrupt table entry relative to EVBA
800036e8:	58 2c       	cp.w	r12,2
800036ea:	e0 89 00 13 	brgt	80003710 <fnEnterAVRInterrupt+0x28>
        ulGroupLocation = (29 + ((iIntGroup - 3) * 2));
    }
    else {
        ulGroupLocation = ucGroupLocation[iIntGroup];
800036ee:	48 b8       	lddpc	r8,80003718 <fnEnterAVRInterrupt+0x30>
800036f0:	f0 0c 07 08 	ld.ub	r8,r8[r12]
    }
    ptrEventTable += ulGroupLocation;	
800036f4:	a3 68       	lsl	r8,0x2
    *ptrEventTable++ = LOAD_PC_WITH_NEXT_VALUE;
800036f6:	e0 69 d7 03 	mov	r9,55043
800036fa:	ea 19 48 1f 	orh	r9,0x481f
    *ptrEventTable = (unsigned long)InterruptFunc;
800036fe:	91 1a       	st.w	r8[0x4],r10
    }
    else {
        ulGroupLocation = ucGroupLocation[iIntGroup];
    }
    ptrEventTable += ulGroupLocation;	
    *ptrEventTable++ = LOAD_PC_WITH_NEXT_VALUE;
80003700:	91 09       	st.w	r8[0x0],r9
    *ptrEventTable = (unsigned long)InterruptFunc;
    *ptrIntPriority = (((unsigned long)ucIntLevel << 24) | ((ulGroupLocation) << 2));
80003702:	f1 eb 11 8b 	or	r11,r8,r11<<0x18
80003706:	a3 6c       	lsl	r12,0x2
80003708:	e0 3c 00 00 	sub	r12,65536
8000370c:	99 0b       	st.w	r12[0x0],r11
} 
8000370e:	5e fc       	retal	r12
    unsigned long *ptrEventTable = (unsigned long *)EXCEPTION_VECTOR_BASE_ADDRESS; //start *ptr event table as EVBA
    unsigned long *ptrIntPriority = (unsigned long *)AVR32_INTC_ADDRESS;
    unsigned long ulGroupLocation;
    ptrIntPriority += iIntGroup;
    if (iIntGroup >= 3) {		//find offset of interrupt table entry relative to EVBA
        ulGroupLocation = (29 + ((iIntGroup - 3) * 2));
80003710:	f8 08 15 01 	lsl	r8,r12,0x1
80003714:	2e 98       	sub	r8,-23
80003716:	ce fb       	rjmp	800036f4 <fnEnterAVRInterrupt+0xc>
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	e3 98       	*unknown*

8000371c <my_pdca_init_channel>:
    *ptrEventTable = (unsigned long)InterruptFunc;
    *ptrIntPriority = (((unsigned long)ucIntLevel << 24) | ((ulGroupLocation) << 2));
} 

void my_pdca_init_channel(uint32_t pdca_ch_number, uint32_t addr, uint32_t size, uint32_t pid,  uint32_t r_addr, uint32_t r_size, uint32_t transfer_size)
{
8000371c:	eb cd 40 10 	pushm	r4,lr
80003720:	fa c4 ff f8 	sub	r4,sp,-8
	volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];	
80003724:	a7 6c       	lsl	r12,0x6
    *ptrEventTable = (unsigned long)InterruptFunc;
    *ptrIntPriority = (((unsigned long)ucIntLevel << 24) | ((ulGroupLocation) << 2));
} 

void my_pdca_init_channel(uint32_t pdca_ch_number, uint32_t addr, uint32_t size, uint32_t pid,  uint32_t r_addr, uint32_t r_size, uint32_t transfer_size)
{
80003726:	68 1e       	ld.w	lr,r4[0x4]
	volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];	
80003728:	e2 3c 00 00 	sub	r12,196608
    *ptrEventTable = (unsigned long)InterruptFunc;
    *ptrIntPriority = (((unsigned long)ucIntLevel << 24) | ((ulGroupLocation) << 2));
} 

void my_pdca_init_channel(uint32_t pdca_ch_number, uint32_t addr, uint32_t size, uint32_t pid,  uint32_t r_addr, uint32_t r_size, uint32_t transfer_size)
{
8000372c:	68 04       	ld.w	r4,r4[0x0]
	volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];	
	pdca_channel->mar = addr;
8000372e:	99 0b       	st.w	r12[0x0],r11
  pdca_channel->tcr = size;
80003730:	99 2a       	st.w	r12[0x8],r10
  pdca_channel->psr = pid;
80003732:	99 19       	st.w	r12[0x4],r9
  pdca_channel->marr = r_addr;
80003734:	99 38       	st.w	r12[0xc],r8
  pdca_channel->tcrr = r_size;
80003736:	99 44       	st.w	r12[0x10],r4
  pdca_channel->mr =transfer_size << AVR32_PDCA_SIZE_OFFSET;
80003738:	99 6e       	st.w	r12[0x18],lr
  
8000373a:	e3 cd 80 10 	ldm	sp++,r4,pc

8000373e <AVR32_LowLevelInit>:
extern void _evba;
static const unsigned char ucGroupLocation[] = {18, 21, 25};
void AVR32_LowLevelInit(void)	
{
    EXCEPTION_TABLE *ptrEventTable = (EXCEPTION_TABLE *)EXCEPTION_VECTOR_BASE_ADDRESS; // place an event table at the start of RAM
    unsigned long *ulPtrEntries = &ptrEventTable->evUnrecoverableException;
8000373e:	30 08       	mov	r8,0
    int i = 0;
    while (i++ < (sizeof(EXCEPTION_TABLE)/sizeof(unsigned long))) {
        *ulPtrEntries++ = BRANCH_TO_SELF;                                // fill the event table with forever loops to catch unexpected exceptions
80003740:	fc 19 e0 8f 	movh	r9,0xe08f
80003744:	10 a9       	st.w	r8++,r9
void AVR32_LowLevelInit(void)	
{
    EXCEPTION_TABLE *ptrEventTable = (EXCEPTION_TABLE *)EXCEPTION_VECTOR_BASE_ADDRESS; // place an event table at the start of RAM
    unsigned long *ulPtrEntries = &ptrEventTable->evUnrecoverableException;
    int i = 0;
    while (i++ < (sizeof(EXCEPTION_TABLE)/sizeof(unsigned long))) {
80003746:	e0 48 01 dc 	cp.w	r8,476
8000374a:	cf d1       	brne	80003744 <AVR32_LowLevelInit+0x6>
        *ulPtrEntries++ = BRANCH_TO_SELF;                                // fill the event table with forever loops to catch unexpected exceptions
    }
	Set_system_register(AVR32_EVBA, EXCEPTION_VECTOR_BASE_ADDRESS);
8000374c:	30 08       	mov	r8,0
8000374e:	e3 b8 00 01 	mtsr	0x4,r8
}
80003752:	5e fc       	retal	r12

80003754 <my_SD_SPI_command>:
#define MMC_START_READ_BLOCK_SINGLE                   17
#define MMC_STARTBLOCK_READ_MULTI_TOKEN		0xFE
#define MMC_STOP_READ								12

uint8_t my_SD_SPI_command(uint8_t command, uint32_t arg)
{
80003754:	eb cd 40 c0 	pushm	r6-r7,lr
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003758:	fc 7a 18 00 	mov	r10,-190464
8000375c:	74 48       	ld.w	r8,r10[0x10]
8000375e:	fc 79 18 00 	mov	r9,-190464
80003762:	e2 18 00 02 	andl	r8,0x2,COH
80003766:	cf b0       	breq	8000375c <my_SD_SPI_command+0x8>
	spi->tdr =data;
80003768:	e0 68 00 ff 	mov	r8,255
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
8000376c:	12 9a       	mov	r10,r9
	spi->tdr =data;
8000376e:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003770:	74 48       	ld.w	r8,r10[0x10]
80003772:	fc 79 18 00 	mov	r9,-190464
80003776:	e2 18 00 02 	andl	r8,0x2,COH
8000377a:	cf b0       	breq	80003770 <my_SD_SPI_command+0x1c>
	spi->tdr =data;
8000377c:	18 98       	mov	r8,r12
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
8000377e:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003780:	a7 a8       	sbr	r8,0x6
80003782:	5c 58       	castu.b	r8
80003784:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003786:	74 48       	ld.w	r8,r10[0x10]
80003788:	fc 79 18 00 	mov	r9,-190464
8000378c:	e2 18 00 02 	andl	r8,0x2,COH
80003790:	cf b0       	breq	80003786 <my_SD_SPI_command+0x32>
	spi->tdr =data;
80003792:	f6 08 16 18 	lsr	r8,r11,0x18
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003796:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003798:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
8000379a:	74 48       	ld.w	r8,r10[0x10]
8000379c:	fc 79 18 00 	mov	r9,-190464
800037a0:	e2 18 00 02 	andl	r8,0x2,COH
800037a4:	cf b0       	breq	8000379a <my_SD_SPI_command+0x46>
	spi->tdr =data;
800037a6:	f1 db c2 08 	bfextu	r8,r11,0x10,0x8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800037aa:	12 9a       	mov	r10,r9
	spi->tdr =data;
800037ac:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800037ae:	74 48       	ld.w	r8,r10[0x10]
800037b0:	fc 79 18 00 	mov	r9,-190464
800037b4:	e2 18 00 02 	andl	r8,0x2,COH
800037b8:	cf b0       	breq	800037ae <my_SD_SPI_command+0x5a>
	spi->tdr =data;
800037ba:	f1 db c1 08 	bfextu	r8,r11,0x8,0x8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800037be:	12 9a       	mov	r10,r9
	spi->tdr =data;
800037c0:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800037c2:	74 48       	ld.w	r8,r10[0x10]
800037c4:	fc 79 18 00 	mov	r9,-190464
800037c8:	e2 18 00 02 	andl	r8,0x2,COH
800037cc:	cf b0       	breq	800037c2 <my_SD_SPI_command+0x6e>
	spi->tdr =data;
800037ce:	5c 5b       	castu.b	r11
800037d0:	93 3b       	st.w	r9[0xc],r11
  my_SD_SPI_write(SD_MMC_SPI, command | 0x40);  // send command
  my_SD_SPI_write(SD_MMC_SPI, arg>>24);         // send parameter
  my_SD_SPI_write(SD_MMC_SPI, arg>>16);
  my_SD_SPI_write(SD_MMC_SPI, arg>>8 );
  my_SD_SPI_write(SD_MMC_SPI, arg    );
  switch(command)
800037d2:	30 08       	mov	r8,0
800037d4:	f0 0c 18 00 	cp.b	r12,r8
800037d8:	c0 f0       	breq	800037f6 <my_SD_SPI_command+0xa2>
800037da:	30 88       	mov	r8,8
800037dc:	f0 0c 18 00 	cp.b	r12,r8
800037e0:	c1 50       	breq	8000380a <my_SD_SPI_command+0xb6>
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800037e2:	72 48       	ld.w	r8,r9[0x10]
800037e4:	ed b8 00 01 	bld	r8,0x1
800037e8:	cf d1       	brne	800037e2 <my_SD_SPI_command+0x8e>
	spi->tdr =data;
800037ea:	e0 69 00 ff 	mov	r9,255
800037ee:	fc 78 18 00 	mov	r8,-190464
800037f2:	91 39       	st.w	r8[0xc],r9
800037f4:	c1 48       	rjmp	8000381c <my_SD_SPI_command+0xc8>
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800037f6:	72 48       	ld.w	r8,r9[0x10]
800037f8:	ed b8 00 01 	bld	r8,0x1
800037fc:	cf d1       	brne	800037f6 <my_SD_SPI_command+0xa2>
	spi->tdr =data;
800037fe:	e0 69 00 95 	mov	r9,149
80003802:	fc 78 18 00 	mov	r8,-190464
80003806:	91 39       	st.w	r8[0xc],r9
  {
      case MMC_GO_IDLE_STATE:
         my_SD_SPI_write(SD_MMC_SPI, 0x95);
         break;
80003808:	c0 a8       	rjmp	8000381c <my_SD_SPI_command+0xc8>
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
8000380a:	72 48       	ld.w	r8,r9[0x10]
8000380c:	ed b8 00 01 	bld	r8,0x1
80003810:	cf d1       	brne	8000380a <my_SD_SPI_command+0xb6>
	spi->tdr =data;
80003812:	e0 69 00 87 	mov	r9,135
80003816:	fc 78 18 00 	mov	r8,-190464
8000381a:	91 39       	st.w	r8[0xc],r9

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
8000381c:	3f f8       	mov	r8,-1
8000381e:	49 16       	lddpc	r6,80003860 <my_SD_SPI_command+0x10c>
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003820:	fc 79 18 00 	mov	r9,-190464
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80003824:	10 97       	mov	r7,r8

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80003826:	ac 88       	st.b	r6[0x0],r8
80003828:	30 0a       	mov	r10,0
	spi->tdr =data;
8000382a:	e0 6e 00 ff 	mov	lr,255
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
8000382e:	12 9b       	mov	r11,r9
	spi->tdr =data;
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003830:	72 48       	ld.w	r8,r9[0x10]
80003832:	ed b8 00 01 	bld	r8,0x1
80003836:	cf d1       	brne	80003830 <my_SD_SPI_command+0xdc>
	spi->tdr =data;
80003838:	93 3e       	st.w	r9[0xc],lr
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
8000383a:	72 48       	ld.w	r8,r9[0x10]
8000383c:	ed b8 00 09 	bld	r8,0x9
80003840:	cf d1       	brne	8000383a <my_SD_SPI_command+0xe6>
	return spi->rdr;
80003842:	76 2c       	ld.w	r12,r11[0x8]
80003844:	5c 5c       	castu.b	r12
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80003846:	ee 0c 18 00 	cp.b	r12,r7
8000384a:	c0 71       	brne	80003858 <my_SD_SPI_command+0x104>
8000384c:	2f fa       	sub	r10,-1
  {
    retry++;
    if(retry > 10) break;
8000384e:	58 ba       	cp.w	r10,11
80003850:	cf 01       	brne	80003830 <my_SD_SPI_command+0xdc>
80003852:	ac 8c       	st.b	r6[0x0],r12
80003854:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80003858:	ac 8c       	st.b	r6[0x0],r12
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
8000385a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000385e:	d7 03       	nop
80003860:	00 00       	add	r0,r0
80003862:	0b 60       	ld.uh	r0,--r5

80003864 <my_sd_mmc_spi_wait_not_busy_noCS>:
  
  return true;
}

bool my_sd_mmc_spi_wait_not_busy_noCS(void)
{
80003864:	eb cd 40 e0 	pushm	r5-r7,lr
80003868:	30 07       	mov	r7,0
8000386a:	48 d5       	lddpc	r5,8000389c <my_sd_mmc_spi_wait_not_busy_noCS+0x38>
  uint32_t retry;
  // Select the SD_MMC memory gl_ptr_mem points to
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000386c:	3f f6       	mov	r6,-1
8000386e:	c0 58       	rjmp	80003878 <my_sd_mmc_spi_wait_not_busy_noCS+0x14>
80003870:	2f f7       	sub	r7,-1
  {
    retry++;
    if (retry == 200000)
80003872:	e2 57 0d 40 	cp.w	r7,200000
80003876:	c0 b0       	breq	8000388c <my_sd_mmc_spi_wait_not_busy_noCS+0x28>
bool my_sd_mmc_spi_wait_not_busy_noCS(void)
{
  uint32_t retry;
  // Select the SD_MMC memory gl_ptr_mem points to
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003878:	e0 6c 00 ff 	mov	r12,255
8000387c:	fe b0 f4 50 	rcall	8000211c <sd_mmc_spi_send_and_read>
80003880:	aa 8c       	st.b	r5[0x0],r12
80003882:	ec 0c 18 00 	cp.b	r12,r6
80003886:	cf 51       	brne	80003870 <my_sd_mmc_spi_wait_not_busy_noCS+0xc>
80003888:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000388c:	30 0b       	mov	r11,0
8000388e:	fc 7c 18 00 	mov	r12,-190464
80003892:	e0 a0 16 61 	rcall	80006554 <spi_unselectChip>
80003896:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000389a:	d7 03       	nop
8000389c:	00 00       	add	r0,r0
8000389e:	0b 60       	ld.uh	r0,--r5

800038a0 <my_SD_read_experiment_PDCA>:
800038a0:	eb cd 40 fe 	pushm	r1-r7,lr
800038a4:	18 97       	mov	r7,r12
800038a6:	16 96       	mov	r6,r11

  return true;   // Read done.
}

bool my_SD_read_experiment_PDCA(uint32_t SD_addr, uint32_t exp_addr, uint32_t bank_addr, uint32_t exp_size, uint8_t totalblocks)
{
800038a8:	14 95       	mov	r5,r10
800038aa:	12 94       	mov	r4,r9
800038ac:	10 93       	mov	r3,r8
    uint16_t  read_time_out;
	if (false == sd_mmc_spi_wait_not_busy())
800038ae:	fe b0 f4 4d 	rcall	80002148 <sd_mmc_spi_wait_not_busy>
800038b2:	c0 31       	brne	800038b8 <my_SD_read_experiment_PDCA+0x18>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  return true;   // Read done.
}
800038b4:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
    uint16_t  read_time_out;
	if (false == sd_mmc_spi_wait_not_busy())
    return false;
	
	spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800038b8:	30 0b       	mov	r11,0
800038ba:	fc 7c 18 00 	mov	r12,-190464
800038be:	e0 a0 16 23 	rcall	80006504 <spi_selectChip>
	
	 if(card_type == SD_CARD_2_SDHC) {
800038c2:	4c 58       	lddpc	r8,800039d4 <my_SD_read_experiment_PDCA+0x134>
800038c4:	11 89       	ld.ub	r9,r8[0x0]
800038c6:	30 38       	mov	r8,3
800038c8:	f0 09 18 00 	cp.b	r9,r8
800038cc:	c7 b0       	breq	800039c2 <my_SD_read_experiment_PDCA+0x122>
    r1 = sd_mmc_spi_command(MMC_START_READ_BLOCK_MULTI, SD_addr>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_START_READ_BLOCK_MULTI, SD_addr);
800038ce:	0e 9b       	mov	r11,r7
800038d0:	31 2c       	mov	r12,18
800038d2:	4c 27       	lddpc	r7,800039d8 <my_SD_read_experiment_PDCA+0x138>
800038d4:	fe b0 f4 70 	rcall	800021b4 <sd_mmc_spi_command>
800038d8:	ae 8c       	st.b	r7[0x0],r12
  }
  
   if (r1 != 0x00)
800038da:	58 0c       	cp.w	r12,0
800038dc:	c6 c1       	brne	800039b4 <my_SD_read_experiment_PDCA+0x114>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  
	pdca_disable(SPI0_RX_PDCA_CHANNEL);
800038de:	30 1c       	mov	r12,1
800038e0:	e0 a0 06 fe 	rcall	800046dc <pdca_disable>
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].mar=exp_addr;
800038e4:	fc 78 00 00 	mov	r8,-196608
800038e8:	f1 46 00 40 	st.w	r8[64],r6
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].tcr=exp_size;
800038ec:	f1 44 00 48 	st.w	r8[72],r4
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].marr=bank_addr;
800038f0:	f1 45 00 4c 	st.w	r8[76],r5
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].tcrr=(totalblocks*512-exp_size);
800038f4:	e6 09 15 09 	lsl	r9,r3,0x9
800038f8:	f2 04 01 04 	sub	r4,r9,r4
800038fc:	f1 44 00 50 	st.w	r8[80],r4
	
while(totalblocks)
80003900:	58 03       	cp.w	r3,0
80003902:	c4 80       	breq	80003992 <my_SD_read_experiment_PDCA+0xf2>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  
	pdca_enable(SPI0_RX_PDCA_CHANNEL);
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=(uint32_t)(&dummyblock[0]); //initialize SPI0 to write from dummy block
80003904:	10 95       	mov	r5,r8
	
while(totalblocks)
{
  
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003906:	3f f6       	mov	r6,-1
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80003908:	3f e2       	mov	r2,-2
	pdca_enable(SPI0_RX_PDCA_CHANNEL);
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=(uint32_t)(&dummyblock[0]); //initialize SPI0 to write from dummy block
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].tcr=512;
	pdca_enable(SPI0_TX_PDCA_CHANNEL);
	while((AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].isr & AVR32_PDCA_TRC_MASK) == 0x0000); //wait for block write to complete
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
8000390a:	fc 74 18 00 	mov	r4,-190464
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
       return false;
8000390e:	30 01       	mov	r1,0
80003910:	c0 58       	rjmp	8000391a <my_SD_read_experiment_PDCA+0x7a>
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].mar=exp_addr;
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].tcr=exp_size;
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].marr=bank_addr;
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].tcrr=(totalblocks*512-exp_size);
	
while(totalblocks)
80003912:	2f f1       	sub	r1,-1
  
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
80003914:	e0 41 75 30 	cp.w	r1,30000
80003918:	c4 e0       	breq	800039b4 <my_SD_read_experiment_PDCA+0x114>
	
while(totalblocks)
{
  
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000391a:	e0 6c 00 ff 	mov	r12,255
8000391e:	fe b0 f3 ff 	rcall	8000211c <sd_mmc_spi_send_and_read>
80003922:	ae 8c       	st.b	r7[0x0],r12
80003924:	ec 0c 18 00 	cp.b	r12,r6
80003928:	cf 50       	breq	80003912 <my_SD_read_experiment_PDCA+0x72>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000392a:	e4 0c 18 00 	cp.b	r12,r2
8000392e:	c3 d1       	brne	800039a8 <my_SD_read_experiment_PDCA+0x108>
    spi_write(SD_MMC_SPI,0xFF);
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  
	pdca_enable(SPI0_RX_PDCA_CHANNEL);
80003930:	30 1c       	mov	r12,1
80003932:	e0 a0 06 e2 	rcall	800046f6 <pdca_enable>
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=(uint32_t)(&dummyblock[0]); //initialize SPI0 to write from dummy block
80003936:	4a a8       	lddpc	r8,800039dc <my_SD_read_experiment_PDCA+0x13c>
80003938:	eb 48 00 80 	st.w	r5[128],r8
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].tcr=512;
8000393c:	e0 68 02 00 	mov	r8,512
	pdca_enable(SPI0_TX_PDCA_CHANNEL);
80003940:	30 2c       	mov	r12,2
    return false;
  }
  
	pdca_enable(SPI0_RX_PDCA_CHANNEL);
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=(uint32_t)(&dummyblock[0]); //initialize SPI0 to write from dummy block
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].tcr=512;
80003942:	eb 48 00 88 	st.w	r5[136],r8
	pdca_enable(SPI0_TX_PDCA_CHANNEL);
80003946:	e0 a0 06 d8 	rcall	800046f6 <pdca_enable>
	while((AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].isr & AVR32_PDCA_TRC_MASK) == 0x0000); //wait for block write to complete
8000394a:	ea f8 00 ac 	ld.w	r8,r5[172]
8000394e:	ed b8 00 01 	bld	r8,0x1
80003952:	cf c1       	brne	8000394a <my_SD_read_experiment_PDCA+0xaa>
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003954:	68 48       	ld.w	r8,r4[0x10]
80003956:	ed b8 00 09 	bld	r8,0x9
8000395a:	cf d1       	brne	80003954 <my_SD_read_experiment_PDCA+0xb4>
	bank_addr+=512;
	pdca_disable(SPI0_RX_PDCA_CHANNEL);
8000395c:	30 1c       	mov	r12,1
8000395e:	e0 a0 06 bf 	rcall	800046dc <pdca_disable>
	pdca_disable(SPI0_TX_PDCA_CHANNEL);
80003962:	30 2c       	mov	r12,2
80003964:	e0 a0 06 bc 	rcall	800046dc <pdca_disable>
  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80003968:	e0 6b 00 ff 	mov	r11,255
8000396c:	fc 7c 18 00 	mov	r12,-190464
80003970:	e0 a0 16 62 	rcall	80006634 <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80003974:	e0 6b 00 ff 	mov	r11,255
80003978:	fc 7c 18 00 	mov	r12,-190464
8000397c:	e0 a0 16 5c 	rcall	80006634 <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80003980:	e0 6b 00 ff 	mov	r11,255
80003984:	fc 7c 18 00 	mov	r12,-190464
  totalblocks--;
80003988:	20 13       	sub	r3,1
  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
  spi_write(SD_MMC_SPI,0xFF);

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
8000398a:	e0 a0 16 55 	rcall	80006634 <spi_write>
  totalblocks--;
8000398e:	5c 53       	castu.b	r3
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].mar=exp_addr;
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].tcr=exp_size;
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].marr=bank_addr;
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].tcrr=(totalblocks*512-exp_size);
	
while(totalblocks)
80003990:	cb f1       	brne	8000390e <my_SD_read_experiment_PDCA+0x6e>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
  totalblocks--;
}  
  sd_mmc_spi_command(MMC_STOP_READ, 0);  //for some reason, R1b from this always is 0x7F, all error flags are set!  not sure why...
80003992:	30 0b       	mov	r11,0
80003994:	30 cc       	mov	r12,12
80003996:	fe b0 f4 0f 	rcall	800021b4 <sd_mmc_spi_command>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000399a:	30 0b       	mov	r11,0
8000399c:	fc 7c 18 00 	mov	r12,-190464
800039a0:	e0 a0 15 da 	rcall	80006554 <spi_unselectChip>
800039a4:	30 1c       	mov	r12,1

  return true;   // Read done.
800039a6:	c8 7b       	rjmp	800038b4 <my_SD_read_experiment_PDCA+0x14>
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
  {
    spi_write(SD_MMC_SPI,0xFF);
800039a8:	e0 6b 00 ff 	mov	r11,255
800039ac:	fc 7c 18 00 	mov	r12,-190464
800039b0:	e0 a0 16 42 	rcall	80006634 <spi_write>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800039b4:	30 0b       	mov	r11,0
800039b6:	fc 7c 18 00 	mov	r12,-190464
800039ba:	e0 a0 15 cd 	rcall	80006554 <spi_unselectChip>
800039be:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
	
	spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	
	 if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_START_READ_BLOCK_MULTI, SD_addr>>9);
800039c2:	ee 0b 16 09 	lsr	r11,r7,0x9
800039c6:	31 2c       	mov	r12,18
800039c8:	48 47       	lddpc	r7,800039d8 <my_SD_read_experiment_PDCA+0x138>
800039ca:	fe b0 f3 f5 	rcall	800021b4 <sd_mmc_spi_command>
800039ce:	ae 8c       	st.b	r7[0x0],r12
800039d0:	c8 5b       	rjmp	800038da <my_SD_read_experiment_PDCA+0x3a>
800039d2:	d7 03       	nop
800039d4:	00 00       	add	r0,r0
800039d6:	0b 4e       	ld.w	lr,--r5
800039d8:	00 00       	add	r0,r0
800039da:	0b 60       	ld.uh	r0,--r5
800039dc:	00 00       	add	r0,r0
800039de:	93 7c       	st.w	r9[0x1c],r12

800039e0 <my_SD_read_multiblock_PDCA>:
800039e0:	d4 31       	pushm	r0-r7,lr
800039e2:	18 96       	mov	r6,r12
800039e4:	16 97       	mov	r7,r11
800039e6:	14 92       	mov	r2,r10
800039e8:	fe b0 f3 b0 	rcall	80002148 <sd_mmc_spi_wait_not_busy>
800039ec:	c0 21       	brne	800039f0 <my_SD_read_multiblock_PDCA+0x10>
800039ee:	d8 32       	popm	r0-r7,pc
800039f0:	30 0b       	mov	r11,0
800039f2:	fc 7c 18 00 	mov	r12,-190464
800039f6:	e0 a0 15 87 	rcall	80006504 <spi_selectChip>
800039fa:	4c 18       	lddpc	r8,80003afc <my_SD_read_multiblock_PDCA+0x11c>
800039fc:	11 89       	ld.ub	r9,r8[0x0]
800039fe:	30 38       	mov	r8,3
	if (false == sd_mmc_spi_wait_not_busy())
    return false;
	
	spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	
	 if(card_type == SD_CARD_2_SDHC) {
80003a00:	f0 09 18 00 	cp.b	r9,r8
80003a04:	c6 90       	breq	80003ad6 <my_SD_read_multiblock_PDCA+0xf6>
    r1 = sd_mmc_spi_command(MMC_START_READ_BLOCK_MULTI, SD_addr>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_START_READ_BLOCK_MULTI, SD_addr);
80003a06:	0c 9b       	mov	r11,r6
80003a08:	31 2c       	mov	r12,18
80003a0a:	4b e6       	lddpc	r6,80003b00 <my_SD_read_multiblock_PDCA+0x120>
80003a0c:	fe b0 f3 d4 	rcall	800021b4 <sd_mmc_spi_command>
80003a10:	ac 8c       	st.b	r6[0x0],r12
  }
  
   if (r1 != 0x00)
80003a12:	58 0c       	cp.w	r12,0
80003a14:	c5 b1       	brne	80003aca <my_SD_read_multiblock_PDCA+0xea>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  
while(totalblocks)
80003a16:	58 02       	cp.w	r2,0
80003a18:	c6 70       	breq	80003ae6 <my_SD_read_multiblock_PDCA+0x106>
{
  
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003a1a:	3f f5       	mov	r5,-1
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80003a1c:	3f e1       	mov	r1,-2
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  
	pdca_disable(SPI0_RX_PDCA_CHANNEL);
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].mar=bank_addr;
80003a1e:	fc 74 00 00 	mov	r4,-196608
	
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=(uint32_t)(&dummyblock[0]); //initialize SPI0 to write from dummy block
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].tcr=512;
	pdca_enable(SPI0_TX_PDCA_CHANNEL);
	while((AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].isr & AVR32_PDCA_TRC_MASK) == 0x0000); //wait for block write to complete
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003a22:	fc 73 18 00 	mov	r3,-190464
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
       return false;
80003a26:	30 00       	mov	r0,0
80003a28:	c0 58       	rjmp	80003a32 <my_SD_read_multiblock_PDCA+0x52>
  }
  
   if (r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
80003a2a:	2f f0       	sub	r0,-1
  
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
80003a2c:	e0 40 75 30 	cp.w	r0,30000
80003a30:	c4 d0       	breq	80003aca <my_SD_read_multiblock_PDCA+0xea>
  
while(totalblocks)
{
  
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003a32:	e0 6c 00 ff 	mov	r12,255
80003a36:	fe b0 f3 73 	rcall	8000211c <sd_mmc_spi_send_and_read>
80003a3a:	ac 8c       	st.b	r6[0x0],r12
80003a3c:	ea 0c 18 00 	cp.b	r12,r5
80003a40:	cf 50       	breq	80003a2a <my_SD_read_multiblock_PDCA+0x4a>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80003a42:	e2 0c 18 00 	cp.b	r12,r1
80003a46:	c3 c1       	brne	80003abe <my_SD_read_multiblock_PDCA+0xde>
    spi_write(SD_MMC_SPI,0xFF);
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  
	pdca_disable(SPI0_RX_PDCA_CHANNEL);
80003a48:	30 1c       	mov	r12,1
80003a4a:	e0 a0 06 49 	rcall	800046dc <pdca_disable>
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].mar=bank_addr;
80003a4e:	e9 47 00 40 	st.w	r4[64],r7
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].tcr=MMC_SECTOR_SIZE;
80003a52:	e0 60 02 00 	mov	r0,512
	pdca_enable(SPI0_RX_PDCA_CHANNEL);
80003a56:	30 1c       	mov	r12,1
    return false;
  }
  
	pdca_disable(SPI0_RX_PDCA_CHANNEL);
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].mar=bank_addr;
	AVR32_PDCA.channel[SPI0_RX_PDCA_CHANNEL].tcr=MMC_SECTOR_SIZE;
80003a58:	e9 40 00 48 	st.w	r4[72],r0
	pdca_enable(SPI0_RX_PDCA_CHANNEL);
80003a5c:	e0 a0 06 4d 	rcall	800046f6 <pdca_enable>
	
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=(uint32_t)(&dummyblock[0]); //initialize SPI0 to write from dummy block
80003a60:	4a 98       	lddpc	r8,80003b04 <my_SD_read_multiblock_PDCA+0x124>
80003a62:	e9 48 00 80 	st.w	r4[128],r8
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].tcr=512;
80003a66:	e9 40 00 88 	st.w	r4[136],r0
	pdca_enable(SPI0_TX_PDCA_CHANNEL);
80003a6a:	30 2c       	mov	r12,2
80003a6c:	e0 a0 06 45 	rcall	800046f6 <pdca_enable>
	while((AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].isr & AVR32_PDCA_TRC_MASK) == 0x0000); //wait for block write to complete
80003a70:	e8 f8 00 ac 	ld.w	r8,r4[172]
80003a74:	ed b8 00 01 	bld	r8,0x1
80003a78:	cf c1       	brne	80003a70 <my_SD_read_multiblock_PDCA+0x90>
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003a7a:	66 48       	ld.w	r8,r3[0x10]
80003a7c:	ed b8 00 09 	bld	r8,0x9
80003a80:	cf d1       	brne	80003a7a <my_SD_read_multiblock_PDCA+0x9a>
	bank_addr+=512;
	pdca_disable(SPI0_RX_PDCA_CHANNEL);
80003a82:	30 1c       	mov	r12,1
80003a84:	e0 a0 06 2c 	rcall	800046dc <pdca_disable>
	pdca_disable(SPI0_TX_PDCA_CHANNEL);
80003a88:	30 2c       	mov	r12,2
80003a8a:	e0 a0 06 29 	rcall	800046dc <pdca_disable>
  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80003a8e:	e0 6b 00 ff 	mov	r11,255
80003a92:	fc 7c 18 00 	mov	r12,-190464
80003a96:	e0 a0 15 cf 	rcall	80006634 <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80003a9a:	e0 6b 00 ff 	mov	r11,255
80003a9e:	fc 7c 18 00 	mov	r12,-190464
80003aa2:	e0 a0 15 c9 	rcall	80006634 <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80003aa6:	e0 6b 00 ff 	mov	r11,255
80003aaa:	fc 7c 18 00 	mov	r12,-190464
  totalblocks--;
80003aae:	20 12       	sub	r2,1
  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
  spi_write(SD_MMC_SPI,0xFF);

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80003ab0:	e0 a0 15 c2 	rcall	80006634 <spi_write>
  totalblocks--;
80003ab4:	5c 52       	castu.b	r2
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  
while(totalblocks)
80003ab6:	c1 80       	breq	80003ae6 <my_SD_read_multiblock_PDCA+0x106>
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=(uint32_t)(&dummyblock[0]); //initialize SPI0 to write from dummy block
	AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].tcr=512;
	pdca_enable(SPI0_TX_PDCA_CHANNEL);
	while((AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].isr & AVR32_PDCA_TRC_MASK) == 0x0000); //wait for block write to complete
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
	bank_addr+=512;
80003ab8:	ee c7 fe 00 	sub	r7,r7,-512
80003abc:	cb 5b       	rjmp	80003a26 <my_SD_read_multiblock_PDCA+0x46>
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
  {
    spi_write(SD_MMC_SPI,0xFF);
80003abe:	e0 6b 00 ff 	mov	r11,255
80003ac2:	fc 7c 18 00 	mov	r12,-190464
80003ac6:	e0 a0 15 b7 	rcall	80006634 <spi_write>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003aca:	30 0b       	mov	r11,0
80003acc:	fc 7c 18 00 	mov	r12,-190464
80003ad0:	e0 a0 15 42 	rcall	80006554 <spi_unselectChip>
80003ad4:	d8 3a       	popm	r0-r7,pc,r12=0
    return false;
	
	spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	
	 if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_START_READ_BLOCK_MULTI, SD_addr>>9);
80003ad6:	ec 0b 16 09 	lsr	r11,r6,0x9
80003ada:	31 2c       	mov	r12,18
80003adc:	48 96       	lddpc	r6,80003b00 <my_SD_read_multiblock_PDCA+0x120>
80003ade:	fe b0 f3 6b 	rcall	800021b4 <sd_mmc_spi_command>
80003ae2:	ac 8c       	st.b	r6[0x0],r12
80003ae4:	c9 7b       	rjmp	80003a12 <my_SD_read_multiblock_PDCA+0x32>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
  totalblocks--;
}  
  sd_mmc_spi_command(MMC_STOP_READ, 0);  //for some reason, R1b from this always is 0x7F, all error flags are set!  not sure why...
80003ae6:	30 0b       	mov	r11,0
80003ae8:	30 cc       	mov	r12,12
80003aea:	fe b0 f3 65 	rcall	800021b4 <sd_mmc_spi_command>
  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003aee:	30 0b       	mov	r11,0
80003af0:	fc 7c 18 00 	mov	r12,-190464
80003af4:	e0 a0 15 30 	rcall	80006554 <spi_unselectChip>
80003af8:	30 1c       	mov	r12,1

  return true;   // Read done.
80003afa:	c7 ab       	rjmp	800039ee <my_SD_read_multiblock_PDCA+0xe>
80003afc:	00 00       	add	r0,r0
80003afe:	0b 4e       	ld.w	lr,--r5
80003b00:	00 00       	add	r0,r0
80003b02:	0b 60       	ld.uh	r0,--r5
80003b04:	00 00       	add	r0,r0
80003b06:	93 7c       	st.w	r9[0x1c],r12

80003b08 <my_SD_SPI_block_write_multi>:
80003b08:	d4 31       	pushm	r0-r7,lr
80003b0a:	20 1d       	sub	sp,4
80003b0c:	fc 78 18 00 	mov	r8,-190464
80003b10:	70 19       	ld.w	r9,r8[0x4]
80003b12:	b1 c9       	cbr	r9,0x10
80003b14:	91 19       	st.w	r8[0x4],r9
80003b16:	fe f9 03 0e 	ld.w	r9,pc[782]
80003b1a:	14 90       	mov	r0,r10
80003b1c:	13 8a       	ld.ub	r10,r9[0x0]
80003b1e:	30 39       	mov	r9,3
80003b20:	f2 0a 18 00 	cp.b	r10,r9
80003b24:	e0 80 01 02 	breq	80003d28 <my_SD_SPI_block_write_multi+0x220>
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b28:	70 49       	ld.w	r9,r8[0x10]
80003b2a:	fc 7a 18 00 	mov	r10,-190464
80003b2e:	e2 19 00 02 	andl	r9,0x2,COH
80003b32:	cf b0       	breq	80003b28 <my_SD_SPI_block_write_multi+0x20>
	spi->tdr =data;
80003b34:	e0 68 00 ff 	mov	r8,255
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b38:	14 97       	mov	r7,r10
	spi->tdr =data;
80003b3a:	95 38       	st.w	r10[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b3c:	6e 48       	ld.w	r8,r7[0x10]
80003b3e:	fc 79 18 00 	mov	r9,-190464
80003b42:	e2 18 00 02 	andl	r8,0x2,COH
80003b46:	cf b0       	breq	80003b3c <my_SD_SPI_block_write_multi+0x34>
	spi->tdr =data;
80003b48:	35 98       	mov	r8,89
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b4a:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003b4c:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b4e:	74 48       	ld.w	r8,r10[0x10]
80003b50:	fc 79 18 00 	mov	r9,-190464
80003b54:	e2 18 00 02 	andl	r8,0x2,COH
80003b58:	cf b0       	breq	80003b4e <my_SD_SPI_block_write_multi+0x46>
	spi->tdr =data;
80003b5a:	f6 08 16 18 	lsr	r8,r11,0x18
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b5e:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003b60:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b62:	74 48       	ld.w	r8,r10[0x10]
80003b64:	fc 79 18 00 	mov	r9,-190464
80003b68:	e2 18 00 02 	andl	r8,0x2,COH
80003b6c:	cf b0       	breq	80003b62 <my_SD_SPI_block_write_multi+0x5a>
	spi->tdr =data;
80003b6e:	f1 db c2 08 	bfextu	r8,r11,0x10,0x8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b72:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003b74:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b76:	74 48       	ld.w	r8,r10[0x10]
80003b78:	fc 79 18 00 	mov	r9,-190464
80003b7c:	e2 18 00 02 	andl	r8,0x2,COH
80003b80:	cf b0       	breq	80003b76 <my_SD_SPI_block_write_multi+0x6e>
	spi->tdr =data;
80003b82:	f1 db c1 08 	bfextu	r8,r11,0x8,0x8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b86:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003b88:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b8a:	74 48       	ld.w	r8,r10[0x10]
80003b8c:	fc 79 18 00 	mov	r9,-190464
80003b90:	e2 18 00 02 	andl	r8,0x2,COH
80003b94:	cf b0       	breq	80003b8a <my_SD_SPI_block_write_multi+0x82>
	spi->tdr =data;
80003b96:	5c 5b       	castu.b	r11
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b98:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003b9a:	93 3b       	st.w	r9[0xc],r11
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003b9c:	74 48       	ld.w	r8,r10[0x10]
80003b9e:	fc 79 18 00 	mov	r9,-190464
80003ba2:	e2 18 00 02 	andl	r8,0x2,COH
80003ba6:	cf b0       	breq	80003b9c <my_SD_SPI_block_write_multi+0x94>
	spi->tdr =data;
80003ba8:	e0 68 00 ff 	mov	r8,255
80003bac:	93 38       	st.w	r9[0xc],r8
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
	spi->tdr =data;
80003bae:	10 96       	mov	r6,r8

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80003bb0:	fe f5 02 78 	ld.w	r5,pc[632]
80003bb4:	3f f8       	mov	r8,-1
80003bb6:	30 0a       	mov	r10,0
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80003bb8:	10 97       	mov	r7,r8

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80003bba:	aa 88       	st.b	r5[0x0],r8
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003bbc:	12 9b       	mov	r11,r9
	spi->tdr =data;
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003bbe:	72 48       	ld.w	r8,r9[0x10]
80003bc0:	ed b8 00 01 	bld	r8,0x1
80003bc4:	cf d1       	brne	80003bbe <my_SD_SPI_block_write_multi+0xb6>
	spi->tdr =data;
80003bc6:	93 36       	st.w	r9[0xc],r6
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003bc8:	72 48       	ld.w	r8,r9[0x10]
80003bca:	ed b8 00 09 	bld	r8,0x9
80003bce:	cf d1       	brne	80003bc8 <my_SD_SPI_block_write_multi+0xc0>
	return spi->rdr;
80003bd0:	76 28       	ld.w	r8,r11[0x8]
80003bd2:	5c 58       	castu.b	r8
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80003bd4:	ee 08 18 00 	cp.b	r8,r7
80003bd8:	c0 41       	brne	80003be0 <my_SD_SPI_block_write_multi+0xd8>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80003bda:	2f fa       	sub	r10,-1
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
  {
    retry++;
    if(retry > 10) break;
80003bdc:	58 ba       	cp.w	r10,11
80003bde:	cf 01       	brne	80003bbe <my_SD_SPI_block_write_multi+0xb6>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80003be0:	aa 88       	st.b	r5[0x0],r8
	
	my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	if(card_type == SD_CARD_2_SDHC) {
    r1 = my_SD_SPI_command(MMC_START_WRITE_BLOCK_MULTI , addr>>9);
  } else {
    r1 = my_SD_SPI_command(MMC_START_WRITE_BLOCK_MULTI , addr);
80003be2:	aa 88       	st.b	r5[0x0],r8
  }
  
  if(r1 != 0x00)
80003be4:	58 08       	cp.w	r8,0
80003be6:	e0 81 00 96 	brne	80003d12 <my_SD_SPI_block_write_multi+0x20a>
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003bea:	fc 79 18 00 	mov	r9,-190464
80003bee:	72 48       	ld.w	r8,r9[0x10]
80003bf0:	fc 77 18 00 	mov	r7,-190464
80003bf4:	e2 18 00 02 	andl	r8,0x2,COH
80003bf8:	cf b0       	breq	80003bee <my_SD_SPI_block_write_multi+0xe6>
	spi->tdr =data;
80003bfa:	e0 62 00 ff 	mov	r2,255
80003bfe:	8f 32       	st.w	r7[0xc],r2
    my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;
  }
  my_SD_SPI_write(SD_MMC_SPI, 0xFF); 
  
  for(uint16_t i=0;i<Nblocks;i++)
80003c00:	58 00       	cp.w	r0,0
80003c02:	c6 10       	breq	80003cc4 <my_SD_SPI_block_write_multi+0x1bc>
  return r1;
}

bool my_SD_SPI_block_write_multi(const void *ram, uint32_t addr, uint32_t Nblocks)
{
	const uint8_t *_ram = ram;
80003c04:	18 91       	mov	r1,r12
80003c06:	30 03       	mov	r3,0
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003c08:	0e 96       	mov	r6,r7
bool my_sd_mmc_spi_wait_not_busy_noCS(void)
{
  uint32_t retry;
  // Select the SD_MMC memory gl_ptr_mem points to
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003c0a:	3f f4       	mov	r4,-1
80003c0c:	6e 48       	ld.w	r8,r7[0x10]
80003c0e:	ed b8 00 01 	bld	r8,0x1
80003c12:	cf d1       	brne	80003c0c <my_SD_SPI_block_write_multi+0x104>
	spi->tdr =data;
80003c14:	e0 69 00 fc 	mov	r9,252
80003c18:	8f 39       	st.w	r7[0xc],r9
80003c1a:	02 99       	mov	r9,r1
80003c1c:	e2 c1 fe 00 	sub	r1,r1,-512
  {
	  my_SD_SPI_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE_MULTI_TOKEN);
	 // write data
	 for(uint16_t j=0;j<MMC_SECTOR_SIZE;j++)
	{
		my_SD_SPI_write(SD_MMC_SPI,*_ram++);
80003c20:	13 3a       	ld.ub	r10,r9++
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003c22:	6e 48       	ld.w	r8,r7[0x10]
80003c24:	ed b8 00 01 	bld	r8,0x1
80003c28:	cf d1       	brne	80003c22 <my_SD_SPI_block_write_multi+0x11a>
	spi->tdr =data;
80003c2a:	8d 3a       	st.w	r6[0xc],r10
  
  for(uint16_t i=0;i<Nblocks;i++)
  {
	  my_SD_SPI_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE_MULTI_TOKEN);
	 // write data
	 for(uint16_t j=0;j<MMC_SECTOR_SIZE;j++)
80003c2c:	02 39       	cp.w	r9,r1
80003c2e:	cf 91       	brne	80003c20 <my_SD_SPI_block_write_multi+0x118>
80003c30:	12 91       	mov	r1,r9
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003c32:	6e 48       	ld.w	r8,r7[0x10]
80003c34:	ed b8 00 01 	bld	r8,0x1
80003c38:	cf d1       	brne	80003c32 <my_SD_SPI_block_write_multi+0x12a>
	spi->tdr =data;
80003c3a:	8d 32       	st.w	r6[0xc],r2
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003c3c:	6e 48       	ld.w	r8,r7[0x10]
80003c3e:	ed b8 00 01 	bld	r8,0x1
80003c42:	cf d1       	brne	80003c3c <my_SD_SPI_block_write_multi+0x134>
	spi->tdr =data;
80003c44:	8d 32       	st.w	r6[0xc],r2
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003c46:	6e 48       	ld.w	r8,r7[0x10]
80003c48:	ed b8 00 01 	bld	r8,0x1
80003c4c:	cf d1       	brne	80003c46 <my_SD_SPI_block_write_multi+0x13e>
	spi->tdr =data;
80003c4e:	8d 32       	st.w	r6[0xc],r2
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003c50:	6e 48       	ld.w	r8,r7[0x10]
80003c52:	ed b8 00 09 	bld	r8,0x9
80003c56:	cf d1       	brne	80003c50 <my_SD_SPI_block_write_multi+0x148>
	return spi->rdr;
80003c58:	6c 28       	ld.w	r8,r6[0x8]
80003c5a:	5c 58       	castu.b	r8

	my_SD_SPI_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
	my_SD_SPI_write(SD_MMC_SPI,0xFF);

	// read data response token
	r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF);
80003c5c:	aa 88       	st.b	r5[0x0],r8
	if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
80003c5e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c62:	58 58       	cp.w	r8,5
80003c64:	e0 81 00 bf 	brne	80003de2 <my_SD_SPI_block_write_multi+0x2da>
		spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
		break;
		//return false;         // return ERROR byte
	}

	spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80003c68:	e0 6b 00 ff 	mov	r11,255
80003c6c:	fc 7c 18 00 	mov	r12,-190464
80003c70:	e0 a0 14 e2 	rcall	80006634 <spi_write>
	spi_write(SD_MMC_SPI,0xFF);
80003c74:	e0 6b 00 ff 	mov	r11,255
80003c78:	fc 7c 18 00 	mov	r12,-190464
80003c7c:	e0 a0 14 dc 	rcall	80006634 <spi_write>
80003c80:	30 08       	mov	r8,0
80003c82:	c0 48       	rjmp	80003c8a <my_SD_SPI_block_write_multi+0x182>
  // Select the SD_MMC memory gl_ptr_mem points to
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
80003c84:	e2 58 0d 40 	cp.w	r8,200000
80003c88:	c1 60       	breq	80003cb4 <my_SD_SPI_block_write_multi+0x1ac>
bool my_sd_mmc_spi_wait_not_busy_noCS(void)
{
  uint32_t retry;
  // Select the SD_MMC memory gl_ptr_mem points to
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003c8a:	50 08       	stdsp	sp[0x0],r8
80003c8c:	e0 6c 00 ff 	mov	r12,255
80003c90:	fe b0 f2 46 	rcall	8000211c <sd_mmc_spi_send_and_read>
80003c94:	aa 8c       	st.b	r5[0x0],r12
		break;
		//return false;         // return ERROR byte
	}

	spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
	spi_write(SD_MMC_SPI,0xFF);
80003c96:	40 08       	lddsp	r8,sp[0x0]
80003c98:	2f f8       	sub	r8,-1
bool my_sd_mmc_spi_wait_not_busy_noCS(void)
{
  uint32_t retry;
  // Select the SD_MMC memory gl_ptr_mem points to
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003c9a:	e8 0c 18 00 	cp.b	r12,r4
80003c9e:	cf 31       	brne	80003c84 <my_SD_SPI_block_write_multi+0x17c>
	}

	spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
	spi_write(SD_MMC_SPI,0xFF);
	
	r1=my_sd_mmc_spi_wait_not_busy_noCS(); //wait for busy WITHOUT CHANGING CS LINE
80003ca0:	30 18       	mov	r8,1
80003ca2:	4e 29       	lddpc	r9,80003e28 <my_SD_SPI_block_write_multi+0x320>
80003ca4:	b2 88       	st.b	r9[0x0],r8
    my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;
  }
  my_SD_SPI_write(SD_MMC_SPI, 0xFF); 
  
  for(uint16_t i=0;i<Nblocks;i++)
80003ca6:	2f f3       	sub	r3,-1
80003ca8:	5c 83       	casts.h	r3
80003caa:	f1 d3 c0 10 	bfextu	r8,r3,0x0,0x10
80003cae:	00 38       	cp.w	r8,r0
80003cb0:	ca e3       	brcs	80003c0c <my_SD_SPI_block_write_multi+0x104>
80003cb2:	c0 98       	rjmp	80003cc4 <my_SD_SPI_block_write_multi+0x1bc>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003cb4:	30 0b       	mov	r11,0
80003cb6:	fc 7c 18 00 	mov	r12,-190464
80003cba:	e0 a0 14 4d 	rcall	80006554 <spi_unselectChip>
	}

	spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
	spi_write(SD_MMC_SPI,0xFF);
	
	r1=my_sd_mmc_spi_wait_not_busy_noCS(); //wait for busy WITHOUT CHANGING CS LINE
80003cbe:	4d b8       	lddpc	r8,80003e28 <my_SD_SPI_block_write_multi+0x320>
80003cc0:	30 09       	mov	r9,0
80003cc2:	b0 89       	st.b	r8[0x0],r9
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003cc4:	fc 79 18 00 	mov	r9,-190464
80003cc8:	72 48       	ld.w	r8,r9[0x10]
80003cca:	ed b8 00 01 	bld	r8,0x1
80003cce:	cf d1       	brne	80003cc8 <my_SD_SPI_block_write_multi+0x1c0>
	spi->tdr =data;
80003cd0:	e0 69 00 fd 	mov	r9,253
80003cd4:	fc 78 18 00 	mov	r8,-190464
80003cd8:	30 07       	mov	r7,0
80003cda:	91 39       	st.w	r8[0xc],r9
bool my_sd_mmc_spi_wait_not_busy_noCS(void)
{
  uint32_t retry;
  // Select the SD_MMC memory gl_ptr_mem points to
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003cdc:	3f f6       	mov	r6,-1
80003cde:	c0 68       	rjmp	80003cea <my_SD_SPI_block_write_multi+0x1e2>
80003ce0:	2f f7       	sub	r7,-1
  {
    retry++;
    if (retry == 200000)
80003ce2:	e2 57 0d 40 	cp.w	r7,200000
80003ce6:	e0 80 00 98 	breq	80003e16 <my_SD_SPI_block_write_multi+0x30e>
bool my_sd_mmc_spi_wait_not_busy_noCS(void)
{
  uint32_t retry;
  // Select the SD_MMC memory gl_ptr_mem points to
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003cea:	e0 6c 00 ff 	mov	r12,255
80003cee:	fe b0 f2 17 	rcall	8000211c <sd_mmc_spi_send_and_read>
80003cf2:	aa 8c       	st.b	r5[0x0],r12
80003cf4:	ec 0c 18 00 	cp.b	r12,r6
80003cf8:	cf 41       	brne	80003ce0 <my_SD_SPI_block_write_multi+0x1d8>
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
}
 
inline static void my_SPI_deselectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003cfa:	fc 78 18 00 	mov	r8,-190464
80003cfe:	70 19       	ld.w	r9,r8[0x4]
80003d00:	ea 19 00 0f 	orh	r9,0xf
80003d04:	91 19       	st.w	r8[0x4],r9

	// Last transfer, so deassert the current NPCS if CSAAT is set.
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003d06:	30 1c       	mov	r12,1
80003d08:	fc 19 01 00 	movh	r9,0x100
80003d0c:	91 09       	st.w	r8[0x0],r9
  
  // release chip select
  my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  
  return true;
}
80003d0e:	2f fd       	sub	sp,-4
80003d10:	d8 32       	popm	r0-r7,pc
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
}
 
inline static void my_SPI_deselectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003d12:	fc 78 18 00 	mov	r8,-190464
80003d16:	70 19       	ld.w	r9,r8[0x4]
80003d18:	ea 19 00 0f 	orh	r9,0xf
80003d1c:	91 19       	st.w	r8[0x4],r9

	// Last transfer, so deassert the current NPCS if CSAAT is set.
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003d1e:	30 0c       	mov	r12,0
80003d20:	fc 19 01 00 	movh	r9,0x100
80003d24:	91 09       	st.w	r8[0x0],r9
  }
  
  if(r1 != 0x00)
  {
    my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;
80003d26:	cf 4b       	rjmp	80003d0e <my_SD_SPI_block_write_multi+0x206>
{
	const uint8_t *_ram = ram;
	
	my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	if(card_type == SD_CARD_2_SDHC) {
    r1 = my_SD_SPI_command(MMC_START_WRITE_BLOCK_MULTI , addr>>9);
80003d28:	a9 9b       	lsr	r11,0x9
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d2a:	70 49       	ld.w	r9,r8[0x10]
80003d2c:	fc 7a 18 00 	mov	r10,-190464
80003d30:	e2 19 00 02 	andl	r9,0x2,COH
80003d34:	cf b0       	breq	80003d2a <my_SD_SPI_block_write_multi+0x222>
	spi->tdr =data;
80003d36:	e0 68 00 ff 	mov	r8,255
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d3a:	14 97       	mov	r7,r10
	spi->tdr =data;
80003d3c:	95 38       	st.w	r10[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d3e:	6e 48       	ld.w	r8,r7[0x10]
80003d40:	fc 79 18 00 	mov	r9,-190464
80003d44:	e2 18 00 02 	andl	r8,0x2,COH
80003d48:	cf b0       	breq	80003d3e <my_SD_SPI_block_write_multi+0x236>
	spi->tdr =data;
80003d4a:	35 98       	mov	r8,89
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d4c:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003d4e:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d50:	74 48       	ld.w	r8,r10[0x10]
80003d52:	fc 79 18 00 	mov	r9,-190464
80003d56:	e2 18 00 02 	andl	r8,0x2,COH
80003d5a:	cf b0       	breq	80003d50 <my_SD_SPI_block_write_multi+0x248>
	spi->tdr =data;
80003d5c:	30 08       	mov	r8,0
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d5e:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003d60:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d62:	74 48       	ld.w	r8,r10[0x10]
80003d64:	fc 79 18 00 	mov	r9,-190464
80003d68:	e2 18 00 02 	andl	r8,0x2,COH
80003d6c:	cf b0       	breq	80003d62 <my_SD_SPI_block_write_multi+0x25a>
	spi->tdr =data;
80003d6e:	f6 08 16 10 	lsr	r8,r11,0x10
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d72:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003d74:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d76:	74 48       	ld.w	r8,r10[0x10]
80003d78:	fc 79 18 00 	mov	r9,-190464
80003d7c:	e2 18 00 02 	andl	r8,0x2,COH
80003d80:	cf b0       	breq	80003d76 <my_SD_SPI_block_write_multi+0x26e>
	spi->tdr =data;
80003d82:	f1 db c1 08 	bfextu	r8,r11,0x8,0x8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d86:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003d88:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d8a:	74 48       	ld.w	r8,r10[0x10]
80003d8c:	fc 79 18 00 	mov	r9,-190464
80003d90:	e2 18 00 02 	andl	r8,0x2,COH
80003d94:	cf b0       	breq	80003d8a <my_SD_SPI_block_write_multi+0x282>
	spi->tdr =data;
80003d96:	5c 5b       	castu.b	r11
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d98:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003d9a:	93 3b       	st.w	r9[0xc],r11
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003d9c:	74 48       	ld.w	r8,r10[0x10]
80003d9e:	fc 79 18 00 	mov	r9,-190464
80003da2:	e2 18 00 02 	andl	r8,0x2,COH
80003da6:	cf b0       	breq	80003d9c <my_SD_SPI_block_write_multi+0x294>
	spi->tdr =data;
80003da8:	e0 68 00 ff 	mov	r8,255
80003dac:	93 38       	st.w	r9[0xc],r8
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
	spi->tdr =data;
80003dae:	10 96       	mov	r6,r8

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80003db0:	49 e5       	lddpc	r5,80003e28 <my_SD_SPI_block_write_multi+0x320>
80003db2:	3f f8       	mov	r8,-1
80003db4:	30 0a       	mov	r10,0
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80003db6:	10 97       	mov	r7,r8

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80003db8:	aa 88       	st.b	r5[0x0],r8
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003dba:	12 9b       	mov	r11,r9
	spi->tdr =data;
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003dbc:	72 48       	ld.w	r8,r9[0x10]
80003dbe:	ed b8 00 01 	bld	r8,0x1
80003dc2:	cf d1       	brne	80003dbc <my_SD_SPI_block_write_multi+0x2b4>
	spi->tdr =data;
80003dc4:	93 36       	st.w	r9[0xc],r6
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003dc6:	72 48       	ld.w	r8,r9[0x10]
80003dc8:	ed b8 00 09 	bld	r8,0x9
80003dcc:	cf d1       	brne	80003dc6 <my_SD_SPI_block_write_multi+0x2be>
	return spi->rdr;
80003dce:	76 28       	ld.w	r8,r11[0x8]
80003dd0:	5c 58       	castu.b	r8
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80003dd2:	ee 08 18 00 	cp.b	r8,r7
80003dd6:	fe 91 ff 05 	brne	80003be0 <my_SD_SPI_block_write_multi+0xd8>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80003dda:	2f fa       	sub	r10,-1
  while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
  {
    retry++;
    if(retry > 10) break;
80003ddc:	58 ba       	cp.w	r10,11
80003dde:	ce f1       	brne	80003dbc <my_SD_SPI_block_write_multi+0x2b4>
80003de0:	c0 0b       	rjmp	80003be0 <my_SD_SPI_block_write_multi+0xd8>
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003de2:	fc 7a 18 00 	mov	r10,-190464
80003de6:	74 48       	ld.w	r8,r10[0x10]
80003de8:	fc 79 18 00 	mov	r9,-190464
80003dec:	e2 18 00 02 	andl	r8,0x2,COH
80003df0:	cf b0       	breq	80003de6 <my_SD_SPI_block_write_multi+0x2de>
	spi->tdr =data;
80003df2:	e0 68 00 ff 	mov	r8,255
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003df6:	12 9a       	mov	r10,r9
	spi->tdr =data;
80003df8:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80003dfa:	74 49       	ld.w	r9,r10[0x10]
80003dfc:	fc 78 18 00 	mov	r8,-190464
80003e00:	e2 19 00 02 	andl	r9,0x2,COH
80003e04:	cf b0       	breq	80003dfa <my_SD_SPI_block_write_multi+0x2f2>
	spi->tdr =data;
80003e06:	e0 69 00 ff 	mov	r9,255
	r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF);
	if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
	{
		my_SD_SPI_write(SD_MMC_SPI,0xFF);    // send dummy bytes
		my_SD_SPI_write(SD_MMC_SPI,0xFF);
		spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003e0a:	10 9c       	mov	r12,r8
80003e0c:	91 39       	st.w	r8[0xc],r9
80003e0e:	30 0b       	mov	r11,0
80003e10:	e0 a0 13 a2 	rcall	80006554 <spi_unselectChip>
		break;
80003e14:	c5 8b       	rjmp	80003cc4 <my_SD_SPI_block_write_multi+0x1bc>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003e16:	30 0b       	mov	r11,0
80003e18:	fc 7c 18 00 	mov	r12,-190464
80003e1c:	e0 a0 13 9c 	rcall	80006554 <spi_unselectChip>
80003e20:	c6 db       	rjmp	80003cfa <my_SD_SPI_block_write_multi+0x1f2>
80003e22:	d7 03       	nop
80003e24:	00 00       	add	r0,r0
80003e26:	0b 4e       	ld.w	lr,--r5
80003e28:	00 00       	add	r0,r0
80003e2a:	0b 60       	ld.uh	r0,--r5

80003e2c <initialize_SD_arbitration>:
uint16_t ADC_byte_count;	//counts number of bytes transferred on ADC SPI channel, used to tell when sink bank is filled up
uint16_t block_count; //counts number of blocks transferred so far within a cluster

void initialize_SD_arbitration(void)
{
	bank_switch=bank0sink_bank1source;
80003e2c:	48 e9       	lddpc	r9,80003e64 <initialize_SD_arbitration+0x38>
80003e2e:	30 1a       	mov	r10,1
80003e30:	b2 8a       	st.b	r9[0x0],r10
	ADC_byte_count=0;
80003e32:	48 e9       	lddpc	r9,80003e68 <initialize_SD_arbitration+0x3c>
80003e34:	30 08       	mov	r8,0
80003e36:	b2 08       	st.h	r9[0x0],r8
	block_count=0;
80003e38:	48 d9       	lddpc	r9,80003e6c <initialize_SD_arbitration+0x40>
80003e3a:	b2 08       	st.h	r9[0x0],r8
	SD_source_ptr=(uint32_t)&(bank1[0]);
80003e3c:	48 d9       	lddpc	r9,80003e70 <initialize_SD_arbitration+0x44>
80003e3e:	48 ea       	lddpc	r10,80003e74 <initialize_SD_arbitration+0x48>
80003e40:	93 0a       	st.w	r9[0x0],r10
	data_fail=false;
80003e42:	48 e9       	lddpc	r9,80003e78 <initialize_SD_arbitration+0x4c>
80003e44:	b2 88       	st.b	r9[0x0],r8
	SD_transfer_in_progress=false;
80003e46:	48 e9       	lddpc	r9,80003e7c <initialize_SD_arbitration+0x50>
80003e48:	b2 88       	st.b	r9[0x0],r8
	SD_transfer_state=transfer_state_SD_busy;
80003e4a:	48 e9       	lddpc	r9,80003e80 <initialize_SD_arbitration+0x54>
80003e4c:	b2 88       	st.b	r9[0x0],r8
	save_r1=0;
80003e4e:	48 e9       	lddpc	r9,80003e84 <initialize_SD_arbitration+0x58>
80003e50:	b2 08       	st.h	r9[0x0],r8
	failure_cause=FAIL_nofail;
80003e52:	48 e9       	lddpc	r9,80003e88 <initialize_SD_arbitration+0x5c>
80003e54:	b2 88       	st.b	r9[0x0],r8
80003e56:	e2 69 00 00 	mov	r9,131072
80003e5a:	fc 18 40 00 	movh	r8,0x4000
80003e5e:	f1 49 02 58 	st.w	r8[600],r9
	gpio_local_clr_gpio_pin(PWM0_pin);
}
80003e62:	5e fc       	retal	r12
80003e64:	00 00       	add	r0,r0
80003e66:	01 e0       	ld.ub	r0,r0[0x6]
80003e68:	00 00       	add	r0,r0
80003e6a:	13 20       	ld.uh	r0,r9++
80003e6c:	00 00       	add	r0,r0
80003e6e:	0b e4       	ld.ub	r4,r5[0x6]
80003e70:	00 00       	add	r0,r0
80003e72:	13 1c       	ld.sh	r12,r9++
80003e74:	00 00       	add	r0,r0
80003e76:	13 64       	ld.uh	r4,--r9
80003e78:	00 00       	add	r0,r0
80003e7a:	08 fb       	st.b	--r4,r11
80003e7c:	00 00       	add	r0,r0
80003e7e:	08 f4       	st.b	--r4,r4
80003e80:	00 00       	add	r0,r0
80003e82:	08 f9       	st.b	--r4,r9
80003e84:	00 00       	add	r0,r0
80003e86:	08 f6       	st.b	--r4,r6
80003e88:	00 00       	add	r0,r0
80003e8a:	08 fa       	st.b	--r4,r10

80003e8c <reset_SD_sink_ptr>:

void reset_SD_sink_ptr(void)
{
	SD_sink_ptr=data_base_address;
80003e8c:	e0 69 40 00 	mov	r9,16384
80003e90:	48 28       	lddpc	r8,80003e98 <reset_SD_sink_ptr+0xc>
80003e92:	91 09       	st.w	r8[0x0],r9
}
80003e94:	5e fc       	retal	r12
80003e96:	d7 03       	nop
80003e98:	00 00       	add	r0,r0
80003e9a:	0b 6c       	ld.uh	r12,--r5

80003e9c <did_data_fail>:

bool did_data_fail(void)
{
80003e9c:	48 28       	lddpc	r8,80003ea4 <did_data_fail+0x8>
	return data_fail;
}
80003e9e:	11 8c       	ld.ub	r12,r8[0x0]
80003ea0:	5e fc       	retal	r12
80003ea2:	d7 03       	nop
80003ea4:	00 00       	add	r0,r0
80003ea6:	08 fb       	st.b	--r4,r11

80003ea8 <get_failure_cause>:

uint8_t get_failure_cause(void)
{
80003ea8:	48 28       	lddpc	r8,80003eb0 <get_failure_cause+0x8>
	return failure_cause;
}
80003eaa:	11 8c       	ld.ub	r12,r8[0x0]
80003eac:	5e fc       	retal	r12
80003eae:	d7 03       	nop
80003eb0:	00 00       	add	r0,r0
80003eb2:	08 fa       	st.b	--r4,r10

80003eb4 <get_saved_r1>:

uint8_t get_saved_r1(void)
{
80003eb4:	48 28       	lddpc	r8,80003ebc <get_saved_r1+0x8>
	return (uint8_t)save_r1;
}
80003eb6:	11 9c       	ld.ub	r12,r8[0x1]
80003eb8:	5e fc       	retal	r12
80003eba:	d7 03       	nop
80003ebc:	00 00       	add	r0,r0
80003ebe:	08 f6       	st.b	--r4,r6

80003ec0 <handle_SPI_arbitration>:
	
}

void handle_SPI_arbitration(void)		//done after sampling routing
{
	ADC_byte_count+=t_currentsequence.CPMG.Nsamp*4;
80003ec0:	4a 28       	lddpc	r8,80003f48 <handle_SPI_arbitration+0x88>
80003ec2:	4a 3a       	lddpc	r10,80003f4c <handle_SPI_arbitration+0x8c>
80003ec4:	f1 0b 00 4e 	ld.sh	r11,r8[78]
80003ec8:	94 08       	ld.sh	r8,r10[0x0]
80003eca:	a3 6b       	lsl	r11,0x2
80003ecc:	f0 0b 00 0b 	add	r11,r8,r11
80003ed0:	5c 8b       	casts.h	r11
80003ed2:	b4 0b       	st.h	r10[0x0],r11
	if(ADC_byte_count>=samplebuffer_size)
80003ed4:	e0 68 3f ff 	mov	r8,16383
80003ed8:	f0 0b 19 00 	cp.h	r11,r8
80003edc:	5e 8c       	retls	r12
	{	//ADC sample buffer has finished writing a buffer and has automatically started writing the other bank
		//bank_switch= ~bank_switch;	//toggle bank switch
		
		(bank_switch==bank0sink_bank1source) ? (AVR32_PDCA.channel[SPI1_RX_PDCA_CHANNEL].marr=(uint32_t)&bank0[0]) : (AVR32_PDCA.channel[SPI1_RX_PDCA_CHANNEL].marr=(uint32_t)&bank1[0]);
80003ede:	49 d8       	lddpc	r8,80003f50 <handle_SPI_arbitration+0x90>
80003ee0:	30 19       	mov	r9,1
80003ee2:	11 8c       	ld.ub	r12,r8[0x0]
80003ee4:	f2 0c 18 00 	cp.b	r12,r9
80003ee8:	c2 90       	breq	80003f3a <handle_SPI_arbitration+0x7a>
		{
			bank_switch=bank1sink_bank0source;
		}
		else
		{
			bank_switch=bank0sink_bank1source;
80003eea:	b0 89       	st.b	r8[0x0],r9
	ADC_byte_count+=t_currentsequence.CPMG.Nsamp*4;
	if(ADC_byte_count>=samplebuffer_size)
	{	//ADC sample buffer has finished writing a buffer and has automatically started writing the other bank
		//bank_switch= ~bank_switch;	//toggle bank switch
		
		(bank_switch==bank0sink_bank1source) ? (AVR32_PDCA.channel[SPI1_RX_PDCA_CHANNEL].marr=(uint32_t)&bank0[0]) : (AVR32_PDCA.channel[SPI1_RX_PDCA_CHANNEL].marr=(uint32_t)&bank1[0]);
80003eec:	fc 78 00 00 	mov	r8,-196608
80003ef0:	49 99       	lddpc	r9,80003f54 <handle_SPI_arbitration+0x94>
80003ef2:	91 39       	st.w	r8[0xc],r9
		else
		{
			bank_switch=bank0sink_bank1source;
		}
		
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));// make sure last transfer has actually finished
80003ef4:	fe 79 34 00 	mov	r9,-52224
80003ef8:	72 48       	ld.w	r8,r9[0x10]
80003efa:	ed b8 00 09 	bld	r8,0x9
80003efe:	cf d1       	brne	80003ef8 <handle_SPI_arbitration+0x38>
		AVR32_PDCA.channel[SPI1_RX_PDCA_CHANNEL].tcrr=samplebuffer_size/2; //there are two bytes per SPI1 transfer
		ADC_byte_count-=samplebuffer_size;	//subtract buffer size from byte counter
80003f00:	f6 cb 40 00 	sub	r11,r11,16384
80003f04:	b4 0b       	st.h	r10[0x0],r11
		{
			bank_switch=bank0sink_bank1source;
		}
		
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));// make sure last transfer has actually finished
		AVR32_PDCA.channel[SPI1_RX_PDCA_CHANNEL].tcrr=samplebuffer_size/2; //there are two bytes per SPI1 transfer
80003f06:	e0 69 20 00 	mov	r9,8192
80003f0a:	fc 78 00 00 	mov	r8,-196608
80003f0e:	91 49       	st.w	r8[0x10],r9
		ADC_byte_count-=samplebuffer_size;	//subtract buffer size from byte counter
		if(new_ADC_data_ready==true)
80003f10:	49 28       	lddpc	r8,80003f58 <handle_SPI_arbitration+0x98>
80003f12:	30 09       	mov	r9,0
80003f14:	11 8a       	ld.ub	r10,r8[0x0]
80003f16:	f2 0a 18 00 	cp.b	r10,r9
80003f1a:	c0 d0       	breq	80003f34 <handle_SPI_arbitration+0x74>
		{
			data_fail=true;
80003f1c:	30 1a       	mov	r10,1
80003f1e:	49 09       	lddpc	r9,80003f5c <handle_SPI_arbitration+0x9c>
80003f20:	b2 8a       	st.b	r9[0x0],r10
			failure_cause=FAIL_overrun;
80003f22:	30 3a       	mov	r10,3
80003f24:	48 f9       	lddpc	r9,80003f60 <handle_SPI_arbitration+0xa0>
80003f26:	b2 8a       	st.b	r9[0x0],r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80003f28:	e2 6a 00 00 	mov	r10,131072
80003f2c:	fc 19 40 00 	movh	r9,0x4000
80003f30:	f3 4a 02 54 	st.w	r9[596],r10
			gpio_local_set_gpio_pin(PWM0_pin);
		}
		new_ADC_data_ready=true;
80003f34:	30 19       	mov	r9,1
80003f36:	b0 89       	st.b	r8[0x0],r9
80003f38:	5e fc       	retal	r12
	ADC_byte_count+=t_currentsequence.CPMG.Nsamp*4;
	if(ADC_byte_count>=samplebuffer_size)
	{	//ADC sample buffer has finished writing a buffer and has automatically started writing the other bank
		//bank_switch= ~bank_switch;	//toggle bank switch
		
		(bank_switch==bank0sink_bank1source) ? (AVR32_PDCA.channel[SPI1_RX_PDCA_CHANNEL].marr=(uint32_t)&bank0[0]) : (AVR32_PDCA.channel[SPI1_RX_PDCA_CHANNEL].marr=(uint32_t)&bank1[0]);
80003f3a:	fc 79 00 00 	mov	r9,-196608
80003f3e:	48 ac       	lddpc	r12,80003f64 <handle_SPI_arbitration+0xa4>
80003f40:	93 3c       	st.w	r9[0xc],r12
		
		if(bank_switch==bank0sink_bank1source)
		{
			bank_switch=bank1sink_bank0source;
80003f42:	30 29       	mov	r9,2
80003f44:	b0 89       	st.b	r8[0x0],r9
80003f46:	cd 7b       	rjmp	80003ef4 <handle_SPI_arbitration+0x34>
80003f48:	00 00       	add	r0,r0
80003f4a:	0f 80       	ld.ub	r0,r7[0x0]
80003f4c:	00 00       	add	r0,r0
80003f4e:	13 20       	ld.uh	r0,r9++
80003f50:	00 00       	add	r0,r0
80003f52:	01 e0       	ld.ub	r0,r0[0x6]
80003f54:	00 00       	add	r0,r0
80003f56:	13 64       	ld.uh	r4,--r9
80003f58:	00 00       	add	r0,r0
80003f5a:	08 f8       	st.b	--r4,r8
80003f5c:	00 00       	add	r0,r0
80003f5e:	08 fb       	st.b	--r4,r11
80003f60:	00 00       	add	r0,r0
80003f62:	08 fa       	st.b	--r4,r10
80003f64:	00 00       	add	r0,r0
80003f66:	53 7c       	stdsp	sp[0xdc],r12

80003f68 <SD_skip_clusters>:
  my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
}

void SD_skip_clusters(uint16_t clusters)	//this is used after handling a data failure
{
	SD_sink_ptr=SD_sink_ptr_shadow+clusters*samplebuffer_size;	//increase SD_sink_ptr by some number of clusters
80003f68:	48 58       	lddpc	r8,80003f7c <SD_skip_clusters+0x14>
80003f6a:	70 08       	ld.w	r8,r8[0x0]
80003f6c:	f3 dc c0 10 	bfextu	r9,r12,0x0,0x10
80003f70:	af 69       	lsl	r9,0xe
80003f72:	10 09       	add	r9,r8
80003f74:	48 38       	lddpc	r8,80003f80 <SD_skip_clusters+0x18>
80003f76:	91 09       	st.w	r8[0x0],r9
}
80003f78:	5e fc       	retal	r12
80003f7a:	d7 03       	nop
80003f7c:	00 00       	add	r0,r0
80003f7e:	0b 68       	ld.uh	r8,--r5
80003f80:	00 00       	add	r0,r0
80003f82:	0b 6c       	ld.uh	r12,--r5

80003f84 <shadow_SD_sink_ptr>:

void shadow_SD_sink_ptr(void)
{
	SD_sink_ptr_shadow=SD_sink_ptr;
80003f84:	48 38       	lddpc	r8,80003f90 <shadow_SD_sink_ptr+0xc>
80003f86:	70 09       	ld.w	r9,r8[0x0]
80003f88:	48 38       	lddpc	r8,80003f94 <shadow_SD_sink_ptr+0x10>
80003f8a:	91 09       	st.w	r8[0x0],r9
80003f8c:	5e fc       	retal	r12
80003f8e:	d7 03       	nop
80003f90:	00 00       	add	r0,r0
80003f92:	0b 6c       	ld.uh	r12,--r5
80003f94:	00 00       	add	r0,r0
80003f96:	0b 68       	ld.uh	r8,--r5

80003f98 <handle_SD>:
{
	return (uint8_t)save_r1;
}

void handle_SD(void)  //arbitration handled after TX pulse, before sampling period
{//this version is updated to have extra branch so it's possible to transfer 1 block every echo
80003f98:	eb cd 40 c0 	pushm	r6-r7,lr
	if(data_fail==true)	//do nothing if data failure has already occured
80003f9c:	fe fa 03 9c 	ld.w	r10,pc[924]
80003fa0:	30 09       	mov	r9,0
80003fa2:	15 88       	ld.ub	r8,r10[0x0]
80003fa4:	f2 08 18 00 	cp.b	r8,r9
80003fa8:	c7 f1       	brne	800040a6 <handle_SD+0x10e>
	{
		return;
	}
	//first should check whether data overrun has already occured...
	if(SD_transfer_in_progress==true)
80003faa:	fe f7 03 92 	ld.w	r7,pc[914]
80003fae:	0f 89       	ld.ub	r9,r7[0x0]
80003fb0:	f0 09 18 00 	cp.b	r9,r8
80003fb4:	c7 b0       	breq	800040aa <handle_SD+0x112>
	{//SD transfer is in progress true
		if(SD_transfer_state==transfer_state_SD_busy)
80003fb6:	fe fb 03 8a 	ld.w	r11,pc[906]
80003fba:	17 89       	ld.ub	r9,r11[0x0]
80003fbc:	f0 09 18 00 	cp.b	r9,r8
80003fc0:	e0 80 01 08 	breq	800041d0 <handle_SD+0x238>
				}
			}
		}
		else
		{//transfer state is SPI_TXing
			if((AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].isr & AVR32_PDCA_TRC_MASK) != 0x0000)	//if TCR=0... maybe it would be faster to just read the TCR register?
80003fc4:	fc 78 00 00 	mov	r8,-196608
80003fc8:	f0 f8 00 ac 	ld.w	r8,r8[172]
80003fcc:	ed b8 00 01 	bld	r8,0x1
80003fd0:	c6 b1       	brne	800040a6 <handle_SD+0x10e>
			{//if PDCA is done sending block...
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK)); //wait until last transfer is done
80003fd2:	fc 7c 18 00 	mov	r12,-190464
80003fd6:	78 48       	ld.w	r8,r12[0x10]
80003fd8:	fc 79 18 00 	mov	r9,-190464
80003fdc:	e2 18 02 00 	andl	r8,0x200,COH
80003fe0:	cf b0       	breq	80003fd6 <handle_SD+0x3e>
				SD_MMC_SPI->tdr =0xFF;
80003fe2:	e0 68 00 ff 	mov	r8,255
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003fe6:	12 9c       	mov	r12,r9
		else
		{//transfer state is SPI_TXing
			if((AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].isr & AVR32_PDCA_TRC_MASK) != 0x0000)	//if TCR=0... maybe it would be faster to just read the TCR register?
			{//if PDCA is done sending block...
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK)); //wait until last transfer is done
				SD_MMC_SPI->tdr =0xFF;
80003fe8:	93 38       	st.w	r9[0xc],r8
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80003fea:	78 48       	ld.w	r8,r12[0x10]
80003fec:	fc 79 18 00 	mov	r9,-190464
80003ff0:	e2 18 02 00 	andl	r8,0x200,COH
80003ff4:	cf b0       	breq	80003fea <handle_SD+0x52>
				save_r1=SD_MMC_SPI->rdr;
80003ff6:	72 28       	ld.w	r8,r9[0x8]
80003ff8:	fe fc 03 4c 	ld.w	r12,pc[844]
80003ffc:	5c 88       	casts.h	r8
80003ffe:	b8 08       	st.h	r12[0x0],r8
				//if( (SD_MMC_SPI->rdr & MMC_DR_MASK) != MMC_DR_ACCEPT)
				if( (save_r1 & MMC_DR_MASK) != MMC_DR_ACCEPT)
80004000:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004004:	58 58       	cp.w	r8,5
80004006:	e0 80 01 1c 	breq	8000423e <handle_SD+0x2a6>
				{//block NOT accepted
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
8000400a:	72 48       	ld.w	r8,r9[0x10]
8000400c:	fc 7b 18 00 	mov	r11,-190464
80004010:	e2 18 00 02 	andl	r8,0x2,COH
80004014:	cf b0       	breq	8000400a <handle_SD+0x72>
					SD_MMC_SPI->tdr =0xFF;	//write two dummies
80004016:	e0 68 00 ff 	mov	r8,255
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
8000401a:	16 9c       	mov	r12,r11
				save_r1=SD_MMC_SPI->rdr;
				//if( (SD_MMC_SPI->rdr & MMC_DR_MASK) != MMC_DR_ACCEPT)
				if( (save_r1 & MMC_DR_MASK) != MMC_DR_ACCEPT)
				{//block NOT accepted
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
					SD_MMC_SPI->tdr =0xFF;	//write two dummies
8000401c:	97 38       	st.w	r11[0xc],r8
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
8000401e:	78 48       	ld.w	r8,r12[0x10]
80004020:	fc 79 18 00 	mov	r9,-190464
80004024:	e2 18 00 02 	andl	r8,0x2,COH
80004028:	cf b0       	breq	8000401e <handle_SD+0x86>
					SD_MMC_SPI->tdr =0xFF;	//not sure what these dummies do....
8000402a:	e0 68 00 ff 	mov	r8,255
8000402e:	93 38       	st.w	r9[0xc],r8
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
}
 
inline static void my_SPI_deselectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80004030:	72 18       	ld.w	r8,r9[0x4]
80004032:	ea 18 00 0f 	orh	r8,0xf
80004036:	93 18       	st.w	r9[0x4],r8
					data_fail=true;
80004038:	30 18       	mov	r8,1
8000403a:	b4 88       	st.b	r10[0x0],r8
					failure_cause=FAIL_badblock;
8000403c:	fe fa 03 0c 	ld.w	r10,pc[780]
80004040:	b4 88       	st.b	r10[0x0],r8

	// Last transfer, so deassert the current NPCS if CSAAT is set.
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80004042:	fc 18 01 00 	movh	r8,0x100
80004046:	93 08       	st.w	r9[0x0],r8
80004048:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=0xFF;	//dummy CRC
				
				//get r1
				uint8_t retry=0;
				while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
8000404c:	fe f9 03 00 	ld.w	r9,pc[768]
80004050:	b2 88       	st.b	r9[0x0],r8
				{
					retry++;
					if(retry > 3) break;
				}
				
				if(r1 != 0x00)
80004052:	58 08       	cp.w	r8,0
80004054:	e0 81 00 ac 	brne	800041ac <handle_SD+0x214>
					save_r1=r1;
					
				}
				else
				{	//r1 was valid
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004058:	fc 79 18 00 	mov	r9,-190464
8000405c:	72 48       	ld.w	r8,r9[0x10]
8000405e:	ed b8 00 01 	bld	r8,0x1
80004062:	cf d1       	brne	8000405c <handle_SD+0xc4>
					SD_MMC_SPI->tdr=MMC_STARTBLOCK_WRITE_MULTI_TOKEN; //write start multiblock write token
80004064:	fc 78 18 00 	mov	r8,-190464
80004068:	e0 69 00 fc 	mov	r9,252
8000406c:	91 39       	st.w	r8[0xc],r9
					
					if(bank_switch==bank0sink_bank1source)
8000406e:	fe f8 02 e2 	ld.w	r8,pc[738]
80004072:	11 89       	ld.ub	r9,r8[0x0]
80004074:	30 18       	mov	r8,1
80004076:	f0 09 18 00 	cp.b	r9,r8
8000407a:	e0 80 01 51 	breq	8000431c <handle_SD+0x384>
					{
						SD_source_ptr=(uint32_t)&bank1[0];
					}
					else
					{
						SD_source_ptr=(uint32_t)&bank0[0];
8000407e:	fe fb 02 d6 	ld.w	r11,pc[726]
80004082:	fe f8 02 d6 	ld.w	r8,pc[726]
80004086:	91 0b       	st.w	r8[0x0],r11
					}
					
					pdca_load_channel(SPI0_TX_PDCA_CHANNEL, (void *)SD_source_ptr, bytes_per_block+2);
80004088:	e0 6a 02 02 	mov	r10,514
8000408c:	30 2c       	mov	r12,2
8000408e:	e0 a0 03 4c 	rcall	80004726 <pdca_load_channel>
				
					block_count++;
80004092:	fe f9 02 ca 	ld.w	r9,pc[714]
					SD_transfer_in_progress=true;
80004096:	30 18       	mov	r8,1
						SD_source_ptr=(uint32_t)&bank0[0];
					}
					
					pdca_load_channel(SPI0_TX_PDCA_CHANNEL, (void *)SD_source_ptr, bytes_per_block+2);
				
					block_count++;
80004098:	92 0a       	ld.sh	r10,r9[0x0]
					SD_transfer_in_progress=true;
8000409a:	ae 88       	st.b	r7[0x0],r8
						SD_source_ptr=(uint32_t)&bank0[0];
					}
					
					pdca_load_channel(SPI0_TX_PDCA_CHANNEL, (void *)SD_source_ptr, bytes_per_block+2);
				
					block_count++;
8000409c:	2f fa       	sub	r10,-1
8000409e:	b2 0a       	st.h	r9[0x0],r10
					SD_transfer_in_progress=true;
					SD_transfer_state=transfer_state_SPI_TXing;
800040a0:	fe f9 02 a0 	ld.w	r9,pc[672]
800040a4:	b2 88       	st.b	r9[0x0],r8
800040a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
			}
		}
	}
	else
	{//SD transfer not in progress
		if(new_ADC_data_ready==true)
800040aa:	fe f8 02 b6 	ld.w	r8,pc[694]
800040ae:	11 88       	ld.ub	r8,r8[0x0]
800040b0:	f2 08 18 00 	cp.b	r8,r9
800040b4:	cf 90       	breq	800040a6 <handle_SD+0x10e>
gpio_local_clr_gpio_pin(DDS_P2_pin);
}

inline static void my_SPI_selectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800040b6:	fc 78 18 00 	mov	r8,-190464
800040ba:	70 19       	ld.w	r9,r8[0x4]

static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
800040bc:	10 9b       	mov	r11,r8
800040be:	b1 c9       	cbr	r9,0x10
800040c0:	91 19       	st.w	r8[0x4],r9
800040c2:	76 48       	ld.w	r8,r11[0x10]
800040c4:	fc 79 18 00 	mov	r9,-190464
800040c8:	e2 18 00 02 	andl	r8,0x2,COH
800040cc:	cf b0       	breq	800040c2 <handle_SD+0x12a>
	SD_MMC_SPI->tdr =0xFF;
800040ce:	e0 68 00 ff 	mov	r8,255
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
800040d2:	12 9b       	mov	r11,r9
static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
	SD_MMC_SPI->tdr =0xFF;
800040d4:	93 38       	st.w	r9[0xc],r8
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
800040d6:	76 48       	ld.w	r8,r11[0x10]
800040d8:	fc 79 18 00 	mov	r9,-190464
800040dc:	e2 18 02 00 	andl	r8,0x200,COH
800040e0:	cf b0       	breq	800040d6 <handle_SD+0x13e>
	//my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	return SD_MMC_SPI->rdr;
800040e2:	72 2b       	ld.w	r11,r9[0x8]
		{//there is new ADC data ready
			my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
			if(check_busy_fast() == 0xFF) //not sure if it's necessary to check if SD card is busy here....
800040e4:	3f f8       	mov	r8,-1
800040e6:	f0 0b 18 00 	cp.b	r11,r8
800040ea:	cd e1       	brne	800040a6 <handle_SD+0x10e>
			{//SD card is idle
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
800040ec:	72 48       	ld.w	r8,r9[0x10]
800040ee:	ed b8 00 01 	bld	r8,0x1
800040f2:	cf d1       	brne	800040ec <handle_SD+0x154>
				SD_MMC_SPI->tdr=(MMC_START_WRITE_BLOCK_MULTI | 0x40);  // send command
800040f4:	fc 78 18 00 	mov	r8,-190464
800040f8:	35 99       	mov	r9,89
800040fa:	91 39       	st.w	r8[0xc],r9
				temp_SD_sink_ptr=((card_type==SD_CARD_2_SDHC) ? (SD_sink_ptr>>9) : (SD_sink_ptr));
800040fc:	fe f8 02 68 	ld.w	r8,pc[616]
80004100:	11 89       	ld.ub	r9,r8[0x0]
80004102:	30 38       	mov	r8,3
80004104:	f0 09 18 00 	cp.b	r9,r8
80004108:	e0 80 01 06 	breq	80004314 <handle_SD+0x37c>
8000410c:	fe f8 02 5c 	ld.w	r8,pc[604]
80004110:	70 0c       	ld.w	r12,r8[0x0]
80004112:	fe f8 02 5a 	ld.w	r8,pc[602]
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004116:	fc 7b 18 00 	mov	r11,-190464
			my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
			if(check_busy_fast() == 0xFF) //not sure if it's necessary to check if SD card is busy here....
			{//SD card is idle
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=(MMC_START_WRITE_BLOCK_MULTI | 0x40);  // send command
				temp_SD_sink_ptr=((card_type==SD_CARD_2_SDHC) ? (SD_sink_ptr>>9) : (SD_sink_ptr));
8000411a:	91 0c       	st.w	r8[0x0],r12
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
8000411c:	76 48       	ld.w	r8,r11[0x10]
8000411e:	fc 79 18 00 	mov	r9,-190464
80004122:	e2 18 00 02 	andl	r8,0x2,COH
80004126:	cf b0       	breq	8000411c <handle_SD+0x184>
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>24;				//send ARG		need to make sure that I have some SDHC compatibility!!!
80004128:	f8 08 16 18 	lsr	r8,r12,0x18
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
8000412c:	12 9b       	mov	r11,r9
			{//SD card is idle
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=(MMC_START_WRITE_BLOCK_MULTI | 0x40);  // send command
				temp_SD_sink_ptr=((card_type==SD_CARD_2_SDHC) ? (SD_sink_ptr>>9) : (SD_sink_ptr));
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>24;				//send ARG		need to make sure that I have some SDHC compatibility!!!
8000412e:	93 38       	st.w	r9[0xc],r8
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004130:	76 48       	ld.w	r8,r11[0x10]
80004132:	fc 79 18 00 	mov	r9,-190464
80004136:	e2 18 00 02 	andl	r8,0x2,COH
8000413a:	cf b0       	breq	80004130 <handle_SD+0x198>
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>16;
8000413c:	f8 08 16 10 	lsr	r8,r12,0x10
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004140:	12 9b       	mov	r11,r9
				SD_MMC_SPI->tdr=(MMC_START_WRITE_BLOCK_MULTI | 0x40);  // send command
				temp_SD_sink_ptr=((card_type==SD_CARD_2_SDHC) ? (SD_sink_ptr>>9) : (SD_sink_ptr));
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>24;				//send ARG		need to make sure that I have some SDHC compatibility!!!
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>16;
80004142:	93 38       	st.w	r9[0xc],r8
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004144:	76 48       	ld.w	r8,r11[0x10]
80004146:	fc 79 18 00 	mov	r9,-190464
8000414a:	e2 18 00 02 	andl	r8,0x2,COH
8000414e:	cf b0       	breq	80004144 <handle_SD+0x1ac>
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>8;
80004150:	f8 08 16 08 	lsr	r8,r12,0x8
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004154:	12 9b       	mov	r11,r9
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>24;				//send ARG		need to make sure that I have some SDHC compatibility!!!
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>16;
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>8;
80004156:	93 38       	st.w	r9[0xc],r8
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004158:	76 48       	ld.w	r8,r11[0x10]
8000415a:	fc 79 18 00 	mov	r9,-190464
8000415e:	e2 18 00 02 	andl	r8,0x2,COH
80004162:	cf b0       	breq	80004158 <handle_SD+0x1c0>
				SD_MMC_SPI->tdr=temp_SD_sink_ptr;
80004164:	93 3c       	st.w	r9[0xc],r12
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004166:	72 48       	ld.w	r8,r9[0x10]
80004168:	fc 7b 18 00 	mov	r11,-190464
8000416c:	e2 18 00 02 	andl	r8,0x2,COH
80004170:	cf b0       	breq	80004166 <handle_SD+0x1ce>
	spi->tdr =data;
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80004172:	16 99       	mov	r9,r11
				SD_MMC_SPI->tdr=0xFF;	//dummy CRC
80004174:	e0 66 00 ff 	mov	r6,255
	spi->tdr =data;
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80004178:	12 9e       	mov	lr,r9
8000417a:	97 36       	st.w	r11[0xc],r6
				
				//get r1
				uint8_t retry=0;
				while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
8000417c:	3f fc       	mov	r12,-1
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=temp_SD_sink_ptr>>8;
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=temp_SD_sink_ptr;
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=0xFF;	//dummy CRC
8000417e:	30 0b       	mov	r11,0
	spi->tdr =data;
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80004180:	72 48       	ld.w	r8,r9[0x10]
80004182:	ed b8 00 01 	bld	r8,0x1
80004186:	cf d1       	brne	80004180 <handle_SD+0x1e8>
	spi->tdr =data;
80004188:	93 36       	st.w	r9[0xc],r6
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
8000418a:	72 48       	ld.w	r8,r9[0x10]
8000418c:	ed b8 00 09 	bld	r8,0x9
80004190:	cf d1       	brne	8000418a <handle_SD+0x1f2>
	return spi->rdr;
80004192:	7c 28       	ld.w	r8,lr[0x8]
80004194:	5c 58       	castu.b	r8
				
				//get r1
				uint8_t retry=0;
				while((r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF)) == 0xFF)
80004196:	f8 08 18 00 	cp.b	r8,r12
8000419a:	fe 91 ff 59 	brne	8000404c <handle_SD+0xb4>
8000419e:	2f fb       	sub	r11,-1
				{
					retry++;
					if(retry > 3) break;
800041a0:	58 4b       	cp.w	r11,4
800041a2:	ce f1       	brne	80004180 <handle_SD+0x1e8>
800041a4:	4e a9       	lddpc	r9,8000434c <handle_SD+0x3b4>
800041a6:	b2 88       	st.b	r9[0x0],r8
800041a8:	e0 68 00 ff 	mov	r8,255
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
}
 
inline static void my_SPI_deselectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800041ac:	fc 79 18 00 	mov	r9,-190464
800041b0:	72 1b       	ld.w	r11,r9[0x4]
800041b2:	ea 1b 00 0f 	orh	r11,0xf
800041b6:	93 1b       	st.w	r9[0x4],r11

	// Last transfer, so deassert the current NPCS if CSAAT is set.
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800041b8:	fc 1b 01 00 	movh	r11,0x100
800041bc:	93 0b       	st.w	r9[0x0],r11
				}
				
				if(r1 != 0x00)
				{	//r1 was not valid
					my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
					data_fail=true;
800041be:	30 19       	mov	r9,1
800041c0:	b4 89       	st.b	r10[0x0],r9
					failure_cause=FAIL_badr1_clusterwrite;
800041c2:	4e 29       	lddpc	r9,80004348 <handle_SD+0x3b0>
800041c4:	30 2a       	mov	r10,2
800041c6:	b2 8a       	st.b	r9[0x0],r10
					save_r1=r1;
800041c8:	4d f9       	lddpc	r9,80004344 <handle_SD+0x3ac>
800041ca:	b2 08       	st.h	r9[0x0],r8
800041cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
800041d0:	fc 7a 18 00 	mov	r10,-190464
800041d4:	74 48       	ld.w	r8,r10[0x10]
800041d6:	fc 79 18 00 	mov	r9,-190464
800041da:	e2 18 00 02 	andl	r8,0x2,COH
800041de:	cf b0       	breq	800041d4 <handle_SD+0x23c>
	SD_MMC_SPI->tdr =0xFF;
800041e0:	e0 68 00 ff 	mov	r8,255
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
800041e4:	12 9a       	mov	r10,r9
static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
	SD_MMC_SPI->tdr =0xFF;
800041e6:	93 38       	st.w	r9[0xc],r8
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
800041e8:	74 48       	ld.w	r8,r10[0x10]
800041ea:	fc 79 18 00 	mov	r9,-190464
800041ee:	e2 18 02 00 	andl	r8,0x200,COH
800041f2:	cf b0       	breq	800041e8 <handle_SD+0x250>
	//my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	return SD_MMC_SPI->rdr;
800041f4:	72 2a       	ld.w	r10,r9[0x8]
	//first should check whether data overrun has already occured...
	if(SD_transfer_in_progress==true)
	{//SD transfer is in progress true
		if(SD_transfer_state==transfer_state_SD_busy)
		{//transfer state is SD_busy
			if(check_busy_fast() == 0xFF)
800041f6:	3f f8       	mov	r8,-1
800041f8:	f0 0a 18 00 	cp.b	r10,r8
800041fc:	fe 91 ff 55 	brne	800040a6 <handle_SD+0x10e>
			{//SD card is idle
				if(block_count==blocks_per_cluster)//check if last block of cluster was just sent
80004200:	4d 78       	lddpc	r8,8000435c <handle_SD+0x3c4>
80004202:	32 0c       	mov	r12,32
80004204:	90 0a       	ld.sh	r10,r8[0x0]
80004206:	f8 0a 19 00 	cp.h	r10,r12
8000420a:	c6 80       	breq	800042da <handle_SD+0x342>
					SD_transfer_in_progress=false;
					SD_sink_ptr+=blocks_per_cluster*bytes_per_block;
				}
				else
				{//no, it was not the last block
					block_count++;
8000420c:	2f fa       	sub	r10,-1
8000420e:	b0 0a       	st.h	r8[0x0],r10
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004210:	72 48       	ld.w	r8,r9[0x10]
80004212:	ed b8 00 01 	bld	r8,0x1
80004216:	cf d1       	brne	80004210 <handle_SD+0x278>
					SD_MMC_SPI->tdr =MMC_STARTBLOCK_WRITE_MULTI_TOKEN;	//send start of multiblock block token
80004218:	e0 69 00 fc 	mov	r9,252
8000421c:	fc 78 18 00 	mov	r8,-190464
80004220:	91 39       	st.w	r8[0xc],r9
					AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=SD_source_ptr;
80004222:	fc 78 00 00 	mov	r8,-196608
80004226:	4c d9       	lddpc	r9,80004358 <handle_SD+0x3c0>
80004228:	72 09       	ld.w	r9,r9[0x0]
8000422a:	f1 49 00 80 	st.w	r8[128],r9
					AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].tcr=bytes_per_block+2;	//this will start the transfer as well
8000422e:	e0 69 02 02 	mov	r9,514
80004232:	f1 49 00 88 	st.w	r8[136],r9
					SD_transfer_state=transfer_state_SPI_TXing;
80004236:	30 18       	mov	r8,1
80004238:	b6 88       	st.b	r11[0x0],r8
8000423a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
					failure_cause=FAIL_badblock;
					my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS); //then deselect
				}
				else
				{//block IS accepted
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
8000423e:	72 48       	ld.w	r8,r9[0x10]
80004240:	fc 7a 18 00 	mov	r10,-190464
80004244:	e2 18 00 02 	andl	r8,0x2,COH
80004248:	cf b0       	breq	8000423e <handle_SD+0x2a6>
					SD_MMC_SPI->tdr =0xFF;	//write two dummies
8000424a:	e0 68 00 ff 	mov	r8,255
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
8000424e:	14 9c       	mov	r12,r10
					my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS); //then deselect
				}
				else
				{//block IS accepted
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
					SD_MMC_SPI->tdr =0xFF;	//write two dummies
80004250:	95 38       	st.w	r10[0xc],r8
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004252:	78 48       	ld.w	r8,r12[0x10]
80004254:	fc 79 18 00 	mov	r9,-190464
80004258:	e2 18 00 02 	andl	r8,0x2,COH
8000425c:	cf b0       	breq	80004252 <handle_SD+0x2ba>
					SD_MMC_SPI->tdr =0xFF;	//not sure what these dummies do....
					SD_transfer_state=transfer_state_SD_busy;
					SD_source_ptr+=512;
8000425e:	4b f8       	lddpc	r8,80004358 <handle_SD+0x3c0>
				else
				{//block IS accepted
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
					SD_MMC_SPI->tdr =0xFF;	//write two dummies
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
					SD_MMC_SPI->tdr =0xFF;	//not sure what these dummies do....
80004260:	e0 6c 00 ff 	mov	r12,255
80004264:	93 3c       	st.w	r9[0xc],r12

static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004266:	12 9a       	mov	r10,r9
					SD_transfer_state=transfer_state_SD_busy;
					SD_source_ptr+=512;
80004268:	70 0c       	ld.w	r12,r8[0x0]
8000426a:	f8 cc fe 00 	sub	r12,r12,-512
8000426e:	91 0c       	st.w	r8[0x0],r12
				{//block IS accepted
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
					SD_MMC_SPI->tdr =0xFF;	//write two dummies
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
					SD_MMC_SPI->tdr =0xFF;	//not sure what these dummies do....
					SD_transfer_state=transfer_state_SD_busy;
80004270:	30 08       	mov	r8,0
80004272:	b6 88       	st.b	r11[0x0],r8
80004274:	74 48       	ld.w	r8,r10[0x10]
80004276:	fc 79 18 00 	mov	r9,-190464
8000427a:	e2 18 00 02 	andl	r8,0x2,COH
8000427e:	cf b0       	breq	80004274 <handle_SD+0x2dc>
	SD_MMC_SPI->tdr =0xFF;
80004280:	e0 68 00 ff 	mov	r8,255
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80004284:	12 9a       	mov	r10,r9
static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
	SD_MMC_SPI->tdr =0xFF;
80004286:	93 38       	st.w	r9[0xc],r8
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80004288:	74 48       	ld.w	r8,r10[0x10]
8000428a:	fc 79 18 00 	mov	r9,-190464
8000428e:	e2 18 02 00 	andl	r8,0x200,COH
80004292:	cf b0       	breq	80004288 <handle_SD+0x2f0>
	//my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	return SD_MMC_SPI->rdr;
80004294:	72 2a       	ld.w	r10,r9[0x8]
					SD_source_ptr+=512;
					
					if(check_busy_fast() == 0xFF)
80004296:	3f f8       	mov	r8,-1
80004298:	f0 0a 18 00 	cp.b	r10,r8
8000429c:	fe 91 ff 05 	brne	800040a6 <handle_SD+0x10e>
					{
						if(block_count==blocks_per_cluster)//check if last block of cluster was just sent
800042a0:	4a f8       	lddpc	r8,8000435c <handle_SD+0x3c4>
800042a2:	32 0e       	mov	lr,32
800042a4:	90 0a       	ld.sh	r10,r8[0x0]
800042a6:	fc 0a 19 00 	cp.h	r10,lr
800042aa:	c3 d0       	breq	80004324 <handle_SD+0x38c>
					
							SD_sink_ptr+=blocks_per_cluster*bytes_per_block;
						}
						else
						{//no, it was not the last block
							block_count++;
800042ac:	2f fa       	sub	r10,-1
800042ae:	b0 0a       	st.h	r8[0x0],r10
							while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
800042b0:	72 48       	ld.w	r8,r9[0x10]
800042b2:	ed b8 00 01 	bld	r8,0x1
800042b6:	cf d1       	brne	800042b0 <handle_SD+0x318>
							SD_MMC_SPI->tdr =MMC_STARTBLOCK_WRITE_MULTI_TOKEN;	//send start of multiblock block token
800042b8:	e0 69 00 fc 	mov	r9,252
800042bc:	fc 78 18 00 	mov	r8,-190464
800042c0:	91 39       	st.w	r8[0xc],r9
							AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].mar=SD_source_ptr;
800042c2:	fc 78 00 00 	mov	r8,-196608
800042c6:	f1 4c 00 80 	st.w	r8[128],r12
							AVR32_PDCA.channel[SPI0_TX_PDCA_CHANNEL].tcr=bytes_per_block+2;	//this will start the transfer as well
800042ca:	e0 69 02 02 	mov	r9,514
800042ce:	f1 49 00 88 	st.w	r8[136],r9
							//pdca_load_channel(SPI0_TX_PDCA_CHANNEL, SD_source_ptr, bytes_per_block+2);
							SD_transfer_state=transfer_state_SPI_TXing;
800042d2:	30 18       	mov	r8,1
800042d4:	b6 88       	st.b	r11[0x0],r8
800042d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		{//transfer state is SD_busy
			if(check_busy_fast() == 0xFF)
			{//SD card is idle
				if(block_count==blocks_per_cluster)//check if last block of cluster was just sent
				{//yes, it was the last block
					block_count=0;
800042da:	30 0a       	mov	r10,0
800042dc:	b0 0a       	st.h	r8[0x0],r10
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
800042de:	72 48       	ld.w	r8,r9[0x10]
800042e0:	fc 7a 18 00 	mov	r10,-190464
800042e4:	e2 18 00 02 	andl	r8,0x2,COH
800042e8:	cf b0       	breq	800042de <handle_SD+0x346>
					{
						if(block_count==blocks_per_cluster)//check if last block of cluster was just sent
						{//yes, it was the last block
							block_count=0;
							while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
							SD_MMC_SPI->tdr =MMC_END_TRANS;	//send END_TRANS token
800042ea:	e0 68 00 fd 	mov	r8,253
800042ee:	95 38       	st.w	r10[0xc],r8
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
}
 
inline static void my_SPI_deselectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800042f0:	74 18       	ld.w	r8,r10[0x4]
800042f2:	ea 18 00 0f 	orh	r8,0xf
800042f6:	95 18       	st.w	r10[0x4],r8
							my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
							new_ADC_data_ready=false;	//clear new_ADC_data_ready flag to indicate that the ADC data has been completely written
800042f8:	30 08       	mov	r8,0
							SD_transfer_in_progress=false;
800042fa:	ae 88       	st.b	r7[0x0],r8
					
							SD_sink_ptr+=blocks_per_cluster*bytes_per_block;
800042fc:	49 b9       	lddpc	r9,80004368 <handle_SD+0x3d0>

	// Last transfer, so deassert the current NPCS if CSAAT is set.
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800042fe:	fc 1b 01 00 	movh	r11,0x100
80004302:	95 0b       	st.w	r10[0x0],r11
80004304:	72 0a       	ld.w	r10,r9[0x0]
80004306:	f4 ca c0 00 	sub	r10,r10,-16384
8000430a:	93 0a       	st.w	r9[0x0],r10
						{//yes, it was the last block
							block_count=0;
							while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
							SD_MMC_SPI->tdr =MMC_END_TRANS;	//send END_TRANS token
							my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
							new_ADC_data_ready=false;	//clear new_ADC_data_ready flag to indicate that the ADC data has been completely written
8000430c:	49 59       	lddpc	r9,80004360 <handle_SD+0x3c8>
8000430e:	b2 88       	st.b	r9[0x0],r8
80004310:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
			my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
			if(check_busy_fast() == 0xFF) //not sure if it's necessary to check if SD card is busy here....
			{//SD card is idle
				while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
				SD_MMC_SPI->tdr=(MMC_START_WRITE_BLOCK_MULTI | 0x40);  // send command
				temp_SD_sink_ptr=((card_type==SD_CARD_2_SDHC) ? (SD_sink_ptr>>9) : (SD_sink_ptr));
80004314:	49 58       	lddpc	r8,80004368 <handle_SD+0x3d0>
80004316:	70 0c       	ld.w	r12,r8[0x0]
80004318:	a9 9c       	lsr	r12,0x9
8000431a:	cf ca       	rjmp	80004112 <handle_SD+0x17a>
					while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
					SD_MMC_SPI->tdr=MMC_STARTBLOCK_WRITE_MULTI_TOKEN; //write start multiblock write token
					
					if(bank_switch==bank0sink_bank1source)
					{
						SD_source_ptr=(uint32_t)&bank1[0];
8000431c:	49 5b       	lddpc	r11,80004370 <handle_SD+0x3d8>
8000431e:	48 f8       	lddpc	r8,80004358 <handle_SD+0x3c0>
80004320:	91 0b       	st.w	r8[0x0],r11
80004322:	cb 3a       	rjmp	80004088 <handle_SD+0xf0>
					
					if(check_busy_fast() == 0xFF)
					{
						if(block_count==blocks_per_cluster)//check if last block of cluster was just sent
						{//yes, it was the last block
							block_count=0;
80004324:	30 0a       	mov	r10,0
80004326:	b0 0a       	st.h	r8[0x0],r10
							while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80004328:	72 48       	ld.w	r8,r9[0x10]
8000432a:	fc 7a 18 00 	mov	r10,-190464
8000432e:	e2 18 00 02 	andl	r8,0x2,COH
80004332:	cf b0       	breq	80004328 <handle_SD+0x390>
80004334:	cd bb       	rjmp	800042ea <handle_SD+0x352>
80004336:	d7 03       	nop
80004338:	00 00       	add	r0,r0
8000433a:	08 fb       	st.b	--r4,r11
8000433c:	00 00       	add	r0,r0
8000433e:	08 f4       	st.b	--r4,r4
80004340:	00 00       	add	r0,r0
80004342:	08 f9       	st.b	--r4,r9
80004344:	00 00       	add	r0,r0
80004346:	08 f6       	st.b	--r4,r6
80004348:	00 00       	add	r0,r0
8000434a:	08 fa       	st.b	--r4,r10
8000434c:	00 00       	add	r0,r0
8000434e:	0b 60       	ld.uh	r0,--r5
80004350:	00 00       	add	r0,r0
80004352:	01 e0       	ld.ub	r0,r0[0x6]
80004354:	00 00       	add	r0,r0
80004356:	53 7c       	stdsp	sp[0xdc],r12
80004358:	00 00       	add	r0,r0
8000435a:	13 1c       	ld.sh	r12,r9++
8000435c:	00 00       	add	r0,r0
8000435e:	0b e4       	ld.ub	r4,r5[0x6]
80004360:	00 00       	add	r0,r0
80004362:	08 f8       	st.b	--r4,r8
80004364:	00 00       	add	r0,r0
80004366:	0b 4e       	ld.w	lr,--r5
80004368:	00 00       	add	r0,r0
8000436a:	0b 6c       	ld.uh	r12,--r5
8000436c:	00 00       	add	r0,r0
8000436e:	0b 64       	ld.uh	r4,--r5
80004370:	00 00       	add	r0,r0
80004372:	13 64       	ld.uh	r4,--r9

80004374 <end_sequence_terminate>:
80004374:	d4 21       	pushm	r4-r7,lr
80004376:	4b 68       	lddpc	r8,8000444c <end_sequence_terminate+0xd8>
	}
}

void end_sequence_terminate(void) //done normally at end of sequence.  Finishes writing any remaining data
{
	ADC_byte_count+=(t_experiment.Noffsetsamples+1)*4;  //need to add in offset samples, plus dummy conversion!
80004378:	4b 69       	lddpc	r9,80004450 <end_sequence_terminate+0xdc>
8000437a:	90 0a       	ld.sh	r10,r8[0x0]
8000437c:	f2 f9 03 28 	ld.w	r9,r9[808]
80004380:	2f f9       	sub	r9,-1
80004382:	a3 69       	lsl	r9,0x2
80004384:	f4 09 00 09 	add	r9,r10,r9
80004388:	5c 89       	casts.h	r9
8000438a:	b0 09       	st.h	r8[0x0],r9
	bool extra_ADC_data=false;
	if(ADC_byte_count>=samplebuffer_size)
8000438c:	e0 6a 3f ff 	mov	r10,16383
80004390:	f4 09 19 00 	cp.h	r9,r10
80004394:	e0 8b 00 43 	brhi	8000441a <end_sequence_terminate+0xa6>
80004398:	30 04       	mov	r4,0
8000439a:	4a f7       	lddpc	r7,80004454 <end_sequence_terminate+0xe0>
			gpio_local_set_gpio_pin(PWM0_pin);
		}
		new_ADC_data_ready=true;
	}
	
	while(SD_transfer_in_progress==true)	//wait for any ongoing SD cluster to finish
8000439c:	4a f6       	lddpc	r6,80004458 <end_sequence_terminate+0xe4>
8000439e:	30 05       	mov	r5,0
800043a0:	0d 88       	ld.ub	r8,r6[0x0]
800043a2:	ea 08 18 00 	cp.b	r8,r5
800043a6:	c0 70       	breq	800043b4 <end_sequence_terminate+0x40>
	{
		handle_SD();
800043a8:	fe b0 fd f8 	rcall	80003f98 <handle_SD>
			gpio_local_set_gpio_pin(PWM0_pin);
		}
		new_ADC_data_ready=true;
	}
	
	while(SD_transfer_in_progress==true)	//wait for any ongoing SD cluster to finish
800043ac:	0d 88       	ld.ub	r8,r6[0x0]
800043ae:	ea 08 18 00 	cp.b	r8,r5
800043b2:	cf b1       	brne	800043a8 <end_sequence_terminate+0x34>
	{
		handle_SD();
	}
	
	new_ADC_data_ready=true; //there will be new data no matter what, due to offset samples (I am setting this true here so it is not cleared by finishing of previous SD_arb routine)
800043b4:	30 18       	mov	r8,1
	if(bank_switch==bank0sink_bank1source)
800043b6:	4a a5       	lddpc	r5,8000445c <end_sequence_terminate+0xe8>
	while(SD_transfer_in_progress==true)	//wait for any ongoing SD cluster to finish
	{
		handle_SD();
	}
	
	new_ADC_data_ready=true; //there will be new data no matter what, due to offset samples (I am setting this true here so it is not cleared by finishing of previous SD_arb routine)
800043b8:	ae 88       	st.b	r7[0x0],r8
	if(bank_switch==bank0sink_bank1source)
800043ba:	0b 89       	ld.ub	r9,r5[0x0]
		else
		{
			bank_switch=bank0sink_bank1source;
		}
		
	while(new_ADC_data_ready==true)	//wait for that one to finish too...
800043bc:	30 06       	mov	r6,0
	}
	
	new_ADC_data_ready=true; //there will be new data no matter what, due to offset samples (I am setting this true here so it is not cleared by finishing of previous SD_arb routine)
	if(bank_switch==bank0sink_bank1source)
		{
			bank_switch=bank1sink_bank0source;
800043be:	f0 09 18 00 	cp.b	r9,r8
800043c2:	f9 b8 00 02 	moveq	r8,2
800043c6:	eb f8 0e 00 	st.beq	r5[0x0],r8
		}
		else
		{
			bank_switch=bank0sink_bank1source;
800043ca:	eb f8 1e 00 	st.bne	r5[0x0],r8
		}
		
	while(new_ADC_data_ready==true)	//wait for that one to finish too...
	{
		handle_SD();
800043ce:	fe b0 fd e5 	rcall	80003f98 <handle_SD>
		else
		{
			bank_switch=bank0sink_bank1source;
		}
		
	while(new_ADC_data_ready==true)	//wait for that one to finish too...
800043d2:	0f 88       	ld.ub	r8,r7[0x0]
800043d4:	ec 08 18 00 	cp.b	r8,r6
800043d8:	cf b1       	brne	800043ce <end_sequence_terminate+0x5a>
	{
		handle_SD();
	}
	
	new_ADC_data_ready=extra_ADC_data;	//if there is extra ADC data, then need to do one final cluster
800043da:	49 f8       	lddpc	r8,80004454 <end_sequence_terminate+0xe0>
	if(bank_switch==bank0sink_bank1source)
800043dc:	0b 89       	ld.ub	r9,r5[0x0]
	while(new_ADC_data_ready==true)	//wait for that one to finish too...
	{
		handle_SD();
	}
	
	new_ADC_data_ready=extra_ADC_data;	//if there is extra ADC data, then need to do one final cluster
800043de:	b0 84       	st.b	r8[0x0],r4
	if(bank_switch==bank0sink_bank1source)
800043e0:	49 fa       	lddpc	r10,8000445c <end_sequence_terminate+0xe8>
800043e2:	30 18       	mov	r8,1
		{
			bank_switch=bank1sink_bank0source;
800043e4:	f0 09 18 00 	cp.b	r9,r8
800043e8:	f9 b8 00 02 	moveq	r8,2
800043ec:	f5 f8 0e 00 	st.beq	r10[0x0],r8
		}
		else
		{
			bank_switch=bank0sink_bank1source;
800043f0:	f5 f8 1e 00 	st.bne	r10[0x0],r8
		}
	
	while(new_ADC_data_ready==true)	//wait for that one to finish too...
800043f4:	58 04       	cp.w	r4,0
800043f6:	c0 80       	breq	80004406 <end_sequence_terminate+0x92>
800043f8:	30 06       	mov	r6,0
	{
		handle_SD();
800043fa:	fe b0 fd cf 	rcall	80003f98 <handle_SD>
		else
		{
			bank_switch=bank0sink_bank1source;
		}
	
	while(new_ADC_data_ready==true)	//wait for that one to finish too...
800043fe:	0f 88       	ld.ub	r8,r7[0x0]
80004400:	ec 08 18 00 	cp.b	r8,r6
80004404:	cf b1       	brne	800043fa <end_sequence_terminate+0x86>
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
}
 
inline static void my_SPI_deselectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80004406:	fc 78 18 00 	mov	r8,-190464
8000440a:	70 19       	ld.w	r9,r8[0x4]
8000440c:	ea 19 00 0f 	orh	r9,0xf
80004410:	91 19       	st.w	r8[0x4],r9

	// Last transfer, so deassert the current NPCS if CSAAT is set.
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80004412:	fc 19 01 00 	movh	r9,0x100
80004416:	91 09       	st.w	r8[0x0],r9
	{
		handle_SD();
	}
	
	my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS); //then deselect
}
80004418:	d8 22       	popm	r4-r7,pc
	ADC_byte_count+=(t_experiment.Noffsetsamples+1)*4;  //need to add in offset samples, plus dummy conversion!
	bool extra_ADC_data=false;
	if(ADC_byte_count>=samplebuffer_size)
	{	//ADC sample buffer has finished writing a buffer and has automatically started writing the other bank
		extra_ADC_data=true;	//set flag indicating that sink bank overflowed during offset samples, and that another cluster will need to be sent to collect it
		ADC_byte_count-=samplebuffer_size;	//subtract buffer size from byte counter
8000441a:	f2 c9 40 00 	sub	r9,r9,16384
8000441e:	b0 09       	st.h	r8[0x0],r9
		if(new_ADC_data_ready==true)
80004420:	48 d7       	lddpc	r7,80004454 <end_sequence_terminate+0xe0>
80004422:	30 08       	mov	r8,0
80004424:	0f 89       	ld.ub	r9,r7[0x0]
80004426:	f0 09 18 00 	cp.b	r9,r8
8000442a:	c0 d0       	breq	80004444 <end_sequence_terminate+0xd0>
		{
			data_fail=true;
8000442c:	30 19       	mov	r9,1
8000442e:	48 d8       	lddpc	r8,80004460 <end_sequence_terminate+0xec>
80004430:	b0 89       	st.b	r8[0x0],r9
			failure_cause=FAIL_overrun;
80004432:	30 39       	mov	r9,3
80004434:	48 c8       	lddpc	r8,80004464 <end_sequence_terminate+0xf0>
80004436:	b0 89       	st.b	r8[0x0],r9
80004438:	e2 69 00 00 	mov	r9,131072
8000443c:	fc 18 40 00 	movh	r8,0x4000
80004440:	f1 49 02 54 	st.w	r8[596],r9
			gpio_local_set_gpio_pin(PWM0_pin);
		}
		new_ADC_data_ready=true;
80004444:	30 18       	mov	r8,1
80004446:	30 14       	mov	r4,1
80004448:	ae 88       	st.b	r7[0x0],r8
8000444a:	ca 9b       	rjmp	8000439c <end_sequence_terminate+0x28>
8000444c:	00 00       	add	r0,r0
8000444e:	13 20       	ld.uh	r0,r9++
80004450:	00 00       	add	r0,r0
80004452:	0f e4       	ld.ub	r4,r7[0x6]
80004454:	00 00       	add	r0,r0
80004456:	08 f8       	st.b	--r4,r8
80004458:	00 00       	add	r0,r0
8000445a:	08 f4       	st.b	--r4,r4
8000445c:	00 00       	add	r0,r0
8000445e:	01 e0       	ld.ub	r0,r0[0x6]
80004460:	00 00       	add	r0,r0
80004462:	08 fb       	st.b	--r4,r11
80004464:	00 00       	add	r0,r0
80004466:	08 fa       	st.b	--r4,r10

80004468 <send_data_to_host>:
80004468:	eb cd 40 fe 	pushm	r1-r7,lr
}

void send_data_to_host(uint32_t SD_start_addr, uint8_t cluster_total)
{
	uint32_t SD_addr=SD_start_addr;
	my_pdca_init_channel(USB_USART_TX_PDCA_CHANNEL,0,0,USB_USART_TX_PDCA_PID,0,0,PDCA_TRANSFER_SIZE_BYTE);
8000446c:	30 09       	mov	r9,0
	
	my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS); //then deselect
}

void send_data_to_host(uint32_t SD_start_addr, uint8_t cluster_total)
{
8000446e:	16 97       	mov	r7,r11
	uint32_t SD_addr=SD_start_addr;
	my_pdca_init_channel(USB_USART_TX_PDCA_CHANNEL,0,0,USB_USART_TX_PDCA_PID,0,0,PDCA_TRANSFER_SIZE_BYTE);
80004470:	1a d9       	st.w	--sp,r9
80004472:	12 98       	mov	r8,r9
80004474:	1a d9       	st.w	--sp,r9
80004476:	12 9a       	mov	r10,r9
80004478:	12 9b       	mov	r11,r9
	
	my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS); //then deselect
}

void send_data_to_host(uint32_t SD_start_addr, uint8_t cluster_total)
{
8000447a:	18 95       	mov	r5,r12
	uint32_t SD_addr=SD_start_addr;
	my_pdca_init_channel(USB_USART_TX_PDCA_CHANNEL,0,0,USB_USART_TX_PDCA_PID,0,0,PDCA_TRANSFER_SIZE_BYTE);
8000447c:	30 e9       	mov	r9,14
8000447e:	30 3c       	mov	r12,3
80004480:	fe b0 f9 4e 	rcall	8000371c <my_pdca_init_channel>
	pdca_enable(USB_USART_TX_PDCA_CHANNEL);
80004484:	30 3c       	mov	r12,3
80004486:	c3 8d       	rcall	800046f6 <pdca_enable>
80004488:	32 0a       	mov	r10,32

	my_SD_read_multiblock_PDCA(SD_addr,(uint32_t)(&bank0[0]), blocks_per_cluster);	//must read a cluster from SD before UART can send it
8000448a:	4b 5b       	lddpc	r11,8000455c <send_data_to_host+0xf4>
8000448c:	0a 9c       	mov	r12,r5
8000448e:	fe b0 fa a9 	rcall	800039e0 <my_SD_read_multiblock_PDCA>
80004492:	30 28       	mov	r8,2
	SD_addr+=blocks_per_cluster*bytes_per_block;
	bank_switch=bank1sink_bank0source;
80004494:	4b 34       	lddpc	r4,80004560 <send_data_to_host+0xf8>
80004496:	a8 88       	st.b	r4[0x0],r8
80004498:	2f ed       	sub	sp,-8
	
	for(uint8_t clustercount=1;clustercount<cluster_total;clustercount++)
8000449a:	30 18       	mov	r8,1
8000449c:	f0 07 18 00 	cp.b	r7,r8
800044a0:	e0 88 00 42 	brls	80004524 <send_data_to_host+0xbc>
800044a4:	ea c5 80 00 	sub	r5,r5,-32768
800044a8:	30 28       	mov	r8,2
800044aa:	30 16       	mov	r6,1
800044ac:	10 91       	mov	r1,r8
		{
			pdca_load_channel(USB_USART_TX_PDCA_CHANNEL,&bank1[0],samplebuffer_size);
			my_SD_read_multiblock_PDCA(SD_addr,(uint32_t)(&bank0[0]), blocks_per_cluster);
			SD_addr+=blocks_per_cluster*bytes_per_block;
			while((pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK) == 0x00000000);
			bank_switch=bank1sink_bank0source;
800044ae:	0c 92       	mov	r2,r6
	SD_addr+=blocks_per_cluster*bytes_per_block;
	bank_switch=bank1sink_bank0source;
	
	for(uint8_t clustercount=1;clustercount<cluster_total;clustercount++)
	{	
		if(bank_switch==bank0sink_bank1source)
800044b0:	ea c3 40 00 	sub	r3,r5,16384

	my_SD_read_multiblock_PDCA(SD_addr,(uint32_t)(&bank0[0]), blocks_per_cluster);	//must read a cluster from SD before UART can send it
	SD_addr+=blocks_per_cluster*bytes_per_block;
	bank_switch=bank1sink_bank0source;
	
	for(uint8_t clustercount=1;clustercount<cluster_total;clustercount++)
800044b4:	e4 08 18 00 	cp.b	r8,r2
	{	
		if(bank_switch==bank0sink_bank1source)
800044b8:	c2 00       	breq	800044f8 <send_data_to_host+0x90>
800044ba:	e0 6a 40 00 	mov	r10,16384
			while((pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK) == 0x00000000);
			bank_switch=bank1sink_bank0source;
		}
		else
		{
			pdca_load_channel(USB_USART_TX_PDCA_CHANNEL,&bank0[0],samplebuffer_size);
800044be:	4a 8b       	lddpc	r11,8000455c <send_data_to_host+0xf4>
800044c0:	30 3c       	mov	r12,3
800044c2:	c3 2d       	rcall	80004726 <pdca_load_channel>
800044c4:	06 9c       	mov	r12,r3
800044c6:	32 0a       	mov	r10,32
			my_SD_read_multiblock_PDCA(SD_addr,(uint32_t)(&bank1[0]), blocks_per_cluster);
800044c8:	4a 7b       	lddpc	r11,80004564 <send_data_to_host+0xfc>
800044ca:	fe b0 fa 8b 	rcall	800039e0 <my_SD_read_multiblock_PDCA>
800044ce:	30 3c       	mov	r12,3
800044d0:	c2 0d       	rcall	80004710 <pdca_get_transfer_status>
			SD_addr+=blocks_per_cluster*bytes_per_block;
			while((pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK) == 0x00000000);
800044d2:	ed bc 00 01 	bld	r12,0x1
800044d6:	cf c1       	brne	800044ce <send_data_to_host+0x66>
800044d8:	a8 82       	st.b	r4[0x0],r2
800044da:	30 18       	mov	r8,1
800044dc:	2f f6       	sub	r6,-1
			bank_switch=bank0sink_bank1source;
800044de:	ea c5 c0 00 	sub	r5,r5,-16384

	my_SD_read_multiblock_PDCA(SD_addr,(uint32_t)(&bank0[0]), blocks_per_cluster);	//must read a cluster from SD before UART can send it
	SD_addr+=blocks_per_cluster*bytes_per_block;
	bank_switch=bank1sink_bank0source;
	
	for(uint8_t clustercount=1;clustercount<cluster_total;clustercount++)
800044e2:	5c 56       	castu.b	r6
800044e4:	ec 07 18 00 	cp.b	r7,r6
800044e8:	e0 88 00 1a 	brls	8000451c <send_data_to_host+0xb4>
800044ec:	09 88       	ld.ub	r8,r4[0x0]
800044ee:	ea c3 40 00 	sub	r3,r5,16384
800044f2:	e4 08 18 00 	cp.b	r8,r2
800044f6:	ce 21       	brne	800044ba <send_data_to_host+0x52>
	{	
		if(bank_switch==bank0sink_bank1source)
800044f8:	e0 6a 40 00 	mov	r10,16384
800044fc:	49 ab       	lddpc	r11,80004564 <send_data_to_host+0xfc>
		{
			pdca_load_channel(USB_USART_TX_PDCA_CHANNEL,&bank1[0],samplebuffer_size);
800044fe:	30 3c       	mov	r12,3
80004500:	c1 3d       	rcall	80004726 <pdca_load_channel>
80004502:	06 9c       	mov	r12,r3
80004504:	32 0a       	mov	r10,32
80004506:	49 6b       	lddpc	r11,8000455c <send_data_to_host+0xf4>
80004508:	fe b0 fa 6c 	rcall	800039e0 <my_SD_read_multiblock_PDCA>
			my_SD_read_multiblock_PDCA(SD_addr,(uint32_t)(&bank0[0]), blocks_per_cluster);
8000450c:	30 3c       	mov	r12,3
8000450e:	c0 1d       	rcall	80004710 <pdca_get_transfer_status>
80004510:	ed bc 00 01 	bld	r12,0x1
			SD_addr+=blocks_per_cluster*bytes_per_block;
			while((pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK) == 0x00000000);
80004514:	cf c1       	brne	8000450c <send_data_to_host+0xa4>
80004516:	a8 81       	st.b	r4[0x0],r1
80004518:	30 28       	mov	r8,2
8000451a:	ce 1b       	rjmp	800044dc <send_data_to_host+0x74>
8000451c:	30 19       	mov	r9,1
8000451e:	f2 08 18 00 	cp.b	r8,r9
			bank_switch=bank1sink_bank0source;
80004522:	c0 f0       	breq	80004540 <send_data_to_host+0xd8>
80004524:	e0 6a 40 00 	mov	r10,16384
			bank_switch=bank0sink_bank1source;
		}
		
	}
	
	if(bank_switch==bank0sink_bank1source)	//send final cluster
80004528:	48 db       	lddpc	r11,8000455c <send_data_to_host+0xf4>
8000452a:	30 3c       	mov	r12,3
8000452c:	cf dc       	rcall	80004726 <pdca_load_channel>
		pdca_load_channel(USB_USART_TX_PDCA_CHANNEL,&bank1[0],samplebuffer_size);
		while((pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK) == 0x00000000);
	}
	else
	{
		pdca_load_channel(USB_USART_TX_PDCA_CHANNEL,&bank0[0],samplebuffer_size);
8000452e:	30 3c       	mov	r12,3
80004530:	cf 0c       	rcall	80004710 <pdca_get_transfer_status>
80004532:	ed bc 00 01 	bld	r12,0x1
80004536:	cf c1       	brne	8000452e <send_data_to_host+0xc6>
80004538:	30 3c       	mov	r12,3
		while((pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK) == 0x00000000);
8000453a:	cd 1c       	rcall	800046dc <pdca_disable>
8000453c:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80004540:	e0 6a 40 00 	mov	r10,16384
80004544:	48 8b       	lddpc	r11,80004564 <send_data_to_host+0xfc>
	}
	
	pdca_disable(USB_USART_TX_PDCA_CHANNEL);
80004546:	30 3c       	mov	r12,3
80004548:	ce fc       	rcall	80004726 <pdca_load_channel>
8000454a:	30 3c       	mov	r12,3
}
8000454c:	ce 2c       	rcall	80004710 <pdca_get_transfer_status>
8000454e:	ed bc 00 01 	bld	r12,0x1
		
	}
	
	if(bank_switch==bank0sink_bank1source)	//send final cluster
	{
		pdca_load_channel(USB_USART_TX_PDCA_CHANNEL,&bank1[0],samplebuffer_size);
80004552:	cf c1       	brne	8000454a <send_data_to_host+0xe2>
80004554:	30 3c       	mov	r12,3
80004556:	cc 3c       	rcall	800046dc <pdca_disable>
80004558:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
		while((pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK) == 0x00000000);
8000455c:	00 00       	add	r0,r0
8000455e:	53 7c       	stdsp	sp[0xdc],r12
80004560:	00 00       	add	r0,r0
80004562:	01 e0       	ld.ub	r0,r0[0x6]
80004564:	00 00       	add	r0,r0
80004566:	13 64       	ld.uh	r4,--r9

80004568 <handle_SD_failure>:
	{
		pdca_load_channel(USB_USART_TX_PDCA_CHANNEL,&bank0[0],samplebuffer_size);
		while((pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK) == 0x00000000);
	}
	
	pdca_disable(USB_USART_TX_PDCA_CHANNEL);
80004568:	eb cd 40 fe 	pushm	r1-r7,lr
8000456c:	fc 77 18 00 	mov	r7,-190464
}
80004570:	6e 18       	ld.w	r8,r7[0x4]
80004572:	ea 18 00 0f 	orh	r8,0xf
80004576:	8f 18       	st.w	r7[0x4],r8
80004578:	4d 58       	lddpc	r8,800046cc <handle_SD_failure+0x164>
8000457a:	30 09       	mov	r9,0
8000457c:	b0 89       	st.b	r8[0x0],r9
8000457e:	fc 18 01 00 	movh	r8,0x100
80004582:	8f 08       	st.w	r7[0x0],r8
80004584:	fe b0 f0 5e 	rcall	80002640 <sd_mmc_spi_internal_init>
80004588:	6e 18       	ld.w	r8,r7[0x4]
8000458a:	b1 c8       	cbr	r8,0x10
8000458c:	8f 18       	st.w	r7[0x4],r8
8000458e:	4d 18       	lddpc	r8,800046d0 <handle_SD_failure+0x168>
80004590:	70 0b       	ld.w	r11,r8[0x0]
80004592:	4d 18       	lddpc	r8,800046d4 <handle_SD_failure+0x16c>
80004594:	11 89       	ld.ub	r9,r8[0x0]
80004596:	30 38       	mov	r8,3
}

void fill_cluster_with_0xFF(uint32_t addr, uint32_t Nblocks)
{
	my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	if(card_type == SD_CARD_2_SDHC) {
80004598:	f0 09 18 00 	cp.b	r9,r8
8000459c:	c7 70       	breq	8000468a <handle_SD_failure+0x122>
    r1 = my_SD_SPI_command(MMC_START_WRITE_BLOCK_MULTI , addr>>9);
  } else {
    r1 = my_SD_SPI_command(MMC_START_WRITE_BLOCK_MULTI , addr);
8000459e:	31 9c       	mov	r12,25
800045a0:	4c e4       	lddpc	r4,800046d8 <handle_SD_failure+0x170>
800045a2:	fe b0 f8 d9 	rcall	80003754 <my_SD_SPI_command>
800045a6:	a8 8c       	st.b	r4[0x0],r12
  }
  
  if(r1 != 0x00)
800045a8:	58 0c       	cp.w	r12,0
800045aa:	c6 51       	brne	80004674 <handle_SD_failure+0x10c>
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800045ac:	fc 7a 18 00 	mov	r10,-190464
800045b0:	74 48       	ld.w	r8,r10[0x10]
800045b2:	fc 79 18 00 	mov	r9,-190464
800045b6:	e2 18 00 02 	andl	r8,0x2,COH
800045ba:	cf b0       	breq	800045b0 <handle_SD_failure+0x48>
	spi->tdr =data;
800045bc:	e0 66 00 ff 	mov	r6,255
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800045c0:	12 97       	mov	r7,r9
	spi->tdr =data;
800045c2:	93 36       	st.w	r9[0xc],r6
800045c4:	30 03       	mov	r3,0
800045c6:	e0 61 00 fc 	mov	r1,252
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800045ca:	12 95       	mov	r5,r9
		my_SD_SPI_write(SD_MMC_SPI,0xFF);
	}
	my_SD_SPI_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
	my_SD_SPI_write(SD_MMC_SPI,0xFF);
	// read data response token
	r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF);
800045cc:	4c 32       	lddpc	r2,800046d8 <handle_SD_failure+0x170>
800045ce:	6e 48       	ld.w	r8,r7[0x10]
800045d0:	ed b8 00 01 	bld	r8,0x1
800045d4:	cf d1       	brne	800045ce <handle_SD_failure+0x66>
	spi->tdr =data;
800045d6:	8f 31       	st.w	r7[0xc],r1
800045d8:	30 09       	mov	r9,0
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800045da:	6e 48       	ld.w	r8,r7[0x10]
800045dc:	ed b8 00 01 	bld	r8,0x1
800045e0:	cf d1       	brne	800045da <handle_SD_failure+0x72>
	spi->tdr =data;
800045e2:	8f 36       	st.w	r7[0xc],r6
800045e4:	2f f9       	sub	r9,-1
  
  for(uint16_t i=0;i<Nblocks;i++)
  {
	  my_SD_SPI_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE_MULTI_TOKEN);
	 // write data
	 for(uint16_t j=0;j<MMC_SECTOR_SIZE;j++)
800045e6:	e0 49 02 00 	cp.w	r9,512
800045ea:	cf 81       	brne	800045da <handle_SD_failure+0x72>
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800045ec:	6e 48       	ld.w	r8,r7[0x10]
800045ee:	ed b8 00 01 	bld	r8,0x1
800045f2:	cf d1       	brne	800045ec <handle_SD_failure+0x84>
	spi->tdr =data;
800045f4:	8b 36       	st.w	r5[0xc],r6
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800045f6:	6e 48       	ld.w	r8,r7[0x10]
800045f8:	ed b8 00 01 	bld	r8,0x1
800045fc:	cf d1       	brne	800045f6 <handle_SD_failure+0x8e>
	spi->tdr =data;
800045fe:	8b 36       	st.w	r5[0xc],r6
}

inline static uint8_t my_SD_SPI_write_read(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80004600:	6e 48       	ld.w	r8,r7[0x10]
80004602:	ed b8 00 01 	bld	r8,0x1
80004606:	cf d1       	brne	80004600 <handle_SD_failure+0x98>
	spi->tdr =data;
80004608:	8b 36       	st.w	r5[0xc],r6
	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK));
8000460a:	6e 48       	ld.w	r8,r7[0x10]
8000460c:	ed b8 00 09 	bld	r8,0x9
80004610:	cf d1       	brne	8000460a <handle_SD_failure+0xa2>
	return spi->rdr;
80004612:	6a 28       	ld.w	r8,r5[0x8]
80004614:	5c 58       	castu.b	r8
		my_SD_SPI_write(SD_MMC_SPI,0xFF);
	}
	my_SD_SPI_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
	my_SD_SPI_write(SD_MMC_SPI,0xFF);
	// read data response token
	r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF);
80004616:	a8 88       	st.b	r4[0x0],r8
	if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
80004618:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000461c:	58 58       	cp.w	r8,5
8000461e:	c3 d1       	brne	80004698 <handle_SD_failure+0x130>
		my_SD_SPI_write(SD_MMC_SPI,0xFF);
		spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
		break;
	}

	spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80004620:	e0 6b 00 ff 	mov	r11,255
80004624:	fc 7c 18 00 	mov	r12,-190464
80004628:	e0 a0 10 06 	rcall	80006634 <spi_write>
	spi_write(SD_MMC_SPI,0xFF);
8000462c:	e0 6b 00 ff 	mov	r11,255
80004630:	fc 7c 18 00 	mov	r12,-190464
80004634:	e0 a0 10 00 	rcall	80006634 <spi_write>
	
	r1=my_sd_mmc_spi_wait_not_busy_noCS(); //wait for busy WITHOUT CHANGING CS LINE
80004638:	fe b0 f9 16 	rcall	80003864 <my_sd_mmc_spi_wait_not_busy_noCS>
8000463c:	a4 8c       	st.b	r2[0x0],r12
	if(r1==false)
8000463e:	c0 50       	breq	80004648 <handle_SD_failure+0xe0>
80004640:	2f f3       	sub	r3,-1
    my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return;
  }
  my_SD_SPI_write(SD_MMC_SPI, 0xFF); 
  
  for(uint16_t i=0;i<Nblocks;i++)
80004642:	e0 43 00 20 	cp.w	r3,32
80004646:	cc 41       	brne	800045ce <handle_SD_failure+0x66>
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80004648:	fc 79 18 00 	mov	r9,-190464
8000464c:	72 48       	ld.w	r8,r9[0x10]
8000464e:	fc 77 18 00 	mov	r7,-190464
80004652:	e2 18 00 02 	andl	r8,0x2,COH
80004656:	cf b0       	breq	8000464c <handle_SD_failure+0xe4>
	spi->tdr =data;
80004658:	e0 68 00 fd 	mov	r8,253
8000465c:	8f 38       	st.w	r7[0xc],r8
	}		
  }
  
  my_SD_SPI_write(SD_MMC_SPI,MMC_END_TRANS);
  
  my_sd_mmc_spi_wait_not_busy_noCS(); //wait for busy WITHOUT CHANGING CS LINE	
8000465e:	fe b0 f9 03 	rcall	80003864 <my_sd_mmc_spi_wait_not_busy_noCS>
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
}
 
inline static void my_SPI_deselectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80004662:	6e 18       	ld.w	r8,r7[0x4]
80004664:	ea 18 00 0f 	orh	r8,0xf
80004668:	8f 18       	st.w	r7[0x4],r8

	// Last transfer, so deassert the current NPCS if CSAAT is set.
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000466a:	fc 18 01 00 	movh	r8,0x100
8000466e:	8f 08       	st.w	r7[0x0],r8
80004670:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
	spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
}
 
inline static void my_SPI_deselectchip(volatile avr32_spi_t *spi, unsigned char chip)
{
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80004674:	fc 78 18 00 	mov	r8,-190464
80004678:	70 19       	ld.w	r9,r8[0x4]
8000467a:	ea 19 00 0f 	orh	r9,0xf
8000467e:	91 19       	st.w	r8[0x4],r9

	// Last transfer, so deassert the current NPCS if CSAAT is set.
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80004680:	fc 19 01 00 	movh	r9,0x100
80004684:	91 09       	st.w	r8[0x0],r9
80004686:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

void fill_cluster_with_0xFF(uint32_t addr, uint32_t Nblocks)
{
	my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	if(card_type == SD_CARD_2_SDHC) {
    r1 = my_SD_SPI_command(MMC_START_WRITE_BLOCK_MULTI , addr>>9);
8000468a:	a9 9b       	lsr	r11,0x9
8000468c:	31 9c       	mov	r12,25
8000468e:	49 34       	lddpc	r4,800046d8 <handle_SD_failure+0x170>
80004690:	fe b0 f8 62 	rcall	80003754 <my_SD_SPI_command>
80004694:	a8 8c       	st.b	r4[0x0],r12
80004696:	c8 9b       	rjmp	800045a8 <handle_SD_failure+0x40>
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
80004698:	fc 7a 18 00 	mov	r10,-190464
8000469c:	74 48       	ld.w	r8,r10[0x10]
8000469e:	fc 79 18 00 	mov	r9,-190464
800046a2:	e2 18 00 02 	andl	r8,0x2,COH
800046a6:	cf b0       	breq	8000469c <handle_SD_failure+0x134>
	spi->tdr =data;
800046a8:	e0 68 00 ff 	mov	r8,255
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800046ac:	12 9a       	mov	r10,r9
	spi->tdr =data;
800046ae:	93 38       	st.w	r9[0xc],r8
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
}

inline static void my_SD_SPI_write(volatile avr32_spi_t *spi, uint8_t data)
{
	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK));
800046b0:	74 49       	ld.w	r9,r10[0x10]
800046b2:	fc 78 18 00 	mov	r8,-190464
800046b6:	e2 19 00 02 	andl	r9,0x2,COH
800046ba:	cf b0       	breq	800046b0 <handle_SD_failure+0x148>
	spi->tdr =data;
800046bc:	e0 69 00 ff 	mov	r9,255
	r1 = my_SD_SPI_write_read(SD_MMC_SPI,0xFF);
	if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
	{
		my_SD_SPI_write(SD_MMC_SPI,0xFF);    // send dummy bytes
		my_SD_SPI_write(SD_MMC_SPI,0xFF);
		spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800046c0:	10 9c       	mov	r12,r8
800046c2:	91 39       	st.w	r8[0xc],r9
800046c4:	30 0b       	mov	r11,0
800046c6:	e0 a0 0f 47 	rcall	80006554 <spi_unselectChip>
800046ca:	cb fb       	rjmp	80004648 <handle_SD_failure+0xe0>
800046cc:	00 00       	add	r0,r0
800046ce:	08 f8       	st.b	--r4,r8
800046d0:	00 00       	add	r0,r0
800046d2:	0b 68       	ld.uh	r8,--r5
800046d4:	00 00       	add	r0,r0
800046d6:	0b 4e       	ld.w	lr,--r5
800046d8:	00 00       	add	r0,r0
800046da:	0b 60       	ld.uh	r0,--r5

800046dc <pdca_disable>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800046dc:	58 fc       	cp.w	r12,15
800046de:	e0 8b 00 08 	brhi	800046ee <pdca_disable+0x12>


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800046e2:	a7 6c       	lsl	r12,0x6
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
800046e4:	30 28       	mov	r8,2


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800046e6:	e2 3c 00 00 	sub	r12,196608
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
800046ea:	99 58       	st.w	r12[0x14],r8

}
800046ec:	5e fc       	retal	r12
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800046ee:	3f fc       	mov	r12,-1
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
800046f0:	30 28       	mov	r8,2
800046f2:	99 58       	st.w	r12[0x14],r8

}
800046f4:	5e fc       	retal	r12

800046f6 <pdca_enable>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800046f6:	58 fc       	cp.w	r12,15
800046f8:	e0 8b 00 08 	brhi	80004708 <pdca_enable+0x12>


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800046fc:	a7 6c       	lsl	r12,0x6
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
800046fe:	30 18       	mov	r8,1


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80004700:	e2 3c 00 00 	sub	r12,196608
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80004704:	99 58       	st.w	r12[0x14],r8
}
80004706:	5e fc       	retal	r12
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80004708:	3f fc       	mov	r12,-1
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
8000470a:	30 18       	mov	r8,1
8000470c:	99 58       	st.w	r12[0x14],r8
}
8000470e:	5e fc       	retal	r12

80004710 <pdca_get_transfer_status>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80004710:	58 fc       	cp.w	r12,15
80004712:	e0 8b 00 07 	brhi	80004720 <pdca_get_transfer_status+0x10>


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80004716:	a7 6c       	lsl	r12,0x6
80004718:	e2 3c 00 00 	sub	r12,196608
unsigned long pdca_get_transfer_status(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  return pdca_channel->isr;
8000471c:	78 bc       	ld.w	r12,r12[0x2c]
}
8000471e:	5e fc       	retal	r12
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80004720:	3f fc       	mov	r12,-1
unsigned long pdca_get_transfer_status(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  return pdca_channel->isr;
80004722:	78 bc       	ld.w	r12,r12[0x2c]
}
80004724:	5e fc       	retal	r12

80004726 <pdca_load_channel>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80004726:	58 fc       	cp.w	r12,15
80004728:	e0 88 00 0f 	brls	80004746 <pdca_load_channel+0x20>
8000472c:	3f fc       	mov	r12,-1
void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000472e:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
80004732:	ed b8 00 10 	bld	r8,0x10
80004736:	c1 01       	brne	80004756 <pdca_load_channel+0x30>
  pdca_channel->mar = (unsigned long)addr;
80004738:	99 0b       	st.w	r12[0x0],r11
  pdca_channel->tcr = size;
8000473a:	99 2a       	st.w	r12[0x8],r10
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
8000473c:	e0 68 01 00 	mov	r8,256
80004740:	99 58       	st.w	r12[0x14],r8
  pdca_channel->isr;
80004742:	78 b8       	ld.w	r8,r12[0x2c]
80004744:	5e fc       	retal	r12


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80004746:	a7 6c       	lsl	r12,0x6
80004748:	e2 3c 00 00 	sub	r12,196608
void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000474c:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
80004750:	ed b8 00 10 	bld	r8,0x10
80004754:	cf 20       	breq	80004738 <pdca_load_channel+0x12>
80004756:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)addr;
80004758:	99 0b       	st.w	r12[0x0],r11
  pdca_channel->tcr = size;
8000475a:	99 2a       	st.w	r12[0x8],r10
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
8000475c:	e0 68 01 00 	mov	r8,256
80004760:	99 58       	st.w	r12[0x14],r8
  pdca_channel->isr;
80004762:	78 b8       	ld.w	r8,r12[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80004764:	d5 03       	csrf	0x10
80004766:	5e fc       	retal	r12

80004768 <pm_set_clk_domain_div>:
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80004768:	fe 79 04 00 	mov	r9,-64512
8000476c:	72 1a       	ld.w	r10,r9[0x4]
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  if(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK))
8000476e:	f2 f8 00 d4 	ld.w	r8,r9[212]
80004772:	ed b8 00 05 	bld	r8,0x5
80004776:	c0 20       	breq	8000477a <pm_set_clk_domain_div+0x12>
80004778:	5e fe       	retal	-1
    return -1;

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
8000477a:	30 18       	mov	r8,1
8000477c:	f5 d8 d0 e1 	bfins	r10,r8,0x7,0x1
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
80004780:	f5 db d0 03 	bfins	r10,r11,0x0,0x3
  AVR32_ENTER_CRITICAL_REGION( );
80004784:	e1 b8 00 00 	mfsr	r8,0x0
80004788:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
8000478a:	f8 cb ff ff 	sub	r11,r12,-1
8000478e:	a3 6b       	lsl	r11,0x2
80004790:	ea 1b aa 00 	orh	r11,0xaa00
80004794:	f3 4b 00 58 	st.w	r9[88],r11
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80004798:	a3 6c       	lsl	r12,0x2
8000479a:	e0 2c fb fc 	sub	r12,64508
8000479e:	99 0a       	st.w	r12[0x0],r10
  AVR32_LEAVE_CRITICAL_REGION( );
800047a0:	e6 18 00 01 	andh	r8,0x1,COH
800047a4:	c0 20       	breq	800047a8 <pm_set_clk_domain_div+0x40>
800047a6:	5e fd       	retal	0
800047a8:	d5 03       	csrf	0x10
800047aa:	5e f8       	retal	r8

800047ac <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
800047ac:	e1 b8 00 00 	mfsr	r8,0x0
800047b0:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
800047b2:	fe 79 04 00 	mov	r9,-64512
800047b6:	fc 1a aa 00 	movh	r10,0xaa00
800047ba:	f3 4a 00 58 	st.w	r9[88],r10
  AVR32_PM.mcctrl = src;
800047be:	93 0c       	st.w	r9[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
800047c0:	ed b8 00 10 	bld	r8,0x10
800047c4:	c0 20       	breq	800047c8 <pm_set_mclk_source+0x1c>
800047c6:	d5 03       	csrf	0x10

  return PASS;
}
800047c8:	5e fd       	retal	0
800047ca:	d7 03       	nop

800047cc <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
800047cc:	eb cd 40 fc 	pushm	r2-r7,lr
800047d0:	20 5d       	sub	sp,20
800047d2:	18 96       	mov	r6,r12
        unsigned long pll_freq, rest;
        bool b_div2_pba, b_div2_cpu;

        // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency.
        //scif_configure_osc_crystalmode(SCIF_OSC0, in_osc0_f);
		scif_configure_osc_extmode(SCIF_OSC0);		// I CHANGED THIS TO USE EXTERNAL OSCILLATOR
800047d4:	30 0c       	mov	r12,0
        //  12    9   1  120     1     60    15
        //  12    9   1  120     1     60    30
        //  12   10   1  132     1     66    16.5
        //
        unsigned long in_cpu_f  = param->cpu_f;
        unsigned long in_osc0_f = param->osc0_f;
800047d6:	6c 57       	ld.w	r7,r6[0x14]
        //  12    8   1  108     1     54    27
        //  12    9   1  120     1     60    15
        //  12    9   1  120     1     60    30
        //  12   10   1  132     1     66    16.5
        //
        unsigned long in_cpu_f  = param->cpu_f;
800047d8:	6c 15       	ld.w	r5,r6[0x4]
        unsigned long pll_freq, rest;
        bool b_div2_pba, b_div2_cpu;

        // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency.
        //scif_configure_osc_crystalmode(SCIF_OSC0, in_osc0_f);
		scif_configure_osc_extmode(SCIF_OSC0);		// I CHANGED THIS TO USE EXTERNAL OSCILLATOR
800047da:	c6 9d       	rcall	80004aac <scif_configure_osc_extmode>
800047dc:	30 0a       	mov	r10,0
        // Enable the OSC0
        scif_enable_osc(SCIF_OSC0, param->osc0_startup, false); //SET WAIT FOR READY TO FALSE WHEN USING EXTERNAL OSCILLATOR
800047de:	6c 6b       	ld.w	r11,r6[0x18]
800047e0:	14 9c       	mov	r12,r10
800047e2:	c2 dd       	rcall	80004a3c <scif_enable_osc>
800047e4:	30 1c       	mov	r12,1
800047e6:	ce 3f       	rcall	800047ac <pm_set_mclk_source>
        // Set the main clock source as being OSC0.
        pm_set_mclk_source(PM_CLK_SRC_OSC0);
800047e8:	0e 35       	cp.w	r5,r7
800047ea:	e0 80 00 a1 	breq	8000492c <pcl_configure_clocks+0x160>

        // Start with CPU freq config
        if (in_cpu_f == in_osc0_f)
800047ee:	ea 07 0d 0a 	divu	r10,r5,r7
800047f2:	30 18       	mov	r8,1
        else if (in_cpu_f < in_osc0_f)
        {
          // TBD
        }

        rest = in_cpu_f % in_osc0_f;
800047f4:	16 99       	mov	r9,r11
800047f6:	16 9c       	mov	r12,r11
800047f8:	c0 78       	rjmp	80004806 <pcl_configure_clocks+0x3a>
800047fa:	2f f8       	sub	r8,-1
800047fc:	18 09       	add	r9,r12
800047fe:	e0 48 00 20 	cp.w	r8,32

        for (div = 1; div < 32; div++)
80004802:	e0 80 00 92 	breq	80004926 <pcl_configure_clocks+0x15a>
80004806:	f2 07 0d 0a 	divu	r10,r9,r7
8000480a:	58 0b       	cp.w	r11,0
        {
          if ((div * rest) % in_osc0_f == 0)
8000480c:	cf 71       	brne	800047fa <pcl_configure_clocks+0x2e>
8000480e:	b1 35       	mul	r5,r8
80004810:	ea 07 0d 04 	divu	r4,r5,r7
            break;
        }
        if (div == 32)
          return FAIL;

        mul = (in_cpu_f * div) / in_osc0_f;
80004814:	08 99       	mov	r9,r4
80004816:	58 f4       	cp.w	r4,15
80004818:	e0 8b 00 87 	brhi	80004926 <pcl_configure_clocks+0x15a>

        if (mul > PM_MAX_MUL)
8000481c:	eb d8 c0 01 	bfextu	r5,r8,0x0,0x1
80004820:	e0 81 00 9f 	brne	8000495e <pcl_configure_clocks+0x192>
          return FAIL;

        // export 2power from PLL div to div2_cpu
        while (!(div % 2))
80004824:	a1 98       	lsr	r8,0x1
80004826:	2f f5       	sub	r5,-1
80004828:	ed b8 00 00 	bld	r8,0x0
        {
          div /= 2;
          div2_cpu++;
8000482c:	cf c1       	brne	80004824 <pcl_configure_clocks+0x58>

        if (mul > PM_MAX_MUL)
          return FAIL;

        // export 2power from PLL div to div2_cpu
        while (!(div % 2))
8000482e:	c0 88       	rjmp	8000483e <pcl_configure_clocks+0x72>
80004830:	f2 0a 15 01 	lsl	r10,r9,0x1
80004834:	58 fa       	cp.w	r10,15
        // . Check out if the PLL has a valid in_cpu_f.
        // . Try to have for the PLL frequency (VCO output) the highest possible value
        //   to reduce jitter.
        while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
        {
          if (2 * mul > PM_MAX_MUL)
80004836:	e0 8b 00 12 	brhi	8000485a <pcl_configure_clocks+0x8e>
8000483a:	14 99       	mov	r9,r10
8000483c:	2f f5       	sub	r5,-1
8000483e:	f2 07 02 4b 	mul	r11,r9,r7
            break;
          mul *= 2;
          div2_cpu++;
80004842:	e0 6c 1b ff 	mov	r12,7167

        // Here we know the mul and div parameter of the PLL config.
        // . Check out if the PLL has a valid in_cpu_f.
        // . Try to have for the PLL frequency (VCO output) the highest possible value
        //   to reduce jitter.
        while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80004846:	ea 1c 0e 4e 	orh	r12,0xe4e
8000484a:	f6 03 15 01 	lsl	r3,r11,0x1
8000484e:	e6 08 0d 02 	divu	r2,r3,r8
80004852:	04 9a       	mov	r10,r2
80004854:	18 32       	cp.w	r2,r12
80004856:	fe 98 ff ed 	brls	80004830 <pcl_configure_clocks+0x64>
8000485a:	58 05       	cp.w	r5,0
8000485c:	ea 0a 17 00 	moveq	r10,r5
            break;
          mul *= 2;
          div2_cpu++;
        }

        if (div2_cpu != 0)
80004860:	ea 03 17 00 	moveq	r3,r5
80004864:	f7 b5 01 01 	subne	r5,1
80004868:	f9 ba 01 01 	movne	r10,1
        {
          div2_cpu--;
8000486c:	f4 03 17 10 	movne	r3,r10
80004870:	ba aa       	st.b	sp[0x2],r10
80004872:	f0 03 09 43 	lsl	r3,r8,r3

        opt.osc = SCIF_OSC0,     // Sel Osc0 or Osc1
        opt.lockcount = 16,      // lockcount in main clock for the PLL wait lock
        opt.div = div,             // DIV=1 in the formula
        opt.mul = mul,             // MUL=7 in the formula
        opt.pll_div2 = div2_en,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
80004876:	20 5d       	sub	sp,20
        {
          div2_cpu--;
          div2_en = 1;
        }

        pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
80004878:	50 28       	stdsp	sp[0x8],r8
8000487a:	50 78       	stdsp	sp[0x1c],r8
        opt.pll_div2 = div2_en,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
        opt.pll_wbwdisable = 0,  //pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
        opt.pll_freq = (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.


        scif_pll_setup(SCIF_PLL0, opt); // lockcount in main clock for the PLL wait lock
8000487c:	30 08       	mov	r8,0
8000487e:	20 19       	sub	r9,1

        scif_pll_opt_t opt;

        opt.osc = SCIF_OSC0,     // Sel Osc0 or Osc1
        opt.lockcount = 16,      // lockcount in main clock for the PLL wait lock
        opt.div = div,             // DIV=1 in the formula
80004880:	fb 68 00 15 	st.b	sp[21],r8
        opt.mul = mul,             // MUL=7 in the formula
80004884:	fb 68 00 24 	st.b	sp[36],r8
        opt.pll_div2 = div2_en,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
        opt.pll_wbwdisable = 0,  //pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
80004888:	31 08       	mov	r8,16
        param->cpu_f = pll_freq / (1 << div2_cpu);
        mul--;

        scif_pll_opt_t opt;

        opt.osc = SCIF_OSC0,     // Sel Osc0 or Osc1
8000488a:	50 19       	stdsp	sp[0x4],r9
8000488c:	50 38       	stdsp	sp[0xc],r8
        opt.lockcount = 16,      // lockcount in main clock for the PLL wait lock
8000488e:	50 88       	stdsp	sp[0x20],r8
        opt.pll_div2 = div2_en,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
        opt.pll_wbwdisable = 0,  //pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
        opt.pll_freq = (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.


        scif_pll_setup(SCIF_PLL0, opt); // lockcount in main clock for the PLL wait lock
80004890:	50 69       	stdsp	sp[0x18],r9
80004892:	fa c8 ff ec 	sub	r8,sp,-20
        scif_pll_opt_t opt;

        opt.osc = SCIF_OSC0,     // Sel Osc0 or Osc1
        opt.lockcount = 16,      // lockcount in main clock for the PLL wait lock
        opt.div = div,             // DIV=1 in the formula
        opt.mul = mul,             // MUL=7 in the formula
80004896:	70 49       	ld.w	r9,r8[0x10]
        opt.pll_div2 = div2_en,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
        opt.pll_wbwdisable = 0,  //pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
        opt.pll_freq = (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.


        scif_pll_setup(SCIF_PLL0, opt); // lockcount in main clock for the PLL wait lock
80004898:	50 49       	stdsp	sp[0x10],r9
8000489a:	f6 03 0d 02 	divu	r2,r11,r3
8000489e:	e4 05 0a 49 	lsr	r9,r2,r5
        {
          div2_cpu--;
          div2_en = 1;
        }

        pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
800048a2:	8d 19       	st.w	r6[0x4],r9

        // Update real CPU Frequency
        param->cpu_f = pll_freq / (1 << div2_cpu);
800048a4:	e0 6a 68 00 	mov	r10,26624
800048a8:	ea 1a 09 89 	orh	r10,0x989
        opt.lockcount = 16,      // lockcount in main clock for the PLL wait lock
        opt.div = div,             // DIV=1 in the formula
        opt.mul = mul,             // MUL=7 in the formula
        opt.pll_div2 = div2_en,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
        opt.pll_wbwdisable = 0,  //pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
        opt.pll_freq = (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.
800048ac:	14 32       	cp.w	r2,r10
800048ae:	f9 b9 03 01 	movlo	r9,1
800048b2:	f9 b9 02 00 	movhs	r9,0
800048b6:	fb 69 00 14 	st.b	sp[20],r9
800048ba:	70 08       	ld.w	r8,r8[0x0]
800048bc:	30 0c       	mov	r12,0
800048be:	50 08       	stdsp	sp[0x0],r8


        scif_pll_setup(SCIF_PLL0, opt); // lockcount in main clock for the PLL wait lock
800048c0:	c8 4c       	rcall	800049c8 <scif_pll_setup>
800048c2:	30 0c       	mov	r12,0
800048c4:	c6 0c       	rcall	80004984 <scif_pll_enable>
800048c6:	30 0c       	mov	r12,0
800048c8:	18 97       	mov	r7,r12

        /* Enable PLL0 */
        scif_pll_enable(SCIF_PLL0);
800048ca:	c4 dc       	rcall	80004964 <scif_wait_for_pll_locked>
800048cc:	04 94       	mov	r4,r2
800048ce:	04 98       	mov	r8,r2

        /* Wait for PLL0 locked */
        scif_wait_for_pll_locked(SCIF_PLL0) ;
800048d0:	2f bd       	sub	sp,-20
800048d2:	6c 29       	ld.w	r9,r6[0x8]
800048d4:	e0 6c 14 80 	mov	r12,5248
        {
          div2_cpu--;
          div2_en = 1;
        }

        pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
800048d8:	ea 1c 03 ef 	orh	r12,0x3ef

        /* Enable PLL0 */
        scif_pll_enable(SCIF_PLL0);

        /* Wait for PLL0 locked */
        scif_wait_for_pll_locked(SCIF_PLL0) ;
800048dc:	18 38       	cp.w	r8,r12
800048de:	e0 8b 00 04 	brhi	800048e6 <pcl_configure_clocks+0x11a>

        rest = pll_freq;
        while (rest > AVR32_PM_PBA_MAX_FREQ ||
800048e2:	12 38       	cp.w	r8,r9
800048e4:	c3 a0       	breq	80004958 <pcl_configure_clocks+0x18c>
800048e6:	2f f7       	sub	r7,-1
800048e8:	e8 07 0a 48 	lsr	r8,r4,r7
800048ec:	12 38       	cp.w	r8,r9
800048ee:	cf 32       	brcc	800048d4 <pcl_configure_clocks+0x108>
800048f0:	8d 28       	st.w	r6[0x8],r8
               rest != param->pba_f)
        {
          div2_pba++;
800048f2:	58 07       	cp.w	r7,0
          rest = pll_freq / (1 << div2_pba);
800048f4:	ee 04 17 00 	moveq	r4,r7
          if (rest < param->pba_f)
800048f8:	f7 b7 01 01 	subne	r7,1
            break;
        }

        // Update real PBA Frequency
        param->pba_f = pll_freq / (1 << div2_pba);
800048fc:	f9 b4 01 01 	movne	r4,1
          div2_cpu--;
        }
        else
          b_div2_cpu = false;

        if (div2_pba)
80004900:	58 05       	cp.w	r5,0
80004902:	ea 08 17 00 	moveq	r8,r5
        {
          b_div2_pba = true;
          div2_pba--;
80004906:	f7 b5 01 01 	subne	r5,1
8000490a:	f9 b8 01 01 	movne	r8,1

        // Update real PBA Frequency
        param->pba_f = pll_freq / (1 << div2_pba);


        if (div2_cpu)
8000490e:	58 08       	cp.w	r8,0
80004910:	c1 a1       	brne	80004944 <pcl_configure_clocks+0x178>
        {
          b_div2_cpu = true;
          div2_cpu--;
80004912:	58 04       	cp.w	r4,0
80004914:	c1 11       	brne	80004936 <pcl_configure_clocks+0x16a>
80004916:	6c 1c       	ld.w	r12,r6[0x4]
80004918:	fe b0 f5 d8 	rcall	800034c8 <flashc_set_flash_waitstate_and_readmode>
          div2_pba--;
        }
        else
          b_div2_pba = false;

        if (b_div2_cpu == true )
8000491c:	30 3c       	mov	r12,3
        {
          pm_set_clk_domain_div(PM_CLK_DOMAIN_0, (pm_divratio_t) div2_cpu); // CPU
          pm_set_clk_domain_div(PM_CLK_DOMAIN_1, (pm_divratio_t) div2_cpu); // HSB
          pm_set_clk_domain_div(PM_CLK_DOMAIN_3, (pm_divratio_t) div2_cpu); // PBB
        }
        if (b_div2_pba == true )
8000491e:	c4 7f       	rcall	800047ac <pm_set_mclk_source>
80004920:	2f bd       	sub	sp,-20
          pm_set_clk_domain_div(PM_CLK_DOMAIN_2, (pm_divratio_t) div2_pba); // PBA
          pm_set_clk_domain_div(PM_CLK_DOMAIN_4, (pm_divratio_t) div2_pba); // PBC
        }

        // Set Flashc Wait State
        flashc_set_flash_waitstate_and_readmode(param->cpu_f);
80004922:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80004926:	2f bd       	sub	sp,-20

        // Set the main clock source as being PLL0.
        pm_set_mclk_source(PM_CLK_SRC_PLL0);
80004928:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
8000492c:	8d 25       	st.w	r6[0x8],r5
8000492e:	8d 15       	st.w	r6[0x4],r5
80004930:	2f bd       	sub	sp,-20
80004932:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80004936:	0e 9b       	mov	r11,r7
80004938:	30 2c       	mov	r12,2

        // Start with CPU freq config
        if (in_cpu_f == in_osc0_f)
        {
          param->cpu_f = in_osc0_f;
          param->pba_f = in_osc0_f;
8000493a:	c1 7f       	rcall	80004768 <pm_set_clk_domain_div>
        pm_set_mclk_source(PM_CLK_SRC_OSC0);

        // Start with CPU freq config
        if (in_cpu_f == in_osc0_f)
        {
          param->cpu_f = in_osc0_f;
8000493c:	0e 9b       	mov	r11,r7
          param->pba_f = in_osc0_f;
8000493e:	30 4c       	mov	r12,4
80004940:	c1 4f       	rcall	80004768 <pm_set_clk_domain_div>
80004942:	ce ab       	rjmp	80004916 <pcl_configure_clocks+0x14a>
          pm_set_clk_domain_div(PM_CLK_DOMAIN_1, (pm_divratio_t) div2_cpu); // HSB
          pm_set_clk_domain_div(PM_CLK_DOMAIN_3, (pm_divratio_t) div2_cpu); // PBB
        }
        if (b_div2_pba == true )
        {
          pm_set_clk_domain_div(PM_CLK_DOMAIN_2, (pm_divratio_t) div2_pba); // PBA
80004944:	0a 9b       	mov	r11,r5
80004946:	30 0c       	mov	r12,0
80004948:	c1 0f       	rcall	80004768 <pm_set_clk_domain_div>
8000494a:	0a 9b       	mov	r11,r5
          pm_set_clk_domain_div(PM_CLK_DOMAIN_4, (pm_divratio_t) div2_pba); // PBC
8000494c:	30 1c       	mov	r12,1
8000494e:	c0 df       	rcall	80004768 <pm_set_clk_domain_div>
80004950:	0a 9b       	mov	r11,r5
80004952:	30 3c       	mov	r12,3
80004954:	c0 af       	rcall	80004768 <pm_set_clk_domain_div>
        else
          b_div2_pba = false;

        if (b_div2_cpu == true )
        {
          pm_set_clk_domain_div(PM_CLK_DOMAIN_0, (pm_divratio_t) div2_cpu); // CPU
80004956:	cd eb       	rjmp	80004912 <pcl_configure_clocks+0x146>
80004958:	e8 07 0a 48 	lsr	r8,r4,r7
8000495c:	cc ab       	rjmp	800048f0 <pcl_configure_clocks+0x124>
          pm_set_clk_domain_div(PM_CLK_DOMAIN_1, (pm_divratio_t) div2_cpu); // HSB
8000495e:	16 95       	mov	r5,r11
80004960:	c6 fb       	rjmp	8000483e <pcl_configure_clocks+0x72>
80004962:	d7 03       	nop

80004964 <scif_wait_for_pll_locked>:
}

long int scif_wait_for_pll_locked(scif_pll_t pll)
{

  if (pll == SCIF_PLL0)
80004964:	58 0c       	cp.w	r12,0
80004966:	c0 81       	brne	80004976 <scif_wait_for_pll_locked+0x12>
  {
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
80004968:	fe 79 08 00 	mov	r9,-63488
8000496c:	72 58       	ld.w	r8,r9[0x14]
8000496e:	ed b8 00 04 	bld	r8,0x4
80004972:	cf d1       	brne	8000496c <scif_wait_for_pll_locked+0x8>
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
  }

  return PASS;
}
80004974:	5e fd       	retal	0
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80004976:	fe 79 08 00 	mov	r9,-63488
8000497a:	72 58       	ld.w	r8,r9[0x14]
8000497c:	ed b8 00 05 	bld	r8,0x5
80004980:	cf d1       	brne	8000497a <scif_wait_for_pll_locked+0x16>
  }

  return PASS;
}
80004982:	5e fd       	retal	0

80004984 <scif_pll_enable>:

  return PASS;
}

long int scif_pll_enable(scif_pll_t pll)
{
80004984:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80004986:	fa c8 ff f8 	sub	r8,sp,-8
8000498a:	f8 ca ff f9 	sub	r10,r12,-7
8000498e:	fe 79 08 00 	mov	r9,-63488
80004992:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80004996:	30 1b       	mov	r11,1
{

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80004998:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
8000499c:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
800049a0:	f9 48 ff f8 	st.w	r12[-8],r8
    AVR32_ENTER_CRITICAL_REGION( );
800049a4:	e1 b8 00 00 	mfsr	r8,0x0
800049a8:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
800049aa:	f4 0b 15 02 	lsl	r11,r10,0x2
800049ae:	ea 1b aa 00 	orh	r11,0xaa00
800049b2:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
800049b4:	f8 fb ff f8 	ld.w	r11,r12[-8]
800049b8:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
    AVR32_LEAVE_CRITICAL_REGION( );
800049bc:	ed b8 00 10 	bld	r8,0x10
800049c0:	c0 20       	breq	800049c4 <scif_pll_enable+0x40>
800049c2:	d5 03       	csrf	0x10

  return PASS;
}
800049c4:	2f ed       	sub	sp,-8
800049c6:	5e fd       	retal	0

800049c8 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
800049c8:	eb cd 40 d0 	pushm	r4,r6-r7,lr
800049cc:	20 2d       	sub	sp,8
800049ce:	fa c4 ff e8 	sub	r4,sp,-24
800049d2:	09 88       	ld.ub	r8,r4[0x0]
800049d4:	09 a9       	ld.ub	r9,r4[0x2]
800049d6:	09 97       	ld.ub	r7,r4[0x1]

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt.osc;
  u_avr32_scif_pll.PLL[pll].pllopt  = opt.pll_freq | (opt.pll_div2 << 1) | (opt.pll_wbwdisable << 2);
800049d8:	a3 67       	lsl	r7,0x2
800049da:	ef e9 10 17 	or	r7,r7,r9<<0x1
800049de:	10 47       	or	r7,r8
{

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800049e0:	fa c8 ff f8 	sub	r8,sp,-8

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
800049e4:	68 3b       	ld.w	r11,r4[0xc]
800049e6:	e9 36 00 10 	ld.ub	r6,r4[16]
800049ea:	68 2e       	ld.w	lr,r4[0x8]

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800049ec:	f8 ca ff f9 	sub	r10,r12,-7

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
800049f0:	68 14       	ld.w	r4,r4[0x4]

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800049f2:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
800049f6:	fe 79 08 00 	mov	r9,-63488
800049fa:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt.osc;
800049fe:	f1 d6 d0 22 	bfins	r8,r6,0x1,0x2
  u_avr32_scif_pll.PLL[pll].pllopt  = opt.pll_freq | (opt.pll_div2 << 1) | (opt.pll_wbwdisable << 2);
80004a02:	f1 d7 d0 63 	bfins	r8,r7,0x3,0x3
  u_avr32_scif_pll.PLL[pll].plldiv   = opt.div;
80004a06:	f1 de d1 04 	bfins	r8,lr,0x8,0x4
  u_avr32_scif_pll.PLL[pll].pllmul  = opt.mul;
80004a0a:	f1 d4 d2 04 	bfins	r8,r4,0x10,0x4
  u_avr32_scif_pll.PLL[pll].pllcount= opt.lockcount;
80004a0e:	f1 db d3 06 	bfins	r8,r11,0x18,0x6
80004a12:	f9 48 ff f8 	st.w	r12[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80004a16:	e1 b8 00 00 	mfsr	r8,0x0
80004a1a:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80004a1c:	f4 0b 15 02 	lsl	r11,r10,0x2
80004a20:	ea 1b aa 00 	orh	r11,0xaa00
80004a24:	93 6b       	st.w	r9[0x18],r11
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80004a26:	f8 fb ff f8 	ld.w	r11,r12[-8]
80004a2a:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
  AVR32_LEAVE_CRITICAL_REGION( );
80004a2e:	ed b8 00 10 	bld	r8,0x10
80004a32:	c0 20       	breq	80004a36 <scif_pll_setup+0x6e>
80004a34:	d5 03       	csrf	0x10

  return PASS;
}
80004a36:	2f ed       	sub	sp,-8
80004a38:	e3 cf 80 d0 	ldm	sp++,r4,r6-r7,pc,r12=0

80004a3c <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80004a3c:	d4 01       	pushm	lr
80004a3e:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80004a40:	fa c8 ff f8 	sub	r8,sp,-8
80004a44:	f8 c9 ff f7 	sub	r9,r12,-9
80004a48:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80004a4c:	fe 78 08 00 	mov	r8,-63488
80004a50:	f0 09 03 2e 	ld.w	lr,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80004a54:	fd db d1 04 	bfins	lr,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80004a58:	30 1b       	mov	r11,1
80004a5a:	fd db d2 01 	bfins	lr,r11,0x10,0x1
80004a5e:	f9 4e ff f8 	st.w	r12[-8],lr
  AVR32_ENTER_CRITICAL_REGION( );
80004a62:	e1 bb 00 00 	mfsr	r11,0x0
80004a66:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80004a68:	f2 0e 15 02 	lsl	lr,r9,0x2
80004a6c:	ea 1e aa 00 	orh	lr,0xaa00
80004a70:	91 6e       	st.w	r8[0x18],lr
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80004a72:	f8 fc ff f8 	ld.w	r12,r12[-8]
80004a76:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80004a7a:	ed bb 00 10 	bld	r11,0x10
80004a7e:	c0 61       	brne	80004a8a <scif_enable_osc+0x4e>

  if(true == wait_for_ready)
80004a80:	58 0a       	cp.w	r10,0
80004a82:	c0 61       	brne	80004a8e <scif_enable_osc+0x52>
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80004a84:	30 0c       	mov	r12,0
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
      return -1;
  }

  return PASS;
}
80004a86:	2f ed       	sub	sp,-8
80004a88:	d8 02       	popm	pc
  AVR32_ENTER_CRITICAL_REGION( );
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
  AVR32_LEAVE_CRITICAL_REGION( );
80004a8a:	d5 03       	csrf	0x10
80004a8c:	cf ab       	rjmp	80004a80 <scif_enable_osc+0x44>

  if(true == wait_for_ready)
80004a8e:	30 08       	mov	r8,0
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80004a90:	fe 7a 08 00 	mov	r10,-63488
80004a94:	c0 58       	rjmp	80004a9e <scif_enable_osc+0x62>
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
  AVR32_LEAVE_CRITICAL_REGION( );

  if(true == wait_for_ready)
80004a96:	2f f8       	sub	r8,-1
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
  {
    if(--timeout == 0)
80004a98:	e0 58 86 a0 	cp.w	r8,100000
80004a9c:	c0 60       	breq	80004aa8 <scif_enable_osc+0x6c>
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80004a9e:	74 59       	ld.w	r9,r10[0x14]
80004aa0:	ed b9 00 00 	bld	r9,0x0
80004aa4:	cf 91       	brne	80004a96 <scif_enable_osc+0x5a>
80004aa6:	ce fb       	rjmp	80004a84 <scif_enable_osc+0x48>
  {
    if(--timeout == 0)
80004aa8:	3f fc       	mov	r12,-1
80004aaa:	ce eb       	rjmp	80004a86 <scif_enable_osc+0x4a>

80004aac <scif_configure_osc_extmode>:

  return PASS;
}

long int scif_configure_osc_extmode(scif_osc_t osc)
{
80004aac:	20 2d       	sub	sp,8
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

      // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80004aae:	fa c8 ff f8 	sub	r8,sp,-8
80004ab2:	f8 ca ff f7 	sub	r10,r12,-9
80004ab6:	fe 79 08 00 	mov	r9,-63488
80004aba:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[osc].mode = SCIF_OSC_MODE_EXT_CLK;
80004abe:	30 0b       	mov	r11,0
long int scif_configure_osc_extmode(scif_osc_t osc)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

      // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80004ac0:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[osc].mode = SCIF_OSC_MODE_EXT_CLK;
80004ac4:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
80004ac8:	f9 48 ff f8 	st.w	r12[-8],r8
    AVR32_ENTER_CRITICAL_REGION( );
80004acc:	e1 b8 00 00 	mfsr	r8,0x0
80004ad0:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80004ad2:	f4 0b 15 02 	lsl	r11,r10,0x2
80004ad6:	ea 1b aa 00 	orh	r11,0xaa00
80004ada:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80004adc:	f8 fb ff f8 	ld.w	r11,r12[-8]
80004ae0:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
    AVR32_LEAVE_CRITICAL_REGION( );
80004ae4:	ed b8 00 10 	bld	r8,0x10
80004ae8:	c0 20       	breq	80004aec <scif_configure_osc_extmode+0x40>
80004aea:	d5 03       	csrf	0x10

  return PASS;
}
80004aec:	2f ed       	sub	sp,-8
80004aee:	5e fd       	retal	0

80004af0 <gettruesequence>:
	}			
		return true;	//return true if sequence passed
}

void gettruesequence(void)  //does the opposite:  looks at realized parameters in t_experiment, convert them back to floats, and store the results in experiment
{
80004af0:	d4 31       	pushm	r0-r7,lr
80004af2:	20 8d       	sub	sp,32
	experiment.MODE=t_experiment.MODE;
80004af4:	fe f4 05 e8 	ld.w	r4,pc[1512]
	experiment.N_sequences=t_experiment.N_sequences;
80004af8:	09 98       	ld.ub	r8,r4[0x1]
		return true;	//return true if sequence passed
}

void gettruesequence(void)  //does the opposite:  looks at realized parameters in t_experiment, convert them back to floats, and store the results in experiment
{
	experiment.MODE=t_experiment.MODE;
80004afa:	fe f3 05 e6 	ld.w	r3,pc[1510]
	experiment.N_sequences=t_experiment.N_sequences;
80004afe:	a6 18       	st.h	r3[0x2],r8
	experiment.Noffsetsamples=t_experiment.Noffsetsamples;
80004b00:	e8 f8 03 28 	ld.w	r8,r4[808]
80004b04:	e7 48 03 88 	st.w	r3[904],r8
	experiment.dt_offsetsamples=t_experiment.t_dt_offsetsamples;
80004b08:	e9 18 03 2c 	ld.uh	r8,r4[812]
80004b0c:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
80004b10:	e7 48 03 8c 	st.w	r3[908],r8
	experiment.Vgain=(float)t_experiment.t_Vgain/4096*Vref;
80004b14:	fc 18 39 80 	movh	r8,0x3980
		return true;	//return true if sequence passed
}

void gettruesequence(void)  //does the opposite:  looks at realized parameters in t_experiment, convert them back to floats, and store the results in experiment
{
	experiment.MODE=t_experiment.MODE;
80004b18:	09 8c       	ld.ub	r12,r4[0x0]
	experiment.N_sequences=t_experiment.N_sequences;
	experiment.Noffsetsamples=t_experiment.Noffsetsamples;
	experiment.dt_offsetsamples=t_experiment.t_dt_offsetsamples;
	experiment.Vgain=(float)t_experiment.t_Vgain/4096*Vref;
80004b1a:	e9 19 03 34 	ld.uh	r9,r4[820]
80004b1e:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
80004b22:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004b26:	fc 18 40 20 	movh	r8,0x4020
80004b2a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
		return true;	//return true if sequence passed
}

void gettruesequence(void)  //does the opposite:  looks at realized parameters in t_experiment, convert them back to floats, and store the results in experiment
{
	experiment.MODE=t_experiment.MODE;
80004b2e:	50 7c       	stdsp	sp[0x1c],r12
80004b30:	a6 0c       	st.h	r3[0x0],r12
	experiment.N_sequences=t_experiment.N_sequences;
	experiment.Noffsetsamples=t_experiment.Noffsetsamples;
	experiment.dt_offsetsamples=t_experiment.t_dt_offsetsamples;
	experiment.Vgain=(float)t_experiment.t_Vgain/4096*Vref;
80004b32:	e7 48 03 94 	st.w	r3[916],r8
	experiment.TPArise=(float)t_experiment.t_TPArise*TC_DIV*1000000.0/PBA_SPEED;
80004b36:	e9 10 03 24 	ld.uh	r0,r4[804]
80004b3a:	fc 15 41 00 	movh	r5,0x4100
80004b3e:	e5 a4 00 00 	cop	cp0,cr0,cr0,cr0,0x48
80004b42:	e5 a2 0c 05 	cop	cp0,cr12,cr0,cr5,0x44
80004b46:	e0 a0 1f f7 	rcall	80008b34 <__avr32_f32_to_f64>
80004b4a:	30 08       	mov	r8,0
80004b4c:	e0 69 84 80 	mov	r9,33920
80004b50:	ea 19 41 2e 	orh	r9,0x412e
80004b54:	e0 a0 1a 68 	rcall	80008024 <__avr32_f64_mul>
		t_experiment.t_sequence[i]=t_currentsequence; //save sequence parameters
	}			
		return true;	//return true if sequence passed
}

void gettruesequence(void)  //does the opposite:  looks at realized parameters in t_experiment, convert them back to floats, and store the results in experiment
80004b58:	e8 cc fc dc 	sub	r12,r4,-804
	experiment.MODE=t_experiment.MODE;
	experiment.N_sequences=t_experiment.N_sequences;
	experiment.Noffsetsamples=t_experiment.Noffsetsamples;
	experiment.dt_offsetsamples=t_experiment.t_dt_offsetsamples;
	experiment.Vgain=(float)t_experiment.t_Vgain/4096*Vref;
	experiment.TPArise=(float)t_experiment.t_TPArise*TC_DIV*1000000.0/PBA_SPEED;
80004b5c:	30 08       	mov	r8,0
80004b5e:	e0 69 9c 38 	mov	r9,39992
80004b62:	ea 19 41 8c 	orh	r9,0x418c
		t_experiment.t_sequence[i]=t_currentsequence; //save sequence parameters
	}			
		return true;	//return true if sequence passed
}

void gettruesequence(void)  //does the opposite:  looks at realized parameters in t_experiment, convert them back to floats, and store the results in experiment
80004b66:	50 0c       	stdsp	sp[0x0],r12
80004b68:	fe f7 05 7c 	ld.w	r7,pc[1404]
	experiment.MODE=t_experiment.MODE;
	experiment.N_sequences=t_experiment.N_sequences;
	experiment.Noffsetsamples=t_experiment.Noffsetsamples;
	experiment.dt_offsetsamples=t_experiment.t_dt_offsetsamples;
	experiment.Vgain=(float)t_experiment.t_Vgain/4096*Vref;
	experiment.TPArise=(float)t_experiment.t_TPArise*TC_DIV*1000000.0/PBA_SPEED;
80004b6c:	e6 c1 ff fc 	sub	r1,r3,-4
80004b70:	e0 a0 1c e6 	rcall	8000853c <__avr32_f64_div>
80004b74:	2f c4       	sub	r4,-4
80004b76:	e0 a0 20 0f 	rcall	80008b94 <__avr32_f64_to_f32>
80004b7a:	fe f6 05 6e 	ld.w	r6,pc[1390]
80004b7e:	e7 4c 03 84 	st.w	r3[900],r12
80004b82:	e0 8f 02 94 	bral	800050aa <gettruesequence+0x5ba>
		if(t_experiment.MODE==MODE_standalone)
		{
			currentsequence.TR=(float)(t_currentsequence.t_TR)/1000.0;
		}
		
		currentsequence.N_preppulses=t_currentsequence.N_preppulses;
80004b86:	ef 08 00 58 	ld.sh	r8,r7[88]
80004b8a:	ed 58 00 68 	st.h	r6[104],r8
		
		uint8_t j=0;
		while(j<(Npreppulses_max-1))
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
80004b8e:	ef 08 00 10 	ld.sh	r8,r7[16]
80004b92:	ed 58 00 12 	st.h	r6[18],r8
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
80004b96:	8e 78       	ld.sh	r8,r7[0xe]
80004b98:	ed 58 00 10 	st.h	r6[16],r8
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004b9c:	8e c3       	ld.uh	r3,r7[0x8]
80004b9e:	e5 a4 03 03 	cop	cp0,cr3,cr0,cr3,0x48
80004ba2:	e5 a2 0c 35 	cop	cp0,cr12,cr3,cr5,0x44
80004ba6:	e0 a0 1f c7 	rcall	80008b34 <__avr32_f32_to_f64>
80004baa:	30 08       	mov	r8,0
80004bac:	e0 69 84 80 	mov	r9,33920
80004bb0:	ea 19 41 2e 	orh	r9,0x412e
80004bb4:	e0 a0 1a 38 	rcall	80008024 <__avr32_f64_mul>
80004bb8:	30 08       	mov	r8,0
80004bba:	e0 69 9c 38 	mov	r9,39992
80004bbe:	ea 19 41 8c 	orh	r9,0x418c
80004bc2:	e0 a0 1c bd 	rcall	8000853c <__avr32_f64_div>
80004bc6:	e0 a0 1f e7 	rcall	80008b94 <__avr32_f64_to_f32>
80004bca:	8d 2c       	st.w	r6[0x8],r12
			currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.preppulse[j+1].t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004bcc:	00 9c       	mov	r12,r0
80004bce:	e0 a0 1f b3 	rcall	80008b34 <__avr32_f32_to_f64>
80004bd2:	ef 12 00 16 	ld.uh	r2,r7[22]
80004bd6:	fa eb 00 04 	st.d	sp[4],r10
80004bda:	e5 a4 02 02 	cop	cp0,cr2,cr0,cr2,0x48
80004bde:	04 9c       	mov	r12,r2
80004be0:	e0 a0 1f aa 	rcall	80008b34 <__avr32_f32_to_f64>
80004be4:	30 08       	mov	r8,0
80004be6:	fc 19 3f e0 	movh	r9,0x3fe0
80004bea:	e0 a0 1a 1d 	rcall	80008024 <__avr32_f64_mul>
80004bee:	06 9c       	mov	r12,r3
80004bf0:	fa eb 00 0c 	st.d	sp[12],r10
80004bf4:	e0 a0 1f a0 	rcall	80008b34 <__avr32_f32_to_f64>
80004bf8:	30 08       	mov	r8,0
80004bfa:	fc 19 3f e0 	movh	r9,0x3fe0
80004bfe:	e0 a0 1a 13 	rcall	80008024 <__avr32_f64_mul>
80004c02:	8e ac       	ld.uh	r12,r7[0x4]
80004c04:	fa eb 00 14 	st.d	sp[20],r10
80004c08:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80004c0c:	e0 a0 1f 94 	rcall	80008b34 <__avr32_f32_to_f64>
80004c10:	14 98       	mov	r8,r10
80004c12:	16 99       	mov	r9,r11
80004c14:	fa ea 00 14 	ld.d	r10,sp[20]
80004c18:	e0 a0 1b c0 	rcall	80008398 <__avr32_f64_add>
80004c1c:	fa e8 00 04 	ld.d	r8,sp[4]
80004c20:	e0 a0 1b bc 	rcall	80008398 <__avr32_f64_add>
80004c24:	fa e8 00 0c 	ld.d	r8,sp[12]
80004c28:	e0 a0 1b b8 	rcall	80008398 <__avr32_f64_add>
80004c2c:	30 08       	mov	r8,0
80004c2e:	fc 19 40 20 	movh	r9,0x4020
80004c32:	e0 a0 19 f9 	rcall	80008024 <__avr32_f64_mul>
80004c36:	30 08       	mov	r8,0
80004c38:	e0 69 84 80 	mov	r9,33920
80004c3c:	ea 19 41 2e 	orh	r9,0x412e
80004c40:	e0 a0 19 f2 	rcall	80008024 <__avr32_f64_mul>
80004c44:	30 08       	mov	r8,0
80004c46:	e0 69 9c 38 	mov	r9,39992
80004c4a:	ea 19 41 8c 	orh	r9,0x418c
80004c4e:	e0 a0 1c 77 	rcall	8000853c <__avr32_f64_div>
80004c52:	e0 a0 1f a1 	rcall	80008b94 <__avr32_f64_to_f32>
80004c56:	8d 1c       	st.w	r6[0x4],r12
			currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
80004c58:	8e ec       	ld.uh	r12,r7[0xc]
80004c5a:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80004c5e:	e0 a0 1f 6b 	rcall	80008b34 <__avr32_f32_to_f64>
80004c62:	30 08       	mov	r8,0
80004c64:	e0 69 80 00 	mov	r9,32768
80004c68:	ea 19 40 76 	orh	r9,0x4076
80004c6c:	e0 a0 19 dc 	rcall	80008024 <__avr32_f64_mul>
80004c70:	fc 19 3f 10 	movh	r9,0x3f10
80004c74:	30 08       	mov	r8,0
80004c76:	e0 a0 19 d7 	rcall	80008024 <__avr32_f64_mul>
80004c7a:	e0 a0 1f 8d 	rcall	80008b94 <__avr32_f64_to_f32>
		currentsequence.N_preppulses=t_currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(Npreppulses_max-1))
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
80004c7e:	ef 08 00 1e 	ld.sh	r8,r7[30]
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
			currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.preppulse[j+1].t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
			currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
80004c82:	8d 3c       	st.w	r6[0xc],r12
		currentsequence.N_preppulses=t_currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(Npreppulses_max-1))
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
80004c84:	ed 58 00 22 	st.h	r6[34],r8
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
80004c88:	ef 08 00 1c 	ld.sh	r8,r7[28]
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004c8c:	e5 a2 0c 25 	cop	cp0,cr12,cr2,cr5,0x44
		
		uint8_t j=0;
		while(j<(Npreppulses_max-1))
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
80004c90:	ed 58 00 20 	st.h	r6[32],r8
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004c94:	e0 a0 1f 50 	rcall	80008b34 <__avr32_f32_to_f64>
80004c98:	30 08       	mov	r8,0
80004c9a:	e0 69 84 80 	mov	r9,33920
80004c9e:	ea 19 41 2e 	orh	r9,0x412e
80004ca2:	e0 a0 19 c1 	rcall	80008024 <__avr32_f64_mul>
80004ca6:	30 08       	mov	r8,0
80004ca8:	e0 69 9c 38 	mov	r9,39992
80004cac:	ea 19 41 8c 	orh	r9,0x418c
80004cb0:	e0 a0 1c 46 	rcall	8000853c <__avr32_f64_div>
80004cb4:	e0 a0 1f 70 	rcall	80008b94 <__avr32_f64_to_f32>
			currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.preppulse[j+1].t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004cb8:	ef 13 00 24 	ld.uh	r3,r7[36]
		uint8_t j=0;
		while(j<(Npreppulses_max-1))
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004cbc:	8d 6c       	st.w	r6[0x18],r12
			currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.preppulse[j+1].t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004cbe:	e5 a4 03 03 	cop	cp0,cr3,cr0,cr3,0x48
80004cc2:	06 9c       	mov	r12,r3
80004cc4:	e0 a0 1f 38 	rcall	80008b34 <__avr32_f32_to_f64>
80004cc8:	30 08       	mov	r8,0
80004cca:	fc 19 3f e0 	movh	r9,0x3fe0
80004cce:	e0 a0 19 ab 	rcall	80008024 <__avr32_f64_mul>
80004cd2:	ef 1c 00 12 	ld.uh	r12,r7[18]
80004cd6:	fa eb 00 14 	st.d	sp[20],r10
80004cda:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80004cde:	e0 a0 1f 2b 	rcall	80008b34 <__avr32_f32_to_f64>
80004ce2:	14 98       	mov	r8,r10
80004ce4:	16 99       	mov	r9,r11
80004ce6:	fa ea 00 0c 	ld.d	r10,sp[12]
80004cea:	e0 a0 1b 57 	rcall	80008398 <__avr32_f64_add>
80004cee:	14 98       	mov	r8,r10
80004cf0:	16 99       	mov	r9,r11
80004cf2:	fa ea 00 04 	ld.d	r10,sp[4]
80004cf6:	e0 a0 1b 51 	rcall	80008398 <__avr32_f64_add>
80004cfa:	fa e8 00 14 	ld.d	r8,sp[20]
80004cfe:	e0 a0 1b 4d 	rcall	80008398 <__avr32_f64_add>
80004d02:	30 08       	mov	r8,0
80004d04:	fc 19 40 20 	movh	r9,0x4020
80004d08:	e0 a0 19 8e 	rcall	80008024 <__avr32_f64_mul>
80004d0c:	30 08       	mov	r8,0
80004d0e:	e0 69 84 80 	mov	r9,33920
80004d12:	ea 19 41 2e 	orh	r9,0x412e
80004d16:	e0 a0 19 87 	rcall	80008024 <__avr32_f64_mul>
80004d1a:	30 08       	mov	r8,0
80004d1c:	e0 69 9c 38 	mov	r9,39992
80004d20:	ea 19 41 8c 	orh	r9,0x418c
80004d24:	e0 a0 1c 0c 	rcall	8000853c <__avr32_f64_div>
80004d28:	e0 a0 1f 36 	rcall	80008b94 <__avr32_f64_to_f32>
80004d2c:	8d 5c       	st.w	r6[0x14],r12
			currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
80004d2e:	ef 1c 00 1a 	ld.uh	r12,r7[26]
80004d32:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80004d36:	e0 a0 1e ff 	rcall	80008b34 <__avr32_f32_to_f64>
80004d3a:	30 08       	mov	r8,0
80004d3c:	e0 69 80 00 	mov	r9,32768
80004d40:	ea 19 40 76 	orh	r9,0x4076
80004d44:	e0 a0 19 70 	rcall	80008024 <__avr32_f64_mul>
80004d48:	fc 19 3f 10 	movh	r9,0x3f10
80004d4c:	30 08       	mov	r8,0
80004d4e:	e0 a0 19 6b 	rcall	80008024 <__avr32_f64_mul>
80004d52:	e0 a0 1f 21 	rcall	80008b94 <__avr32_f64_to_f32>
		currentsequence.N_preppulses=t_currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(Npreppulses_max-1))
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
80004d56:	ef 08 00 2c 	ld.sh	r8,r7[44]
80004d5a:	ed 58 00 32 	st.h	r6[50],r8
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
80004d5e:	ef 08 00 2a 	ld.sh	r8,r7[42]
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
			currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.preppulse[j+1].t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
			currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
80004d62:	8d 7c       	st.w	r6[0x1c],r12
		
		uint8_t j=0;
		while(j<(Npreppulses_max-1))
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
80004d64:	ed 58 00 30 	st.h	r6[48],r8
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004d68:	e5 a2 0c 35 	cop	cp0,cr12,cr3,cr5,0x44
80004d6c:	e0 a0 1e e4 	rcall	80008b34 <__avr32_f32_to_f64>
80004d70:	30 08       	mov	r8,0
80004d72:	e0 69 84 80 	mov	r9,33920
80004d76:	ea 19 41 2e 	orh	r9,0x412e
80004d7a:	e0 a0 19 55 	rcall	80008024 <__avr32_f64_mul>
80004d7e:	30 08       	mov	r8,0
80004d80:	e0 69 9c 38 	mov	r9,39992
80004d84:	ea 19 41 8c 	orh	r9,0x418c
80004d88:	e0 a0 1b da 	rcall	8000853c <__avr32_f64_div>
80004d8c:	e0 a0 1f 04 	rcall	80008b94 <__avr32_f64_to_f32>
			currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.preppulse[j+1].t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004d90:	ef 13 00 32 	ld.uh	r3,r7[50]
		uint8_t j=0;
		while(j<(Npreppulses_max-1))
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004d94:	8d ac       	st.w	r6[0x28],r12
			currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.preppulse[j+1].t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004d96:	e5 a4 03 03 	cop	cp0,cr3,cr0,cr3,0x48
80004d9a:	06 9c       	mov	r12,r3
80004d9c:	e0 a0 1e cc 	rcall	80008b34 <__avr32_f32_to_f64>
80004da0:	30 08       	mov	r8,0
80004da2:	fc 19 3f e0 	movh	r9,0x3fe0
80004da6:	e0 a0 19 3f 	rcall	80008024 <__avr32_f64_mul>
80004daa:	fa eb 00 0c 	st.d	sp[12],r10
80004dae:	ef 1c 00 20 	ld.uh	r12,r7[32]
80004db2:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80004db6:	e0 a0 1e bf 	rcall	80008b34 <__avr32_f32_to_f64>
80004dba:	14 98       	mov	r8,r10
80004dbc:	16 99       	mov	r9,r11
80004dbe:	fa ea 00 14 	ld.d	r10,sp[20]
80004dc2:	e0 a0 1a eb 	rcall	80008398 <__avr32_f64_add>
80004dc6:	14 98       	mov	r8,r10
80004dc8:	16 99       	mov	r9,r11
80004dca:	fa ea 00 04 	ld.d	r10,sp[4]
80004dce:	e0 a0 1a e5 	rcall	80008398 <__avr32_f64_add>
80004dd2:	fa e8 00 0c 	ld.d	r8,sp[12]
80004dd6:	e0 a0 1a e1 	rcall	80008398 <__avr32_f64_add>
80004dda:	30 08       	mov	r8,0
80004ddc:	fc 19 40 20 	movh	r9,0x4020
80004de0:	e0 a0 19 22 	rcall	80008024 <__avr32_f64_mul>
80004de4:	30 08       	mov	r8,0
80004de6:	e0 69 84 80 	mov	r9,33920
80004dea:	ea 19 41 2e 	orh	r9,0x412e
80004dee:	e0 a0 19 1b 	rcall	80008024 <__avr32_f64_mul>
80004df2:	30 08       	mov	r8,0
80004df4:	e0 69 9c 38 	mov	r9,39992
80004df8:	ea 19 41 8c 	orh	r9,0x418c
80004dfc:	e0 a0 1b a0 	rcall	8000853c <__avr32_f64_div>
80004e00:	e0 a0 1e ca 	rcall	80008b94 <__avr32_f64_to_f32>
80004e04:	8d 9c       	st.w	r6[0x24],r12
			currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
80004e06:	ef 1c 00 28 	ld.uh	r12,r7[40]
80004e0a:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80004e0e:	e0 a0 1e 93 	rcall	80008b34 <__avr32_f32_to_f64>
80004e12:	30 08       	mov	r8,0
80004e14:	e0 69 80 00 	mov	r9,32768
80004e18:	ea 19 40 76 	orh	r9,0x4076
80004e1c:	e0 a0 19 04 	rcall	80008024 <__avr32_f64_mul>
80004e20:	fc 19 3f 10 	movh	r9,0x3f10
80004e24:	30 08       	mov	r8,0
80004e26:	e0 a0 18 ff 	rcall	80008024 <__avr32_f64_mul>
80004e2a:	e0 a0 1e b5 	rcall	80008b94 <__avr32_f64_to_f32>
			
			j++;
		}
		currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
80004e2e:	ef 08 00 3a 	ld.sh	r8,r7[58]
80004e32:	ed 58 00 42 	st.h	r6[66],r8
		currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
80004e36:	ef 08 00 38 	ld.sh	r8,r7[56]
		{
			currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
			currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
			currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
			currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.preppulse[j+1].t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
			currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
80004e3a:	8d bc       	st.w	r6[0x2c],r12
			
			j++;
		}
		currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
		currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
80004e3c:	ed 58 00 40 	st.h	r6[64],r8
		currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004e40:	e5 a2 0c 35 	cop	cp0,cr12,cr3,cr5,0x44
80004e44:	e0 a0 1e 78 	rcall	80008b34 <__avr32_f32_to_f64>
80004e48:	30 08       	mov	r8,0
80004e4a:	e0 69 84 80 	mov	r9,33920
80004e4e:	ea 19 41 2e 	orh	r9,0x412e
80004e52:	e0 a0 18 e9 	rcall	80008024 <__avr32_f64_mul>
80004e56:	30 08       	mov	r8,0
80004e58:	e0 69 9c 38 	mov	r9,39992
80004e5c:	ea 19 41 8c 	orh	r9,0x418c
80004e60:	e0 a0 1b 6e 	rcall	8000853c <__avr32_f64_div>
80004e64:	e0 a0 1e 98 	rcall	80008b94 <__avr32_f64_to_f32>
80004e68:	8d ec       	st.w	r6[0x38],r12
		currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.CPMG.t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004e6a:	ef 1c 00 2e 	ld.uh	r12,r7[46]
80004e6e:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80004e72:	e0 a0 1e 61 	rcall	80008b34 <__avr32_f32_to_f64>
80004e76:	fa e8 00 0c 	ld.d	r8,sp[12]
80004e7a:	e0 a0 1a 8f 	rcall	80008398 <__avr32_f64_add>
80004e7e:	fa e8 00 04 	ld.d	r8,sp[4]
80004e82:	e0 a0 1a 8b 	rcall	80008398 <__avr32_f64_add>
80004e86:	ef 13 00 3e 	ld.uh	r3,r7[62]
80004e8a:	fa eb 00 04 	st.d	sp[4],r10
80004e8e:	e5 a4 03 03 	cop	cp0,cr3,cr0,cr3,0x48
80004e92:	06 9c       	mov	r12,r3
80004e94:	e0 a0 1e 50 	rcall	80008b34 <__avr32_f32_to_f64>
80004e98:	30 08       	mov	r8,0
80004e9a:	fc 19 3f e0 	movh	r9,0x3fe0
80004e9e:	e0 a0 18 c3 	rcall	80008024 <__avr32_f64_mul>
80004ea2:	14 98       	mov	r8,r10
80004ea4:	16 99       	mov	r9,r11
80004ea6:	fa ea 00 04 	ld.d	r10,sp[4]
80004eaa:	e0 a0 1a 77 	rcall	80008398 <__avr32_f64_add>
80004eae:	30 08       	mov	r8,0
80004eb0:	fc 19 40 20 	movh	r9,0x4020
80004eb4:	e0 a0 18 b8 	rcall	80008024 <__avr32_f64_mul>
80004eb8:	30 08       	mov	r8,0
80004eba:	e0 69 84 80 	mov	r9,33920
80004ebe:	ea 19 41 2e 	orh	r9,0x412e
80004ec2:	e0 a0 18 b1 	rcall	80008024 <__avr32_f64_mul>
80004ec6:	30 08       	mov	r8,0
80004ec8:	e0 69 9c 38 	mov	r9,39992
80004ecc:	ea 19 41 8c 	orh	r9,0x418c
80004ed0:	e0 a0 1b 36 	rcall	8000853c <__avr32_f64_div>
80004ed4:	e0 a0 1e 60 	rcall	80008b94 <__avr32_f64_to_f32>
80004ed8:	8d dc       	st.w	r6[0x34],r12
		currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
80004eda:	ef 1c 00 36 	ld.uh	r12,r7[54]
80004ede:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80004ee2:	e0 a0 1e 29 	rcall	80008b34 <__avr32_f32_to_f64>
80004ee6:	30 08       	mov	r8,0
80004ee8:	e0 69 80 00 	mov	r9,32768
80004eec:	ea 19 40 76 	orh	r9,0x4076
80004ef0:	e0 a0 18 9a 	rcall	80008024 <__avr32_f64_mul>
80004ef4:	30 08       	mov	r8,0
80004ef6:	fc 19 3f 10 	movh	r9,0x3f10
80004efa:	e0 a0 18 95 	rcall	80008024 <__avr32_f64_mul>
80004efe:	e0 a0 1e 4b 	rcall	80008b94 <__avr32_f64_to_f32>
		
		currentsequence.CPMG.Nsamp=t_currentsequence.CPMG.Nsamp;
80004f02:	ef 08 00 4e 	ld.sh	r8,r7[78]
		}
		currentsequence.preppulse[j].Vb=t_currentsequence.preppulse[j].Vb;
		currentsequence.preppulse[j].RFamp=t_currentsequence.preppulse[j].RFamp;			
		currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.CPMG.t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
80004f06:	8d fc       	st.w	r6[0x3c],r12
		
		currentsequence.CPMG.Nsamp=t_currentsequence.CPMG.Nsamp;
80004f08:	ed 58 00 5a 	st.h	r6[90],r8
		currentsequence.CPMG.Nechos=t_currentsequence.CPMG.Nechos;
		currentsequence.CPMG.RFamp=t_currentsequence.CPMG.RFamp;
		currentsequence.CPMG.Vb=t_currentsequence.CPMG.Vb;
		currentsequence.CPMG.LOamp=t_currentsequence.CPMG.LOamp;
				
		currentsequence.CPMG.tau=((float)t_currentsequence.CPMG.t_pulsewidth+(float)t_currentsequence.CPMG.t_T3+((float)t_currentsequence.CPMG.t_dt*(float)(t_currentsequence.CPMG.Nsamp-1))+(float)t_currentsequence.CPMG.t_T5+(float)t_experiment.t_TPArise)*(float)TC_DIV*1000000.0/((float)PBA_SPEED*2.0);;
80004f0c:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
		currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.CPMG.t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
		
		currentsequence.CPMG.Nsamp=t_currentsequence.CPMG.Nsamp;
		currentsequence.CPMG.Nechos=t_currentsequence.CPMG.Nechos;
		currentsequence.CPMG.RFamp=t_currentsequence.CPMG.RFamp;
80004f10:	ef 08 00 42 	ld.sh	r8,r7[66]
80004f14:	ed 58 00 50 	st.h	r6[80],r8
		currentsequence.CPMG.Vb=t_currentsequence.CPMG.Vb;
80004f18:	ef 08 00 44 	ld.sh	r8,r7[68]
		currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.CPMG.t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
		
		currentsequence.CPMG.Nsamp=t_currentsequence.CPMG.Nsamp;
		currentsequence.CPMG.Nechos=t_currentsequence.CPMG.Nechos;
80004f1c:	ef 19 00 4c 	ld.uh	r9,r7[76]
		currentsequence.CPMG.RFamp=t_currentsequence.CPMG.RFamp;
		currentsequence.CPMG.Vb=t_currentsequence.CPMG.Vb;
80004f20:	ed 58 00 52 	st.h	r6[82],r8
		currentsequence.CPMG.LOamp=t_currentsequence.CPMG.LOamp;
80004f24:	ef 08 00 4a 	ld.sh	r8,r7[74]
		currentsequence.preppulse[j].pulsewidth=(float)t_currentsequence.preppulse[j].t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.preppulse[j].tau=((float)t_currentsequence.preppulse[j].t_pulsewidth/2.0 + (float)t_currentsequence.preppulse[j].t_T0 + (float)t_experiment.t_TPArise + (float)t_currentsequence.CPMG.t_pulsewidth/2.0)*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.preppulse[j].RFphase=(float)t_currentsequence.preppulse[j].RFphase_POW*360.0/16384.0;
		
		currentsequence.CPMG.Nsamp=t_currentsequence.CPMG.Nsamp;
		currentsequence.CPMG.Nechos=t_currentsequence.CPMG.Nechos;
80004f28:	ed 49 00 5c 	st.w	r6[92],r9
		currentsequence.CPMG.RFamp=t_currentsequence.CPMG.RFamp;
		currentsequence.CPMG.Vb=t_currentsequence.CPMG.Vb;
		currentsequence.CPMG.LOamp=t_currentsequence.CPMG.LOamp;
80004f2c:	ed 58 00 58 	st.h	r6[88],r8
				
		currentsequence.CPMG.tau=((float)t_currentsequence.CPMG.t_pulsewidth+(float)t_currentsequence.CPMG.t_T3+((float)t_currentsequence.CPMG.t_dt*(float)(t_currentsequence.CPMG.Nsamp-1))+(float)t_currentsequence.CPMG.t_T5+(float)t_experiment.t_TPArise)*(float)TC_DIV*1000000.0/((float)PBA_SPEED*2.0);;
80004f30:	ef 19 00 54 	ld.uh	r9,r7[84]
80004f34:	ef 18 00 56 	ld.uh	r8,r7[86]
80004f38:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
80004f3c:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
80004f40:	e5 a0 09 39 	cop	cp0,cr9,cr3,cr9,0x40
80004f44:	ef 12 00 50 	ld.uh	r2,r7[80]
80004f48:	20 1c       	sub	r12,1
80004f4a:	e5 a4 02 02 	cop	cp0,cr2,cr0,cr2,0x48
80004f4e:	e5 a6 0c 0c 	cop	cp0,cr12,cr0,cr12,0x4c
80004f52:	e1 a9 0c 2c 	cop	cp0,cr12,cr2,cr12,0x12
80004f56:	e5 a0 0c c8 	cop	cp0,cr12,cr12,cr8,0x40
80004f5a:	e5 a0 0c 0c 	cop	cp0,cr12,cr0,cr12,0x40
80004f5e:	e5 a2 0c c5 	cop	cp0,cr12,cr12,cr5,0x44
80004f62:	e0 a0 1d e9 	rcall	80008b34 <__avr32_f32_to_f64>
80004f66:	30 08       	mov	r8,0
80004f68:	e0 69 84 80 	mov	r9,33920
80004f6c:	ea 19 41 2e 	orh	r9,0x412e
80004f70:	e0 a0 18 5a 	rcall	80008024 <__avr32_f64_mul>
80004f74:	30 08       	mov	r8,0
80004f76:	e0 69 9c 38 	mov	r9,39992
80004f7a:	ea 19 41 9c 	orh	r9,0x419c
80004f7e:	e0 a0 1a df 	rcall	8000853c <__avr32_f64_div>
80004f82:	e0 a0 1e 09 	rcall	80008b94 <__avr32_f64_to_f32>
80004f86:	ed 4c 00 44 	st.w	r6[68],r12
		currentsequence.CPMG.pulsewidth=(float)t_currentsequence.CPMG.t_pulsewidth*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004f8a:	e5 a2 0c 35 	cop	cp0,cr12,cr3,cr5,0x44
80004f8e:	e0 a0 1d d3 	rcall	80008b34 <__avr32_f32_to_f64>
80004f92:	30 08       	mov	r8,0
80004f94:	e0 69 84 80 	mov	r9,33920
80004f98:	ea 19 41 2e 	orh	r9,0x412e
80004f9c:	e0 a0 18 44 	rcall	80008024 <__avr32_f64_mul>
80004fa0:	30 08       	mov	r8,0
80004fa2:	e0 69 9c 38 	mov	r9,39992
80004fa6:	ea 19 41 8c 	orh	r9,0x418c
80004faa:	e0 a0 1a c9 	rcall	8000853c <__avr32_f64_div>
80004fae:	e0 a0 1d f3 	rcall	80008b94 <__avr32_f64_to_f32>
80004fb2:	ed 4c 00 48 	st.w	r6[72],r12
		currentsequence.CPMG.dt=(float)t_currentsequence.CPMG.t_dt*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004fb6:	e5 a2 0c 25 	cop	cp0,cr12,cr2,cr5,0x44
80004fba:	e0 a0 1d bd 	rcall	80008b34 <__avr32_f32_to_f64>
80004fbe:	30 08       	mov	r8,0
80004fc0:	e0 69 84 80 	mov	r9,33920
80004fc4:	ea 19 41 2e 	orh	r9,0x412e
80004fc8:	e0 a0 18 2e 	rcall	80008024 <__avr32_f64_mul>
80004fcc:	30 08       	mov	r8,0
80004fce:	e0 69 9c 38 	mov	r9,39992
80004fd2:	ea 19 41 8c 	orh	r9,0x418c
80004fd6:	e0 a0 1a b3 	rcall	8000853c <__avr32_f64_div>
80004fda:	e0 a0 1d dd 	rcall	80008b94 <__avr32_f64_to_f32>
80004fde:	ed 4c 00 60 	st.w	r6[96],r12
		currentsequence.CPMG.samp_offset=(float)t_currentsequence.CPMG.t_samp_offset*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
80004fe2:	ef 0c 00 52 	ld.sh	r12,r7[82]
80004fe6:	e5 a6 0c 0c 	cop	cp0,cr12,cr0,cr12,0x4c
80004fea:	e5 a2 0c c5 	cop	cp0,cr12,cr12,cr5,0x44
80004fee:	e0 a0 1d a3 	rcall	80008b34 <__avr32_f32_to_f64>
80004ff2:	30 08       	mov	r8,0
80004ff4:	e0 69 84 80 	mov	r9,33920
80004ff8:	ea 19 41 2e 	orh	r9,0x412e
80004ffc:	e0 a0 18 14 	rcall	80008024 <__avr32_f64_mul>
80005000:	30 08       	mov	r8,0
80005002:	e0 69 9c 38 	mov	r9,39992
80005006:	ea 19 41 8c 	orh	r9,0x418c
8000500a:	e0 a0 1a 99 	rcall	8000853c <__avr32_f64_div>
8000500e:	e0 a0 1d c3 	rcall	80008b94 <__avr32_f64_to_f32>
80005012:	ed 4c 00 64 	st.w	r6[100],r12
		currentsequence.CPMG.RFphase=(float)t_currentsequence.CPMG.RFphase_POW*360.0/16384.0;
80005016:	ef 1c 00 40 	ld.uh	r12,r7[64]
8000501a:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
8000501e:	e0 a0 1d 8b 	rcall	80008b34 <__avr32_f32_to_f64>
80005022:	30 08       	mov	r8,0
80005024:	e0 69 80 00 	mov	r9,32768
80005028:	ea 19 40 76 	orh	r9,0x4076
8000502c:	e0 a0 17 fc 	rcall	80008024 <__avr32_f64_mul>
80005030:	30 08       	mov	r8,0
80005032:	fc 19 3f 10 	movh	r9,0x3f10
80005036:	e0 a0 17 f7 	rcall	80008024 <__avr32_f64_mul>
8000503a:	e0 a0 1d ad 	rcall	80008b94 <__avr32_f64_to_f32>
8000503e:	ed 4c 00 4c 	st.w	r6[76],r12
		currentsequence.CPMG.LOphase=(float)t_currentsequence.CPMG.LOphase_Q_POW*360.0/16384.0;
80005042:	ef 1c 00 46 	ld.uh	r12,r7[70]
80005046:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
8000504a:	e0 a0 1d 75 	rcall	80008b34 <__avr32_f32_to_f64>
8000504e:	30 08       	mov	r8,0
80005050:	e0 69 80 00 	mov	r9,32768
80005054:	ea 19 40 76 	orh	r9,0x4076
80005058:	e0 a0 17 e6 	rcall	80008024 <__avr32_f64_mul>
8000505c:	30 08       	mov	r8,0
8000505e:	fc 19 3f 10 	movh	r9,0x3f10
80005062:	e0 a0 17 e1 	rcall	80008024 <__avr32_f64_mul>
80005066:	e0 a0 1d 97 	rcall	80008b94 <__avr32_f64_to_f32>
8000506a:	ed 4c 00 54 	st.w	r6[84],r12
		
		currentsequence.f0=(float)t_currentsequence.f0_FTW/4294967296.0*(float)DDS_Fs;
8000506e:	6e 0c       	ld.w	r12,r7[0x0]
80005070:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80005074:	e0 a0 1d 60 	rcall	80008b34 <__avr32_f32_to_f64>
80005078:	30 08       	mov	r8,0
8000507a:	fc 19 3d f0 	movh	r9,0x3df0
8000507e:	e0 a0 17 d3 	rcall	80008024 <__avr32_f64_mul>
80005082:	30 08       	mov	r8,0
80005084:	e0 69 e1 a3 	mov	r9,57763
80005088:	ea 19 41 b1 	orh	r9,0x41b1
8000508c:	e0 a0 17 cc 	rcall	80008024 <__avr32_f64_mul>
80005090:	e0 a0 1d 82 	rcall	80008b94 <__avr32_f64_to_f32>
		
		experiment.sequence[i]=currentsequence;
80005094:	37 0a       	mov	r10,112
		currentsequence.CPMG.dt=(float)t_currentsequence.CPMG.t_dt*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.CPMG.samp_offset=(float)t_currentsequence.CPMG.t_samp_offset*(float)TC_DIV*1000000.0/((float)PBA_SPEED);
		currentsequence.CPMG.RFphase=(float)t_currentsequence.CPMG.RFphase_POW*360.0/16384.0;
		currentsequence.CPMG.LOphase=(float)t_currentsequence.CPMG.LOphase_Q_POW*360.0/16384.0;
		
		currentsequence.f0=(float)t_currentsequence.f0_FTW/4294967296.0*(float)DDS_Fs;
80005096:	8d 0c       	st.w	r6[0x0],r12
		
		experiment.sequence[i]=currentsequence;
80005098:	49 4b       	lddpc	r11,800050e8 <gettruesequence+0x5f8>
8000509a:	02 9c       	mov	r12,r1
8000509c:	e0 a0 1f 0a 	rcall	80008eb0 <memcpy>
800050a0:	29 c4       	sub	r4,-100
800050a2:	29 01       	sub	r1,-112
	experiment.N_sequences=t_experiment.N_sequences;
	experiment.Noffsetsamples=t_experiment.Noffsetsamples;
	experiment.dt_offsetsamples=t_experiment.t_dt_offsetsamples;
	experiment.Vgain=(float)t_experiment.t_Vgain/4096*Vref;
	experiment.TPArise=(float)t_experiment.t_TPArise*TC_DIV*1000000.0/PBA_SPEED;
	for(uint8_t i=0;i<Nsequences_max;i++)
800050a4:	40 08       	lddsp	r8,sp[0x0]
800050a6:	10 34       	cp.w	r4,r8
800050a8:	c1 80       	breq	800050d8 <gettruesequence+0x5e8>
	{
		t_currentsequence=t_experiment.t_sequence[i];
800050aa:	36 4a       	mov	r10,100
800050ac:	08 9b       	mov	r11,r4
800050ae:	48 ec       	lddpc	r12,800050e4 <gettruesequence+0x5f4>
800050b0:	e0 a0 1f 00 	rcall	80008eb0 <memcpy>
		
		if(t_experiment.MODE==MODE_standalone)
800050b4:	40 79       	lddsp	r9,sp[0x1c]
800050b6:	30 18       	mov	r8,1
800050b8:	f0 09 18 00 	cp.b	r9,r8
800050bc:	fe 91 fd 65 	brne	80004b86 <gettruesequence+0x96>
		{
			currentsequence.TR=(float)(t_currentsequence.t_TR)/1000.0;
800050c0:	48 99       	lddpc	r9,800050e4 <gettruesequence+0x5f4>
800050c2:	fc 1b 44 7a 	movh	r11,0x447a
800050c6:	73 8c       	ld.w	r12,r9[0x60]
800050c8:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
800050cc:	e0 a0 1b c4 	rcall	80008854 <__avr32_f32_div>
800050d0:	ed 4c 00 6c 	st.w	r6[108],r12
800050d4:	fe 9f fd 59 	bral	80004b86 <gettruesequence+0x96>
		
		currentsequence.f0=(float)t_currentsequence.f0_FTW/4294967296.0*(float)DDS_Fs;
		
		experiment.sequence[i]=currentsequence;
	}
}
800050d8:	2f 8d       	sub	sp,-32
800050da:	d8 32       	popm	r0-r7,pc
800050dc:	00 00       	add	r0,r0
800050de:	0f e4       	ld.ub	r4,r7[0x6]
800050e0:	00 00       	add	r0,r0
800050e2:	0b e8       	ld.ub	r8,r5[0x6]
800050e4:	00 00       	add	r0,r0
800050e6:	0f 80       	ld.ub	r0,r7[0x0]
800050e8:	00 00       	add	r0,r0
800050ea:	0b 74       	ld.ub	r4,--r5

800050ec <get_experiment_problem>:
800050ec:	48 28       	lddpc	r8,800050f4 <get_experiment_problem+0x8>
800050ee:	11 8c       	ld.ub	r12,r8[0x0]
800050f0:	5e fc       	retal	r12
800050f2:	d7 03       	nop
800050f4:	00 00       	add	r0,r0
800050f6:	08 fc       	st.b	--r4,r12

800050f8 <validate_sequences>:
800050f8:	d4 31       	pushm	r0-r7,lr
800050fa:	21 3d       	sub	sp,76
800050fc:	30 08       	mov	r8,0
800050fe:	fe f5 0c da 	ld.w	r5,pc[3290]
80005102:	aa 88       	st.b	r5[0x0],r8
80005104:	fe f7 0c d8 	ld.w	r7,pc[3288]
}

bool validate_sequences(void)		
{
	experiment_problem=no_problem;
	if((experiment.MODE<=MODE_max) &&
80005108:	30 18       	mov	r8,1
8000510a:	8e 06       	ld.sh	r6,r7[0x0]
8000510c:	f0 06 19 00 	cp.h	r6,r8
80005110:	e0 88 00 05 	brls	8000511a <validate_sequences+0x22>
		return false;
	}
	
	
	float temp_T;
	for(uint8_t i=0;i<experiment.N_sequences;i++)
80005114:	30 0c       	mov	r12,0
			t_currentsequence.clusters_per_sequence=ceilf((currentsequence.CPMG.Nsamp*currentsequence.CPMG.Nechos+t_experiment.Noffsetsamples+1)*4/((float)samplebuffer_size));
			
		t_experiment.t_sequence[i]=t_currentsequence; //save sequence parameters
	}			
		return true;	//return true if sequence passed
}
80005116:	2e dd       	sub	sp,-76
80005118:	d8 32       	popm	r0-r7,pc

bool validate_sequences(void)		
{
	experiment_problem=no_problem;
	if((experiment.MODE<=MODE_max) &&
		(experiment.N_sequences>=Nsequences_min) && (experiment.N_sequences<=Nsequences_max) &&
8000511a:	8e 14       	ld.sh	r4,r7[0x2]
}

bool validate_sequences(void)		
{
	experiment_problem=no_problem;
	if((experiment.MODE<=MODE_max) &&
8000511c:	58 04       	cp.w	r4,0
8000511e:	cf b0       	breq	80005114 <validate_sequences+0x1c>
80005120:	30 88       	mov	r8,8
80005122:	08 9e       	mov	lr,r4
80005124:	f0 04 19 00 	cp.h	r4,r8
80005128:	fe 9b ff f6 	brhi	80005114 <validate_sequences+0x1c>
		(experiment.N_sequences>=Nsequences_min) && (experiment.N_sequences<=Nsequences_max) &&
		(experiment.Noffsetsamples>=1) && (experiment.Noffsetsamples<=Noffsetsamples_max) &&
8000512c:	ee f3 03 88 	ld.w	r3,r7[904]
}

bool validate_sequences(void)		
{
	experiment_problem=no_problem;
	if((experiment.MODE<=MODE_max) &&
80005130:	58 03       	cp.w	r3,0
80005132:	cf 10       	breq	80005114 <validate_sequences+0x1c>
80005134:	e0 43 03 e8 	cp.w	r3,1000
80005138:	fe 9b ff ee 	brhi	80005114 <validate_sequences+0x1c>
		(experiment.N_sequences>=Nsequences_min) && (experiment.N_sequences<=Nsequences_max) &&
		(experiment.Noffsetsamples>=1) && (experiment.Noffsetsamples<=Noffsetsamples_max) &&
		(experiment.dt_offsetsamples>=dt_offsetsamples_min) && (experiment.dt_offsetsamples<=dt_offsetsamples_max) &&
8000513c:	ee f2 03 8c 	ld.w	r2,r7[908]
}

bool validate_sequences(void)		
{
	experiment_problem=no_problem;
	if((experiment.MODE<=MODE_max) &&
80005140:	04 9c       	mov	r12,r2
80005142:	e0 a0 1c f9 	rcall	80008b34 <__avr32_f32_to_f64>
80005146:	e0 68 99 9a 	mov	r8,39322
8000514a:	ea 18 99 99 	orh	r8,0x9999
8000514e:	e0 69 99 99 	mov	r9,39321
80005152:	ea 19 3f f9 	orh	r9,0x3ff9
80005156:	e0 a0 19 a5 	rcall	800084a0 <__avr32_f64_cmp_ge>
8000515a:	cd d0       	breq	80005114 <validate_sequences+0x1c>
8000515c:	fc 18 44 7a 	movh	r8,0x447a
80005160:	e5 ac 00 28 	cop	cp0,cr0,cr2,cr8,0x58
80005164:	fe 9c ff d8 	brvs	80005114 <validate_sequences+0x1c>
80005168:	fe 99 ff d6 	brgt	80005114 <validate_sequences+0x1c>
		(experiment.N_sequences>=Nsequences_min) && (experiment.N_sequences<=Nsequences_max) &&
		(experiment.Noffsetsamples>=1) && (experiment.Noffsetsamples<=Noffsetsamples_max) &&
		(experiment.dt_offsetsamples>=dt_offsetsamples_min) && (experiment.dt_offsetsamples<=dt_offsetsamples_max) &&
		(experiment.Vgain>=Vgain_min) && (experiment.Vgain<=Vgain_max))
8000516c:	ee fc 03 94 	ld.w	r12,r7[916]
80005170:	e0 a0 1c e2 	rcall	80008b34 <__avr32_f32_to_f64>
}

bool validate_sequences(void)		
{
	experiment_problem=no_problem;
	if((experiment.MODE<=MODE_max) &&
80005174:	e0 68 99 9a 	mov	r8,39322
80005178:	ea 18 99 99 	orh	r8,0x9999
		(experiment.N_sequences>=Nsequences_min) && (experiment.N_sequences<=Nsequences_max) &&
		(experiment.Noffsetsamples>=1) && (experiment.Noffsetsamples<=Noffsetsamples_max) &&
		(experiment.dt_offsetsamples>=dt_offsetsamples_min) && (experiment.dt_offsetsamples<=dt_offsetsamples_max) &&
		(experiment.Vgain>=Vgain_min) && (experiment.Vgain<=Vgain_max))
8000517c:	14 90       	mov	r0,r10
8000517e:	16 91       	mov	r1,r11
}

bool validate_sequences(void)		
{
	experiment_problem=no_problem;
	if((experiment.MODE<=MODE_max) &&
80005180:	e0 69 99 99 	mov	r9,39321
80005184:	ea 19 3f c9 	orh	r9,0x3fc9
80005188:	e0 a0 19 8c 	rcall	800084a0 <__avr32_f64_cmp_ge>
8000518c:	cc 40       	breq	80005114 <validate_sequences+0x1c>
8000518e:	00 98       	mov	r8,r0
80005190:	02 99       	mov	r9,r1
80005192:	e0 6a a1 cb 	mov	r10,41419
80005196:	ea 1a b6 45 	orh	r10,0xb645
8000519a:	e0 6b fd f3 	mov	r11,65011
8000519e:	ea 1b 40 03 	orh	r11,0x4003
800051a2:	e0 a0 19 7f 	rcall	800084a0 <__avr32_f64_cmp_ge>
800051a6:	cb 70       	breq	80005114 <validate_sequences+0x1c>
		(experiment.Noffsetsamples>=1) && (experiment.Noffsetsamples<=Noffsetsamples_max) &&
		(experiment.dt_offsetsamples>=dt_offsetsamples_min) && (experiment.dt_offsetsamples<=dt_offsetsamples_max) &&
		(experiment.Vgain>=Vgain_min) && (experiment.Vgain<=Vgain_max))
	{
		t_experiment.MODE=experiment.MODE;
		t_experiment.Noffsetsamples=experiment.Noffsetsamples;
800051a8:	fe fa 0c 38 	ld.w	r10,pc[3128]
		t_experiment.t_dt_offsetsamples=((uint16_t)roundf((experiment.dt_offsetsamples * PBA_SPEED/(TC_DIV*1000000))));
800051ac:	e0 6b 24 00 	mov	r11,9216
800051b0:	ea 1b 4a f4 	orh	r11,0x4af4
		(experiment.Noffsetsamples>=1) && (experiment.Noffsetsamples<=Noffsetsamples_max) &&
		(experiment.dt_offsetsamples>=dt_offsetsamples_min) && (experiment.dt_offsetsamples<=dt_offsetsamples_max) &&
		(experiment.Vgain>=Vgain_min) && (experiment.Vgain<=Vgain_max))
	{
		t_experiment.MODE=experiment.MODE;
		t_experiment.Noffsetsamples=experiment.Noffsetsamples;
800051b4:	f5 43 03 28 	st.w	r10[808],r3
		(experiment.N_sequences>=Nsequences_min) && (experiment.N_sequences<=Nsequences_max) &&
		(experiment.Noffsetsamples>=1) && (experiment.Noffsetsamples<=Noffsetsamples_max) &&
		(experiment.dt_offsetsamples>=dt_offsetsamples_min) && (experiment.dt_offsetsamples<=dt_offsetsamples_max) &&
		(experiment.Vgain>=Vgain_min) && (experiment.Vgain<=Vgain_max))
	{
		t_experiment.MODE=experiment.MODE;
800051b8:	b4 86       	st.b	r10[0x0],r6
		t_experiment.Noffsetsamples=experiment.Noffsetsamples;
		t_experiment.t_dt_offsetsamples=((uint16_t)roundf((experiment.dt_offsetsamples * PBA_SPEED/(TC_DIV*1000000))));
800051ba:	e0 6c e1 c0 	mov	r12,57792
800051be:	ea 1c 4c 64 	orh	r12,0x4c64
800051c2:	e5 a2 0c 2c 	cop	cp0,cr12,cr2,cr12,0x44
800051c6:	e0 a0 1b 47 	rcall	80008854 <__avr32_f32_div>
800051ca:	e0 a0 16 ff 	rcall	80007fc8 <roundf>
800051ce:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
800051d2:	fe f9 0c 0e 	ld.w	r9,pc[3086]
800051d6:	f3 5c 03 2c 	st.h	r9[812],r12
		t_experiment.N_sequences=experiment.N_sequences;
		t_experiment.N_experiments=experiment.N_experiments;
800051da:	ee fc 03 90 	ld.w	r12,r7[912]
		t_experiment.t_Vgain=(uint16_t)roundf(experiment.Vgain/Vref*4096);
800051de:	02 9b       	mov	r11,r1
		(experiment.Vgain>=Vgain_min) && (experiment.Vgain<=Vgain_max))
	{
		t_experiment.MODE=experiment.MODE;
		t_experiment.Noffsetsamples=experiment.Noffsetsamples;
		t_experiment.t_dt_offsetsamples=((uint16_t)roundf((experiment.dt_offsetsamples * PBA_SPEED/(TC_DIV*1000000))));
		t_experiment.N_sequences=experiment.N_sequences;
800051e0:	b2 94       	st.b	r9[0x1],r4
		t_experiment.N_experiments=experiment.N_experiments;
		t_experiment.t_Vgain=(uint16_t)roundf(experiment.Vgain/Vref*4096);
800051e2:	30 08       	mov	r8,0
800051e4:	fc 19 40 04 	movh	r9,0x4004
	{
		t_experiment.MODE=experiment.MODE;
		t_experiment.Noffsetsamples=experiment.Noffsetsamples;
		t_experiment.t_dt_offsetsamples=((uint16_t)roundf((experiment.dt_offsetsamples * PBA_SPEED/(TC_DIV*1000000))));
		t_experiment.N_sequences=experiment.N_sequences;
		t_experiment.N_experiments=experiment.N_experiments;
800051e8:	fe f1 0b f8 	ld.w	r1,pc[3064]
		t_experiment.t_Vgain=(uint16_t)roundf(experiment.Vgain/Vref*4096);
800051ec:	00 9a       	mov	r10,r0
	{
		t_experiment.MODE=experiment.MODE;
		t_experiment.Noffsetsamples=experiment.Noffsetsamples;
		t_experiment.t_dt_offsetsamples=((uint16_t)roundf((experiment.dt_offsetsamples * PBA_SPEED/(TC_DIV*1000000))));
		t_experiment.N_sequences=experiment.N_sequences;
		t_experiment.N_experiments=experiment.N_experiments;
800051ee:	e3 4c 03 30 	st.w	r1[816],r12
		t_experiment.t_Vgain=(uint16_t)roundf(experiment.Vgain/Vref*4096);
800051f2:	e0 a0 19 a5 	rcall	8000853c <__avr32_f64_div>
800051f6:	30 08       	mov	r8,0
800051f8:	fc 19 40 b0 	movh	r9,0x40b0
800051fc:	e0 a0 17 14 	rcall	80008024 <__avr32_f64_mul>
80005200:	e0 a0 1c ca 	rcall	80008b94 <__avr32_f64_to_f32>
80005204:	e0 a0 16 e2 	rcall	80007fc8 <roundf>
	else
	{
		return false;
	}
	
	if((experiment.TPArise>=TPArise_min) && (experiment.TPArise<=TPArise_max))
80005208:	ee fe 03 84 	ld.w	lr,r7[900]
		t_experiment.MODE=experiment.MODE;
		t_experiment.Noffsetsamples=experiment.Noffsetsamples;
		t_experiment.t_dt_offsetsamples=((uint16_t)roundf((experiment.dt_offsetsamples * PBA_SPEED/(TC_DIV*1000000))));
		t_experiment.N_sequences=experiment.N_sequences;
		t_experiment.N_experiments=experiment.N_experiments;
		t_experiment.t_Vgain=(uint16_t)roundf(experiment.Vgain/Vref*4096);
8000520c:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
	else
	{
		return false;
	}
	
	if((experiment.TPArise>=TPArise_min) && (experiment.TPArise<=TPArise_max))
80005210:	50 2e       	stdsp	sp[0x8],lr
		t_experiment.MODE=experiment.MODE;
		t_experiment.Noffsetsamples=experiment.Noffsetsamples;
		t_experiment.t_dt_offsetsamples=((uint16_t)roundf((experiment.dt_offsetsamples * PBA_SPEED/(TC_DIV*1000000))));
		t_experiment.N_sequences=experiment.N_sequences;
		t_experiment.N_experiments=experiment.N_experiments;
		t_experiment.t_Vgain=(uint16_t)roundf(experiment.Vgain/Vref*4096);
80005212:	e3 5c 03 34 	st.h	r1[820],r12
	else
	{
		return false;
	}
	
	if((experiment.TPArise>=TPArise_min) && (experiment.TPArise<=TPArise_max))
80005216:	fc 18 40 00 	movh	r8,0x4000
8000521a:	e5 ac 00 e8 	cop	cp0,cr0,cr14,cr8,0x58
8000521e:	fe 9c ff 7b 	brvs	80005114 <validate_sequences+0x1c>
80005222:	fe 95 ff 79 	brlt	80005114 <validate_sequences+0x1c>
80005226:	1c 9c       	mov	r12,lr
80005228:	e0 a0 1c 86 	rcall	80008b34 <__avr32_f32_to_f64>
8000522c:	14 98       	mov	r8,r10
8000522e:	16 99       	mov	r9,r11
80005230:	e0 6a 11 11 	mov	r10,4369
80005234:	ea 1a 11 11 	orh	r10,0x1111
80005238:	e0 6b 11 11 	mov	r11,4369
8000523c:	ea 1b 40 c1 	orh	r11,0x40c1
80005240:	e0 a0 19 30 	rcall	800084a0 <__avr32_f64_cmp_ge>
80005244:	fe 90 ff 68 	breq	80005114 <validate_sequences+0x1c>
	{
		t_experiment.t_TPArise=((uint16_t)roundf((experiment.TPArise * PBA_SPEED/(TC_DIV*1000000))));
80005248:	40 2a       	lddsp	r10,sp[0x8]
8000524a:	e0 6b 24 00 	mov	r11,9216
8000524e:	ea 1b 4a f4 	orh	r11,0x4af4
80005252:	e0 6c e1 c0 	mov	r12,57792
80005256:	ea 1c 4c 64 	orh	r12,0x4c64
8000525a:	e5 a2 0c ac 	cop	cp0,cr12,cr10,cr12,0x44
8000525e:	e0 a0 1a fb 	rcall	80008854 <__avr32_f32_div>
80005262:	30 09       	mov	r9,0
		
		if(experiment.MODE==MODE_standalone)
		{
			if((currentsequence.TR>=TR_min) && (currentsequence.TR<=TR_max))
			{
				t_currentsequence.t_TR=((uint16_t)roundf((currentsequence.TR *1000.0 )));	//need to correct this once slow TC is set up
80005264:	fc 12 44 7a 	movh	r2,0x447a
		return false;
	}
	
	if((experiment.TPArise>=TPArise_min) && (experiment.TPArise<=TPArise_max))
	{
		t_experiment.t_TPArise=((uint16_t)roundf((experiment.TPArise * PBA_SPEED/(TC_DIV*1000000))));
80005268:	50 59       	stdsp	sp[0x14],r9
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
				(currentsequence.preppulse[j].Vb>=Vb_min) && (currentsequence.preppulse[j].Vb<=Vb_max) &&
				(temp_T>=T0_preppulse_min) && (temp_T<=T0_preppulse_max))
				{
					t_currentsequence.preppulse[j].ms_T0=0;
					while(temp_T>2000.0)
8000526a:	fc 13 44 fa 	movh	r3,0x44fa
		return false;
	}
	
	if((experiment.TPArise>=TPArise_min) && (experiment.TPArise<=TPArise_max))
	{
		t_experiment.t_TPArise=((uint16_t)roundf((experiment.TPArise * PBA_SPEED/(TC_DIV*1000000))));
8000526e:	e0 a0 16 ad 	rcall	80007fc8 <roundf>
80005272:	51 24       	stdsp	sp[0x48],r4
80005274:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
80005278:	50 b6       	stdsp	sp[0x2c],r6
8000527a:	e3 5c 03 24 	st.h	r1[804],r12
	
	
	float temp_T;
	for(uint8_t i=0;i<experiment.N_sequences;i++)
	{
		currentsequence=experiment.sequence[i];
8000527e:	40 5b       	lddsp	r11,sp[0x14]
80005280:	40 56       	lddsp	r6,sp[0x14]
80005282:	a3 7b       	lsl	r11,0x3
80005284:	37 0a       	mov	r10,112
80005286:	0c 1b       	sub	r11,r6
80005288:	fe fc 0b 5c 	ld.w	r12,pc[2908]
8000528c:	a5 6b       	lsl	r11,0x4
8000528e:	2f cb       	sub	r11,-4
80005290:	ee 0b 00 0b 	add	r11,r7,r11
80005294:	e0 a0 1e 0e 	rcall	80008eb0 <memcpy>
		
		if(experiment.MODE==MODE_standalone)
80005298:	30 18       	mov	r8,1
8000529a:	40 b1       	lddsp	r1,sp[0x2c]
8000529c:	f0 01 19 00 	cp.h	r1,r8
800052a0:	e0 80 01 56 	breq	8000554c <validate_sequences+0x454>
			{
				return false;
			}
		}
		
		if(currentsequence.echofirst>1)	//in currentsequence, echofirst is a uint16, but actually represents a bool
800052a4:	fe fa 0b 40 	ld.w	r10,pc[2880]
800052a8:	30 19       	mov	r9,1
800052aa:	f5 08 00 6a 	ld.sh	r8,r10[106]
800052ae:	f2 08 19 00 	cp.h	r8,r9
800052b2:	fe 9b ff 31 	brhi	80005114 <validate_sequences+0x1c>
		{
			return false;
		}
		{	//if echofirst is 0 or 1, then convert to a bool for t_currentsequence
			t_currentsequence.echofirst=(currentsequence.echofirst==1) ? true:false;
800052b6:	fe f9 0b 32 	ld.w	r9,pc[2866]
		}
		
		if((currentsequence.N_preppulses<1) || (currentsequence.N_preppulses>Npreppulses_max))
800052ba:	f5 06 00 68 	ld.sh	r6,r10[104]
		if(currentsequence.echofirst>1)	//in currentsequence, echofirst is a uint16, but actually represents a bool
		{
			return false;
		}
		{	//if echofirst is 0 or 1, then convert to a bool for t_currentsequence
			t_currentsequence.echofirst=(currentsequence.echofirst==1) ? true:false;
800052be:	5c 58       	castu.b	r8
		}
		
		if((currentsequence.N_preppulses<1) || (currentsequence.N_preppulses>Npreppulses_max))
800052c0:	50 66       	stdsp	sp[0x18],r6
		if(currentsequence.echofirst>1)	//in currentsequence, echofirst is a uint16, but actually represents a bool
		{
			return false;
		}
		{	//if echofirst is 0 or 1, then convert to a bool for t_currentsequence
			t_currentsequence.echofirst=(currentsequence.echofirst==1) ? true:false;
800052c2:	f3 68 00 5a 	st.b	r9[90],r8
		}
		
		if((currentsequence.N_preppulses<1) || (currentsequence.N_preppulses>Npreppulses_max))
800052c6:	0c 9a       	mov	r10,r6
800052c8:	30 39       	mov	r9,3
800052ca:	20 1a       	sub	r10,1
800052cc:	f2 0a 19 00 	cp.h	r10,r9
800052d0:	fe 9b ff 22 	brhi	80005114 <validate_sequences+0x1c>
		{
			return false;
		}
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
800052d4:	fe f1 0b 14 	ld.w	r1,pc[2836]
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
800052d8:	0c 99       	mov	r9,r6
		
		if((currentsequence.N_preppulses<1) || (currentsequence.N_preppulses>Npreppulses_max))
		{
			return false;
		}
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
800052da:	e3 56 00 58 	st.h	r1[88],r6
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
800052de:	5c 79       	castu.h	r9
800052e0:	20 19       	sub	r9,1
800052e2:	50 39       	stdsp	sp[0xc],r9
800052e4:	e0 80 05 63 	breq	80005daa <validate_sequences+0xcb2>
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
800052e8:	fe fe 0a fc 	ld.w	lr,pc[2812]
			if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
800052ec:	fc 19 41 a0 	movh	r9,0x41a0
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
800052f0:	7c 18       	ld.w	r8,lr[0x4]
800052f2:	7c 24       	ld.w	r4,lr[0x8]
800052f4:	7c 6a       	ld.w	r10,lr[0x18]
			if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
800052f6:	e5 ac 00 89 	cop	cp0,cr0,cr8,cr9,0x58
800052fa:	fe 9c ff 0d 	brvs	80005114 <validate_sequences+0x1c>
800052fe:	fe 95 ff 0b 	brlt	80005114 <validate_sequences+0x1c>
80005302:	e0 69 24 00 	mov	r9,9216
80005306:	ea 19 49 74 	orh	r9,0x4974
8000530a:	e5 ac 00 89 	cop	cp0,cr0,cr8,cr9,0x58
8000530e:	fe 9c ff 03 	brvs	80005114 <validate_sequences+0x1c>
80005312:	fe 99 ff 01 	brgt	80005114 <validate_sequences+0x1c>
80005316:	fc 19 3f c0 	movh	r9,0x3fc0
8000531a:	e5 ac 00 49 	cop	cp0,cr0,cr4,cr9,0x58
8000531e:	fe 9c fe fb 	brvs	80005114 <validate_sequences+0x1c>
80005322:	fe 95 fe f9 	brlt	80005114 <validate_sequences+0x1c>
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
80005326:	fc 19 bf 00 	movh	r9,0xbf00
8000532a:	40 2b       	lddsp	r11,sp[0x8]
8000532c:	e1 a8 08 49 	cop	cp0,cr8,cr4,cr9,0x10
80005330:	30 06       	mov	r6,0
80005332:	e1 a8 09 a9 	cop	cp0,cr9,cr10,cr9,0x10
80005336:	e5 a1 0a 9b 	cop	cp0,cr10,cr9,cr11,0x42
			if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
8000533a:	e0 68 24 00 	mov	r8,9216
8000533e:	ea 18 48 f4 	orh	r8,0x48f4
80005342:	e5 ac 00 48 	cop	cp0,cr0,cr4,cr8,0x58
80005346:	fe 9c fe e7 	brvs	80005114 <validate_sequences+0x1c>
8000534a:	fe 99 fe e5 	brgt	80005114 <validate_sequences+0x1c>
				(currentsequence.preppulse[j].pulsewidth>=pulsewidth_min) && (currentsequence.preppulse[j].pulsewidth<=pulsewidth_max) &&
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
8000534e:	ec 08 15 02 	lsl	r8,r6,0x2
80005352:	fe f1 0a 92 	ld.w	r1,pc[2706]
80005356:	2f d8       	sub	r8,-3
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
			if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
80005358:	30 0e       	mov	lr,0
				(currentsequence.preppulse[j].pulsewidth>=pulsewidth_min) && (currentsequence.preppulse[j].pulsewidth<=pulsewidth_max) &&
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
8000535a:	e2 08 03 29 	ld.w	r9,r1[r8<<0x2]
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
			if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
8000535e:	e5 ac 00 9e 	cop	cp0,cr0,cr9,cr14,0x58
80005362:	fe 9c fe d9 	brvs	80005114 <validate_sequences+0x1c>
80005366:	fe 95 fe d7 	brlt	80005114 <validate_sequences+0x1c>
8000536a:	fc 1b 43 b4 	movh	r11,0x43b4
8000536e:	e5 ac 00 9b 	cop	cp0,cr0,cr9,cr11,0x58
80005372:	fe 9c fe d1 	brvs	80005114 <validate_sequences+0x1c>
80005376:	fe 94 fe cf 	brge	80005114 <validate_sequences+0x1c>
				(currentsequence.preppulse[j].pulsewidth>=pulsewidth_min) && (currentsequence.preppulse[j].pulsewidth<=pulsewidth_max) &&
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
8000537a:	ec c8 ff ff 	sub	r8,r6,-1
8000537e:	a5 68       	lsl	r8,0x4
80005380:	e2 08 00 08 	add	r8,r1,r8
80005384:	90 00       	ld.sh	r0,r8[0x0]
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
			if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
80005386:	58 00       	cp.w	r0,0
80005388:	fe 90 fe c6 	breq	80005114 <validate_sequences+0x1c>
8000538c:	e0 6e 03 ff 	mov	lr,1023
80005390:	fc 00 19 00 	cp.h	r0,lr
80005394:	fe 9b fe c0 	brhi	80005114 <validate_sequences+0x1c>
				(currentsequence.preppulse[j].pulsewidth>=pulsewidth_min) && (currentsequence.preppulse[j].pulsewidth<=pulsewidth_max) &&
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
				(currentsequence.preppulse[j].Vb>=Vb_min) && (currentsequence.preppulse[j].Vb<=Vb_max) &&
80005398:	90 18       	ld.sh	r8,r8[0x2]
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
			if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
8000539a:	58 08       	cp.w	r8,0
8000539c:	fe 90 fe bc 	breq	80005114 <validate_sequences+0x1c>
800053a0:	e0 6b 0f ff 	mov	r11,4095
800053a4:	f6 08 19 00 	cp.h	r8,r11
800053a8:	fe 9b fe b6 	brhi	80005114 <validate_sequences+0x1c>
800053ac:	fc 1b 41 20 	movh	r11,0x4120
800053b0:	e5 ac 00 ab 	cop	cp0,cr0,cr10,cr11,0x58
800053b4:	fe 9c fe b0 	brvs	80005114 <validate_sequences+0x1c>
800053b8:	fe 95 fe ae 	brlt	80005114 <validate_sequences+0x1c>
800053bc:	e0 6b 24 00 	mov	r11,9216
800053c0:	ea 1b 48 f4 	orh	r11,0x48f4
800053c4:	e5 ac 00 ab 	cop	cp0,cr0,cr10,cr11,0x58
800053c8:	fe 9c fe a6 	brvs	80005114 <validate_sequences+0x1c>
800053cc:	fe 99 fe a4 	brgt	80005114 <validate_sequences+0x1c>
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
				(currentsequence.preppulse[j].Vb>=Vb_min) && (currentsequence.preppulse[j].Vb<=Vb_max) &&
				(temp_T>=T0_preppulse_min) && (temp_T<=T0_preppulse_max))
				{
					t_currentsequence.preppulse[j].ms_T0=0;
800053d0:	ec 01 15 03 	lsl	r1,r6,0x3
800053d4:	fe fb 0a 14 	ld.w	r11,pc[2580]
800053d8:	0c 11       	sub	r1,r6
800053da:	30 0c       	mov	r12,0
800053dc:	a1 71       	lsl	r1,0x1
800053de:	02 0b       	add	r11,r1
800053e0:	2f cb       	sub	r11,-4
800053e2:	b6 1c       	st.h	r11[0x2],r12
					while(temp_T>2000.0)
800053e4:	e5 ac 00 a3 	cop	cp0,cr0,cr10,cr3,0x58
800053e8:	e0 8c 00 17 	brvs	80005416 <validate_sequences+0x31e>
800053ec:	e0 8a 00 15 	brle	80005416 <validate_sequences+0x31e>
800053f0:	30 1b       	mov	r11,1
800053f2:	c0 38       	rjmp	800053f8 <validate_sequences+0x300>
800053f4:	f7 dc b0 10 	bfexts	r11,r12,0x0,0x10
					{
						t_currentsequence.preppulse[j].ms_T0++;
						temp_T-=1000.0;
800053f8:	f6 cc ff ff 	sub	r12,r11,-1
800053fc:	e5 a1 0a a2 	cop	cp0,cr10,cr10,cr2,0x42
80005400:	5c 8c       	casts.h	r12
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
				(currentsequence.preppulse[j].Vb>=Vb_min) && (currentsequence.preppulse[j].Vb<=Vb_max) &&
				(temp_T>=T0_preppulse_min) && (temp_T<=T0_preppulse_max))
				{
					t_currentsequence.preppulse[j].ms_T0=0;
					while(temp_T>2000.0)
80005402:	e5 ac 00 a3 	cop	cp0,cr0,cr10,cr3,0x58
80005406:	e0 8c 00 04 	brvs	8000540e <validate_sequences+0x316>
8000540a:	fe 99 ff f5 	brgt	800053f4 <validate_sequences+0x2fc>
8000540e:	fe fc 09 da 	ld.w	r12,pc[2522]
80005412:	02 0c       	add	r12,r1
80005414:	b8 3b       	st.h	r12[0x6],r11
					{
						t_currentsequence.preppulse[j].ms_T0++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_T0=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
80005416:	e0 6b 24 00 	mov	r11,9216
8000541a:	ea 1b 4a f4 	orh	r11,0x4af4
8000541e:	50 09       	stdsp	sp[0x0],r9
80005420:	50 18       	stdsp	sp[0x4],r8
80005422:	e0 6c e1 c0 	mov	r12,57792
80005426:	ea 1c 4c 64 	orh	r12,0x4c64
8000542a:	e5 a2 0c ac 	cop	cp0,cr12,cr10,cr12,0x44
8000542e:	e0 a0 1a 13 	rcall	80008854 <__avr32_f32_div>
80005432:	e0 a0 15 cb 	rcall	80007fc8 <roundf>
80005436:	fe fa 09 b2 	ld.w	r10,pc[2482]
8000543a:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
8000543e:	02 0a       	add	r10,r1
					
					
					t_currentsequence.preppulse[j].ms_pulsewidth=0;
80005440:	30 0b       	mov	r11,0
					while(temp_T>2000.0)
					{
						t_currentsequence.preppulse[j].ms_T0++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_T0=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
80005442:	b4 2c       	st.h	r10[0x4],r12
					
					
					t_currentsequence.preppulse[j].ms_pulsewidth=0;
80005444:	2f 8a       	sub	r10,-8
80005446:	b4 1b       	st.h	r10[0x2],r11
					temp_T=currentsequence.preppulse[j].pulsewidth;
					while(temp_T>2000.0)
80005448:	40 09       	lddsp	r9,sp[0x0]
8000544a:	40 18       	lddsp	r8,sp[0x4]
8000544c:	e5 ac 00 43 	cop	cp0,cr0,cr4,cr3,0x58
80005450:	e0 8c 00 17 	brvs	8000547e <validate_sequences+0x386>
80005454:	e0 8a 00 15 	brle	8000547e <validate_sequences+0x386>
80005458:	30 1a       	mov	r10,1
8000545a:	c0 38       	rjmp	80005460 <validate_sequences+0x368>
8000545c:	f5 db b0 10 	bfexts	r10,r11,0x0,0x10
					{
						t_currentsequence.preppulse[j].ms_pulsewidth++;
						temp_T-=1000.0;
80005460:	f4 cb ff ff 	sub	r11,r10,-1
80005464:	e5 a1 04 42 	cop	cp0,cr4,cr4,cr2,0x42
80005468:	5c 8b       	casts.h	r11
					t_currentsequence.preppulse[j].t_T0=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
					
					
					t_currentsequence.preppulse[j].ms_pulsewidth=0;
					temp_T=currentsequence.preppulse[j].pulsewidth;
					while(temp_T>2000.0)
8000546a:	e5 ac 00 43 	cop	cp0,cr0,cr4,cr3,0x58
8000546e:	e0 8c 00 04 	brvs	80005476 <validate_sequences+0x37e>
80005472:	fe 99 ff f5 	brgt	8000545c <validate_sequences+0x364>
80005476:	fe fb 09 72 	ld.w	r11,pc[2418]
8000547a:	02 0b       	add	r11,r1
8000547c:	b6 5a       	st.h	r11[0xa],r10
					{
						t_currentsequence.preppulse[j].ms_pulsewidth++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_pulsewidth=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
8000547e:	e0 6b 24 00 	mov	r11,9216
80005482:	ea 1b 4a f4 	orh	r11,0x4af4
80005486:	50 09       	stdsp	sp[0x0],r9
80005488:	50 18       	stdsp	sp[0x4],r8
8000548a:	e0 6c e1 c0 	mov	r12,57792
8000548e:	ea 1c 4c 64 	orh	r12,0x4c64
80005492:	e5 a2 0c 4c 	cop	cp0,cr12,cr4,cr12,0x44
80005496:	e0 a0 19 df 	rcall	80008854 <__avr32_f32_div>
8000549a:	e0 a0 15 97 	rcall	80007fc8 <roundf>
					
					
					t_currentsequence.preppulse[j].Vb=currentsequence.preppulse[j].Vb;
8000549e:	40 18       	lddsp	r8,sp[0x4]
					t_currentsequence.preppulse[j].RFamp=currentsequence.preppulse[j].RFamp;
				
					t_currentsequence.preppulse[j].RFphase_POW=(uint16_t)roundf(16384*(currentsequence.preppulse[j].RFphase)/360) & 0x3FFF;
800054a0:	40 09       	lddsp	r9,sp[0x0]
					while(temp_T>2000.0)
					{
						t_currentsequence.preppulse[j].ms_pulsewidth++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_pulsewidth=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
800054a2:	fe fa 09 46 	ld.w	r10,pc[2374]
800054a6:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
800054aa:	f4 01 00 01 	add	r1,r10,r1
					
					
					t_currentsequence.preppulse[j].Vb=currentsequence.preppulse[j].Vb;
					t_currentsequence.preppulse[j].RFamp=currentsequence.preppulse[j].RFamp;
				
					t_currentsequence.preppulse[j].RFphase_POW=(uint16_t)roundf(16384*(currentsequence.preppulse[j].RFphase)/360) & 0x3FFF;
800054ae:	fc 1b 43 b4 	movh	r11,0x43b4
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_pulsewidth=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
					
					
					t_currentsequence.preppulse[j].Vb=currentsequence.preppulse[j].Vb;
800054b2:	e3 58 00 10 	st.h	r1[16],r8
					t_currentsequence.preppulse[j].RFamp=currentsequence.preppulse[j].RFamp;
800054b6:	e2 c4 ff f4 	sub	r4,r1,-12
					while(temp_T>2000.0)
					{
						t_currentsequence.preppulse[j].ms_pulsewidth++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_pulsewidth=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
800054ba:	a2 4c       	st.h	r1[0x8],r12
					
					
					t_currentsequence.preppulse[j].Vb=currentsequence.preppulse[j].Vb;
					t_currentsequence.preppulse[j].RFamp=currentsequence.preppulse[j].RFamp;
800054bc:	a8 10       	st.h	r4[0x2],r0
				
					t_currentsequence.preppulse[j].RFphase_POW=(uint16_t)roundf(16384*(currentsequence.preppulse[j].RFphase)/360) & 0x3FFF;
800054be:	fc 1c 46 80 	movh	r12,0x4680
800054c2:	e5 a2 0c 9c 	cop	cp0,cr12,cr9,cr12,0x44
800054c6:	e0 a0 19 c7 	rcall	80008854 <__avr32_f32_div>
800054ca:	e0 a0 15 7f 	rcall	80007fc8 <roundf>
800054ce:	e5 a9 08 0c 	cop	cp0,cr8,cr0,cr12,0x52
800054d2:	f1 d8 c0 0e 	bfextu	r8,r8,0x0,0xe
800054d6:	a8 08       	st.h	r4[0x0],r8
				else
				{
					return false;
				}
				
				j++;
800054d8:	2f f6       	sub	r6,-1
			return false;
		}
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
800054da:	40 39       	lddsp	r9,sp[0xc]
				else
				{
					return false;
				}
				
				j++;
800054dc:	5c 56       	castu.b	r6
			return false;
		}
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
800054de:	12 36       	cp.w	r6,r9
800054e0:	c5 54       	brge	8000558a <validate_sequences+0x492>
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
800054e2:	ec 09 15 01 	lsl	r9,r6,0x1
800054e6:	2f f9       	sub	r9,-1
800054e8:	fe fa 08 fc 	ld.w	r10,pc[2300]
800054ec:	f4 09 03 34 	ld.w	r4,r10[r9<<0x3]
800054f0:	ec 09 15 01 	lsl	r9,r6,0x1
800054f4:	2f d9       	sub	r9,-3
800054f6:	ec 08 15 02 	lsl	r8,r6,0x2
800054fa:	2f f8       	sub	r8,-1
800054fc:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
80005500:	f4 09 03 3a 	ld.w	r10,r10[r9<<0x3]
			if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
80005504:	fc 19 41 a0 	movh	r9,0x41a0
80005508:	e5 ac 00 89 	cop	cp0,cr0,cr8,cr9,0x58
8000550c:	fe 9c fe 04 	brvs	80005114 <validate_sequences+0x1c>
80005510:	fe 95 fe 02 	brlt	80005114 <validate_sequences+0x1c>
80005514:	e0 69 24 00 	mov	r9,9216
80005518:	ea 19 49 74 	orh	r9,0x4974
8000551c:	e5 ac 00 89 	cop	cp0,cr0,cr8,cr9,0x58
80005520:	fe 9c fd fa 	brvs	80005114 <validate_sequences+0x1c>
80005524:	fe 99 fd f8 	brgt	80005114 <validate_sequences+0x1c>
80005528:	fc 19 3f c0 	movh	r9,0x3fc0
8000552c:	e5 ac 00 49 	cop	cp0,cr0,cr4,cr9,0x58
80005530:	fe 9c fd f2 	brvs	80005114 <validate_sequences+0x1c>
80005534:	fe 95 fd f0 	brlt	80005114 <validate_sequences+0x1c>
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
		{
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.preppulse[j+1].pulsewidth/2)-experiment.TPArise;
80005538:	fc 19 bf 00 	movh	r9,0xbf00
8000553c:	e1 a8 08 49 	cop	cp0,cr8,cr4,cr9,0x10
80005540:	e1 a8 0a a9 	cop	cp0,cr10,cr10,cr9,0x10
80005544:	40 29       	lddsp	r9,sp[0x8]
80005546:	e5 a1 0a a9 	cop	cp0,cr10,cr10,cr9,0x42
8000554a:	cf 8a       	rjmp	8000533a <validate_sequences+0x242>
	{
		currentsequence=experiment.sequence[i];
		
		if(experiment.MODE==MODE_standalone)
		{
			if((currentsequence.TR>=TR_min) && (currentsequence.TR<=TR_max))
8000554c:	fe fe 08 98 	ld.w	lr,pc[2200]
80005550:	fc 18 3f 80 	movh	r8,0x3f80
80005554:	7d bc       	ld.w	r12,lr[0x6c]
80005556:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
8000555a:	fe 9c fd dd 	brvs	80005114 <validate_sequences+0x1c>
8000555e:	fe 95 fd db 	brlt	80005114 <validate_sequences+0x1c>
80005562:	fc 18 42 70 	movh	r8,0x4270
80005566:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
8000556a:	fe 9c fd d5 	brvs	80005114 <validate_sequences+0x1c>
8000556e:	fe 99 fd d3 	brgt	80005114 <validate_sequences+0x1c>
			{
				t_currentsequence.t_TR=((uint16_t)roundf((currentsequence.TR *1000.0 )));	//need to correct this once slow TC is set up
80005572:	e5 a2 0c c2 	cop	cp0,cr12,cr12,cr2,0x44
80005576:	e0 a0 15 29 	rcall	80007fc8 <roundf>
8000557a:	fe fb 08 6e 	ld.w	r11,pc[2158]
8000557e:	e5 a9 08 0c 	cop	cp0,cr8,cr0,cr12,0x52
80005582:	5c 78       	castu.h	r8
80005584:	f7 48 00 60 	st.w	r11[96],r8
	{
		currentsequence=experiment.sequence[i];
		
		if(experiment.MODE==MODE_standalone)
		{
			if((currentsequence.TR>=TR_min) && (currentsequence.TR<=TR_max))
80005588:	c8 ea       	rjmp	800052a4 <validate_sequences+0x1ac>
			return false;
		}
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
8000558a:	fe f1 08 5e 	ld.w	r1,pc[2142]
8000558e:	e3 38 00 5a 	ld.ub	r8,r1[90]
					return false;
				}
				
				j++;
		}
		if(t_currentsequence.echofirst==false)
80005592:	58 08       	cp.w	r8,0
80005594:	e0 81 03 c4 	brne	80005d1c <validate_sequences+0xc24>
		{	//this is correct T0 when pulse is first
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.CPMG.pulsewidth/2)-experiment.TPArise;	//check final prep pulse
80005598:	ec 08 15 02 	lsl	r8,r6,0x2
8000559c:	2f f8       	sub	r8,-1
8000559e:	fe fe 08 46 	ld.w	lr,pc[2118]
800055a2:	ec 00 15 01 	lsl	r0,r6,0x1
800055a6:	fc 08 03 21 	ld.w	r1,lr[r8<<0x2]
800055aa:	e0 c8 ff ff 	sub	r8,r0,-1
800055ae:	fc 19 bf 00 	movh	r9,0xbf00
800055b2:	7d 2a       	ld.w	r10,lr[0x48]
800055b4:	fc 08 03 34 	ld.w	r4,lr[r8<<0x3]
800055b8:	40 2b       	lddsp	r11,sp[0x8]
800055ba:	e1 a1 08 49 	cop	cp0,cr8,cr4,cr9,0x2
800055be:	e1 a8 08 a9 	cop	cp0,cr8,cr10,cr9,0x10
800055c2:	e5 a1 0c 8b 	cop	cp0,cr12,cr8,cr11,0x42
		else
		{	//this is correct T0 when echo is first
			temp_T=currentsequence.preppulse[j].tau-currentsequence.preppulse[j].pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset;
		}
		
		if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
800055c6:	fc 18 41 a0 	movh	r8,0x41a0
800055ca:	e5 ac 00 18 	cop	cp0,cr0,cr1,cr8,0x58
800055ce:	fe 9c fd a3 	brvs	80005114 <validate_sequences+0x1c>
800055d2:	fe 95 fd a1 	brlt	80005114 <validate_sequences+0x1c>
800055d6:	e0 68 24 00 	mov	r8,9216
800055da:	ea 18 49 74 	orh	r8,0x4974
800055de:	e5 ac 00 18 	cop	cp0,cr0,cr1,cr8,0x58
800055e2:	fe 9c fd 99 	brvs	80005114 <validate_sequences+0x1c>
800055e6:	fe 99 fd 97 	brgt	80005114 <validate_sequences+0x1c>
800055ea:	fc 18 3f c0 	movh	r8,0x3fc0
800055ee:	e5 ac 00 48 	cop	cp0,cr0,cr4,cr8,0x58
800055f2:	fe 9c fd 91 	brvs	80005114 <validate_sequences+0x1c>
800055f6:	fe 95 fd 8f 	brlt	80005114 <validate_sequences+0x1c>
800055fa:	e0 68 24 00 	mov	r8,9216
800055fe:	ea 18 48 f4 	orh	r8,0x48f4
80005602:	e5 ac 00 48 	cop	cp0,cr0,cr4,cr8,0x58
80005606:	fe 9c fd 87 	brvs	80005114 <validate_sequences+0x1c>
8000560a:	fe 99 fd 85 	brgt	80005114 <validate_sequences+0x1c>
				(currentsequence.preppulse[j].pulsewidth>=pulsewidth_min) && (currentsequence.preppulse[j].pulsewidth<=pulsewidth_max) &&
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
8000560e:	fe f1 07 d6 	ld.w	r1,pc[2006]
		else
		{	//this is correct T0 when echo is first
			temp_T=currentsequence.preppulse[j].tau-currentsequence.preppulse[j].pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset;
		}
		
		if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
80005612:	30 08       	mov	r8,0
				(currentsequence.preppulse[j].pulsewidth>=pulsewidth_min) && (currentsequence.preppulse[j].pulsewidth<=pulsewidth_max) &&
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
80005614:	e2 00 00 30 	add	r0,r1,r0<<0x3
80005618:	60 3a       	ld.w	r10,r0[0xc]
		else
		{	//this is correct T0 when echo is first
			temp_T=currentsequence.preppulse[j].tau-currentsequence.preppulse[j].pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset;
		}
		
		if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
8000561a:	e5 ac 00 a8 	cop	cp0,cr0,cr10,cr8,0x58
8000561e:	fe 9c fd 7b 	brvs	80005114 <validate_sequences+0x1c>
80005622:	fe 95 fd 79 	brlt	80005114 <validate_sequences+0x1c>
80005626:	fc 18 43 b4 	movh	r8,0x43b4
8000562a:	e5 ac 00 a8 	cop	cp0,cr0,cr10,cr8,0x58
8000562e:	fe 9c fd 73 	brvs	80005114 <validate_sequences+0x1c>
80005632:	fe 94 fd 71 	brge	80005114 <validate_sequences+0x1c>
				(currentsequence.preppulse[j].pulsewidth>=pulsewidth_min) && (currentsequence.preppulse[j].pulsewidth<=pulsewidth_max) &&
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
80005636:	ec c9 ff ff 	sub	r9,r6,-1
8000563a:	02 9e       	mov	lr,r1
8000563c:	a5 69       	lsl	r9,0x4
8000563e:	e2 09 00 09 	add	r9,r1,r9
80005642:	92 00       	ld.sh	r0,r9[0x0]
		else
		{	//this is correct T0 when echo is first
			temp_T=currentsequence.preppulse[j].tau-currentsequence.preppulse[j].pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset;
		}
		
		if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
80005644:	58 00       	cp.w	r0,0
80005646:	fe 90 fd 67 	breq	80005114 <validate_sequences+0x1c>
8000564a:	e0 68 03 ff 	mov	r8,1023
8000564e:	f0 00 19 00 	cp.h	r0,r8
80005652:	fe 9b fd 61 	brhi	80005114 <validate_sequences+0x1c>
				(currentsequence.preppulse[j].pulsewidth>=pulsewidth_min) && (currentsequence.preppulse[j].pulsewidth<=pulsewidth_max) &&
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
				(currentsequence.preppulse[j].Vb>=Vb_min) && (currentsequence.preppulse[j].Vb<=Vb_max) &&
80005656:	92 11       	ld.sh	r1,r9[0x2]
		else
		{	//this is correct T0 when echo is first
			temp_T=currentsequence.preppulse[j].tau-currentsequence.preppulse[j].pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset;
		}
		
		if( (currentsequence.preppulse[j].tau>=tau_min) && (currentsequence.preppulse[j].tau<=tau_max) &&
80005658:	58 01       	cp.w	r1,0
8000565a:	fe 90 fd 5d 	breq	80005114 <validate_sequences+0x1c>
8000565e:	e0 68 0f ff 	mov	r8,4095
80005662:	f0 01 19 00 	cp.h	r1,r8
80005666:	fe 9b fd 57 	brhi	80005114 <validate_sequences+0x1c>
8000566a:	fc 18 41 20 	movh	r8,0x4120
8000566e:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
80005672:	fe 9c fd 51 	brvs	80005114 <validate_sequences+0x1c>
80005676:	fe 95 fd 4f 	brlt	80005114 <validate_sequences+0x1c>
8000567a:	e0 68 24 00 	mov	r8,9216
8000567e:	ea 18 48 f4 	orh	r8,0x48f4
80005682:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
80005686:	fe 9c fd 47 	brvs	80005114 <validate_sequences+0x1c>
8000568a:	fe 99 fd 45 	brgt	80005114 <validate_sequences+0x1c>
				(currentsequence.preppulse[j].RFphase>=0) && (currentsequence.preppulse[j].RFphase<360) &&
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
				(currentsequence.preppulse[j].Vb>=Vb_min) && (currentsequence.preppulse[j].Vb<=Vb_max) &&
				(temp_T>=T0_preppulse_min) && (temp_T<=T0_preppulse_max))
				{
					t_currentsequence.preppulse[j].ms_T0=0;
8000568e:	ec 08 15 03 	lsl	r8,r6,0x3
80005692:	f0 06 01 06 	sub	r6,r8,r6
80005696:	fe f8 07 52 	ld.w	r8,pc[1874]
8000569a:	a1 76       	lsl	r6,0x1
8000569c:	0c 08       	add	r8,r6
8000569e:	f0 c9 ff fc 	sub	r9,r8,-4
800056a2:	30 08       	mov	r8,0
800056a4:	b2 18       	st.h	r9[0x2],r8
					while(temp_T>2000.0)
800056a6:	e5 ac 00 c3 	cop	cp0,cr0,cr12,cr3,0x58
800056aa:	e0 8c 00 17 	brvs	800056d8 <validate_sequences+0x5e0>
800056ae:	e0 8a 00 15 	brle	800056d8 <validate_sequences+0x5e0>
800056b2:	30 18       	mov	r8,1
800056b4:	c0 38       	rjmp	800056ba <validate_sequences+0x5c2>
800056b6:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
					{
						t_currentsequence.preppulse[j].ms_T0++;
						temp_T-=1000.0;
800056ba:	f0 c9 ff ff 	sub	r9,r8,-1
800056be:	e5 a1 0c c2 	cop	cp0,cr12,cr12,cr2,0x42
800056c2:	5c 89       	casts.h	r9
				(currentsequence.preppulse[j].RFamp>0) && (currentsequence.preppulse[j].RFamp<=1023) &&
				(currentsequence.preppulse[j].Vb>=Vb_min) && (currentsequence.preppulse[j].Vb<=Vb_max) &&
				(temp_T>=T0_preppulse_min) && (temp_T<=T0_preppulse_max))
				{
					t_currentsequence.preppulse[j].ms_T0=0;
					while(temp_T>2000.0)
800056c4:	e5 ac 00 c3 	cop	cp0,cr0,cr12,cr3,0x58
800056c8:	e0 8c 00 04 	brvs	800056d0 <validate_sequences+0x5d8>
800056cc:	fe 99 ff f5 	brgt	800056b6 <validate_sequences+0x5be>
800056d0:	fe f9 07 18 	ld.w	r9,pc[1816]
800056d4:	0c 09       	add	r9,r6
800056d6:	b2 38       	st.h	r9[0x6],r8
					{
						t_currentsequence.preppulse[j].ms_T0++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_T0=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
800056d8:	e0 68 e1 c0 	mov	r8,57792
800056dc:	ea 18 4c 64 	orh	r8,0x4c64
800056e0:	e0 6b 24 00 	mov	r11,9216
800056e4:	ea 1b 4a f4 	orh	r11,0x4af4
800056e8:	e5 a2 0c c8 	cop	cp0,cr12,cr12,cr8,0x44
800056ec:	50 1a       	stdsp	sp[0x4],r10
800056ee:	e0 a0 18 b3 	rcall	80008854 <__avr32_f32_div>
800056f2:	e0 a0 14 6b 	rcall	80007fc8 <roundf>
800056f6:	fe f8 06 f2 	ld.w	r8,pc[1778]
800056fa:	0c 08       	add	r8,r6
800056fc:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
					
					
					t_currentsequence.preppulse[j].ms_pulsewidth=0;
80005700:	f0 c9 ff f8 	sub	r9,r8,-8
					while(temp_T>2000.0)
					{
						t_currentsequence.preppulse[j].ms_T0++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_T0=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
80005704:	b0 2c       	st.h	r8[0x4],r12
					
					
					t_currentsequence.preppulse[j].ms_pulsewidth=0;
80005706:	30 08       	mov	r8,0
80005708:	b2 18       	st.h	r9[0x2],r8
					temp_T=currentsequence.preppulse[j].pulsewidth;
					while(temp_T>2000.0)
8000570a:	40 1a       	lddsp	r10,sp[0x4]
8000570c:	e5 ac 00 43 	cop	cp0,cr0,cr4,cr3,0x58
80005710:	e0 8c 00 17 	brvs	8000573e <validate_sequences+0x646>
80005714:	e0 8a 00 15 	brle	8000573e <validate_sequences+0x646>
80005718:	30 18       	mov	r8,1
8000571a:	c0 38       	rjmp	80005720 <validate_sequences+0x628>
8000571c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
					{
						t_currentsequence.preppulse[j].ms_pulsewidth++;
						temp_T-=1000.0;
80005720:	f0 c9 ff ff 	sub	r9,r8,-1
80005724:	e5 a1 04 42 	cop	cp0,cr4,cr4,cr2,0x42
80005728:	5c 89       	casts.h	r9
					t_currentsequence.preppulse[j].t_T0=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
					
					
					t_currentsequence.preppulse[j].ms_pulsewidth=0;
					temp_T=currentsequence.preppulse[j].pulsewidth;
					while(temp_T>2000.0)
8000572a:	e5 ac 00 43 	cop	cp0,cr0,cr4,cr3,0x58
8000572e:	e0 8c 00 04 	brvs	80005736 <validate_sequences+0x63e>
80005732:	fe 99 ff f5 	brgt	8000571c <validate_sequences+0x624>
80005736:	fe f9 06 b2 	ld.w	r9,pc[1714]
8000573a:	0c 09       	add	r9,r6
8000573c:	b2 58       	st.h	r9[0xa],r8
					{
						t_currentsequence.preppulse[j].ms_pulsewidth++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_pulsewidth=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
8000573e:	e0 6b 24 00 	mov	r11,9216
80005742:	ea 1b 4a f4 	orh	r11,0x4af4
80005746:	50 1a       	stdsp	sp[0x4],r10
80005748:	e0 6c e1 c0 	mov	r12,57792
8000574c:	ea 1c 4c 64 	orh	r12,0x4c64
80005750:	e5 a2 0c 4c 	cop	cp0,cr12,cr4,cr12,0x44
80005754:	e0 a0 18 80 	rcall	80008854 <__avr32_f32_div>
80005758:	e0 a0 14 38 	rcall	80007fc8 <roundf>
8000575c:	fe f9 06 8c 	ld.w	r9,pc[1676]
					
					
					t_currentsequence.preppulse[j].Vb=currentsequence.preppulse[j].Vb;
					t_currentsequence.preppulse[j].RFamp=currentsequence.preppulse[j].RFamp;
					
					t_currentsequence.preppulse[j].RFphase_POW=(uint16_t)roundf(16384*(currentsequence.preppulse[j].RFphase)/360) & 0x3FFF;
80005760:	40 1a       	lddsp	r10,sp[0x4]
					while(temp_T>2000.0)
					{
						t_currentsequence.preppulse[j].ms_pulsewidth++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_pulsewidth=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
80005762:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
80005766:	f2 06 00 06 	add	r6,r9,r6
					
					
					t_currentsequence.preppulse[j].Vb=currentsequence.preppulse[j].Vb;
					t_currentsequence.preppulse[j].RFamp=currentsequence.preppulse[j].RFamp;
					
					t_currentsequence.preppulse[j].RFphase_POW=(uint16_t)roundf(16384*(currentsequence.preppulse[j].RFphase)/360) & 0x3FFF;
8000576a:	fc 1b 43 b4 	movh	r11,0x43b4
					}
					t_currentsequence.preppulse[j].t_pulsewidth=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
					
					
					t_currentsequence.preppulse[j].Vb=currentsequence.preppulse[j].Vb;
					t_currentsequence.preppulse[j].RFamp=currentsequence.preppulse[j].RFamp;
8000576e:	ec c4 ff f4 	sub	r4,r6,-12
					while(temp_T>2000.0)
					{
						t_currentsequence.preppulse[j].ms_pulsewidth++;
						temp_T-=1000.0;
					}
					t_currentsequence.preppulse[j].t_pulsewidth=((uint16_t)roundf((temp_T * PBA_SPEED/(TC_DIV*1000000))));
80005772:	ac 4c       	st.h	r6[0x8],r12
					
					
					t_currentsequence.preppulse[j].Vb=currentsequence.preppulse[j].Vb;
80005774:	ed 51 00 10 	st.h	r6[16],r1
					t_currentsequence.preppulse[j].RFamp=currentsequence.preppulse[j].RFamp;
80005778:	a8 10       	st.h	r4[0x2],r0
					
					t_currentsequence.preppulse[j].RFphase_POW=(uint16_t)roundf(16384*(currentsequence.preppulse[j].RFphase)/360) & 0x3FFF;
8000577a:	fc 1c 46 80 	movh	r12,0x4680
8000577e:	e5 a2 0c ac 	cop	cp0,cr12,cr10,cr12,0x44
80005782:	e0 a0 18 69 	rcall	80008854 <__avr32_f32_div>
80005786:	e0 a0 14 21 	rcall	80007fc8 <roundf>
8000578a:	e5 a9 08 0c 	cop	cp0,cr8,cr0,cr12,0x52
8000578e:	f1 d8 c0 0e 	bfextu	r8,r8,0x0,0xe
80005792:	a8 08       	st.h	r4[0x0],r8
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
80005794:	fe f8 06 50 	ld.w	r8,pc[1616]
80005798:	71 16       	ld.w	r6,r8[0x44]
8000579a:	fc 18 41 f0 	movh	r8,0x41f0
8000579e:	e5 ac 00 68 	cop	cp0,cr0,cr6,cr8,0x58
800057a2:	fe 9c fc b9 	brvs	80005114 <validate_sequences+0x1c>
800057a6:	fe 95 fc b7 	brlt	80005114 <validate_sequences+0x1c>
800057aa:	fc 18 45 fa 	movh	r8,0x45fa
800057ae:	e5 ac 00 68 	cop	cp0,cr0,cr6,cr8,0x58
800057b2:	fe 9c fc b1 	brvs	80005114 <validate_sequences+0x1c>
800057b6:	fe 99 fc af 	brgt	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.pulsewidth>=pulsewidth_min) && (currentsequence.CPMG.pulsewidth<=pulsewidth_max) &&
800057ba:	fe f1 06 2a 	ld.w	r1,pc[1578]
800057be:	63 21       	ld.w	r1,r1[0x48]
800057c0:	50 31       	stdsp	sp[0xc],r1
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
800057c2:	fc 18 3f c0 	movh	r8,0x3fc0
800057c6:	e5 ac 00 18 	cop	cp0,cr0,cr1,cr8,0x58
800057ca:	fe 9c fc a5 	brvs	80005114 <validate_sequences+0x1c>
800057ce:	fe 95 fc a3 	brlt	80005114 <validate_sequences+0x1c>
800057d2:	e0 68 24 00 	mov	r8,9216
800057d6:	ea 18 48 f4 	orh	r8,0x48f4
800057da:	02 9e       	mov	lr,r1
800057dc:	e5 ac 00 18 	cop	cp0,cr0,cr1,cr8,0x58
800057e0:	fe 9c fc 9a 	brvs	80005114 <validate_sequences+0x1c>
800057e4:	fe 99 fc 98 	brgt	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.pulsewidth>=pulsewidth_min) && (currentsequence.CPMG.pulsewidth<=pulsewidth_max) &&
			(currentsequence.CPMG.dt>=dt_min) && (currentsequence.CPMG.dt<=dt_max) &&
800057e8:	fe fb 05 fc 	ld.w	r11,pc[1532]
800057ec:	77 8b       	ld.w	r11,r11[0x60]
800057ee:	50 7b       	stdsp	sp[0x1c],r11
800057f0:	16 9c       	mov	r12,r11
800057f2:	e0 a0 19 a1 	rcall	80008b34 <__avr32_f32_to_f64>
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
800057f6:	e0 68 99 9a 	mov	r8,39322
800057fa:	ea 18 99 99 	orh	r8,0x9999
			(currentsequence.CPMG.pulsewidth>=pulsewidth_min) && (currentsequence.CPMG.pulsewidth<=pulsewidth_max) &&
			(currentsequence.CPMG.dt>=dt_min) && (currentsequence.CPMG.dt<=dt_max) &&
800057fe:	14 90       	mov	r0,r10
80005800:	16 91       	mov	r1,r11
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
80005802:	e0 69 99 99 	mov	r9,39321
80005806:	ea 19 3f f9 	orh	r9,0x3ff9
8000580a:	e0 a0 16 4b 	rcall	800084a0 <__avr32_f64_cmp_ge>
8000580e:	fe 90 fc 83 	breq	80005114 <validate_sequences+0x1c>
80005812:	00 98       	mov	r8,r0
80005814:	02 99       	mov	r9,r1
80005816:	e0 6a 11 11 	mov	r10,4369
8000581a:	ea 1a 11 11 	orh	r10,0x1111
8000581e:	e0 6b 11 11 	mov	r11,4369
80005822:	ea 1b 40 c1 	orh	r11,0x40c1
80005826:	e0 a0 16 3d 	rcall	800084a0 <__avr32_f64_cmp_ge>
8000582a:	fe 90 fc 75 	breq	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.pulsewidth>=pulsewidth_min) && (currentsequence.CPMG.pulsewidth<=pulsewidth_max) &&
			(currentsequence.CPMG.dt>=dt_min) && (currentsequence.CPMG.dt<=dt_max) &&
			(currentsequence.CPMG.samp_offset>=samp_offset_min) && (currentsequence.CPMG.samp_offset<=samp_offset_max) &&
8000582e:	fe fa 05 b6 	ld.w	r10,pc[1462]
80005832:	75 9a       	ld.w	r10,r10[0x64]
80005834:	50 aa       	stdsp	sp[0x28],r10
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
80005836:	fc 18 c2 c8 	movh	r8,0xc2c8
8000583a:	e5 ac 00 a8 	cop	cp0,cr0,cr10,cr8,0x58
8000583e:	fe 9c fc 6b 	brvs	80005114 <validate_sequences+0x1c>
80005842:	fe 95 fc 69 	brlt	80005114 <validate_sequences+0x1c>
80005846:	fc 18 42 c8 	movh	r8,0x42c8
8000584a:	e5 ac 00 a8 	cop	cp0,cr0,cr10,cr8,0x58
8000584e:	fe 9c fc 63 	brvs	80005114 <validate_sequences+0x1c>
80005852:	fe 99 fc 61 	brgt	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.pulsewidth>=pulsewidth_min) && (currentsequence.CPMG.pulsewidth<=pulsewidth_max) &&
			(currentsequence.CPMG.dt>=dt_min) && (currentsequence.CPMG.dt<=dt_max) &&
			(currentsequence.CPMG.samp_offset>=samp_offset_min) && (currentsequence.CPMG.samp_offset<=samp_offset_max) &&
			(currentsequence.CPMG.Nsamp>=Nsamp_min) && (currentsequence.CPMG.Nsamp<=Nsamp_max) &&
80005856:	fe f8 05 8e 	ld.w	r8,pc[1422]
8000585a:	f1 04 00 5a 	ld.sh	r4,r8[90]
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
8000585e:	58 04       	cp.w	r4,0
80005860:	fe 90 fc 5a 	breq	80005114 <validate_sequences+0x1c>
80005864:	e0 68 00 80 	mov	r8,128
80005868:	08 91       	mov	r1,r4
8000586a:	f0 04 19 00 	cp.h	r4,r8
8000586e:	fe 9b fc 53 	brhi	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.pulsewidth>=pulsewidth_min) && (currentsequence.CPMG.pulsewidth<=pulsewidth_max) &&
			(currentsequence.CPMG.dt>=dt_min) && (currentsequence.CPMG.dt<=dt_max) &&
			(currentsequence.CPMG.samp_offset>=samp_offset_min) && (currentsequence.CPMG.samp_offset<=samp_offset_max) &&
			(currentsequence.CPMG.Nsamp>=Nsamp_min) && (currentsequence.CPMG.Nsamp<=Nsamp_max) &&
			(currentsequence.CPMG.Nechos>=Nechos_min) && (currentsequence.CPMG.Nechos<=Nechos_max) &&
80005872:	fe fe 05 72 	ld.w	lr,pc[1394]
80005876:	7d 70       	ld.w	r0,lr[0x5c]
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
80005878:	58 00       	cp.w	r0,0
8000587a:	fe 90 fc 4d 	breq	80005114 <validate_sequences+0x1c>
8000587e:	e0 40 61 a8 	cp.w	r0,25000
80005882:	fe 9b fc 49 	brhi	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.pulsewidth>=pulsewidth_min) && (currentsequence.CPMG.pulsewidth<=pulsewidth_max) &&
			(currentsequence.CPMG.dt>=dt_min) && (currentsequence.CPMG.dt<=dt_max) &&
			(currentsequence.CPMG.samp_offset>=samp_offset_min) && (currentsequence.CPMG.samp_offset<=samp_offset_max) &&
			(currentsequence.CPMG.Nsamp>=Nsamp_min) && (currentsequence.CPMG.Nsamp<=Nsamp_max) &&
			(currentsequence.CPMG.Nechos>=Nechos_min) && (currentsequence.CPMG.Nechos<=Nechos_max) &&
			(currentsequence.CPMG.RFphase>=0) && (currentsequence.CPMG.RFphase<360) &&
80005886:	7d 3b       	ld.w	r11,lr[0x4c]
80005888:	50 8b       	stdsp	sp[0x20],r11
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
8000588a:	30 0b       	mov	r11,0
8000588c:	40 8a       	lddsp	r10,sp[0x20]
8000588e:	e5 ac 00 ab 	cop	cp0,cr0,cr10,cr11,0x58
80005892:	fe 9c fc 41 	brvs	80005114 <validate_sequences+0x1c>
80005896:	fe 95 fc 3f 	brlt	80005114 <validate_sequences+0x1c>
8000589a:	fc 1c 43 b4 	movh	r12,0x43b4
8000589e:	e5 ac 00 ac 	cop	cp0,cr0,cr10,cr12,0x58
800058a2:	fe 9c fc 39 	brvs	80005114 <validate_sequences+0x1c>
800058a6:	fe 94 fc 37 	brge	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.dt>=dt_min) && (currentsequence.CPMG.dt<=dt_max) &&
			(currentsequence.CPMG.samp_offset>=samp_offset_min) && (currentsequence.CPMG.samp_offset<=samp_offset_max) &&
			(currentsequence.CPMG.Nsamp>=Nsamp_min) && (currentsequence.CPMG.Nsamp<=Nsamp_max) &&
			(currentsequence.CPMG.Nechos>=Nechos_min) && (currentsequence.CPMG.Nechos<=Nechos_max) &&
			(currentsequence.CPMG.RFphase>=0) && (currentsequence.CPMG.RFphase<360) &&
			(currentsequence.CPMG.RFamp>0) && (currentsequence.CPMG.RFamp<=1023) &&
800058aa:	fd 09 00 50 	ld.sh	r9,lr[80]
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
800058ae:	58 09       	cp.w	r9,0
800058b0:	fe 90 fc 32 	breq	80005114 <validate_sequences+0x1c>
800058b4:	e0 68 03 ff 	mov	r8,1023
800058b8:	f0 09 19 00 	cp.h	r9,r8
800058bc:	fe 9b fc 2c 	brhi	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.samp_offset>=samp_offset_min) && (currentsequence.CPMG.samp_offset<=samp_offset_max) &&
			(currentsequence.CPMG.Nsamp>=Nsamp_min) && (currentsequence.CPMG.Nsamp<=Nsamp_max) &&
			(currentsequence.CPMG.Nechos>=Nechos_min) && (currentsequence.CPMG.Nechos<=Nechos_max) &&
			(currentsequence.CPMG.RFphase>=0) && (currentsequence.CPMG.RFphase<360) &&
			(currentsequence.CPMG.RFamp>0) && (currentsequence.CPMG.RFamp<=1023) &&
			(currentsequence.CPMG.Vb>=Vb_min) && (currentsequence.CPMG.Vb<=Vb_max) &&
800058c0:	1c 91       	mov	r1,lr
800058c2:	fd 0a 00 52 	ld.sh	r10,lr[82]
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
800058c6:	58 0a       	cp.w	r10,0
800058c8:	fe 90 fc 26 	breq	80005114 <validate_sequences+0x1c>
800058cc:	e0 68 0f ff 	mov	r8,4095
800058d0:	f0 0a 19 00 	cp.h	r10,r8
800058d4:	fe 9b fc 20 	brhi	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.Nsamp>=Nsamp_min) && (currentsequence.CPMG.Nsamp<=Nsamp_max) &&
			(currentsequence.CPMG.Nechos>=Nechos_min) && (currentsequence.CPMG.Nechos<=Nechos_max) &&
			(currentsequence.CPMG.RFphase>=0) && (currentsequence.CPMG.RFphase<360) &&
			(currentsequence.CPMG.RFamp>0) && (currentsequence.CPMG.RFamp<=1023) &&
			(currentsequence.CPMG.Vb>=Vb_min) && (currentsequence.CPMG.Vb<=Vb_max) &&
			(currentsequence.CPMG.LOphase>=0) && (currentsequence.CPMG.LOphase<360) &&
800058d8:	7d 51       	ld.w	r1,lr[0x54]
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
800058da:	e5 ac 00 1b 	cop	cp0,cr0,cr1,cr11,0x58
800058de:	fe 9c fc 1b 	brvs	80005114 <validate_sequences+0x1c>
800058e2:	fe 95 fc 19 	brlt	80005114 <validate_sequences+0x1c>
800058e6:	e5 ac 00 1c 	cop	cp0,cr0,cr1,cr12,0x58
800058ea:	fe 9c fc 15 	brvs	80005114 <validate_sequences+0x1c>
800058ee:	fe 94 fc 13 	brge	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.Nechos>=Nechos_min) && (currentsequence.CPMG.Nechos<=Nechos_max) &&
			(currentsequence.CPMG.RFphase>=0) && (currentsequence.CPMG.RFphase<360) &&
			(currentsequence.CPMG.RFamp>0) && (currentsequence.CPMG.RFamp<=1023) &&
			(currentsequence.CPMG.Vb>=Vb_min) && (currentsequence.CPMG.Vb<=Vb_max) &&
			(currentsequence.CPMG.LOphase>=0) && (currentsequence.CPMG.LOphase<360) &&
			(currentsequence.CPMG.LOamp>0) && (currentsequence.CPMG.LOamp<=1023) )
800058f2:	fd 0c 00 58 	ld.sh	r12,lr[88]
				else
				{
					return false;
				}
		
		if( (currentsequence.CPMG.tau>=TE_min/2) && (currentsequence.CPMG.tau<=TE_max/2) &&								//check individual CPMG parameters
800058f6:	58 0c       	cp.w	r12,0
800058f8:	fe 90 fc 0e 	breq	80005114 <validate_sequences+0x1c>
800058fc:	e0 68 03 ff 	mov	r8,1023
80005900:	f0 0c 19 00 	cp.h	r12,r8
80005904:	fe 9b fc 08 	brhi	80005114 <validate_sequences+0x1c>
			(currentsequence.CPMG.LOphase>=0) && (currentsequence.CPMG.LOphase<360) &&
			(currentsequence.CPMG.LOamp>0) && (currentsequence.CPMG.LOamp<=1023) )
			{
				t_currentsequence.CPMG.Nsamp=currentsequence.CPMG.Nsamp;
				t_currentsequence.CPMG.Nechos=currentsequence.CPMG.Nechos;
				t_currentsequence.CPMG.RFamp=currentsequence.CPMG.RFamp;
80005908:	fe f8 04 e0 	ld.w	r8,pc[1248]
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
8000590c:	e0 6b 24 00 	mov	r11,9216
80005910:	ea 1b 4a f4 	orh	r11,0x4af4
			(currentsequence.CPMG.LOamp>0) && (currentsequence.CPMG.LOamp<=1023) )
			{
				t_currentsequence.CPMG.Nsamp=currentsequence.CPMG.Nsamp;
				t_currentsequence.CPMG.Nechos=currentsequence.CPMG.Nechos;
				t_currentsequence.CPMG.RFamp=currentsequence.CPMG.RFamp;
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
80005914:	f1 5a 00 44 	st.h	r8[68],r10
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
80005918:	e0 6a e1 c0 	mov	r10,57792
8000591c:	ea 1a 4c 64 	orh	r10,0x4c64
			(currentsequence.CPMG.LOphase>=0) && (currentsequence.CPMG.LOphase<360) &&
			(currentsequence.CPMG.LOamp>0) && (currentsequence.CPMG.LOamp<=1023) )
			{
				t_currentsequence.CPMG.Nsamp=currentsequence.CPMG.Nsamp;
				t_currentsequence.CPMG.Nechos=currentsequence.CPMG.Nechos;
				t_currentsequence.CPMG.RFamp=currentsequence.CPMG.RFamp;
80005920:	f1 59 00 42 	st.h	r8[66],r9
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
80005924:	f1 5c 00 4a 	st.h	r8[74],r12
			(currentsequence.CPMG.RFamp>0) && (currentsequence.CPMG.RFamp<=1023) &&
			(currentsequence.CPMG.Vb>=Vb_min) && (currentsequence.CPMG.Vb<=Vb_max) &&
			(currentsequence.CPMG.LOphase>=0) && (currentsequence.CPMG.LOphase<360) &&
			(currentsequence.CPMG.LOamp>0) && (currentsequence.CPMG.LOamp<=1023) )
			{
				t_currentsequence.CPMG.Nsamp=currentsequence.CPMG.Nsamp;
80005928:	f1 54 00 4e 	st.h	r8[78],r4
				t_currentsequence.CPMG.Nechos=currentsequence.CPMG.Nechos;
				t_currentsequence.CPMG.RFamp=currentsequence.CPMG.RFamp;
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
8000592c:	e5 a2 0c 6a 	cop	cp0,cr12,cr6,cr10,0x44
			(currentsequence.CPMG.Vb>=Vb_min) && (currentsequence.CPMG.Vb<=Vb_max) &&
			(currentsequence.CPMG.LOphase>=0) && (currentsequence.CPMG.LOphase<360) &&
			(currentsequence.CPMG.LOamp>0) && (currentsequence.CPMG.LOamp<=1023) )
			{
				t_currentsequence.CPMG.Nsamp=currentsequence.CPMG.Nsamp;
				t_currentsequence.CPMG.Nechos=currentsequence.CPMG.Nechos;
80005930:	f1 50 00 4c 	st.h	r8[76],r0
				t_currentsequence.CPMG.RFamp=currentsequence.CPMG.RFamp;
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
80005934:	e0 a0 17 90 	rcall	80008854 <__avr32_f32_div>
80005938:	e0 a0 13 48 	rcall	80007fc8 <roundf>
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
8000593c:	e0 6e e1 c0 	mov	lr,57792
80005940:	ea 1e 4c 64 	orh	lr,0x4c64
				t_currentsequence.CPMG.Nechos=currentsequence.CPMG.Nechos;
				t_currentsequence.CPMG.RFamp=currentsequence.CPMG.RFamp;
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
80005944:	fe f9 04 a4 	ld.w	r9,pc[1188]
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
80005948:	40 38       	lddsp	r8,sp[0xc]
8000594a:	e0 6b 24 00 	mov	r11,9216
8000594e:	ea 1b 4a f4 	orh	r11,0x4af4
				t_currentsequence.CPMG.Nechos=currentsequence.CPMG.Nechos;
				t_currentsequence.CPMG.RFamp=currentsequence.CPMG.RFamp;
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
80005952:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
80005956:	f3 5c 00 3c 	st.h	r9[60],r12
8000595a:	51 1c       	stdsp	sp[0x44],r12
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
8000595c:	e5 a2 0c 8e 	cop	cp0,cr12,cr8,cr14,0x44
80005960:	e0 a0 17 7a 	rcall	80008854 <__avr32_f32_div>
80005964:	e0 a0 13 32 	rcall	80007fc8 <roundf>
80005968:	fe fa 04 80 	ld.w	r10,pc[1152]
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
8000596c:	40 79       	lddsp	r9,sp[0x1c]
8000596e:	e0 68 e1 c0 	mov	r8,57792
80005972:	ea 18 4c 64 	orh	r8,0x4c64
80005976:	e0 6b 24 00 	mov	r11,9216
8000597a:	ea 1b 4a f4 	orh	r11,0x4af4
				t_currentsequence.CPMG.RFamp=currentsequence.CPMG.RFamp;
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
8000597e:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
80005982:	f5 5c 00 3e 	st.h	r10[62],r12
80005986:	51 0c       	stdsp	sp[0x40],r12
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
80005988:	e5 a2 0c 98 	cop	cp0,cr12,cr9,cr8,0x44
8000598c:	e0 a0 17 64 	rcall	80008854 <__avr32_f32_div>
80005990:	e0 a0 13 1c 	rcall	80007fc8 <roundf>
				t_currentsequence.CPMG.t_samp_offset=((int16_t)roundf((currentsequence.CPMG.samp_offset * PBA_SPEED/(TC_DIV*1000000))));
80005994:	e0 6a e1 c0 	mov	r10,57792
80005998:	ea 1a 4c 64 	orh	r10,0x4c64
8000599c:	40 ae       	lddsp	lr,sp[0x28]
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
8000599e:	fe f9 04 4a 	ld.w	r9,pc[1098]
				t_currentsequence.CPMG.t_samp_offset=((int16_t)roundf((currentsequence.CPMG.samp_offset * PBA_SPEED/(TC_DIV*1000000))));
800059a2:	e0 6b 24 00 	mov	r11,9216
800059a6:	ea 1b 4a f4 	orh	r11,0x4af4
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
800059aa:	e5 a9 08 0c 	cop	cp0,cr8,cr0,cr12,0x52
				t_currentsequence.CPMG.t_samp_offset=((int16_t)roundf((currentsequence.CPMG.samp_offset * PBA_SPEED/(TC_DIV*1000000))));
800059ae:	e5 a2 0c ea 	cop	cp0,cr12,cr14,cr10,0x44
				t_currentsequence.CPMG.Vb=currentsequence.CPMG.Vb;
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
800059b2:	f3 58 00 50 	st.h	r9[80],r8
800059b6:	50 f8       	stdsp	sp[0x3c],r8
				t_currentsequence.CPMG.t_samp_offset=((int16_t)roundf((currentsequence.CPMG.samp_offset * PBA_SPEED/(TC_DIV*1000000))));
800059b8:	e0 a0 17 4e 	rcall	80008854 <__avr32_f32_div>
800059bc:	e0 a0 13 06 	rcall	80007fc8 <roundf>
800059c0:	fe f8 04 28 	ld.w	r8,pc[1064]
				t_currentsequence.CPMG.RFphase_POW=(uint16_t)roundf(16384*(currentsequence.CPMG.RFphase)/360) & 0x3FFF;
800059c4:	fc 19 46 80 	movh	r9,0x4680
800059c8:	40 8e       	lddsp	lr,sp[0x20]
800059ca:	fc 1b 43 b4 	movh	r11,0x43b4
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_samp_offset=((int16_t)roundf((currentsequence.CPMG.samp_offset * PBA_SPEED/(TC_DIV*1000000))));
800059ce:	e5 ab 0c 0c 	cop	cp0,cr12,cr0,cr12,0x56
				t_currentsequence.CPMG.RFphase_POW=(uint16_t)roundf(16384*(currentsequence.CPMG.RFphase)/360) & 0x3FFF;
800059d2:	50 09       	stdsp	sp[0x0],r9
				t_currentsequence.CPMG.LOamp=currentsequence.CPMG.LOamp;
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_samp_offset=((int16_t)roundf((currentsequence.CPMG.samp_offset * PBA_SPEED/(TC_DIV*1000000))));
800059d4:	f1 5c 00 52 	st.h	r8[82],r12
800059d8:	50 ec       	stdsp	sp[0x38],r12
				t_currentsequence.CPMG.RFphase_POW=(uint16_t)roundf(16384*(currentsequence.CPMG.RFphase)/360) & 0x3FFF;
800059da:	e5 a2 0c e9 	cop	cp0,cr12,cr14,cr9,0x44
800059de:	e0 a0 17 3b 	rcall	80008854 <__avr32_f32_div>
800059e2:	e0 a0 12 f3 	rcall	80007fc8 <roundf>
				t_currentsequence.CPMG.LOphase_Q_POW=(uint16_t)roundf(16384*(currentsequence.CPMG.LOphase)/360) & 0x3FFF;	
800059e6:	40 09       	lddsp	r9,sp[0x0]
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_samp_offset=((int16_t)roundf((currentsequence.CPMG.samp_offset * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.RFphase_POW=(uint16_t)roundf(16384*(currentsequence.CPMG.RFphase)/360) & 0x3FFF;
800059e8:	fe fa 04 00 	ld.w	r10,pc[1024]
				t_currentsequence.CPMG.LOphase_Q_POW=(uint16_t)roundf(16384*(currentsequence.CPMG.LOphase)/360) & 0x3FFF;	
800059ec:	fc 1b 43 b4 	movh	r11,0x43b4
				
				t_currentsequence.CPMG.t_tau=((uint16_t)roundf((currentsequence.CPMG.tau * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_pulsewidth=((uint16_t)roundf((currentsequence.CPMG.pulsewidth * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_dt=((uint16_t)roundf((currentsequence.CPMG.dt * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.t_samp_offset=((int16_t)roundf((currentsequence.CPMG.samp_offset * PBA_SPEED/(TC_DIV*1000000))));
				t_currentsequence.CPMG.RFphase_POW=(uint16_t)roundf(16384*(currentsequence.CPMG.RFphase)/360) & 0x3FFF;
800059f0:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
800059f4:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800059f8:	f5 5c 00 40 	st.h	r10[64],r12
				t_currentsequence.CPMG.LOphase_Q_POW=(uint16_t)roundf(16384*(currentsequence.CPMG.LOphase)/360) & 0x3FFF;	
800059fc:	e5 a2 0c 19 	cop	cp0,cr12,cr1,cr9,0x44
80005a00:	e0 a0 17 2a 	rcall	80008854 <__avr32_f32_div>
80005a04:	e0 a0 12 e2 	rcall	80007fc8 <roundf>
80005a08:	fe f8 03 e0 	ld.w	r8,pc[992]
80005a0c:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
80005a10:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80005a14:	f1 5c 00 46 	st.h	r8[70],r12
				if ((currentsequence.CPMG.LOphase)<270)
80005a18:	40 09       	lddsp	r9,sp[0x0]
80005a1a:	fc 18 43 87 	movh	r8,0x4387
80005a1e:	e5 ac 00 18 	cop	cp0,cr0,cr1,cr8,0x58
80005a22:	e0 8c 01 6a 	brvs	80005cf6 <validate_sequences+0xbfe>
80005a26:	e0 84 01 68 	brge	80005cf6 <validate_sequences+0xbfe>
				{
					t_currentsequence.CPMG.LOphase_I_POW=((uint16_t)roundf(16384*((currentsequence.CPMG.LOphase)+90)/360)) & 0x3FFF;
80005a2a:	fc 1b 43 b4 	movh	r11,0x43b4
80005a2e:	fc 18 42 b4 	movh	r8,0x42b4
80005a32:	e5 a0 08 18 	cop	cp0,cr8,cr1,cr8,0x40
80005a36:	fe f1 03 b2 	ld.w	r1,pc[946]
80005a3a:	e5 a2 0c 89 	cop	cp0,cr12,cr8,cr9,0x44
80005a3e:	e0 a0 17 0b 	rcall	80008854 <__avr32_f32_div>
80005a42:	e0 a0 12 c3 	rcall	80007fc8 <roundf>
80005a46:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
80005a4a:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80005a4e:	e3 5c 00 48 	st.h	r1[72],r12
			else
			{
				return false;
			}
				
			temp_T=currentsequence.CPMG.tau-currentsequence.CPMG.pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset; //check value of T3
80005a52:	0c 9c       	mov	r12,r6
80005a54:	e0 a0 18 70 	rcall	80008b34 <__avr32_f32_to_f64>
80005a58:	5c 74       	castu.h	r4
80005a5a:	fa eb 00 20 	st.d	sp[32],r10
80005a5e:	e8 c1 00 01 	sub	r1,r4,1
80005a62:	40 7b       	lddsp	r11,sp[0x1c]
80005a64:	e5 a6 08 01 	cop	cp0,cr8,cr0,cr1,0x4c
80005a68:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005a6c:	40 3c       	lddsp	r12,sp[0xc]
80005a6e:	50 78       	stdsp	sp[0x1c],r8
80005a70:	e0 a0 18 62 	rcall	80008b34 <__avr32_f32_to_f64>
80005a74:	30 08       	mov	r8,0
80005a76:	fc 19 bf e0 	movh	r9,0xbfe0
80005a7a:	e0 a0 12 d5 	rcall	80008024 <__avr32_f64_mul>
80005a7e:	14 98       	mov	r8,r10
80005a80:	16 99       	mov	r9,r11
80005a82:	fa ea 00 20 	ld.d	r10,sp[32]
80005a86:	e0 a0 14 89 	rcall	80008398 <__avr32_f64_add>
80005a8a:	40 7c       	lddsp	r12,sp[0x1c]
80005a8c:	fa eb 00 30 	st.d	sp[48],r10
80005a90:	e0 a0 18 52 	rcall	80008b34 <__avr32_f32_to_f64>
80005a94:	30 08       	mov	r8,0
80005a96:	fc 19 bf e0 	movh	r9,0xbfe0
80005a9a:	e0 a0 12 c5 	rcall	80008024 <__avr32_f64_mul>
80005a9e:	14 98       	mov	r8,r10
80005aa0:	16 99       	mov	r9,r11
80005aa2:	fa ea 00 30 	ld.d	r10,sp[48]
80005aa6:	e0 a0 14 79 	rcall	80008398 <__avr32_f64_add>
80005aaa:	40 ac       	lddsp	r12,sp[0x28]
80005aac:	fa eb 00 30 	st.d	sp[48],r10
80005ab0:	e0 a0 18 42 	rcall	80008b34 <__avr32_f32_to_f64>
80005ab4:	14 98       	mov	r8,r10
80005ab6:	16 99       	mov	r9,r11
80005ab8:	fa ea 00 30 	ld.d	r10,sp[48]
80005abc:	e0 a0 14 6e 	rcall	80008398 <__avr32_f64_add>
80005ac0:	e0 a0 18 6a 	rcall	80008b94 <__avr32_f64_to_f32>
			if( (temp_T>=T3_min) && (temp_T<=T3_max))
80005ac4:	fc 18 41 78 	movh	r8,0x4178
80005ac8:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
80005acc:	e0 8c 01 7c 	brvs	80005dc4 <validate_sequences+0xccc>
80005ad0:	e0 85 01 7a 	brlt	80005dc4 <validate_sequences+0xccc>
80005ad4:	fc 1a 45 fa 	movh	r10,0x45fa
80005ad8:	e5 ac 00 ca 	cop	cp0,cr0,cr12,cr10,0x58
80005adc:	e0 8c 01 74 	brvs	80005dc4 <validate_sequences+0xccc>
80005ae0:	e0 89 01 72 	brgt	80005dc4 <validate_sequences+0xccc>
			{
				t_currentsequence.CPMG.t_T3=t_currentsequence.CPMG.t_tau-t_currentsequence.CPMG.t_pulsewidth/2-((t_currentsequence.CPMG.Nsamp-1)*t_currentsequence.CPMG.t_dt)/2+t_currentsequence.CPMG.t_samp_offset;
80005ae4:	41 18       	lddsp	r8,sp[0x44]
80005ae6:	41 0e       	lddsp	lr,sp[0x40]
80005ae8:	40 e9       	lddsp	r9,sp[0x38]
80005aea:	10 09       	add	r9,r8
80005aec:	f1 de c0 2f 	bfextu	r8,lr,0x1,0xf
80005af0:	10 19       	sub	r9,r8
80005af2:	40 f8       	lddsp	r8,sp[0x3c]
80005af4:	5c 78       	castu.h	r8
			{
				experiment_problem=T3_bad;
				return false;
			}
				
			temp_T=2*currentsequence.CPMG.tau-temp_T-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)-currentsequence.CPMG.pulsewidth-experiment.TPArise; //check value of T5
80005af6:	e5 a0 06 66 	cop	cp0,cr6,cr6,cr6,0x40
			}
				
			temp_T=currentsequence.CPMG.tau-currentsequence.CPMG.pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset; //check value of T3
			if( (temp_T>=T3_min) && (temp_T<=T3_max))
			{
				t_currentsequence.CPMG.t_T3=t_currentsequence.CPMG.t_tau-t_currentsequence.CPMG.t_pulsewidth/2-((t_currentsequence.CPMG.Nsamp-1)*t_currentsequence.CPMG.t_dt)/2+t_currentsequence.CPMG.t_samp_offset;
80005afa:	b1 31       	mul	r1,r8
80005afc:	fe fb 02 ec 	ld.w	r11,pc[748]
80005b00:	e2 08 16 1f 	lsr	r8,r1,0x1f
80005b04:	02 08       	add	r8,r1
80005b06:	a1 58       	asr	r8,0x1
80005b08:	5c 38       	neg	r8
80005b0a:	f2 08 00 08 	add	r8,r9,r8
			{
				experiment_problem=T3_bad;
				return false;
			}
				
			temp_T=2*currentsequence.CPMG.tau-temp_T-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)-currentsequence.CPMG.pulsewidth-experiment.TPArise; //check value of T5
80005b0e:	40 79       	lddsp	r9,sp[0x1c]
			}
				
			temp_T=currentsequence.CPMG.tau-currentsequence.CPMG.pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset; //check value of T3
			if( (temp_T>=T3_min) && (temp_T<=T3_max))
			{
				t_currentsequence.CPMG.t_T3=t_currentsequence.CPMG.t_tau-t_currentsequence.CPMG.t_pulsewidth/2-((t_currentsequence.CPMG.Nsamp-1)*t_currentsequence.CPMG.t_dt)/2+t_currentsequence.CPMG.t_samp_offset;
80005b10:	fd d8 b0 10 	bfexts	lr,r8,0x0,0x10
80005b14:	f7 5e 00 54 	st.h	r11[84],lr
			{
				experiment_problem=T3_bad;
				return false;
			}
				
			temp_T=2*currentsequence.CPMG.tau-temp_T-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)-currentsequence.CPMG.pulsewidth-experiment.TPArise; //check value of T5
80005b18:	e5 a1 0c 6c 	cop	cp0,cr12,cr6,cr12,0x42
80005b1c:	40 21       	lddsp	r1,sp[0x8]
80005b1e:	e5 a1 0c c9 	cop	cp0,cr12,cr12,cr9,0x42
80005b22:	40 36       	lddsp	r6,sp[0xc]
			if( (temp_T>=T5_min) && (temp_T<=T5_max))
80005b24:	fc 19 40 f0 	movh	r9,0x40f0
			{
				experiment_problem=T3_bad;
				return false;
			}
				
			temp_T=2*currentsequence.CPMG.tau-temp_T-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)-currentsequence.CPMG.pulsewidth-experiment.TPArise; //check value of T5
80005b28:	e5 a1 08 c6 	cop	cp0,cr8,cr12,cr6,0x42
80005b2c:	e5 a1 08 81 	cop	cp0,cr8,cr8,cr1,0x42
			if( (temp_T>=T5_min) && (temp_T<=T5_max))
80005b30:	e5 ac 00 89 	cop	cp0,cr0,cr8,cr9,0x58
80005b34:	e0 8c 01 43 	brvs	80005dba <validate_sequences+0xcc2>
80005b38:	e0 85 01 41 	brlt	80005dba <validate_sequences+0xcc2>
80005b3c:	e5 ac 00 8a 	cop	cp0,cr0,cr8,cr10,0x58
80005b40:	e0 8c 01 3d 	brvs	80005dba <validate_sequences+0xcc2>
80005b44:	e0 89 01 3b 	brgt	80005dba <validate_sequences+0xcc2>
			{
				t_currentsequence.CPMG.t_T5=2*t_currentsequence.CPMG.t_tau-t_currentsequence.CPMG.t_T3-((t_currentsequence.CPMG.Nsamp-1)*t_currentsequence.CPMG.t_dt)-t_currentsequence.CPMG.t_pulsewidth-t_experiment.t_TPArise;
80005b48:	fe f1 02 98 	ld.w	r1,pc[664]
80005b4c:	e3 0c 03 24 	ld.sh	r12,r1[804]
80005b50:	fe fb 02 98 	ld.w	r11,pc[664]
80005b54:	fe f1 02 94 	ld.w	r1,pc[660]
80005b58:	f7 0a 00 3c 	ld.sh	r10,r11[60]
80005b5c:	f4 06 15 01 	lsl	r6,r10,0x1
80005b60:	18 16       	sub	r6,r12
80005b62:	e3 0c 00 3e 	ld.sh	r12,r1[62]
80005b66:	18 16       	sub	r6,r12
80005b68:	e3 1c 00 4e 	ld.uh	r12,r1[78]
80005b6c:	f8 0c 11 01 	rsub	r12,r12,1
80005b70:	50 3c       	stdsp	sp[0xc],r12
80005b72:	e3 0c 00 50 	ld.sh	r12,r1[80]
80005b76:	40 31       	lddsp	r1,sp[0xc]
80005b78:	e2 0c 02 4c 	mul	r12,r1,r12
80005b7c:	ec 0c 00 0c 	add	r12,r6,r12
				experiment_problem=T5_bad;
				return false;
			}
				
				//compute data rate in MB/s
			float writerate=((float)currentsequence.CPMG.Nsamp)/(2.0*currentsequence.CPMG.tau)*4.0;
80005b80:	fa e8 00 20 	ld.d	r8,sp[32]
			}
				
			temp_T=2*currentsequence.CPMG.tau-temp_T-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)-currentsequence.CPMG.pulsewidth-experiment.TPArise; //check value of T5
			if( (temp_T>=T5_min) && (temp_T<=T5_max))
			{
				t_currentsequence.CPMG.t_T5=2*t_currentsequence.CPMG.t_tau-t_currentsequence.CPMG.t_T3-((t_currentsequence.CPMG.Nsamp-1)*t_currentsequence.CPMG.t_dt)-t_currentsequence.CPMG.t_pulsewidth-t_experiment.t_TPArise;
80005b84:	f8 0e 01 01 	sub	r1,r12,lr
				experiment_problem=T5_bad;
				return false;
			}
				
				//compute data rate in MB/s
			float writerate=((float)currentsequence.CPMG.Nsamp)/(2.0*currentsequence.CPMG.tau)*4.0;
80005b88:	10 9a       	mov	r10,r8
80005b8a:	12 9b       	mov	r11,r9
			}
				
			temp_T=2*currentsequence.CPMG.tau-temp_T-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)-currentsequence.CPMG.pulsewidth-experiment.TPArise; //check value of T5
			if( (temp_T>=T5_min) && (temp_T<=T5_max))
			{
				t_currentsequence.CPMG.t_T5=2*t_currentsequence.CPMG.t_tau-t_currentsequence.CPMG.t_T3-((t_currentsequence.CPMG.Nsamp-1)*t_currentsequence.CPMG.t_dt)-t_currentsequence.CPMG.t_pulsewidth-t_experiment.t_TPArise;
80005b8c:	fe f6 02 5c 	ld.w	r6,pc[604]
80005b90:	ed 51 00 56 	st.h	r6[86],r1
				experiment_problem=T5_bad;
				return false;
			}
				
				//compute data rate in MB/s
			float writerate=((float)currentsequence.CPMG.Nsamp)/(2.0*currentsequence.CPMG.tau)*4.0;
80005b94:	e0 a0 14 02 	rcall	80008398 <__avr32_f64_add>
			if(writerate>writerate_max)
80005b98:	e5 a4 0c 04 	cop	cp0,cr12,cr0,cr4,0x48
				experiment_problem=T5_bad;
				return false;
			}
				
				//compute data rate in MB/s
			float writerate=((float)currentsequence.CPMG.Nsamp)/(2.0*currentsequence.CPMG.tau)*4.0;
80005b9c:	fa eb 00 0c 	st.d	sp[12],r10
			if(writerate>writerate_max)
80005ba0:	e0 a0 17 ca 	rcall	80008b34 <__avr32_f32_to_f64>
80005ba4:	fa e8 00 0c 	ld.d	r8,sp[12]
80005ba8:	e0 a0 14 ca 	rcall	8000853c <__avr32_f64_div>
80005bac:	30 08       	mov	r8,0
80005bae:	fc 19 40 10 	movh	r9,0x4010
80005bb2:	e0 a0 12 39 	rcall	80008024 <__avr32_f64_mul>
80005bb6:	e0 a0 17 ef 	rcall	80008b94 <__avr32_f64_to_f32>
80005bba:	fc 18 3f 80 	movh	r8,0x3f80
80005bbe:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
80005bc2:	e0 8c 00 04 	brvs	80005bca <validate_sequences+0xad2>
80005bc6:	e0 89 00 f5 	brgt	80005db0 <validate_sequences+0xcb8>
			}
				
			//calculate time of full sequence
			//In host mode, this should also make sure there is enough time to communicate data to host in between sequences
			
			temp_T=currentsequence.CPMG.tau*2.0*((float)currentsequence.CPMG.Nechos);				
80005bca:	e5 a4 0c 00 	cop	cp0,cr12,cr0,cr0,0x48
80005bce:	e0 a0 17 b3 	rcall	80008b34 <__avr32_f32_to_f64>
80005bd2:	14 98       	mov	r8,r10
80005bd4:	16 99       	mov	r9,r11
80005bd6:	fa ea 00 0c 	ld.d	r10,sp[12]
80005bda:	e0 a0 12 25 	rcall	80008024 <__avr32_f64_mul>
80005bde:	e0 a0 17 db 	rcall	80008b94 <__avr32_f64_to_f32>
80005be2:	30 08       	mov	r8,0
80005be4:	40 6b       	lddsp	r11,sp[0x18]
			for(j=0;j<currentsequence.N_preppulses;j++)
			{
				temp_T+=currentsequence.preppulse[j].tau;
80005be6:	f0 09 15 02 	lsl	r9,r8,0x2
80005bea:	fe fe 01 fa 	ld.w	lr,pc[506]
				
			//calculate time of full sequence
			//In host mode, this should also make sure there is enough time to communicate data to host in between sequences
			
			temp_T=currentsequence.CPMG.tau*2.0*((float)currentsequence.CPMG.Nechos);				
			for(j=0;j<currentsequence.N_preppulses;j++)
80005bee:	f0 ca ff ff 	sub	r10,r8,-1
			{
				temp_T+=currentsequence.preppulse[j].tau;
80005bf2:	2f f9       	sub	r9,-1
				
			//calculate time of full sequence
			//In host mode, this should also make sure there is enough time to communicate data to host in between sequences
			
			temp_T=currentsequence.CPMG.tau*2.0*((float)currentsequence.CPMG.Nechos);				
			for(j=0;j<currentsequence.N_preppulses;j++)
80005bf4:	f1 da c0 08 	bfextu	r8,r10,0x0,0x8
			{
				temp_T+=currentsequence.preppulse[j].tau;
80005bf8:	fc 09 03 29 	ld.w	r9,lr[r9<<0x2]
80005bfc:	1c 96       	mov	r6,lr
80005bfe:	e5 a0 0c c9 	cop	cp0,cr12,cr12,cr9,0x40
				
			//calculate time of full sequence
			//In host mode, this should also make sure there is enough time to communicate data to host in between sequences
			
			temp_T=currentsequence.CPMG.tau*2.0*((float)currentsequence.CPMG.Nechos);				
			for(j=0;j<currentsequence.N_preppulses;j++)
80005c02:	f0 0b 19 00 	cp.h	r11,r8
80005c06:	fe 9b ff f0 	brhi	80005be6 <validate_sequences+0xaee>
			{
				temp_T+=currentsequence.preppulse[j].tau;
			}
		
			if(temp_T+100000.0>=currentsequence.TR*1000000.0)		//check that TR is tenth of a second shorter than TR
80005c0a:	e0 a0 17 95 	rcall	80008b34 <__avr32_f32_to_f64>
80005c0e:	30 08       	mov	r8,0
80005c10:	e0 69 6a 00 	mov	r9,27136
80005c14:	ea 19 40 f8 	orh	r9,0x40f8
80005c18:	e0 a0 13 c0 	rcall	80008398 <__avr32_f64_add>
80005c1c:	6d bc       	ld.w	r12,r6[0x6c]
80005c1e:	fa eb 00 0c 	st.d	sp[12],r10
80005c22:	e0 a0 17 89 	rcall	80008b34 <__avr32_f32_to_f64>
80005c26:	30 08       	mov	r8,0
80005c28:	e0 69 84 80 	mov	r9,33920
80005c2c:	ea 19 41 2e 	orh	r9,0x412e
80005c30:	e0 a0 11 fa 	rcall	80008024 <__avr32_f64_mul>
80005c34:	14 98       	mov	r8,r10
80005c36:	16 99       	mov	r9,r11
80005c38:	fa ea 00 0c 	ld.d	r10,sp[12]
80005c3c:	e0 a0 14 32 	rcall	800084a0 <__avr32_f64_cmp_ge>
80005c40:	e0 81 00 c7 	brne	80005dce <validate_sequences+0xcd6>
				return false;
			}
			
			
			
			if( (currentsequence.f0>=f0_min) && (currentsequence.f0<=f0_max) )
80005c44:	6c 0c       	ld.w	r12,r6[0x0]
80005c46:	e0 68 24 00 	mov	r8,9216
80005c4a:	ea 18 49 74 	orh	r8,0x4974
80005c4e:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
80005c52:	fe 9c fa 61 	brvs	80005114 <validate_sequences+0x1c>
80005c56:	fe 95 fa 5f 	brlt	80005114 <validate_sequences+0x1c>
80005c5a:	e0 68 96 80 	mov	r8,38528
80005c5e:	ea 18 4c 98 	orh	r8,0x4c98
80005c62:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
80005c66:	fe 9c fa 57 	brvs	80005114 <validate_sequences+0x1c>
80005c6a:	fe 99 fa 55 	brgt	80005114 <validate_sequences+0x1c>
			{
				t_currentsequence.f0_FTW=(uint32_t)roundf(4294967296.0*currentsequence.f0/DDS_Fs);
80005c6e:	e0 a0 17 63 	rcall	80008b34 <__avr32_f32_to_f64>
80005c72:	30 08       	mov	r8,0
80005c74:	fc 19 41 f0 	movh	r9,0x41f0
80005c78:	e0 a0 11 d6 	rcall	80008024 <__avr32_f64_mul>
80005c7c:	30 08       	mov	r8,0
80005c7e:	e0 69 e1 a3 	mov	r9,57763
80005c82:	ea 19 41 b1 	orh	r9,0x41b1
80005c86:	e0 a0 14 5b 	rcall	8000853c <__avr32_f64_div>
80005c8a:	e0 a0 17 85 	rcall	80008b94 <__avr32_f64_to_f32>
80005c8e:	e0 a0 11 9d 	rcall	80007fc8 <roundf>
80005c92:	4d 6a       	lddpc	r10,80005de8 <validate_sequences+0xcf0>
			else
			{
				return false;
			}			
				//calculate number of block clusters per sequence
			t_currentsequence.clusters_per_sequence=ceilf((currentsequence.CPMG.Nsamp*currentsequence.CPMG.Nechos+t_experiment.Noffsetsamples+1)*4/((float)samplebuffer_size));
80005c94:	4d 39       	lddpc	r9,80005de0 <validate_sequences+0xce8>
80005c96:	fc 18 38 80 	movh	r8,0x3880
			
			
			
			if( (currentsequence.f0>=f0_min) && (currentsequence.f0<=f0_max) )
			{
				t_currentsequence.f0_FTW=(uint32_t)roundf(4294967296.0*currentsequence.f0/DDS_Fs);
80005c9a:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
			else
			{
				return false;
			}			
				//calculate number of block clusters per sequence
			t_currentsequence.clusters_per_sequence=ceilf((currentsequence.CPMG.Nsamp*currentsequence.CPMG.Nechos+t_experiment.Noffsetsamples+1)*4/((float)samplebuffer_size));
80005c9e:	a1 34       	mul	r4,r0
			
			
			
			if( (currentsequence.f0>=f0_min) && (currentsequence.f0<=f0_max) )
			{
				t_currentsequence.f0_FTW=(uint32_t)roundf(4294967296.0*currentsequence.f0/DDS_Fs);
80005ca0:	95 0c       	st.w	r10[0x0],r12
			else
			{
				return false;
			}			
				//calculate number of block clusters per sequence
			t_currentsequence.clusters_per_sequence=ceilf((currentsequence.CPMG.Nsamp*currentsequence.CPMG.Nechos+t_experiment.Noffsetsamples+1)*4/((float)samplebuffer_size));
80005ca2:	f2 fc 03 28 	ld.w	r12,r9[808]
80005ca6:	2f fc       	sub	r12,-1
80005ca8:	08 0c       	add	r12,r4
80005caa:	a3 6c       	lsl	r12,0x2
80005cac:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
80005cb0:	e5 a2 0c c8 	cop	cp0,cr12,cr12,cr8,0x44
80005cb4:	e0 a0 11 3a 	rcall	80007f28 <ceilf>
80005cb8:	4c c8       	lddpc	r8,80005de8 <validate_sequences+0xcf0>
			
		t_experiment.t_sequence[i]=t_currentsequence; //save sequence parameters
80005cba:	40 56       	lddsp	r6,sp[0x14]
			else
			{
				return false;
			}			
				//calculate number of block clusters per sequence
			t_currentsequence.clusters_per_sequence=ceilf((currentsequence.CPMG.Nsamp*currentsequence.CPMG.Nechos+t_experiment.Noffsetsamples+1)*4/((float)samplebuffer_size));
80005cbc:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
80005cc0:	f1 5c 00 5c 	st.h	r8[92],r12
			
		t_experiment.t_sequence[i]=t_currentsequence; //save sequence parameters
80005cc4:	ec 06 00 28 	add	r8,r6,r6<<0x2
80005cc8:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005ccc:	4c 51       	lddpc	r1,80005de0 <validate_sequences+0xce8>
80005cce:	f0 cc ff ff 	sub	r12,r8,-1
80005cd2:	36 4a       	mov	r10,100
80005cd4:	e2 0c 00 2c 	add	r12,r1,r12<<0x2
80005cd8:	4c 4b       	lddpc	r11,80005de8 <validate_sequences+0xcf0>
80005cda:	e0 a0 18 eb 	rcall	80008eb0 <memcpy>
		return false;
	}
	
	
	float temp_T;
	for(uint8_t i=0;i<experiment.N_sequences;i++)
80005cde:	0c 98       	mov	r8,r6
80005ce0:	2f f8       	sub	r8,-1
80005ce2:	5c 58       	castu.b	r8
80005ce4:	50 58       	stdsp	sp[0x14],r8
80005ce6:	41 2e       	lddsp	lr,sp[0x48]
80005ce8:	f0 0e 19 00 	cp.h	lr,r8
80005cec:	fe 9b fa c9 	brhi	8000527e <validate_sequences+0x186>
80005cf0:	30 1c       	mov	r12,1
80005cf2:	fe 9f fa 12 	bral	80005116 <validate_sequences+0x1e>
				{
					t_currentsequence.CPMG.LOphase_I_POW=((uint16_t)roundf(16384*((currentsequence.CPMG.LOphase)+90)/360)) & 0x3FFF;
				}
				else
				{
					t_currentsequence.CPMG.LOphase_I_POW=(uint16_t)roundf(16384*((currentsequence.CPMG.LOphase)-270)/360) & 0x3FFF;
80005cf6:	e5 a1 08 18 	cop	cp0,cr8,cr1,cr8,0x42
80005cfa:	fc 1b 43 b4 	movh	r11,0x43b4
80005cfe:	e5 a2 0c 89 	cop	cp0,cr12,cr8,cr9,0x44
80005d02:	e0 a0 15 a9 	rcall	80008854 <__avr32_f32_div>
80005d06:	e0 a0 11 61 	rcall	80007fc8 <roundf>
80005d0a:	4b 8e       	lddpc	lr,80005de8 <validate_sequences+0xcf0>
80005d0c:	e5 a9 0c 0c 	cop	cp0,cr12,cr0,cr12,0x52
80005d10:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80005d14:	fd 5c 00 48 	st.h	lr[72],r12
80005d18:	fe 9f fe 9d 	bral	80005a52 <validate_sequences+0x95a>
		{	//this is correct T0 when pulse is first
			temp_T=currentsequence.preppulse[j].tau-(currentsequence.preppulse[j].pulsewidth/2)-(currentsequence.CPMG.pulsewidth/2)-experiment.TPArise;	//check final prep pulse
		}
		else
		{	//this is correct T0 when echo is first
			temp_T=currentsequence.preppulse[j].tau-currentsequence.preppulse[j].pulsewidth/2.0-((float)(currentsequence.CPMG.Nsamp-1)*currentsequence.CPMG.dt)/2.0+currentsequence.CPMG.samp_offset;
80005d1c:	ec 08 15 02 	lsl	r8,r6,0x2
80005d20:	2f f8       	sub	r8,-1
80005d22:	4b 1a       	lddpc	r10,80005de4 <validate_sequences+0xcec>
80005d24:	ec 00 15 01 	lsl	r0,r6,0x1
80005d28:	f4 08 03 21 	ld.w	r1,r10[r8<<0x2]
80005d2c:	e0 c8 ff ff 	sub	r8,r0,-1
80005d30:	02 9c       	mov	r12,r1
80005d32:	f4 08 03 34 	ld.w	r4,r10[r8<<0x3]
80005d36:	e0 a0 16 ff 	rcall	80008b34 <__avr32_f32_to_f64>
80005d3a:	08 9c       	mov	r12,r4
80005d3c:	fa eb 00 0c 	st.d	sp[12],r10
80005d40:	e0 a0 16 fa 	rcall	80008b34 <__avr32_f32_to_f64>
80005d44:	30 08       	mov	r8,0
80005d46:	fc 19 bf e0 	movh	r9,0xbfe0
80005d4a:	e0 a0 11 6d 	rcall	80008024 <__avr32_f64_mul>
80005d4e:	14 98       	mov	r8,r10
80005d50:	16 99       	mov	r9,r11
80005d52:	fa ea 00 0c 	ld.d	r10,sp[12]
80005d56:	e0 a0 13 21 	rcall	80008398 <__avr32_f64_add>
80005d5a:	4a 39       	lddpc	r9,80005de4 <validate_sequences+0xcec>
80005d5c:	f3 18 00 5a 	ld.uh	r8,r9[90]
80005d60:	20 18       	sub	r8,1
80005d62:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80005d66:	73 8c       	ld.w	r12,r9[0x60]
80005d68:	fa eb 00 0c 	st.d	sp[12],r10
80005d6c:	e5 a2 0c 8c 	cop	cp0,cr12,cr8,cr12,0x44
80005d70:	e0 a0 16 e2 	rcall	80008b34 <__avr32_f32_to_f64>
80005d74:	30 08       	mov	r8,0
80005d76:	fc 19 bf e0 	movh	r9,0xbfe0
80005d7a:	e0 a0 11 55 	rcall	80008024 <__avr32_f64_mul>
80005d7e:	16 99       	mov	r9,r11
80005d80:	14 98       	mov	r8,r10
80005d82:	fa ea 00 0c 	ld.d	r10,sp[12]
80005d86:	e0 a0 13 09 	rcall	80008398 <__avr32_f64_add>
80005d8a:	49 78       	lddpc	r8,80005de4 <validate_sequences+0xcec>
80005d8c:	fa eb 00 0c 	st.d	sp[12],r10
80005d90:	71 9c       	ld.w	r12,r8[0x64]
80005d92:	e0 a0 16 d1 	rcall	80008b34 <__avr32_f32_to_f64>
80005d96:	14 98       	mov	r8,r10
80005d98:	16 99       	mov	r9,r11
80005d9a:	fa ea 00 0c 	ld.d	r10,sp[12]
80005d9e:	e0 a0 12 fd 	rcall	80008398 <__avr32_f64_add>
80005da2:	e0 a0 16 f9 	rcall	80008b94 <__avr32_f64_to_f32>
80005da6:	fe 9f fc 10 	bral	800055c6 <validate_sequences+0x4ce>
			return false;
		}
		t_currentsequence.N_preppulses=currentsequence.N_preppulses;
		
		uint8_t j=0;
		while(j<(currentsequence.N_preppulses-1))	//check each prep pulse (except for last prep pulse before start of CPMG)
80005daa:	12 96       	mov	r6,r9
80005dac:	fe 9f fb f3 	bral	80005592 <validate_sequences+0x49a>
				
				//compute data rate in MB/s
			float writerate=((float)currentsequence.CPMG.Nsamp)/(2.0*currentsequence.CPMG.tau)*4.0;
			if(writerate>writerate_max)
			{
				experiment_problem=writerate_high;;
80005db0:	30 38       	mov	r8,3
80005db2:	30 0c       	mov	r12,0
80005db4:	aa 88       	st.b	r5[0x0],r8
				return false;
80005db6:	fe 9f f9 b0 	bral	80005116 <validate_sequences+0x1e>
			{
				t_currentsequence.CPMG.t_T5=2*t_currentsequence.CPMG.t_tau-t_currentsequence.CPMG.t_T3-((t_currentsequence.CPMG.Nsamp-1)*t_currentsequence.CPMG.t_dt)-t_currentsequence.CPMG.t_pulsewidth-t_experiment.t_TPArise;
			}
			else
			{
				experiment_problem=T5_bad;
80005dba:	30 28       	mov	r8,2
80005dbc:	30 0c       	mov	r12,0
80005dbe:	aa 88       	st.b	r5[0x0],r8
				return false;
80005dc0:	fe 9f f9 ab 	bral	80005116 <validate_sequences+0x1e>
			{
				t_currentsequence.CPMG.t_T3=t_currentsequence.CPMG.t_tau-t_currentsequence.CPMG.t_pulsewidth/2-((t_currentsequence.CPMG.Nsamp-1)*t_currentsequence.CPMG.t_dt)/2+t_currentsequence.CPMG.t_samp_offset;
			}
			else
			{
				experiment_problem=T3_bad;
80005dc4:	30 18       	mov	r8,1
80005dc6:	30 0c       	mov	r12,0
80005dc8:	aa 88       	st.b	r5[0x0],r8
				return false;
80005dca:	fe 9f f9 a6 	bral	80005116 <validate_sequences+0x1e>
				temp_T+=currentsequence.preppulse[j].tau;
			}
		
			if(temp_T+100000.0>=currentsequence.TR*1000000.0)		//check that TR is tenth of a second shorter than TR
			{
				experiment_problem=TR_Tcpmg_short;
80005dce:	30 48       	mov	r8,4
80005dd0:	30 0c       	mov	r12,0
80005dd2:	aa 88       	st.b	r5[0x0],r8
				return false;
80005dd4:	fe 9f f9 a1 	bral	80005116 <validate_sequences+0x1e>
80005dd8:	00 00       	add	r0,r0
80005dda:	08 fc       	st.b	--r4,r12
80005ddc:	00 00       	add	r0,r0
80005dde:	0b e8       	ld.ub	r8,r5[0x6]
80005de0:	00 00       	add	r0,r0
80005de2:	0f e4       	ld.ub	r4,r7[0x6]
80005de4:	00 00       	add	r0,r0
80005de6:	0b 74       	ld.ub	r4,--r5
80005de8:	00 00       	add	r0,r0
80005dea:	0f 80       	ld.ub	r0,r7[0x0]

80005dec <initializeDDS>:
80005dec:	eb cd 40 f8 	pushm	r3-r7,lr
80005df0:	e0 69 08 00 	mov	r9,2048
80005df4:	fc 18 40 00 	movh	r8,0x4000
80005df8:	f1 49 00 58 	st.w	r8[88],r9
80005dfc:	e9 b0 00 00 	sleep	0x0
80005e00:	fe b0 e8 0a 	rcall	80002e14 <reset_DDS_local>
80005e04:	30 18       	mov	r8,1
80005e06:	4c 85       	lddpc	r5,80005f24 <initializeDDS+0x138>
80005e08:	aa 98       	st.b	r5[0x1],r8
80005e0a:	0a 9c       	mov	r12,r5
80005e0c:	fe b0 e9 72 	rcall	800030f0 <write_CSR>
80005e10:	fe 79 34 00 	mov	r9,-52224
	
	reset_DDS_local();
	
	DDS_options.channels=CH_EN_0;
	write_CSR(&DDS_options);
	while (!(DDS_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80005e14:	72 48       	ld.w	r8,r9[0x10]
80005e16:	ed b8 00 09 	bld	r8,0x9
80005e1a:	cf d1       	brne	80005e14 <initializeDDS+0x28>
	
	SLEEP(AVR32_PM_SMODE_IDLE);
80005e1c:	e9 b0 00 00 	sleep	0x0
	IO_UPDATE_local_long();
80005e20:	fe b0 e8 28 	rcall	80002e70 <IO_UPDATE_local_long>
	//write common registers
	write_FR1(&DDS_options);
80005e24:	4c 0c       	lddpc	r12,80005f24 <initializeDDS+0x138>
80005e26:	fe b0 e9 37 	rcall	80003094 <write_FR1>
	while (!(DDS_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80005e2a:	fe 79 34 00 	mov	r9,-52224
80005e2e:	72 48       	ld.w	r8,r9[0x10]
80005e30:	ed b8 00 09 	bld	r8,0x9
80005e34:	cf d1       	brne	80005e2e <initializeDDS+0x42>
	write_FR2(&DDS_options);
80005e36:	4b cc       	lddpc	r12,80005f24 <initializeDDS+0x138>
80005e38:	fe b0 e9 14 	rcall	80003060 <write_FR2>
	while (!(DDS_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80005e3c:	fe 79 34 00 	mov	r9,-52224
80005e40:	72 48       	ld.w	r8,r9[0x10]
80005e42:	ed b8 00 09 	bld	r8,0x9
80005e46:	cf d1       	brne	80005e40 <initializeDDS+0x54>
	
	SLEEP(AVR32_PM_SMODE_IDLE);
80005e48:	e9 b0 00 00 	sleep	0x0
	IO_UPDATE_local_long();
80005e4c:	fe b0 e8 12 	rcall	80002e70 <IO_UPDATE_local_long>
	
	//configure DDS channels
	DDS_options.channels=CH_EN_0;
	DDS_options_CH0.POW=t_currentsequence.preppulse[0].RFphase_POW;
80005e50:	4b 66       	lddpc	r6,80005f28 <initializeDDS+0x13c>
80005e52:	4b 77       	lddpc	r7,80005f2c <initializeDDS+0x140>
	DDS_options_CH0.ASF=0;
80005e54:	30 03       	mov	r3,0
80005e56:	ac 53       	st.h	r6[0xa],r3
	SLEEP(AVR32_PM_SMODE_IDLE);
	IO_UPDATE_local_long();
	
	//configure DDS channels
	DDS_options.channels=CH_EN_0;
	DDS_options_CH0.POW=t_currentsequence.preppulse[0].RFphase_POW;
80005e58:	8e 68       	ld.sh	r8,r7[0xc]
80005e5a:	ed 58 00 10 	st.h	r6[16],r8
	DDS_options_CH0.ASF=0;
	DDS_options_CH0.FTW=t_currentsequence.f0_FTW;
80005e5e:	6e 08       	ld.w	r8,r7[0x0]
	
	//write_CSR(&DDS_options);
	write_CFR(&DDS_options_CH0);
80005e60:	0c 9c       	mov	r12,r6
	
	//configure DDS channels
	DDS_options.channels=CH_EN_0;
	DDS_options_CH0.POW=t_currentsequence.preppulse[0].RFphase_POW;
	DDS_options_CH0.ASF=0;
	DDS_options_CH0.FTW=t_currentsequence.f0_FTW;
80005e62:	8d 38       	st.w	r6[0xc],r8
	
	SLEEP(AVR32_PM_SMODE_IDLE);
	IO_UPDATE_local_long();
	
	//configure DDS channels
	DDS_options.channels=CH_EN_0;
80005e64:	30 14       	mov	r4,1
80005e66:	aa 94       	st.b	r5[0x1],r4
	DDS_options_CH0.POW=t_currentsequence.preppulse[0].RFphase_POW;
	DDS_options_CH0.ASF=0;
	DDS_options_CH0.FTW=t_currentsequence.f0_FTW;
	
	//write_CSR(&DDS_options);
	write_CFR(&DDS_options_CH0);
80005e68:	fe b0 e8 d0 	rcall	80003008 <write_CFR>
	write_POW0(&DDS_options_CH0);
80005e6c:	0c 9c       	mov	r12,r6
80005e6e:	fe b0 e8 53 	rcall	80002f14 <write_POW0>
	write_ACR(&DDS_options_CH0);
80005e72:	0c 9c       	mov	r12,r6
80005e74:	fe b0 e8 9e 	rcall	80002fb0 <write_ACR>
	write_FTW0(&DDS_options_CH0);
80005e78:	0c 9c       	mov	r12,r6
80005e7a:	fe b0 e8 6d 	rcall	80002f54 <write_FTW0>
	//write profile registers 1, 2, and 3 with amplitudes
	//P0 is zero amplitude
	//P1 is RFamp of prep pulse
	//P2 is LO amp
	//P3 is RF amp of CPMG pulse
	write_profile_word_asf(t_currentsequence.preppulse[0].RFamp,2,&DDS_options_CH0);  //There is something up with the AD9958...
80005e7e:	0c 9a       	mov	r10,r6
80005e80:	8e fc       	ld.uh	r12,r7[0xe]
80005e82:	30 2b       	mov	r11,2
80005e84:	fe b0 e8 1a 	rcall	80002eb8 <write_profile_word_asf>
	write_profile_word_asf(t_currentsequence.CPMG.RFamp,3,&DDS_options_CH0);//it always mixes up profile 1 and profile 2...
80005e88:	0c 9a       	mov	r10,r6
80005e8a:	ef 1c 00 42 	ld.uh	r12,r7[66]
80005e8e:	30 3b       	mov	r11,3
80005e90:	fe b0 e8 14 	rcall	80002eb8 <write_profile_word_asf>
	write_profile_word_asf(t_currentsequence.CPMG.LOamp,1,&DDS_options_CH0);//so switch them for now...
80005e94:	0c 9a       	mov	r10,r6
80005e96:	30 1b       	mov	r11,1
80005e98:	ef 1c 00 4a 	ld.uh	r12,r7[74]
80005e9c:	fe b0 e8 0e 	rcall	80002eb8 <write_profile_word_asf>
	
	//write default tuning words for CH1
	//CH1 is by default used for the quadrature LO
	//so initialize its phase as LOph_Q_pow, and its amplitude as LOamp
	DDS_options.channels=CH_EN_1;
	DDS_options_CH1.POW=t_currentsequence.CPMG.LOphase_Q_POW;
80005ea0:	ef 08 00 46 	ld.sh	r8,r7[70]
80005ea4:	4a 36       	lddpc	r6,80005f30 <initializeDDS+0x144>
80005ea6:	ed 58 00 10 	st.h	r6[16],r8
	DDS_options_CH1.ASF=0;
	DDS_options_CH1.FTW=t_currentsequence.f0_FTW;
80005eaa:	6e 08       	ld.w	r8,r7[0x0]
80005eac:	8d 38       	st.w	r6[0xc],r8
	write_profile_word_asf(t_currentsequence.CPMG.LOamp,1,&DDS_options_CH0);//so switch them for now...
	
	//write default tuning words for CH1
	//CH1 is by default used for the quadrature LO
	//so initialize its phase as LOph_Q_pow, and its amplitude as LOamp
	DDS_options.channels=CH_EN_1;
80005eae:	30 28       	mov	r8,2
	DDS_options_CH1.POW=t_currentsequence.CPMG.LOphase_Q_POW;
	DDS_options_CH1.ASF=0;
80005eb0:	ac 53       	st.h	r6[0xa],r3
	write_profile_word_asf(t_currentsequence.CPMG.LOamp,1,&DDS_options_CH0);//so switch them for now...
	
	//write default tuning words for CH1
	//CH1 is by default used for the quadrature LO
	//so initialize its phase as LOph_Q_pow, and its amplitude as LOamp
	DDS_options.channels=CH_EN_1;
80005eb2:	aa 98       	st.b	r5[0x1],r8
	DDS_options_CH1.POW=t_currentsequence.CPMG.LOphase_Q_POW;
	DDS_options_CH1.ASF=0;
	DDS_options_CH1.FTW=t_currentsequence.f0_FTW;
	write_CSR(&DDS_options);
80005eb4:	49 cc       	lddpc	r12,80005f24 <initializeDDS+0x138>
80005eb6:	fe b0 e9 1d 	rcall	800030f0 <write_CSR>
	
	write_CFR(&DDS_options_CH1);
80005eba:	0c 9c       	mov	r12,r6
80005ebc:	fe b0 e8 a6 	rcall	80003008 <write_CFR>
	write_POW0(&DDS_options_CH1);
80005ec0:	0c 9c       	mov	r12,r6
80005ec2:	fe b0 e8 29 	rcall	80002f14 <write_POW0>
	write_ACR(&DDS_options_CH1);
80005ec6:	0c 9c       	mov	r12,r6
80005ec8:	fe b0 e8 74 	rcall	80002fb0 <write_ACR>
	write_FTW0(&DDS_options_CH1);
80005ecc:	0c 9c       	mov	r12,r6
80005ece:	fe b0 e8 43 	rcall	80002f54 <write_FTW0>
	//write profile registers 1, 2, and 3 with amplitudes
	//P0 is zero amplitude
	//P1 is RFamp of prep pulse
	//P2 is LO amp
	//P3 is RF amp of CPMG pulse
	write_profile_word_asf(t_currentsequence.preppulse[0].RFamp,2,&DDS_options_CH1);  //There is something up with the AD9958...
80005ed2:	0c 9a       	mov	r10,r6
80005ed4:	8e fc       	ld.uh	r12,r7[0xe]
80005ed6:	30 2b       	mov	r11,2
80005ed8:	fe b0 e7 f0 	rcall	80002eb8 <write_profile_word_asf>
	write_profile_word_asf(t_currentsequence.CPMG.RFamp,3,&DDS_options_CH1);//it always mixes up profile 1 and profile 2...
80005edc:	0c 9a       	mov	r10,r6
80005ede:	ef 1c 00 42 	ld.uh	r12,r7[66]
80005ee2:	30 3b       	mov	r11,3
80005ee4:	fe b0 e7 ea 	rcall	80002eb8 <write_profile_word_asf>
	write_profile_word_asf(t_currentsequence.CPMG.LOamp,1,&DDS_options_CH1);//so switch them for now...
80005ee8:	0c 9a       	mov	r10,r6
80005eea:	ef 1c 00 4a 	ld.uh	r12,r7[74]
80005eee:	30 1b       	mov	r11,1
80005ef0:	fe b0 e7 e4 	rcall	80002eb8 <write_profile_word_asf>
	
	SLEEP(AVR32_PM_SMODE_IDLE);
80005ef4:	e9 b0 00 00 	sleep	0x0
	IO_UPDATE_local();
80005ef8:	fe b0 e7 ab 	rcall	80002e4e <IO_UPDATE_local>
	
	DDS_options.channels=CH_EN_0;
	write_CSR(&DDS_options); //set to write to TX channel
80005efc:	48 ac       	lddpc	r12,80005f24 <initializeDDS+0x138>
	write_profile_word_asf(t_currentsequence.CPMG.LOamp,1,&DDS_options_CH1);//so switch them for now...
	
	SLEEP(AVR32_PM_SMODE_IDLE);
	IO_UPDATE_local();
	
	DDS_options.channels=CH_EN_0;
80005efe:	aa 94       	st.b	r5[0x1],r4
	write_CSR(&DDS_options); //set to write to TX channel
80005f00:	fe b0 e8 f8 	rcall	800030f0 <write_CSR>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80005f04:	fc 18 40 00 	movh	r8,0x4000
80005f08:	30 49       	mov	r9,4
80005f0a:	f1 49 02 58 	st.w	r8[600],r9
80005f0e:	30 89       	mov	r9,8
80005f10:	f1 49 02 58 	st.w	r8[600],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80005f14:	30 19       	mov	r9,1
80005f16:	f1 49 02 54 	st.w	r8[596],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80005f1a:	30 29       	mov	r9,2
80005f1c:	f1 49 02 58 	st.w	r8[600],r9
	
	set_profile_CH0_off();
	set_profile_CH1_LOamp();
}
80005f20:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80005f24:	00 00       	add	r0,r0
80005f26:	95 d4       	st.w	r10[0x34],r4
80005f28:	00 00       	add	r0,r0
80005f2a:	95 7c       	st.w	r10[0x1c],r12
80005f2c:	00 00       	add	r0,r0
80005f2e:	0f 80       	ld.ub	r0,r7[0x0]
80005f30:	00 00       	add	r0,r0
80005f32:	53 64       	stdsp	sp[0xd8],r4

80005f34 <executesequence_SDstorage_multiprep_combined>:
80005f34:	d4 31       	pushm	r0-r7,lr
80005f36:	20 4d       	sub	sp,16
80005f38:	fe b0 ef 7a 	rcall	80003e2c <initialize_SD_arbitration>
80005f3c:	fc 75 20 00 	mov	r5,-188416
80005f40:	e0 68 02 ee 	mov	r8,750
80005f44:	8b 78       	st.w	r5[0x1c],r8
80005f46:	d5 03       	csrf	0x10
80005f48:	30 0b       	mov	r11,0
80005f4a:	0a 9c       	mov	r12,r5
80005f4c:	e0 a0 04 01 	rcall	8000674e <tc_start>
80005f50:	e9 b0 00 00 	sleep	0x0
80005f54:	fe f7 05 1c 	ld.w	r7,pc[1308]
80005f58:	fe 78 68 00 	mov	r8,-38912
80005f5c:	ef 19 00 10 	ld.uh	r9,r7[16]
	setnextevent(750);
	cpu_irq_enable();	
	tc_start(FAST_TC, FAST_TC_CHANNEL);
	SLEEP(AVR32_PM_SMODE_IDLE);
	
	DAC0->dr0=t_currentsequence.preppulse[0].Vb;
80005f60:	91 b9       	st.w	r8[0x2c],r9
	
	initializeDDS();
80005f62:	c4 5f       	rcall	80005dec <initializeDDS>
80005f64:	fe fb 05 10 	ld.w	r11,pc[1296]
	
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
	temp=SPI1->sr;
80005f68:	fe 78 34 00 	mov	r8,-52224
	
	DAC0->dr0=t_currentsequence.preppulse[0].Vb;
	
	initializeDDS();
	
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
80005f6c:	70 29       	ld.w	r9,r8[0x8]
80005f6e:	70 48       	ld.w	r8,r8[0x10]
	temp=SPI1->sr;
80005f70:	30 0c       	mov	r12,0
	pdca_disable(SPI1_RX_PDCA_CHANNEL);
80005f72:	97 08       	st.w	r11[0x0],r8
	DAC0->dr0=t_currentsequence.preppulse[0].Vb;
	
	initializeDDS();
	
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
	temp=SPI1->sr;
80005f74:	fe b0 f3 b4 	rcall	800046dc <pdca_disable>
	pdca_disable(SPI1_RX_PDCA_CHANNEL);
80005f78:	e0 6a 20 00 	mov	r10,8192
	my_pdca_init_channel(SPI1_RX_PDCA_CHANNEL,(uint32_t)(&bank0),(samplebuffer_size/2), SPI1_RX_PDCA_PID,   (uint32_t)(&bank1),  (samplebuffer_size/2), PDCA_TRANSFER_SIZE_HALF_WORD);
80005f7c:	30 16       	mov	r6,1
80005f7e:	fe f8 04 fa 	ld.w	r8,pc[1274]
80005f82:	1a d6       	st.w	--sp,r6
80005f84:	30 b9       	mov	r9,11
80005f86:	1a da       	st.w	--sp,r10
80005f88:	fe fb 04 f4 	ld.w	r11,pc[1268]
80005f8c:	30 0c       	mov	r12,0
80005f8e:	fe b0 eb c7 	rcall	8000371c <my_pdca_init_channel>
80005f92:	30 2c       	mov	r12,2
	
	pdca_disable(SPI0_TX_PDCA_CHANNEL);
80005f94:	fe b0 f3 a4 	rcall	800046dc <pdca_disable>
80005f98:	30 03       	mov	r3,0
	my_pdca_init_channel(SPI0_TX_PDCA_CHANNEL,(uint32_t)(&bank1),0, SPI0_TX_PDCA_PID, 0, 0, PDCA_TRANSFER_SIZE_BYTE);	//initialize with 0 in TCR and TCRR so that nothing happens until TCR is written
80005f9a:	31 59       	mov	r9,21
80005f9c:	1a d3       	st.w	--sp,r3
80005f9e:	06 98       	mov	r8,r3
80005fa0:	1a d3       	st.w	--sp,r3
80005fa2:	06 9a       	mov	r10,r3
80005fa4:	fe fb 04 d4 	ld.w	r11,pc[1236]
80005fa8:	30 2c       	mov	r12,2
80005faa:	fe b0 eb b9 	rcall	8000371c <my_pdca_init_channel>
80005fae:	30 2c       	mov	r12,2
	pdca_enable(SPI0_TX_PDCA_CHANNEL); //needs to be enabled at start of a sequence!
80005fb0:	fe b0 f3 a3 	rcall	800046f6 <pdca_enable>
80005fb4:	0c 9c       	mov	r12,r6
	pdca_disable(SPI0_RX_PDCA_CHANNEL);
80005fb6:	fe b0 f3 93 	rcall	800046dc <pdca_disable>
80005fba:	30 a9       	mov	r9,10
	my_pdca_init_channel(SPI0_RX_PDCA_CHANNEL,(uint32_t)(&bank0),0, SPI0_RX_PDCA_PID, 0, 0, PDCA_TRANSFER_SIZE_BYTE);	//initialize with 0 in TCR and TCRR so that nothing happens until TCR is written
80005fbc:	1a d3       	st.w	--sp,r3
80005fbe:	0c 9c       	mov	r12,r6
80005fc0:	1a d3       	st.w	--sp,r3
80005fc2:	06 98       	mov	r8,r3
80005fc4:	06 9a       	mov	r10,r3
80005fc6:	fe fb 04 b6 	ld.w	r11,pc[1206]
80005fca:	fe b0 eb a9 	rcall	8000371c <my_pdca_init_channel>
80005fce:	ef 09 00 58 	ld.sh	r9,r7[88]
	
	
	//SEQUENCE START
	
	
	for(uint8_t i=0;i<t_currentsequence.N_preppulses;i++)
80005fd2:	2f ad       	sub	sp,-24
80005fd4:	e6 09 19 00 	cp.h	r9,r3
80005fd8:	e0 80 02 46 	breq	80006464 <executesequence_SDstorage_multiprep_combined+0x530>
80005fdc:	fe f8 04 a4 	ld.w	r8,pc[1188]
80005fe0:	0a 96       	mov	r6,r5
		write_profile_word_asf(t_currentsequence.preppulse[i].RFamp,2,&DDS_options_CH0);
		IO_UPDATE_local();
	
		SLEEP(AVR32_PM_SMODE_IDLE);
	
		setnextevent(t_experiment.t_TPArise);		//START OF EXCITEMENT PULSE
80005fe2:	50 28       	stdsp	sp[0x8],r8
	
	
	//SEQUENCE START
	
	
	for(uint8_t i=0;i<t_currentsequence.N_preppulses;i++)
80005fe4:	fe fb 04 a0 	ld.w	r11,pc[1184]
80005fe8:	fc 14 40 00 	movh	r4,0x4000
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80005fec:	50 3b       	stdsp	sp[0xc],r11
80005fee:	e0 60 01 00 	mov	r0,256
80005ff2:	e0 68 00 80 	mov	r8,128
80005ff6:	e0 65 1d 4c 	mov	r5,7500
		}
		else
		{
			for(uint16_t mscount=0;mscount<t_currentsequence.preppulse[i].ms_pulsewidth;mscount++)
			{
				setnextevent(t_ms);
80005ffa:	c3 68       	rjmp	80006066 <executesequence_SDstorage_multiprep_combined+0x132>
80005ffc:	82 89       	ld.uh	r9,r1[0x0]
		set_profile_CH0_amp90();
		gpio_local_set_gpio_pin(GEN2_pin);			//enable CMCD TPA
		
		if(t_currentsequence.preppulse[i].ms_pulsewidth==0)
		{
			setnextevent(t_currentsequence.preppulse[i].t_pulsewidth);
80005ffe:	8d 79       	st.w	r6[0x1c],r9
80006000:	e9 b0 00 00 	sleep	0x0
				SLEEP(AVR32_PM_SMODE_IDLE);
			}
			setnextevent(t_currentsequence.preppulse[i].t_pulsewidth);
		}
		
		SLEEP(AVR32_PM_SMODE_IDLE);
80006004:	30 49       	mov	r9,4
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80006006:	e9 49 02 58 	st.w	r4[600],r9
8000600a:	30 89       	mov	r9,8
8000600c:	e9 49 02 58 	st.w	r4[600],r9
80006010:	e0 69 04 00 	mov	r9,1024
80006014:	e9 49 00 58 	st.w	r4[88],r9
80006018:	e9 48 00 58 	st.w	r4[88],r8
8000601c:	e9 40 00 58 	st.w	r4[88],r0
80006020:	ef 0b 00 58 	ld.sh	r11,r7[88]
		set_profile_CH0_off();
		gpio_local_clr_gpio_pin(GEN2_pin);			//CMCD TPA off
		gpio_local_clr_gpio_pin(TXSW_pin);			//TXSW OFF
		gpio_local_clr_gpio_pin(TPAbias_pin);		//linear TPA bias off
		
		if((i+1)<t_currentsequence.N_preppulses) //is next pulse a prep pulse?
80006024:	e6 c9 ff ff 	sub	r9,r3,-1
80006028:	fe fa 04 48 	ld.w	r10,pc[1096]
8000602c:	f9 db c0 10 	bfextu	r12,r11,0x0,0x10
80006030:	18 39       	cp.w	r9,r12
80006032:	e0 84 02 03 	brge	80006438 <executesequence_SDstorage_multiprep_combined+0x504>
80006036:	f2 0c 15 03 	lsl	r12,r9,0x3
		{	//if next pulse is a prep pulse, set as next prep pulse Vb
			DAC0->dr0=t_currentsequence.preppulse[i+1].Vb;
8000603a:	f8 09 01 09 	sub	r9,r12,r9
8000603e:	f4 09 00 1a 	add	r10,r10,r9<<0x1
80006042:	fe 79 68 00 	mov	r9,-38912
80006046:	f5 1a 00 10 	ld.uh	r10,r10[16]
8000604a:	93 ba       	st.w	r9[0x2c],r10
8000604c:	ee 02 00 09 	add	r9,r7,r2
		else
		{	//if next pulse is CPMG, then set as CPMG Vb
			DAC0->dr0=t_currentsequence.CPMG.Vb;
		}
		
		if(t_currentsequence.preppulse[i].ms_T0==0)
80006050:	2f c9       	sub	r9,-4
80006052:	92 1a       	ld.sh	r10,r9[0x2]
80006054:	58 0a       	cp.w	r10,0
80006056:	c4 f1       	brne	800060f4 <executesequence_SDstorage_multiprep_combined+0x1c0>
80006058:	92 89       	ld.uh	r9,r9[0x0]
		{
			setnextevent(t_currentsequence.preppulse[i].t_T0);
8000605a:	8d 79       	st.w	r6[0x1c],r9
8000605c:	2f f3       	sub	r3,-1
	
	
	//SEQUENCE START
	
	
	for(uint8_t i=0;i<t_currentsequence.N_preppulses;i++)
8000605e:	5c 53       	castu.b	r3
80006060:	f6 03 19 00 	cp.h	r3,r11
80006064:	c5 d2       	brcc	8000611e <executesequence_SDstorage_multiprep_combined+0x1ea>
80006066:	40 2b       	lddsp	r11,sp[0x8]
	{
		DDS_options_CH0.POW=t_currentsequence.preppulse[i].RFphase_POW;
80006068:	e6 02 15 03 	lsl	r2,r3,0x3
8000606c:	06 12       	sub	r2,r3
8000606e:	a1 72       	lsl	r2,0x1
80006070:	ee 02 00 01 	add	r1,r7,r2
80006074:	e2 c9 ff f4 	sub	r9,r1,-12
80006078:	92 0a       	ld.sh	r10,r9[0x0]
8000607a:	50 08       	stdsp	sp[0x0],r8
		write_POW0(&DDS_options_CH0);	//update DDS with new RF pulse phase and RF amplitude
8000607c:	f7 5a 00 10 	st.h	r11[16],r10
	//SEQUENCE START
	
	
	for(uint8_t i=0;i<t_currentsequence.N_preppulses;i++)
	{
		DDS_options_CH0.POW=t_currentsequence.preppulse[i].RFphase_POW;
80006080:	50 19       	stdsp	sp[0x4],r9
		write_POW0(&DDS_options_CH0);	//update DDS with new RF pulse phase and RF amplitude
80006082:	fe fc 03 fe 	ld.w	r12,pc[1022]
80006086:	fe b0 e7 47 	rcall	80002f14 <write_POW0>
8000608a:	40 19       	lddsp	r9,sp[0x4]
		write_profile_word_asf(t_currentsequence.preppulse[i].RFamp,2,&DDS_options_CH0);
8000608c:	fe fa 03 f4 	ld.w	r10,pc[1012]
80006090:	92 9c       	ld.uh	r12,r9[0x2]
80006092:	30 2b       	mov	r11,2
80006094:	fe b0 e7 12 	rcall	80002eb8 <write_profile_word_asf>
80006098:	fe b0 e6 db 	rcall	80002e4e <IO_UPDATE_local>
		IO_UPDATE_local();
8000609c:	e9 b0 00 00 	sleep	0x0
	
		SLEEP(AVR32_PM_SMODE_IDLE);
800060a0:	40 3a       	lddsp	r10,sp[0xc]
	
		setnextevent(t_experiment.t_TPArise);		//START OF EXCITEMENT PULSE
800060a2:	f5 19 03 24 	ld.uh	r9,r10[804]
800060a6:	8d 79       	st.w	r6[0x1c],r9
800060a8:	e9 40 00 54 	st.w	r4[84],r0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800060ac:	40 08       	lddsp	r8,sp[0x0]
800060ae:	e9 48 00 54 	st.w	r4[84],r8
800060b2:	e9 b0 00 00 	sleep	0x0
		gpio_local_set_gpio_pin(TPAbias_pin);		//enable linear TPA bias	
		gpio_local_set_gpio_pin(TXSW_pin);			//TXSW ON
		SLEEP(AVR32_PM_SMODE_IDLE);
800060b6:	30 49       	mov	r9,4
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800060b8:	e9 49 02 58 	st.w	r4[600],r9
800060bc:	30 89       	mov	r9,8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800060be:	e9 49 02 54 	st.w	r4[596],r9
800060c2:	e0 69 04 00 	mov	r9,1024
800060c6:	e9 49 00 54 	st.w	r4[84],r9
800060ca:	2f 81       	sub	r1,-8
	
		set_profile_CH0_amp90();
		gpio_local_set_gpio_pin(GEN2_pin);			//enable CMCD TPA
		
		if(t_currentsequence.preppulse[i].ms_pulsewidth==0)
800060cc:	82 1a       	ld.sh	r10,r1[0x2]
800060ce:	58 0a       	cp.w	r10,0
800060d0:	c9 60       	breq	80005ffc <executesequence_SDstorage_multiprep_combined+0xc8>
800060d2:	30 09       	mov	r9,0
		{
			setnextevent(t_currentsequence.preppulse[i].t_pulsewidth);
800060d4:	8d 75       	st.w	r6[0x1c],r5
		}
		else
		{
			for(uint16_t mscount=0;mscount<t_currentsequence.preppulse[i].ms_pulsewidth;mscount++)
			{
				setnextevent(t_ms);
800060d6:	e9 b0 00 00 	sleep	0x0
				SLEEP(AVR32_PM_SMODE_IDLE);
800060da:	2f f9       	sub	r9,-1
		{
			setnextevent(t_currentsequence.preppulse[i].t_pulsewidth);
		}
		else
		{
			for(uint16_t mscount=0;mscount<t_currentsequence.preppulse[i].ms_pulsewidth;mscount++)
800060dc:	5c 89       	casts.h	r9
800060de:	f2 0a 19 00 	cp.h	r10,r9
800060e2:	fe 9b ff f9 	brhi	800060d4 <executesequence_SDstorage_multiprep_combined+0x1a0>
800060e6:	ee 02 00 09 	add	r9,r7,r2
			{
				setnextevent(t_ms);
				SLEEP(AVR32_PM_SMODE_IDLE);
			}
			setnextevent(t_currentsequence.preppulse[i].t_pulsewidth);
800060ea:	fc 7b 20 00 	mov	r11,-188416
800060ee:	92 c9       	ld.uh	r9,r9[0x8]
800060f0:	97 79       	st.w	r11[0x1c],r9
800060f2:	c8 7b       	rjmp	80006000 <executesequence_SDstorage_multiprep_combined+0xcc>
800060f4:	30 09       	mov	r9,0
			DAC0->dr0=t_currentsequence.CPMG.Vb;
		}
		
		if(t_currentsequence.preppulse[i].ms_T0==0)
		{
			setnextevent(t_currentsequence.preppulse[i].t_T0);
800060f6:	8d 75       	st.w	r6[0x1c],r5
		}
		else
		{
			for(uint16_t mscount=0;mscount<t_currentsequence.preppulse[i].ms_T0;mscount++)
			{
				setnextevent(t_ms);
800060f8:	e9 b0 00 00 	sleep	0x0
				SLEEP(AVR32_PM_SMODE_IDLE);
800060fc:	2f f9       	sub	r9,-1
		{
			setnextevent(t_currentsequence.preppulse[i].t_T0);
		}
		else
		{
			for(uint16_t mscount=0;mscount<t_currentsequence.preppulse[i].ms_T0;mscount++)
800060fe:	5c 89       	casts.h	r9
80006100:	f2 0a 19 00 	cp.h	r10,r9
80006104:	fe 9b ff f9 	brhi	800060f6 <executesequence_SDstorage_multiprep_combined+0x1c2>
80006108:	ee 02 00 02 	add	r2,r7,r2
			{
				setnextevent(t_ms);
				SLEEP(AVR32_PM_SMODE_IDLE);
			}
			setnextevent(t_currentsequence.preppulse[i].t_T0);
8000610c:	fc 7a 20 00 	mov	r10,-188416
80006110:	84 a9       	ld.uh	r9,r2[0x4]
80006112:	95 79       	st.w	r10[0x1c],r9
80006114:	2f f3       	sub	r3,-1
	
	
	//SEQUENCE START
	
	
	for(uint8_t i=0;i<t_currentsequence.N_preppulses;i++)
80006116:	5c 53       	castu.b	r3
80006118:	f6 03 19 00 	cp.h	r3,r11
8000611c:	ca 53       	brcs	80006066 <executesequence_SDstorage_multiprep_combined+0x132>
8000611e:	fe f8 03 52 	ld.w	r8,pc[850]
		}
	}
	
	uint16_t echocount=0;
	
	if(t_currentsequence.echofirst==true)
80006122:	ef 3a 00 5a 	ld.ub	r10,r7[90]
80006126:	30 09       	mov	r9,0
80006128:	f2 0a 18 00 	cp.b	r10,r9
8000612c:	e0 80 01 8d 	breq	80006446 <executesequence_SDstorage_multiprep_combined+0x512>
80006130:	f1 08 00 48 	ld.sh	r8,r8[72]
	{	//if echo is first, do sampling routine, and increment echocount
		DDS_options_CH0.POW=t_currentsequence.CPMG.LOphase_I_POW;
80006134:	40 29       	lddsp	r9,sp[0x8]
80006136:	fe fc 03 4a 	ld.w	r12,pc[842]
		write_POW0(&DDS_options_CH0);	//if set for quadrature decoding, change TX phase to LO phase
8000613a:	f3 58 00 10 	st.h	r9[16],r8
	
	uint16_t echocount=0;
	
	if(t_currentsequence.echofirst==true)
	{	//if echo is first, do sampling routine, and increment echocount
		DDS_options_CH0.POW=t_currentsequence.CPMG.LOphase_I_POW;
8000613e:	fe b0 e6 eb 	rcall	80002f14 <write_POW0>
		write_POW0(&DDS_options_CH0);	//if set for quadrature decoding, change TX phase to LO phase
80006142:	fe b0 e6 86 	rcall	80002e4e <IO_UPDATE_local>
		IO_UPDATE_local();
80006146:	30 49       	mov	r9,4
80006148:	fc 18 40 00 	movh	r8,0x4000
8000614c:	f1 49 02 54 	st.w	r8[596],r9
80006150:	30 89       	mov	r9,8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80006152:	f1 49 02 58 	st.w	r8[600],r9
80006156:	fe 79 34 00 	mov	r9,-52224
		set_profile_CH0_LOamp(); //enable LOamp on CH0
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
8000615a:	72 48       	ld.w	r8,r9[0x10]
8000615c:	fe 76 34 00 	mov	r6,-52224
80006160:	e2 18 02 00 	andl	r8,0x200,COH
80006164:	cf b0       	breq	8000615a <executesequence_SDstorage_multiprep_combined+0x226>
80006166:	6c 28       	ld.w	r8,r6[0x8]
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
80006168:	fe fb 03 0c 	ld.w	r11,pc[780]
		temp=SPI1->sr;
8000616c:	6c 48       	ld.w	r8,r6[0x10]
8000616e:	30 0c       	mov	r12,0
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
80006170:	97 08       	st.w	r11[0x0],r8
		IO_UPDATE_local();
		set_profile_CH0_LOamp(); //enable LOamp on CH0
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
		temp=SPI1->sr;
80006172:	fe b0 f2 c2 	rcall	800046f6 <pdca_enable>
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
80006176:	ef 1b 00 4e 	ld.uh	r11,r7[78]
		for(uint32_t i=0;i<t_currentsequence.CPMG.Nsamp;i++)
8000617a:	58 0b       	cp.w	r11,0
8000617c:	c1 b0       	breq	800061b2 <executesequence_SDstorage_multiprep_combined+0x27e>
8000617e:	fe f8 02 f2 	ld.w	r8,pc[754]
80006182:	fc 1a 40 00 	movh	r10,0x4000
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80006186:	f1 13 00 50 	ld.uh	r3,r8[80]
8000618a:	34 09       	mov	r9,64
8000618c:	30 08       	mov	r8,0
8000618e:	ee 64 00 00 	mov	r4,917504
		{
			SLEEP(AVR32_PM_SMODE_IDLE);
			gpio_local_set_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
80006192:	fc 15 01 0e 	movh	r5,0x10e
			gpio_local_clr_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
80006196:	fc 7c 20 00 	mov	r12,-188416
			setnextevent(t_currentsequence.CPMG.t_dt);
8000619a:	e9 b0 00 00 	sleep	0x0
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
		temp=SPI1->sr;
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
		for(uint32_t i=0;i<t_currentsequence.CPMG.Nsamp;i++)
		{
			SLEEP(AVR32_PM_SMODE_IDLE);
8000619e:	f5 49 02 54 	st.w	r10[596],r9
800061a2:	8d 34       	st.w	r6[0xc],r4
			gpio_local_set_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
800061a4:	f5 49 02 58 	st.w	r10[600],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800061a8:	8d 35       	st.w	r6[0xc],r5
			gpio_local_clr_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
800061aa:	99 73       	st.w	r12[0x1c],r3
			setnextevent(t_currentsequence.CPMG.t_dt);
800061ac:	2f f8       	sub	r8,-1
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
		temp=SPI1->sr;
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
		for(uint32_t i=0;i<t_currentsequence.CPMG.Nsamp;i++)
800061ae:	16 38       	cp.w	r8,r11
800061b0:	cf 53       	brcs	8000619a <executesequence_SDstorage_multiprep_combined+0x266>
800061b2:	ef 19 00 56 	ld.uh	r9,r7[86]
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
			gpio_local_clr_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
			setnextevent(t_currentsequence.CPMG.t_dt);
		}
		setnextevent(t_currentsequence.CPMG.t_T5);
800061b6:	fc 78 20 00 	mov	r8,-188416
800061ba:	91 79       	st.w	r8[0x1c],r9
800061bc:	fe 79 34 00 	mov	r9,-52224
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
800061c0:	72 48       	ld.w	r8,r9[0x10]
800061c2:	ed b8 00 09 	bld	r8,0x9
800061c6:	cf d1       	brne	800061c0 <executesequence_SDstorage_multiprep_combined+0x28c>
800061c8:	30 0c       	mov	r12,0
		pdca_disable(SPI1_RX_PDCA_CHANNEL);
800061ca:	fe b0 f2 89 	rcall	800046dc <pdca_disable>
800061ce:	ef 08 00 40 	ld.sh	r8,r7[64]
	
		DDS_options_CH0.POW=t_currentsequence.CPMG.RFphase_POW;
800061d2:	40 2a       	lddsp	r10,sp[0x8]
800061d4:	fe fc 02 ac 	ld.w	r12,pc[684]
		write_POW0(&DDS_options_CH0);	//change TX phase back to 90
800061d8:	f5 58 00 10 	st.h	r10[16],r8
		}
		setnextevent(t_currentsequence.CPMG.t_T5);
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
		pdca_disable(SPI1_RX_PDCA_CHANNEL);
	
		DDS_options_CH0.POW=t_currentsequence.CPMG.RFphase_POW;
800061dc:	fe b0 e6 9c 	rcall	80002f14 <write_POW0>
		write_POW0(&DDS_options_CH0);	//change TX phase back to 90
800061e0:	fe b0 e6 37 	rcall	80002e4e <IO_UPDATE_local>
		IO_UPDATE_local();
800061e4:	30 49       	mov	r9,4
800061e6:	fc 18 40 00 	movh	r8,0x4000
800061ea:	f1 49 02 58 	st.w	r8[600],r9
800061ee:	30 89       	mov	r9,8
800061f0:	f1 49 02 58 	st.w	r8[600],r9
800061f4:	fe 79 34 00 	mov	r9,-52224
		set_profile_CH0_off(); //and turn RF back off
		
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
800061f8:	72 48       	ld.w	r8,r9[0x10]
800061fa:	ed b8 00 09 	bld	r8,0x9
800061fe:	cf d1       	brne	800061f8 <executesequence_SDstorage_multiprep_combined+0x2c4>
80006200:	fc 16 40 00 	movh	r6,0x4000
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80006204:	e0 65 02 00 	mov	r5,512
80006208:	30 10       	mov	r0,1
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
8000620a:	ed 45 00 54 	st.w	r6[84],r5
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000620e:	fe b0 ee 59 	rcall	80003ec0 <handle_SPI_arbitration>
		gpio_local_set_gpio_pin(GEN1_pin);
		handle_SPI_arbitration();
80006212:	ed 45 00 58 	st.w	r6[88],r5
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80006216:	ef 08 00 4c 	ld.sh	r8,r7[76]
		DDS_options_CH0.POW=t_currentsequence.CPMG.RFphase_POW;
		write_POW0(&DDS_options_CH0);	//change TX phase back to 90
		IO_UPDATE_local();
	}
	
	while(echocount<t_currentsequence.CPMG.Nechos)
8000621a:	e0 08 19 00 	cp.h	r8,r0
8000621e:	e0 88 00 9e 	brls	8000635a <executesequence_SDstorage_multiprep_combined+0x426>
80006222:	fe 76 34 00 	mov	r6,-52224
		
		//gpio_local_set_gpio_pin(GEN1_pin);		//debug signal
		handle_SD();
		//gpio_local_clr_gpio_pin(GEN1_pin);		//debug signal
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
80006226:	fc 15 40 00 	movh	r5,0x4000
8000622a:	34 04       	mov	r4,64
8000622c:	ee 63 00 00 	mov	r3,917504
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
		for(uint32_t j=0;j<t_currentsequence.CPMG.Nsamp;j++)
		{
			SLEEP(AVR32_PM_SMODE_IDLE);
			gpio_local_set_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
80006230:	2f f0       	sub	r0,-1
		IO_UPDATE_local();
	}
	
	while(echocount<t_currentsequence.CPMG.Nechos)
	{
		echocount++;
80006232:	5c 80       	casts.h	r0
80006234:	e9 b0 00 00 	sleep	0x0
		SLEEP(AVR32_PM_SMODE_IDLE);					
80006238:	eb 44 00 58 	st.w	r5[88],r4
8000623c:	e0 68 01 00 	mov	r8,256
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80006240:	eb 48 00 54 	st.w	r5[84],r8
80006244:	e0 69 00 80 	mov	r9,128
80006248:	eb 49 00 54 	st.w	r5[84],r9
8000624c:	40 3b       	lddsp	r11,sp[0xc]
		gpio_local_clr_gpio_pin(RXSW_pin);			//RXSW OFF
		gpio_local_set_gpio_pin(TPAbias_pin);		//enable linear TPA bias	
		gpio_local_set_gpio_pin(TXSW_pin);			//TXSW ON
		setnextevent(t_experiment.t_TPArise);
8000624e:	fc 78 20 00 	mov	r8,-188416
80006252:	f7 1a 03 24 	ld.uh	r10,r11[804]
80006256:	91 7a       	st.w	r8[0x1c],r10
80006258:	e9 b0 00 00 	sleep	0x0
		SLEEP(AVR32_PM_SMODE_IDLE);
8000625c:	30 41       	mov	r1,4
8000625e:	eb 41 02 54 	st.w	r5[596],r1
80006262:	30 82       	mov	r2,8
80006264:	eb 42 02 54 	st.w	r5[596],r2
80006268:	e0 6a 04 00 	mov	r10,1024
8000626c:	eb 4a 00 54 	st.w	r5[84],r10
80006270:	ef 1b 00 3e 	ld.uh	r11,r7[62]
	
		set_profile_CH0_amp180();
		gpio_local_set_gpio_pin(GEN2_pin);			//enable CMCD TPA
		setnextevent(t_currentsequence.CPMG.t_pulsewidth);
80006274:	91 7b       	st.w	r8[0x1c],r11
80006276:	e9 b0 00 00 	sleep	0x0
		SLEEP(AVR32_PM_SMODE_IDLE);
8000627a:	eb 41 02 58 	st.w	r5[600],r1
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
8000627e:	eb 42 02 58 	st.w	r5[600],r2
80006282:	eb 4a 00 58 	st.w	r5[88],r10
80006286:	eb 49 00 58 	st.w	r5[88],r9
8000628a:	e0 6a 01 00 	mov	r10,256
8000628e:	ef 19 00 54 	ld.uh	r9,r7[84]
		set_profile_CH0_off();
		gpio_local_clr_gpio_pin(GEN2_pin);			//CMCD TPA off
		gpio_local_clr_gpio_pin(TXSW_pin);			//TXSW OFF
		gpio_local_clr_gpio_pin(TPAbias_pin);		//linear TPA bias off
		setnextevent(t_currentsequence.CPMG.t_T3);
80006292:	eb 4a 00 58 	st.w	r5[88],r10
80006296:	91 79       	st.w	r8[0x1c],r9
80006298:	fe fc 01 e8 	ld.w	r12,pc[488]
	
		DDS_options_CH0.POW=t_currentsequence.CPMG.LOphase_I_POW;
		write_POW0(&DDS_options_CH0);	//change TX phase to LO phase
8000629c:	ef 08 00 48 	ld.sh	r8,r7[72]
		gpio_local_clr_gpio_pin(GEN2_pin);			//CMCD TPA off
		gpio_local_clr_gpio_pin(TXSW_pin);			//TXSW OFF
		gpio_local_clr_gpio_pin(TPAbias_pin);		//linear TPA bias off
		setnextevent(t_currentsequence.CPMG.t_T3);
	
		DDS_options_CH0.POW=t_currentsequence.CPMG.LOphase_I_POW;
800062a0:	40 29       	lddsp	r9,sp[0x8]
800062a2:	f3 58 00 10 	st.h	r9[16],r8
800062a6:	fe b0 e6 37 	rcall	80002f14 <write_POW0>
		write_POW0(&DDS_options_CH0);	//change TX phase to LO phase
800062aa:	fe b0 e5 d2 	rcall	80002e4e <IO_UPDATE_local>
		IO_UPDATE_local();
800062ae:	34 08       	mov	r8,64
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800062b0:	eb 48 00 54 	st.w	r5[84],r8
800062b4:	eb 41 02 54 	st.w	r5[596],r1
800062b8:	eb 42 02 58 	st.w	r5[600],r2
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800062bc:	fe b0 ee 6e 	rcall	80003f98 <handle_SD>
		gpio_local_set_gpio_pin(RXSW_pin);			//RXSW ON
		set_profile_CH0_LOamp();					//enable LOamp on CH0
		
		//gpio_local_set_gpio_pin(GEN1_pin);		//debug signal
		handle_SD();
800062c0:	6c 48       	ld.w	r8,r6[0x10]
		//gpio_local_clr_gpio_pin(GEN1_pin);		//debug signal
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
800062c2:	ed b8 00 09 	bld	r8,0x9
800062c6:	cf d1       	brne	800062c0 <executesequence_SDstorage_multiprep_combined+0x38c>
800062c8:	fe 7b 34 00 	mov	r11,-52224
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
800062cc:	76 28       	ld.w	r8,r11[0x8]
800062ce:	76 48       	ld.w	r8,r11[0x10]
		temp=SPI1->sr;
800062d0:	4e 9a       	lddpc	r10,80006474 <executesequence_SDstorage_multiprep_combined+0x540>
800062d2:	30 0c       	mov	r12,0
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
800062d4:	95 08       	st.w	r10[0x0],r8
		handle_SD();
		//gpio_local_clr_gpio_pin(GEN1_pin);		//debug signal
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
		temp=SPI1->sr;
800062d6:	fe b0 f2 10 	rcall	800046f6 <pdca_enable>
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
800062da:	ef 19 00 4e 	ld.uh	r9,r7[78]
		for(uint32_t j=0;j<t_currentsequence.CPMG.Nsamp;j++)
800062de:	58 09       	cp.w	r9,0
800062e0:	c1 50       	breq	8000630a <executesequence_SDstorage_multiprep_combined+0x3d6>
800062e2:	4e 48       	lddpc	r8,80006470 <executesequence_SDstorage_multiprep_combined+0x53c>
800062e4:	fc 1b 01 0e 	movh	r11,0x10e
		{
			SLEEP(AVR32_PM_SMODE_IDLE);
			gpio_local_set_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
			gpio_local_clr_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
800062e8:	f1 1c 00 50 	ld.uh	r12,r8[80]
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
		temp=SPI1->sr;
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
		for(uint32_t j=0;j<t_currentsequence.CPMG.Nsamp;j++)
800062ec:	fc 7a 20 00 	mov	r10,-188416
			SLEEP(AVR32_PM_SMODE_IDLE);
			gpio_local_set_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
			gpio_local_clr_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
			setnextevent(t_currentsequence.CPMG.t_dt);
800062f0:	30 08       	mov	r8,0
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
		temp=SPI1->sr;
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
		for(uint32_t j=0;j<t_currentsequence.CPMG.Nsamp;j++)
800062f2:	e9 b0 00 00 	sleep	0x0
		{
			SLEEP(AVR32_PM_SMODE_IDLE);
800062f6:	eb 44 02 54 	st.w	r5[596],r4
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800062fa:	8d 33       	st.w	r6[0xc],r3
			gpio_local_set_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
800062fc:	eb 44 02 58 	st.w	r5[600],r4
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80006300:	8d 3b       	st.w	r6[0xc],r11
			gpio_local_clr_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
80006302:	95 7c       	st.w	r10[0x1c],r12
			setnextevent(t_currentsequence.CPMG.t_dt);
80006304:	2f f8       	sub	r8,-1
	
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
		temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
		temp=SPI1->sr;
		pdca_enable(SPI1_RX_PDCA_CHANNEL);
		for(uint32_t j=0;j<t_currentsequence.CPMG.Nsamp;j++)
80006306:	12 38       	cp.w	r8,r9
80006308:	cf 53       	brcs	800062f2 <executesequence_SDstorage_multiprep_combined+0x3be>
8000630a:	ef 19 00 56 	ld.uh	r9,r7[86]
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
			gpio_local_clr_gpio_pin(ADC_CONV_pin);
			SPI1->tdr = (0x0000) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
			setnextevent(t_currentsequence.CPMG.t_dt);
		}
		setnextevent(t_currentsequence.CPMG.t_T5);
8000630e:	fc 78 20 00 	mov	r8,-188416
80006312:	91 79       	st.w	r8[0x1c],r9
80006314:	6c 48       	ld.w	r8,r6[0x10]
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
80006316:	ed b8 00 09 	bld	r8,0x9
8000631a:	cf d1       	brne	80006314 <executesequence_SDstorage_multiprep_combined+0x3e0>
8000631c:	30 0c       	mov	r12,0
		pdca_disable(SPI1_RX_PDCA_CHANNEL);
8000631e:	fe b0 f1 df 	rcall	800046dc <pdca_disable>
80006322:	ef 08 00 40 	ld.sh	r8,r7[64]
	
		DDS_options_CH0.POW=t_currentsequence.CPMG.RFphase_POW;
80006326:	40 29       	lddsp	r9,sp[0x8]
80006328:	4d 6c       	lddpc	r12,80006480 <executesequence_SDstorage_multiprep_combined+0x54c>
		write_POW0(&DDS_options_CH0);	//change TX phase back to 90
8000632a:	f3 58 00 10 	st.h	r9[16],r8
		}
		setnextevent(t_currentsequence.CPMG.t_T5);
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
		pdca_disable(SPI1_RX_PDCA_CHANNEL);
	
		DDS_options_CH0.POW=t_currentsequence.CPMG.RFphase_POW;
8000632e:	fe b0 e5 f3 	rcall	80002f14 <write_POW0>
		write_POW0(&DDS_options_CH0);	//change TX phase back to 90
80006332:	fe b0 e5 8e 	rcall	80002e4e <IO_UPDATE_local>
		IO_UPDATE_local();
80006336:	30 48       	mov	r8,4
80006338:	eb 48 02 58 	st.w	r5[600],r8
8000633c:	30 88       	mov	r8,8
8000633e:	eb 48 02 58 	st.w	r5[600],r8
80006342:	6c 48       	ld.w	r8,r6[0x10]
		set_profile_CH0_off(); //and turn RF back off
		
		while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
80006344:	ed b8 00 09 	bld	r8,0x9
80006348:	cf d1       	brne	80006342 <executesequence_SDstorage_multiprep_combined+0x40e>
8000634a:	fe b0 ed bb 	rcall	80003ec0 <handle_SPI_arbitration>
		
		//gpio_local_set_gpio_pin(GEN1_pin);	//debug signal
		handle_SPI_arbitration();
8000634e:	ef 08 00 4c 	ld.sh	r8,r7[76]
		DDS_options_CH0.POW=t_currentsequence.CPMG.RFphase_POW;
		write_POW0(&DDS_options_CH0);	//change TX phase back to 90
		IO_UPDATE_local();
	}
	
	while(echocount<t_currentsequence.CPMG.Nechos)
80006352:	e0 08 19 00 	cp.h	r8,r0
80006356:	fe 9b ff 6d 	brhi	80006230 <executesequence_SDstorage_multiprep_combined+0x2fc>
8000635a:	fe 78 68 00 	mov	r8,-38912
		//gpio_local_set_gpio_pin(GEN1_pin);	//debug signal
		handle_SPI_arbitration();
		//gpio_local_clr_gpio_pin(GEN1_pin);	//debug signal
	}	
	
	DAC0->dr0=0;
8000635e:	4c 9c       	lddpc	r12,80006480 <executesequence_SDstorage_multiprep_combined+0x54c>
	
	DDS_options_CH0.POW=t_currentsequence.CPMG.LOphase_I_POW;
	write_POW0(&DDS_options_CH0);	//change TX phase to LO phase
80006360:	30 04       	mov	r4,0
		//gpio_local_set_gpio_pin(GEN1_pin);	//debug signal
		handle_SPI_arbitration();
		//gpio_local_clr_gpio_pin(GEN1_pin);	//debug signal
	}	
	
	DAC0->dr0=0;
80006362:	91 b4       	st.w	r8[0x2c],r4
80006364:	ef 08 00 48 	ld.sh	r8,r7[72]
	
	DDS_options_CH0.POW=t_currentsequence.CPMG.LOphase_I_POW;
80006368:	40 2b       	lddsp	r11,sp[0x8]
8000636a:	f7 58 00 10 	st.h	r11[16],r8
8000636e:	fe b0 e5 d3 	rcall	80002f14 <write_POW0>
	write_POW0(&DDS_options_CH0);	//change TX phase to LO phase
80006372:	fe b0 e5 6e 	rcall	80002e4e <IO_UPDATE_local>
	IO_UPDATE_local();
80006376:	fc 15 40 00 	movh	r5,0x4000
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000637a:	30 48       	mov	r8,4
8000637c:	eb 48 02 54 	st.w	r5[596],r8
80006380:	30 88       	mov	r8,8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80006382:	eb 48 02 58 	st.w	r5[600],r8
80006386:	e9 b0 00 00 	sleep	0x0
	set_profile_CH0_LOamp();		 //enable LOamp on CH0
	
	SLEEP(AVR32_PM_SMODE_IDLE);
8000638a:	e0 68 00 96 	mov	r8,150
	setnextevent(150);//delay for ~20us so that LO and baseband amp reach steady state
8000638e:	fe 76 34 00 	mov	r6,-52224
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
80006392:	fc 73 20 00 	mov	r3,-188416
	write_POW0(&DDS_options_CH0);	//change TX phase to LO phase
	IO_UPDATE_local();
	set_profile_CH0_LOamp();		 //enable LOamp on CH0
	
	SLEEP(AVR32_PM_SMODE_IDLE);
	setnextevent(150);//delay for ~20us so that LO and baseband amp reach steady state
80006396:	87 78       	st.w	r3[0x1c],r8
80006398:	6c 28       	ld.w	r8,r6[0x8]
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
8000639a:	6c 48       	ld.w	r8,r6[0x10]
	temp=SPI1->sr;
8000639c:	4b 6a       	lddpc	r10,80006474 <executesequence_SDstorage_multiprep_combined+0x540>
8000639e:	08 9c       	mov	r12,r4
	pdca_enable(SPI1_RX_PDCA_CHANNEL);
800063a0:	95 08       	st.w	r10[0x0],r8
	set_profile_CH0_LOamp();		 //enable LOamp on CH0
	
	SLEEP(AVR32_PM_SMODE_IDLE);
	setnextevent(150);//delay for ~20us so that LO and baseband amp reach steady state
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
	temp=SPI1->sr;
800063a2:	fe b0 f1 aa 	rcall	800046f6 <pdca_enable>
	pdca_enable(SPI1_RX_PDCA_CHANNEL);
800063a6:	40 38       	lddsp	r8,sp[0xc]
	for(uint32_t i=0;i<(t_experiment.Noffsetsamples+1);i++)  //now take samples of offsets.  Take one extra sample to get last conversion result
800063a8:	f0 f9 03 28 	ld.w	r9,r8[808]
800063ac:	2f f9       	sub	r9,-1
800063ae:	c1 80       	breq	800063de <executesequence_SDstorage_multiprep_combined+0x4aa>
800063b0:	4b 58       	lddpc	r8,80006484 <executesequence_SDstorage_multiprep_combined+0x550>
800063b2:	ee 6b f0 f0 	mov	r11,979184
	{
		SLEEP(AVR32_PM_SMODE_IDLE);
		gpio_local_set_gpio_pin(ADC_CONV_pin);
		SPI1->tdr = (0xF0F0) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
800063b6:	f1 1c 03 2c 	ld.uh	r12,r8[812]
	SLEEP(AVR32_PM_SMODE_IDLE);
	setnextevent(150);//delay for ~20us so that LO and baseband amp reach steady state
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
	temp=SPI1->sr;
	pdca_enable(SPI1_RX_PDCA_CHANNEL);
	for(uint32_t i=0;i<(t_experiment.Noffsetsamples+1);i++)  //now take samples of offsets.  Take one extra sample to get last conversion result
800063ba:	e0 6a af af 	mov	r10,44975
	{
		SLEEP(AVR32_PM_SMODE_IDLE);
		gpio_local_set_gpio_pin(ADC_CONV_pin);
		SPI1->tdr = (0xF0F0) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
		gpio_local_clr_gpio_pin(ADC_CONV_pin);
		SPI1->tdr = (0xAFAF) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
800063be:	ea 1a 01 0e 	orh	r10,0x10e
800063c2:	34 08       	mov	r8,64
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800063c4:	e9 b0 00 00 	sleep	0x0
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
	temp=SPI1->sr;
	pdca_enable(SPI1_RX_PDCA_CHANNEL);
	for(uint32_t i=0;i<(t_experiment.Noffsetsamples+1);i++)  //now take samples of offsets.  Take one extra sample to get last conversion result
	{
		SLEEP(AVR32_PM_SMODE_IDLE);
800063c8:	eb 48 02 54 	st.w	r5[596],r8
800063cc:	8d 3b       	st.w	r6[0xc],r11
		gpio_local_set_gpio_pin(ADC_CONV_pin);
		SPI1->tdr = (0xF0F0) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
800063ce:	eb 48 02 58 	st.w	r5[600],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800063d2:	8d 3a       	st.w	r6[0xc],r10
		gpio_local_clr_gpio_pin(ADC_CONV_pin);
		SPI1->tdr = (0xAFAF) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
800063d4:	87 7c       	st.w	r3[0x1c],r12
		setnextevent(t_experiment.t_dt_offsetsamples);
800063d6:	2f f4       	sub	r4,-1
	SLEEP(AVR32_PM_SMODE_IDLE);
	setnextevent(150);//delay for ~20us so that LO and baseband amp reach steady state
	temp=SPI1->rdr;	//read RDR and SR so that PDCA does not do a transfer when enabled
	temp=SPI1->sr;
	pdca_enable(SPI1_RX_PDCA_CHANNEL);
	for(uint32_t i=0;i<(t_experiment.Noffsetsamples+1);i++)  //now take samples of offsets.  Take one extra sample to get last conversion result
800063d8:	08 39       	cp.w	r9,r4
800063da:	fe 9b ff f5 	brhi	800063c4 <executesequence_SDstorage_multiprep_combined+0x490>
800063de:	fe 79 34 00 	mov	r9,-52224
		SPI1->tdr = (0xF0F0) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (0 << AVR32_SPI_TDR_LASTXFER_OFFSET);
		gpio_local_clr_gpio_pin(ADC_CONV_pin);
		SPI1->tdr = (0xAFAF) | (ADC_PCS << AVR32_SPI_TDR_PCS_OFFSET) | (1 << AVR32_SPI_TDR_LASTXFER_OFFSET);
		setnextevent(t_experiment.t_dt_offsetsamples);
	}
	while (!(SPI1->sr & AVR32_SPI_SR_TXEMPTY_MASK));//don't disable PDCA until last SPI transfer is done!
800063e2:	72 48       	ld.w	r8,r9[0x10]
800063e4:	ed b8 00 09 	bld	r8,0x9
800063e8:	cf d1       	brne	800063e2 <executesequence_SDstorage_multiprep_combined+0x4ae>
800063ea:	30 0c       	mov	r12,0
	pdca_disable(SPI1_RX_PDCA_CHANNEL);
800063ec:	fe b0 f1 78 	rcall	800046dc <pdca_disable>
800063f0:	34 09       	mov	r9,64
800063f2:	fc 18 40 00 	movh	r8,0x4000
800063f6:	f1 49 00 58 	st.w	r8[88],r9
800063fa:	e9 b0 00 00 	sleep	0x0
	gpio_local_clr_gpio_pin(RXSW_pin);			//RXSW OFF
	
	SLEEP(AVR32_PM_SMODE_IDLE);
800063fe:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80006400:	30 0b       	mov	r11,0
	tc_stop(FAST_TC, FAST_TC_CHANNEL);
80006402:	fc 7c 20 00 	mov	r12,-188416
80006406:	ca dd       	rcall	80006760 <tc_stop>
80006408:	49 bb       	lddpc	r11,80006474 <executesequence_SDstorage_multiprep_combined+0x540>
8000640a:	fc 78 20 00 	mov	r8,-188416
	read_TC_sr();
8000640e:	70 88       	ld.w	r8,r8[0x20]
80006410:	30 0c       	mov	r12,0
80006412:	97 08       	st.w	r11[0x0],r8
	
	pdca_disable(SPI1_RX_PDCA_CHANNEL);
80006414:	fe b0 f1 64 	rcall	800046dc <pdca_disable>
80006418:	49 c8       	lddpc	r8,80006488 <executesequence_SDstorage_multiprep_combined+0x554>
8000641a:	11 89       	ld.ub	r9,r8[0x0]
	
	if((data_fail==false))
8000641c:	30 08       	mov	r8,0
8000641e:	f0 09 18 00 	cp.b	r9,r8
80006422:	c1 e0       	breq	8000645e <executesequence_SDstorage_multiprep_combined+0x52a>
80006424:	fe b0 f0 a2 	rcall	80004568 <handle_SD_failure>
	{
		end_sequence_terminate();
	}
	else
	{//if there was a data failure
		handle_SD_failure();	//reinitialize SD card and write first cluster of the sequence with 0xFF
80006428:	ef 1c 00 5c 	ld.uh	r12,r7[92]
		SD_skip_clusters(t_currentsequence.clusters_per_sequence);	//skip to proper address of next sequence
8000642c:	fe b0 ed 9e 	rcall	80003f68 <SD_skip_clusters>
80006430:	fe b0 ed aa 	rcall	80003f84 <shadow_SD_sink_ptr>
	}
	shadow_SD_sink_ptr();	//shadow the SD_sink_ptr;
80006434:	2f cd       	sub	sp,-16
80006436:	d8 32       	popm	r0-r7,pc
}
80006438:	f5 1a 00 44 	ld.uh	r10,r10[68]
		{	//if next pulse is a prep pulse, set as next prep pulse Vb
			DAC0->dr0=t_currentsequence.preppulse[i+1].Vb;
		}
		else
		{	//if next pulse is CPMG, then set as CPMG Vb
			DAC0->dr0=t_currentsequence.CPMG.Vb;
8000643c:	fe 79 68 00 	mov	r9,-38912
80006440:	93 ba       	st.w	r9[0x2c],r10
80006442:	fe 9f fe 05 	bral	8000604c <executesequence_SDstorage_multiprep_combined+0x118>
80006446:	f1 08 00 40 	ld.sh	r8,r8[64]
		
		echocount++;
	}
	else
	{	//if pulse is first, just wait to do a pulse
		DDS_options_CH0.POW=t_currentsequence.CPMG.RFphase_POW;
8000644a:	40 29       	lddsp	r9,sp[0x8]
8000644c:	48 dc       	lddpc	r12,80006480 <executesequence_SDstorage_multiprep_combined+0x54c>
8000644e:	f3 58 00 10 	st.h	r9[16],r8
80006452:	30 00       	mov	r0,0
80006454:	fe b0 e5 60 	rcall	80002f14 <write_POW0>
		write_POW0(&DDS_options_CH0);	//change TX phase back to 90
80006458:	fe b0 e4 fb 	rcall	80002e4e <IO_UPDATE_local>
		IO_UPDATE_local();
8000645c:	cd da       	rjmp	80006216 <executesequence_SDstorage_multiprep_combined+0x2e2>
8000645e:	fe b0 ef 8b 	rcall	80004374 <end_sequence_terminate>
	
	pdca_disable(SPI1_RX_PDCA_CHANNEL);
	
	if((data_fail==false))
	{
		end_sequence_terminate();
80006462:	ce 7b       	rjmp	80006430 <executesequence_SDstorage_multiprep_combined+0x4fc>
80006464:	48 7a       	lddpc	r10,80006480 <executesequence_SDstorage_multiprep_combined+0x54c>
80006466:	48 89       	lddpc	r9,80006484 <executesequence_SDstorage_multiprep_combined+0x550>
	
	
	//SEQUENCE START
	
	
	for(uint8_t i=0;i<t_currentsequence.N_preppulses;i++)
80006468:	50 2a       	stdsp	sp[0x8],r10
8000646a:	50 39       	stdsp	sp[0xc],r9
8000646c:	fe 9f fe 59 	bral	8000611e <executesequence_SDstorage_multiprep_combined+0x1ea>
80006470:	00 00       	add	r0,r0
80006472:	0f 80       	ld.ub	r0,r7[0x0]
80006474:	00 00       	add	r0,r0
80006476:	53 78       	stdsp	sp[0xdc],r8
80006478:	00 00       	add	r0,r0
8000647a:	13 64       	ld.uh	r4,--r9
8000647c:	00 00       	add	r0,r0
8000647e:	53 7c       	stdsp	sp[0xdc],r12
80006480:	00 00       	add	r0,r0
80006482:	95 7c       	st.w	r10[0x1c],r12
80006484:	00 00       	add	r0,r0
80006486:	0f e4       	ld.ub	r4,r7[0x6]
80006488:	00 00       	add	r0,r0
8000648a:	08 fb       	st.b	--r4,r11

8000648c <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
8000648c:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
8000648e:	30 1a       	mov	r10,1
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80006490:	18 98       	mov	r8,r12
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80006492:	f7 39 00 0d 	ld.ub	r9,r11[13]
80006496:	f4 09 18 00 	cp.b	r9,r10
8000649a:	e0 88 00 04 	brls	800064a2 <spi_initMaster+0x16>
8000649e:	30 2c       	mov	r12,2
800064a0:	d8 02       	popm	pc
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800064a2:	e0 6a 00 80 	mov	r10,128
800064a6:	99 0a       	st.w	r12[0x0],r10

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
800064a8:	30 0b       	mov	r11,0

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800064aa:	70 1a       	ld.w	r10,r8[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
800064ac:	30 1e       	mov	lr,1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
  spi->mr = u_avr32_spi_mr.mr;
800064ae:	16 9c       	mov	r12,r11
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
800064b0:	f5 de d0 01 	bfins	r10,lr,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800064b4:	f5 d9 d0 81 	bfins	r10,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800064b8:	30 f9       	mov	r9,15

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
800064ba:	f5 db d0 e1 	bfins	r10,r11,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800064be:	f5 d9 d2 04 	bfins	r10,r9,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
800064c2:	91 1a       	st.w	r8[0x4],r10

  return SPI_OK;
}
800064c4:	d8 02       	popm	pc

800064c6 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
800064c6:	eb cd 40 80 	pushm	r7,lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800064ca:	30 1e       	mov	lr,1
800064cc:	30 18       	mov	r8,1
800064ce:	f4 0e 18 00 	cp.b	lr,r10
800064d2:	f9 be 02 00 	movhs	lr,0
800064d6:	f6 08 18 00 	cp.b	r8,r11
800064da:	f9 b8 02 00 	movhs	r8,0
800064de:	30 07       	mov	r7,0
800064e0:	fd e8 10 08 	or	r8,lr,r8
800064e4:	ee 08 18 00 	cp.b	r8,r7
800064e8:	c0 40       	breq	800064f0 <spi_selectionMode+0x2a>
800064ea:	30 2c       	mov	r12,2
800064ec:	e3 cd 80 80 	ldm	sp++,r7,pc
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
800064f0:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
800064f2:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800064f6:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
800064fa:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
800064fe:	99 18       	st.w	r12[0x4],r8
80006500:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80006504 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80006504:	78 19       	ld.w	r9,r12[0x4]
  return SPI_OK;
}


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80006506:	18 98       	mov	r8,r12
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80006508:	ea 19 00 0f 	orh	r9,0xf
8000650c:	99 19       	st.w	r12[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000650e:	78 1c       	ld.w	r12,r12[0x4]
80006510:	e2 1c 00 04 	andl	r12,0x4,COH
80006514:	c0 80       	breq	80006524 <spi_selectChip+0x20>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80006516:	30 e9       	mov	r9,14
80006518:	f2 0b 18 00 	cp.b	r11,r9
8000651c:	e0 88 00 12 	brls	80006540 <spi_selectChip+0x3c>
  } else {
    if (chip > 3) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80006520:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
80006522:	5e fc       	retal	r12
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
  } else {
    if (chip > 3) {
80006524:	30 39       	mov	r9,3
80006526:	f2 0b 18 00 	cp.b	r11,r9
8000652a:	fe 9b ff fb 	brhi	80006520 <spi_selectChip+0x1c>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000652e:	70 19       	ld.w	r9,r8[0x4]
80006530:	2f 0b       	sub	r11,-16
80006532:	30 1a       	mov	r10,1
80006534:	f4 0b 09 4b 	lsl	r11,r10,r11
80006538:	5c db       	com	r11
8000653a:	12 6b       	and	r11,r9
8000653c:	91 1b       	st.w	r8[0x4],r11
8000653e:	5e fc       	retal	r12
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80006540:	70 19       	ld.w	r9,r8[0x4]
80006542:	b1 6b       	lsl	r11,0x10
80006544:	30 0c       	mov	r12,0
80006546:	ea 1b ff f0 	orh	r11,0xfff0
8000654a:	e8 1b ff ff 	orl	r11,0xffff
8000654e:	12 6b       	and	r11,r9
80006550:	91 1b       	st.w	r8[0x4],r11
80006552:	5e fc       	retal	r12

80006554 <spi_unselectChip>:
  return SPI_OK;
}


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80006554:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80006556:	c0 58       	rjmp	80006560 <spi_unselectChip+0xc>
80006558:	2f f9       	sub	r9,-1
    if (!timeout--) {
8000655a:	e0 49 3a 99 	cp.w	r9,15001
8000655e:	c0 d0       	breq	80006578 <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80006560:	78 48       	ld.w	r8,r12[0x10]
80006562:	ed b8 00 09 	bld	r8,0x9
80006566:	cf 91       	brne	80006558 <spi_unselectChip+0x4>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80006568:	78 18       	ld.w	r8,r12[0x4]
8000656a:	ea 18 00 0f 	orh	r8,0xf
8000656e:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80006570:	fc 18 01 00 	movh	r8,0x100
80006574:	99 08       	st.w	r12[0x0],r8
80006576:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80006578:	5e ff       	retal	1

8000657a <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
8000657a:	eb cd 40 f8 	pushm	r3-r7,lr
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000657e:	30 39       	mov	r9,3
80006580:	f7 38 00 0c 	ld.ub	r8,r11[12]
80006584:	f2 08 18 00 	cp.b	r8,r9
80006588:	e0 8b 00 0a 	brhi	8000659c <spi_setupChipReg+0x22>
      options->stay_act > 1 ||
8000658c:	f7 37 00 0b 	ld.ub	r7,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80006590:	30 1e       	mov	lr,1
80006592:	0e 96       	mov	r6,r7
80006594:	fc 07 18 00 	cp.b	r7,lr
80006598:	e0 88 00 05 	brls	800065a2 <spi_setupChipReg+0x28>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
      break;
8000659c:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
8000659e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
800065a2:	f7 36 00 08 	ld.ub	r6,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800065a6:	30 75       	mov	r5,7
800065a8:	ea 06 18 00 	cp.b	r6,r5
800065ac:	fe 98 ff f8 	brls	8000659c <spi_setupChipReg+0x22>
800065b0:	31 05       	mov	r5,16
800065b2:	ea 06 18 00 	cp.b	r6,r5
800065b6:	fe 9b ff f3 	brhi	8000659c <spi_setupChipReg+0x22>


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
  // int baudDiv = div_ceil((pba_hz + baudrate / 2), baudrate); //this is the old method of getting the baud rate
	int baudDiv = (pba_hz/baudrate); //this is my way.  Must make sure to only specify possible baud rates...
800065ba:	76 15       	ld.w	r5,r11[0x4]
800065bc:	f4 05 0d 04 	divu	r4,r10,r5
  if (baudDiv <= 0 || baudDiv > 255) {
800065c0:	e8 c5 00 01 	sub	r5,r4,1
800065c4:	e0 45 00 fe 	cp.w	r5,254
800065c8:	fe 9b ff ea 	brhi	8000659c <spi_setupChipReg+0x22>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800065cc:	10 93       	mov	r3,r8
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800065ce:	a1 98       	lsr	r8,0x1
  if (baudDiv < 0) {
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800065d0:	30 0a       	mov	r10,0
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800065d2:	f5 d8 d0 01 	bfins	r10,r8,0x0,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800065d6:	f7 38 00 09 	ld.ub	r8,r11[9]
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800065da:	ec 13 00 01 	eorl	r3,0x1
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800065de:	20 86       	sub	r6,8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
800065e0:	5c 84       	casts.h	r4
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800065e2:	f5 d3 d0 21 	bfins	r10,r3,0x1,0x1
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
800065e6:	17 85       	ld.ub	r5,r11[0x0]

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800065e8:	f5 d7 d0 61 	bfins	r10,r7,0x3,0x1
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800065ec:	f5 d6 d0 84 	bfins	r10,r6,0x4,0x4
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
800065f0:	f5 d4 d1 08 	bfins	r10,r4,0x8,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800065f4:	f5 d8 d2 08 	bfins	r10,r8,0x10,0x8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800065f8:	f7 38 00 0a 	ld.ub	r8,r11[10]
800065fc:	f5 d8 d3 08 	bfins	r10,r8,0x18,0x8

  switch(options->reg) {
80006600:	fc 05 18 00 	cp.b	r5,lr
80006604:	c0 c0       	breq	8000661c <spi_setupChipReg+0xa2>
80006606:	c1 13       	brcs	80006628 <spi_setupChipReg+0xae>
80006608:	30 28       	mov	r8,2
8000660a:	f0 05 18 00 	cp.b	r5,r8
8000660e:	c0 a0       	breq	80006622 <spi_setupChipReg+0xa8>
80006610:	f2 05 18 00 	cp.b	r5,r9
80006614:	cc 41       	brne	8000659c <spi_setupChipReg+0x22>
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80006616:	99 fa       	st.w	r12[0x3c],r10
80006618:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
  switch(options->reg) {
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
8000661c:	99 da       	st.w	r12[0x34],r10
8000661e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80006622:	99 ea       	st.w	r12[0x38],r10
80006624:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80006628:	99 ca       	st.w	r12[0x30],r10
8000662a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0

8000662e <spi_enable>:
}


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000662e:	30 18       	mov	r8,1
80006630:	99 08       	st.w	r12[0x0],r8
}
80006632:	5e fc       	retal	r12

80006634 <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80006634:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80006636:	c0 58       	rjmp	80006640 <spi_write+0xc>
80006638:	2f f9       	sub	r9,-1
    if (!timeout--) {
8000663a:	e0 49 3a 99 	cp.w	r9,15001
8000663e:	c0 80       	breq	8000664e <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80006640:	78 48       	ld.w	r8,r12[0x10]
80006642:	ed b8 00 01 	bld	r8,0x1
80006646:	cf 91       	brne	80006638 <spi_write+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80006648:	5c 7b       	castu.h	r11
8000664a:	99 3b       	st.w	r12[0xc],r11
8000664c:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
8000664e:	5e ff       	retal	1

80006650 <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80006650:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80006652:	c0 58       	rjmp	8000665c <spi_read+0xc>
80006654:	2f f9       	sub	r9,-1
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80006656:	e0 49 3a 99 	cp.w	r9,15001
8000665a:	c0 b0       	breq	80006670 <spi_read+0x20>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8000665c:	78 48       	ld.w	r8,r12[0x10]
8000665e:	e2 18 02 01 	andl	r8,0x201,COH
80006662:	e0 48 02 01 	cp.w	r8,513
80006666:	cf 71       	brne	80006654 <spi_read+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80006668:	78 28       	ld.w	r8,r12[0x8]
8000666a:	30 0c       	mov	r12,0
8000666c:	b6 08       	st.h	r11[0x0],r8

  return SPI_OK;
}
8000666e:	5e fc       	retal	r12
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80006670:	5e ff       	retal	1

80006672 <tc_select_external_clock>:


int tc_select_external_clock(volatile avr32_tc_t *tc, unsigned int channel, unsigned int ext_clk_sig_src)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS || ext_clk_sig_src >= 1 << AVR32_TC_BMR_TC0XC0S_SIZE)
80006672:	58 2b       	cp.w	r11,2
80006674:	f9 b8 0b 01 	movhi	r8,1
80006678:	f9 b8 08 00 	movls	r8,0
8000667c:	58 3a       	cp.w	r10,3
8000667e:	f9 b9 0b 01 	movhi	r9,1
80006682:	f9 b9 08 00 	movls	r9,0
80006686:	10 49       	or	r9,r8
80006688:	30 08       	mov	r8,0
8000668a:	f0 09 18 00 	cp.b	r9,r8
8000668e:	c0 20       	breq	80006692 <tc_select_external_clock+0x20>
80006690:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Clear bit-field and set the correct behavior.
  tc->bmr = (tc->bmr & ~(AVR32_TC_BMR_TC0XC0S_MASK << (channel * AVR32_TC_BMR_TC0XC0S_SIZE))) |
80006692:	f8 f8 00 c4 	ld.w	r8,r12[196]
80006696:	a1 7b       	lsl	r11,0x1
80006698:	30 39       	mov	r9,3
8000669a:	f4 0b 09 4a 	lsl	r10,r10,r11
8000669e:	f2 0b 09 4b 	lsl	r11,r9,r11
800066a2:	5c db       	com	r11
800066a4:	10 6b       	and	r11,r8
800066a6:	f7 ea 10 0a 	or	r10,r11,r10
800066aa:	f9 4a 00 c4 	st.w	r12[196],r10
800066ae:	5e fd       	retal	0

800066b0 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800066b0:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800066b2:	76 09       	ld.w	r9,r11[0x0]
800066b4:	58 29       	cp.w	r9,2
800066b6:	e0 8b 00 4b 	brhi	8000674c <tc_init_waveform+0x9c>
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800066ba:	76 18       	ld.w	r8,r11[0x4]
800066bc:	10 9e       	mov	lr,r8
800066be:	e6 1e c0 00 	andh	lr,0xc000,COH
800066c2:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800066c6:	af ba       	sbr	r10,0xf
800066c8:	1c 4a       	or	r10,lr
800066ca:	10 9e       	mov	lr,r8
800066cc:	e6 1e 30 00 	andh	lr,0x3000,COH
800066d0:	1c 4a       	or	r10,lr
800066d2:	10 9e       	mov	lr,r8
800066d4:	e6 1e 0c 00 	andh	lr,0xc00,COH
800066d8:	1c 4a       	or	r10,lr
800066da:	10 9e       	mov	lr,r8
800066dc:	e6 1e 03 00 	andh	lr,0x300,COH
800066e0:	1c 4a       	or	r10,lr
800066e2:	10 9e       	mov	lr,r8
800066e4:	e6 1e 00 c0 	andh	lr,0xc0,COH
800066e8:	1c 4a       	or	r10,lr
800066ea:	10 9e       	mov	lr,r8
800066ec:	e6 1e 00 30 	andh	lr,0x30,COH
800066f0:	1c 4a       	or	r10,lr
800066f2:	10 9e       	mov	lr,r8
800066f4:	e6 1e 00 0c 	andh	lr,0xc,COH
800066f8:	1c 4a       	or	r10,lr
800066fa:	10 9e       	mov	lr,r8
800066fc:	e6 1e 00 03 	andh	lr,0x3,COH
80006700:	1c 4a       	or	r10,lr
80006702:	10 9e       	mov	lr,r8
80006704:	e2 1e 60 00 	andl	lr,0x6000,COH
80006708:	1c 4a       	or	r10,lr
8000670a:	10 9e       	mov	lr,r8
8000670c:	e2 1e 10 00 	andl	lr,0x1000,COH
80006710:	1c 4a       	or	r10,lr
80006712:	10 9e       	mov	lr,r8
80006714:	e2 1e 0c 00 	andl	lr,0xc00,COH
80006718:	1c 4a       	or	r10,lr
8000671a:	10 9e       	mov	lr,r8
8000671c:	e2 1e 03 00 	andl	lr,0x300,COH
80006720:	1c 4a       	or	r10,lr
80006722:	10 9e       	mov	lr,r8
80006724:	e2 1e 00 80 	andl	lr,0x80,COH
80006728:	10 9b       	mov	r11,r8
8000672a:	1c 4a       	or	r10,lr
8000672c:	e2 1b 00 08 	andl	r11,0x8,COH
80006730:	10 9e       	mov	lr,r8
80006732:	a5 69       	lsl	r9,0x4
80006734:	e2 1e 00 40 	andl	lr,0x40,COH
80006738:	2f f9       	sub	r9,-1
8000673a:	1c 4a       	or	r10,lr
8000673c:	e2 18 00 30 	andl	r8,0x30,COH
80006740:	f5 e8 10 08 	or	r8,r10,r8
80006744:	16 48       	or	r8,r11
80006746:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
8000674a:	d8 0a       	popm	pc,r12=0


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000674c:	dc 0a       	popm	pc,r12=-1

8000674e <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000674e:	58 2b       	cp.w	r11,2
80006750:	e0 8b 00 07 	brhi	8000675e <tc_start+0x10>
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80006754:	a7 6b       	lsl	r11,0x6
80006756:	16 0c       	add	r12,r11
80006758:	30 58       	mov	r8,5
8000675a:	99 08       	st.w	r12[0x0],r8
8000675c:	5e fd       	retal	0


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000675e:	5e fe       	retal	-1

80006760 <tc_stop>:


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006760:	58 2b       	cp.w	r11,2
80006762:	e0 8b 00 07 	brhi	80006770 <tc_stop+0x10>
    return TC_INVALID_ARGUMENT;

  // Disable the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_CLKDIS_MASK;
80006766:	a7 6b       	lsl	r11,0x6
80006768:	16 0c       	add	r12,r11
8000676a:	30 28       	mov	r8,2
8000676c:	99 08       	st.w	r12[0x0],r8
8000676e:	5e fd       	retal	0


int tc_stop(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006770:	5e fe       	retal	-1

80006772 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006772:	58 2b       	cp.w	r11,2
80006774:	e0 8b 00 07 	brhi	80006782 <tc_read_sr+0x10>
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80006778:	a7 6b       	lsl	r11,0x6
8000677a:	2e 0b       	sub	r11,-32
8000677c:	16 0c       	add	r12,r11
8000677e:	78 0c       	ld.w	r12,r12[0x0]
}
80006780:	5e fc       	retal	r12


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006782:	5e fe       	retal	-1

80006784 <tc_write_ra>:


int tc_write_ra(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006784:	58 2b       	cp.w	r11,2
80006786:	e0 8b 00 1a 	brhi	800067ba <tc_write_ra+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
8000678a:	f6 08 15 04 	lsl	r8,r11,0x4
8000678e:	2f f8       	sub	r8,-1
80006790:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80006794:	ed b8 00 0f 	bld	r8,0xf
80006798:	c0 e1       	brne	800067b4 <tc_write_ra+0x30>
    Wr_bitfield(tc->channel[channel].ra, AVR32_TC_RA_MASK, value);
8000679a:	a7 6b       	lsl	r11,0x6
8000679c:	f8 0b 00 0b 	add	r11,r12,r11
800067a0:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
800067a4:	2e cb       	sub	r11,-20
800067a6:	76 08       	ld.w	r8,r11[0x0]
800067a8:	e0 18 00 00 	andl	r8,0x0
800067ac:	f9 e8 10 08 	or	r8,r12,r8
800067b0:	97 08       	st.w	r11[0x0],r8

  return value;
}
800067b2:	5e fc       	retal	r12
800067b4:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
800067b8:	5e fc       	retal	r12


int tc_write_ra(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800067ba:	5e fe       	retal	-1

800067bc <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800067bc:	58 2b       	cp.w	r11,2
800067be:	e0 8b 00 1a 	brhi	800067f2 <tc_write_rc+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800067c2:	f6 08 15 04 	lsl	r8,r11,0x4
800067c6:	2f f8       	sub	r8,-1
800067c8:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800067cc:	ed b8 00 0f 	bld	r8,0xf
800067d0:	c0 e1       	brne	800067ec <tc_write_rc+0x30>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800067d2:	a7 6b       	lsl	r11,0x6
800067d4:	f8 0b 00 0b 	add	r11,r12,r11
800067d8:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
800067dc:	2e 4b       	sub	r11,-28
800067de:	76 08       	ld.w	r8,r11[0x0]
800067e0:	e0 18 00 00 	andl	r8,0x0
800067e4:	f9 e8 10 08 	or	r8,r12,r8
800067e8:	97 08       	st.w	r11[0x0],r8

  return value;
}
800067ea:	5e fc       	retal	r12
800067ec:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
800067f0:	5e fc       	retal	r12


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800067f2:	5e fe       	retal	-1

800067f4 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800067f4:	d4 31       	pushm	r0-r7,lr
800067f6:	20 3d       	sub	sp,12
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800067f8:	e1 b8 00 00 	mfsr	r8,0x0
800067fc:	50 08       	stdsp	sp[0x0],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800067fe:	58 2b       	cp.w	r11,2
80006800:	e0 8b 00 74 	brhi	800068e8 <tc_configure_interrupts+0xf4>
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80006804:	74 0e       	ld.w	lr,r10[0x0]
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80006806:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000680a:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000680e:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80006812:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80006816:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000681a:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000681e:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80006822:	e6 02 15 06 	lsl	r2,r3,0x6
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80006826:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000682a:	e5 e8 10 72 	or	r2,r2,r8<<0x7
8000682e:	12 42       	or	r2,r9
80006830:	e5 e4 10 52 	or	r2,r2,r4<<0x5
80006834:	e5 e5 10 42 	or	r2,r2,r5<<0x4
80006838:	e5 e6 10 32 	or	r2,r2,r6<<0x3
8000683c:	e5 e7 10 22 	or	r2,r2,r7<<0x2
80006840:	e5 ee 10 12 	or	r2,r2,lr<<0x1
80006844:	50 22       	stdsp	sp[0x8],r2
80006846:	f6 02 15 06 	lsl	r2,r11,0x6
8000684a:	40 21       	lddsp	r1,sp[0x8]
8000684c:	f8 02 00 00 	add	r0,r12,r2
80006850:	2d c0       	sub	r0,-36
80006852:	81 01       	st.w	r0[0x0],r1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80006854:	40 01       	lddsp	r1,sp[0x0]
80006856:	ee 11 00 01 	eorh	r1,0x1
8000685a:	e3 d1 c2 01 	bfextu	r1,r1,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000685e:	c4 71       	brne	800068ec <tc_configure_interrupts+0xf8>
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006860:	ec 19 00 01 	eorl	r9,0x1
80006864:	e0 6a 00 80 	mov	r10,128
80006868:	58 08       	cp.w	r8,0
8000686a:	f4 08 17 00 	moveq	r8,r10
8000686e:	f9 b8 01 00 	movne	r8,0
80006872:	12 48       	or	r8,r9
80006874:	f8 02 00 02 	add	r2,r12,r2
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80006878:	58 03       	cp.w	r3,0
8000687a:	f9 b3 00 40 	moveq	r3,64
8000687e:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80006882:	58 04       	cp.w	r4,0
80006884:	f9 b4 00 20 	moveq	r4,32
80006888:	f9 b4 01 00 	movne	r4,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000688c:	f1 e3 10 03 	or	r3,r8,r3
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80006890:	58 05       	cp.w	r5,0
80006892:	f9 b5 00 10 	moveq	r5,16
80006896:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000689a:	58 06       	cp.w	r6,0
8000689c:	f9 b6 00 08 	moveq	r6,8
800068a0:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800068a4:	58 07       	cp.w	r7,0
800068a6:	f9 b7 00 04 	moveq	r7,4
800068aa:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800068ae:	58 0e       	cp.w	lr,0
800068b0:	f9 be 00 02 	moveq	lr,2
800068b4:	f9 be 01 00 	movne	lr,0
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800068b8:	a7 6b       	lsl	r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800068ba:	2d 82       	sub	r2,-40
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800068bc:	2e 0b       	sub	r11,-32
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800068be:	e7 e4 10 04 	or	r4,r3,r4
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800068c2:	16 0c       	add	r12,r11
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800068c4:	e9 e5 10 05 	or	r5,r4,r5
800068c8:	eb e6 10 06 	or	r6,r5,r6
800068cc:	ed e7 10 07 	or	r7,r6,r7
800068d0:	ef ee 10 0e 	or	lr,r7,lr
800068d4:	85 0e       	st.w	r2[0x0],lr
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800068d6:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800068d8:	58 01       	cp.w	r1,0
800068da:	c0 41       	brne	800068e2 <tc_configure_interrupts+0xee>
800068dc:	02 9c       	mov	r12,r1

  return 0;
}
800068de:	2f dd       	sub	sp,-12
800068e0:	d8 32       	popm	r0-r7,pc
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
  if (global_interrupt_enabled) Enable_global_interrupt();
800068e2:	d5 03       	csrf	0x10
800068e4:	2f dd       	sub	sp,-12
800068e6:	d8 3a       	popm	r0-r7,pc,r12=0
int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800068e8:	2f dd       	sub	sp,-12
800068ea:	dc 3a       	popm	r0-r7,pc,r12=-1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800068ec:	d3 03       	ssrf	0x10
800068ee:	74 0e       	ld.w	lr,r10[0x0]
800068f0:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
800068f4:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
800068f8:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
800068fc:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
80006900:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
80006904:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
80006908:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
8000690c:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
80006910:	ca 8b       	rjmp	80006860 <tc_configure_interrupts+0x6c>
80006912:	d7 03       	nop

80006914 <get_LCD_cmd>:
		return false;
	}
}

char* get_LCD_cmd(void)
{
80006914:	d4 21       	pushm	r4-r7,lr
	if((LCD_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
80006916:	fe 79 28 00 	mov	r9,-55296
8000691a:	72 58       	ld.w	r8,r9[0x14]
8000691c:	ed b8 00 08 	bld	r8,0x8
80006920:	c4 61       	brne	800069ac <get_LCD_cmd+0x98>
	{//timeout detected
		LCD_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
80006922:	72 08       	ld.w	r8,r9[0x0]
80006924:	ab b8       	sbr	r8,0xb
80006926:	93 08       	st.w	r9[0x0],r8
		LCD_USART->rtor=230;
80006928:	e0 68 00 e6 	mov	r8,230
8000692c:	93 98       	st.w	r9[0x24],r8
		
		cmd_ptr=(char *)(AVR32_PDCA.channel[LCD_USART_RX_PDCA_CHANNEL].mar-1);
8000692e:	4a 17       	lddpc	r7,800069b0 <get_LCD_cmd+0x9c>
80006930:	fc 78 00 00 	mov	r8,-196608
80006934:	f0 f8 01 40 	ld.w	r8,r8[320]
80006938:	20 18       	sub	r8,1
8000693a:	8f 08       	st.w	r7[0x0],r8
		if((*(cmd_ptr)==0x0D) && ((cmd_ptr)!=(&LCD_USART_buffer[0])))
8000693c:	30 d9       	mov	r9,13
8000693e:	11 84       	ld.ub	r4,r8[0x0]
80006940:	08 95       	mov	r5,r4
80006942:	f2 04 18 00 	cp.b	r4,r9
80006946:	c0 e0       	breq	80006962 <get_LCD_cmd+0x4e>
			
			pdca_enable(LCD_USART_RX_PDCA_CHANNEL);
			return cmd_ptr;
		}
		
		pdca_disable(LCD_USART_RX_PDCA_CHANNEL);
80006948:	30 5c       	mov	r12,5
8000694a:	fe b0 ee c9 	rcall	800046dc <pdca_disable>
		pdca_load_channel(LCD_USART_RX_PDCA_CHANNEL, (&LCD_USART_buffer),(uint32_t)(sizeof(LCD_USART_buffer)));
8000694e:	34 0a       	mov	r10,64
80006950:	49 9b       	lddpc	r11,800069b4 <get_LCD_cmd+0xa0>
80006952:	30 5c       	mov	r12,5
80006954:	fe b0 ee e9 	rcall	80004726 <pdca_load_channel>
		pdca_enable(LCD_USART_RX_PDCA_CHANNEL);
80006958:	30 5c       	mov	r12,5
8000695a:	fe b0 ee ce 	rcall	800046f6 <pdca_enable>
8000695e:	49 7c       	lddpc	r12,800069b8 <get_LCD_cmd+0xa4>
		return "false";
	}
	return "false";
}
80006960:	d8 22       	popm	r4-r7,pc
	{//timeout detected
		LCD_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
		LCD_USART->rtor=230;
		
		cmd_ptr=(char *)(AVR32_PDCA.channel[LCD_USART_RX_PDCA_CHANNEL].mar-1);
		if((*(cmd_ptr)==0x0D) && ((cmd_ptr)!=(&LCD_USART_buffer[0])))
80006962:	49 56       	lddpc	r6,800069b4 <get_LCD_cmd+0xa0>
80006964:	0c 38       	cp.w	r8,r6
80006966:	cf 10       	breq	80006948 <get_LCD_cmd+0x34>
		{
			pdca_disable(LCD_USART_RX_PDCA_CHANNEL);
80006968:	30 5c       	mov	r12,5
8000696a:	fe b0 ee b9 	rcall	800046dc <pdca_disable>
			pdca_load_channel(LCD_USART_RX_PDCA_CHANNEL, (&LCD_USART_buffer),(uint32_t)(sizeof(LCD_USART_buffer)));
8000696e:	34 0a       	mov	r10,64
80006970:	0c 9b       	mov	r11,r6
80006972:	30 5c       	mov	r12,5
80006974:	fe b0 ee d9 	rcall	80004726 <pdca_load_channel>
			
			*(cmd_ptr+1)=0x00;
80006978:	6e 08       	ld.w	r8,r7[0x0]
8000697a:	30 09       	mov	r9,0
8000697c:	b0 99       	st.b	r8[0x1],r9
			cmd_ptr--;
8000697e:	6e 09       	ld.w	r9,r7[0x0]
80006980:	20 19       	sub	r9,1
80006982:	8f 09       	st.w	r7[0x0],r9
			while((*(cmd_ptr-1)!=0x0D) && ((cmd_ptr)!=(&LCD_USART_buffer[0])))
80006984:	12 98       	mov	r8,r9
80006986:	11 7a       	ld.ub	r10,--r8
80006988:	e8 0a 18 00 	cp.b	r10,r4
8000698c:	c0 d1       	brne	800069a6 <get_LCD_cmd+0x92>
			{
				cmd_ptr--;
			}
			
			pdca_enable(LCD_USART_RX_PDCA_CHANNEL);
8000698e:	30 5c       	mov	r12,5
80006990:	fe b0 ee b3 	rcall	800046f6 <pdca_enable>
			return cmd_ptr;
80006994:	6e 0c       	ld.w	r12,r7[0x0]
80006996:	d8 22       	popm	r4-r7,pc
			
			*(cmd_ptr+1)=0x00;
			cmd_ptr--;
			while((*(cmd_ptr-1)!=0x0D) && ((cmd_ptr)!=(&LCD_USART_buffer[0])))
			{
				cmd_ptr--;
80006998:	8f 08       	st.w	r7[0x0],r8
			pdca_disable(LCD_USART_RX_PDCA_CHANNEL);
			pdca_load_channel(LCD_USART_RX_PDCA_CHANNEL, (&LCD_USART_buffer),(uint32_t)(sizeof(LCD_USART_buffer)));
			
			*(cmd_ptr+1)=0x00;
			cmd_ptr--;
			while((*(cmd_ptr-1)!=0x0D) && ((cmd_ptr)!=(&LCD_USART_buffer[0])))
8000699a:	11 79       	ld.ub	r9,--r8
8000699c:	e8 09 18 00 	cp.b	r9,r4
800069a0:	cf 70       	breq	8000698e <get_LCD_cmd+0x7a>
	{
		return false;
	}
}

char* get_LCD_cmd(void)
800069a2:	f0 c9 ff ff 	sub	r9,r8,-1
			pdca_disable(LCD_USART_RX_PDCA_CHANNEL);
			pdca_load_channel(LCD_USART_RX_PDCA_CHANNEL, (&LCD_USART_buffer),(uint32_t)(sizeof(LCD_USART_buffer)));
			
			*(cmd_ptr+1)=0x00;
			cmd_ptr--;
			while((*(cmd_ptr-1)!=0x0D) && ((cmd_ptr)!=(&LCD_USART_buffer[0])))
800069a6:	0c 39       	cp.w	r9,r6
800069a8:	cf 81       	brne	80006998 <get_LCD_cmd+0x84>
800069aa:	cf 2b       	rjmp	8000698e <get_LCD_cmd+0x7a>
	}
}

char* get_LCD_cmd(void)
{
	if((LCD_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
800069ac:	48 3c       	lddpc	r12,800069b8 <get_LCD_cmd+0xa4>
800069ae:	d8 22       	popm	r4-r7,pc
800069b0:	00 00       	add	r0,r0
800069b2:	95 90       	st.w	r10[0x24],r0
800069b4:	00 00       	add	r0,r0
800069b6:	13 24       	ld.uh	r4,r9++
800069b8:	80 00       	ld.sh	r0,r0[0x0]
800069ba:	e3 ac eb cd 	cop	cp7,cr11,cr12,cr13,0x38

800069bc <get_experiment_from_host_to_SD>:
800069bc:	eb cd 40 80 	pushm	r7,lr
800069c0:	fc 78 14 00 	mov	r8,-191488
800069c4:	30 07       	mov	r7,0
800069c6:	30 4c       	mov	r12,4

//this gets an experiment, plus additional data, from the host
//A full cluster will be transferred
void get_experiment_from_host_to_SD(void)
{
	USB_USART->rtor=0; //going to use PDCA for receiving data, so disable receive timeout
800069c8:	91 97       	st.w	r8[0x24],r7
	pdca_disable(USB_USART_RX_PDCA_CHANNEL);
800069ca:	fe b0 ee 89 	rcall	800046dc <pdca_disable>
	my_pdca_init_channel(USB_USART_RX_PDCA_CHANNEL, (uint32_t)(&bank0[0]),samplebuffer_size, USB_USART_RX_PDCA_PID,   0,  0, PDCA_TRANSFER_SIZE_BYTE);
800069ce:	0e 98       	mov	r8,r7
800069d0:	1a d7       	st.w	--sp,r7
800069d2:	30 39       	mov	r9,3
800069d4:	1a d7       	st.w	--sp,r7
800069d6:	e0 6a 40 00 	mov	r10,16384
800069da:	4b 2b       	lddpc	r11,80006aa0 <get_experiment_from_host_to_SD+0xe4>
800069dc:	30 4c       	mov	r12,4
800069de:	fe b0 e6 9f 	rcall	8000371c <my_pdca_init_channel>
	pdca_enable(USB_USART_RX_PDCA_CHANNEL);
800069e2:	30 4c       	mov	r12,4
800069e4:	fe b0 ee 89 	rcall	800046f6 <pdca_enable>
800069e8:	2f ed       	sub	sp,-8
	
	while(!(pdca_get_transfer_status(USB_USART_RX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK)); //wait until transfer is done
800069ea:	30 4c       	mov	r12,4
800069ec:	fe b0 ee 92 	rcall	80004710 <pdca_get_transfer_status>
800069f0:	ed bc 00 01 	bld	r12,0x1
800069f4:	cf b1       	brne	800069ea <get_experiment_from_host_to_SD+0x2e>
	
	pdca_disable(USB_USART_RX_PDCA_CHANNEL);	//reset USART RX channel to receive host commands
800069f6:	30 4c       	mov	r12,4
800069f8:	fe b0 ee 72 	rcall	800046dc <pdca_disable>
	
	USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//changing back to receiving command mode
800069fc:	fc 78 14 00 	mov	r8,-191488
80006a00:	70 09       	ld.w	r9,r8[0x0]
80006a02:	ab b9       	sbr	r9,0xb
80006a04:	91 09       	st.w	r8[0x0],r9
	USB_USART->rtor=15000; //so reenable timeout
80006a06:	e0 69 3a 98 	mov	r9,15000
	
	pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
80006a0a:	34 0a       	mov	r10,64
	while(!(pdca_get_transfer_status(USB_USART_RX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK)); //wait until transfer is done
	
	pdca_disable(USB_USART_RX_PDCA_CHANNEL);	//reset USART RX channel to receive host commands
	
	USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//changing back to receiving command mode
	USB_USART->rtor=15000; //so reenable timeout
80006a0c:	91 99       	st.w	r8[0x24],r9
	
	pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
80006a0e:	4a 6b       	lddpc	r11,80006aa4 <get_experiment_from_host_to_SD+0xe8>
80006a10:	30 4c       	mov	r12,4
80006a12:	fe b0 ee 8a 	rcall	80004726 <pdca_load_channel>
	pdca_enable(USB_USART_RX_PDCA_CHANNEL);
80006a16:	30 4c       	mov	r12,4
80006a18:	fe b0 ee 6f 	rcall	800046f6 <pdca_enable>
	
	spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80006a1c:	30 0b       	mov	r11,0
80006a1e:	fc 7c 18 00 	mov	r12,-190464
80006a22:	fe b0 fd 71 	rcall	80006504 <spi_selectChip>

static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80006a26:	fc 79 18 00 	mov	r9,-190464
	SD_MMC_SPI->tdr =0xFF;
80006a2a:	e0 6c 00 ff 	mov	r12,255
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80006a2e:	12 9b       	mov	r11,r9
	while(check_busy_fast()!=0xFF);
80006a30:	3f fa       	mov	r10,-1

static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80006a32:	72 48       	ld.w	r8,r9[0x10]
80006a34:	ed b8 00 01 	bld	r8,0x1
80006a38:	cf d1       	brne	80006a32 <get_experiment_from_host_to_SD+0x76>
	SD_MMC_SPI->tdr =0xFF;
80006a3a:	93 3c       	st.w	r9[0xc],r12
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80006a3c:	72 48       	ld.w	r8,r9[0x10]
80006a3e:	ed b8 00 09 	bld	r8,0x9
80006a42:	cf d1       	brne	80006a3c <get_experiment_from_host_to_SD+0x80>
	//my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	return SD_MMC_SPI->rdr;
80006a44:	76 28       	ld.w	r8,r11[0x8]
80006a46:	f4 08 18 00 	cp.b	r8,r10
80006a4a:	cf 41       	brne	80006a32 <get_experiment_from_host_to_SD+0x76>
	spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80006a4c:	30 0b       	mov	r11,0
80006a4e:	fc 7c 18 00 	mov	r12,-190464
80006a52:	fe b0 fd 81 	rcall	80006554 <spi_unselectChip>
	
	my_SD_SPI_block_write_multi(bank0,experiment_base_address,blocks_per_cluster);	//write data to SD
80006a56:	32 0a       	mov	r10,32
80006a58:	30 0b       	mov	r11,0
80006a5a:	49 2c       	lddpc	r12,80006aa0 <get_experiment_from_host_to_SD+0xe4>
80006a5c:	fe b0 e8 56 	rcall	80003b08 <my_SD_SPI_block_write_multi>
	
	spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80006a60:	30 0b       	mov	r11,0
80006a62:	fc 7c 18 00 	mov	r12,-190464
80006a66:	fe b0 fd 4f 	rcall	80006504 <spi_selectChip>

static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80006a6a:	fc 79 18 00 	mov	r9,-190464
	SD_MMC_SPI->tdr =0xFF;
80006a6e:	e0 6c 00 ff 	mov	r12,255
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80006a72:	12 9b       	mov	r11,r9
	while(check_busy_fast()!=0xFF);
80006a74:	3f fa       	mov	r10,-1

static inline uint8_t check_busy_fast(void)
{
	//my_SPI_selectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	//SD_MMC_SPI->cr=AVR32_SPI_CR_FLUSHFIFO_MASK;  //I DONT USE THE FIFO
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TDRE_MASK));
80006a76:	72 48       	ld.w	r8,r9[0x10]
80006a78:	ed b8 00 01 	bld	r8,0x1
80006a7c:	cf d1       	brne	80006a76 <get_experiment_from_host_to_SD+0xba>
	SD_MMC_SPI->tdr =0xFF;
80006a7e:	93 3c       	st.w	r9[0xc],r12
	while (!(SD_MMC_SPI->sr & AVR32_SPI_SR_TXEMPTY_MASK));
80006a80:	72 48       	ld.w	r8,r9[0x10]
80006a82:	ed b8 00 09 	bld	r8,0x9
80006a86:	cf d1       	brne	80006a80 <get_experiment_from_host_to_SD+0xc4>
	//my_SPI_deselectchip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
	return SD_MMC_SPI->rdr;
80006a88:	76 28       	ld.w	r8,r11[0x8]
80006a8a:	f4 08 18 00 	cp.b	r8,r10
80006a8e:	cf 41       	brne	80006a76 <get_experiment_from_host_to_SD+0xba>
	spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80006a90:	30 0b       	mov	r11,0
80006a92:	fc 7c 18 00 	mov	r12,-190464
80006a96:	fe b0 fd 5f 	rcall	80006554 <spi_unselectChip>
}
80006a9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a9e:	d7 03       	nop
80006aa0:	00 00       	add	r0,r0
80006aa2:	53 7c       	stdsp	sp[0xdc],r12
80006aa4:	00 00       	add	r0,r0
80006aa6:	95 94       	st.w	r10[0x24],r4

80006aa8 <hostmode_run>:
80006aa8:	d4 31       	pushm	r0-r7,lr
80006aaa:	fc 78 14 00 	mov	r8,-191488
80006aae:	30 07       	mov	r7,0
80006ab0:	30 4c       	mov	r12,4
80006ab2:	91 97       	st.w	r8[0x24],r7
80006ab4:	fe b0 ee 14 	rcall	800046dc <pdca_disable>
80006ab8:	0e 98       	mov	r8,r7
80006aba:	1a d7       	st.w	--sp,r7
80006abc:	30 39       	mov	r9,3
80006abe:	1a d7       	st.w	--sp,r7
80006ac0:	e0 6a 03 98 	mov	r10,920
80006ac4:	fe fb 02 44 	ld.w	r11,pc[580]
{
	//first receive and verify full experiment
	//set USB PDCA to store experiment
	USB_USART->rtor=0;	//disable timeout
	pdca_disable(USB_USART_RX_PDCA_CHANNEL);
	my_pdca_init_channel(USB_USART_RX_PDCA_CHANNEL, (uint32_t)(&experiment.MODE),(uint32_t)(sizeof(experiment)), USB_USART_RX_PDCA_PID,   0,  0, PDCA_TRANSFER_SIZE_BYTE);
80006ac8:	30 4c       	mov	r12,4
80006aca:	fe b0 e6 29 	rcall	8000371c <my_pdca_init_channel>
	pdca_enable(USB_USART_RX_PDCA_CHANNEL);
80006ace:	30 4c       	mov	r12,4
80006ad0:	fe b0 ee 13 	rcall	800046f6 <pdca_enable>
80006ad4:	2f ed       	sub	sp,-8
	
	while(!(pdca_get_transfer_status(USB_USART_RX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK)); //wait until transfer is done
80006ad6:	30 4c       	mov	r12,4
80006ad8:	fe b0 ee 1c 	rcall	80004710 <pdca_get_transfer_status>
80006adc:	ed bc 00 01 	bld	r12,0x1
80006ae0:	cf b1       	brne	80006ad6 <hostmode_run+0x2e>
	
	if(validate_sequences()==false)
80006ae2:	fe b0 f3 0b 	rcall	800050f8 <validate_sequences>
80006ae6:	18 97       	mov	r7,r12
80006ae8:	e0 80 00 ec 	breq	80006cc0 <hostmode_run+0x218>
		USB_USART->rtor=15000;	//set to timeout in 1ms
		
		return 0;
	}
	
	usart_write_line(USB_USART, "goodexp\n");
80006aec:	fe fb 02 20 	ld.w	r11,pc[544]
80006af0:	fc 7c 14 00 	mov	r12,-191488
80006af4:	e0 a0 06 57 	rcall	800077a2 <usart_write_line>
	pdca_disable(USB_USART_TX_PDCA_CHANNEL);
80006af8:	30 3c       	mov	r12,3
80006afa:	fe b0 ed f1 	rcall	800046dc <pdca_disable>
	gettruesequence();
80006afe:	fe b0 ef f9 	rcall	80004af0 <gettruesequence>
	my_pdca_init_channel(USB_USART_TX_PDCA_CHANNEL, (uint32_t)(&experiment.MODE),(uint32_t)(sizeof(experiment)), USB_USART_TX_PDCA_PID,   0,  0, PDCA_TRANSFER_SIZE_BYTE);
80006b02:	30 0a       	mov	r10,0
80006b04:	30 e9       	mov	r9,14
80006b06:	1a da       	st.w	--sp,r10
80006b08:	14 98       	mov	r8,r10
80006b0a:	1a da       	st.w	--sp,r10
80006b0c:	fe fb 01 fc 	ld.w	r11,pc[508]
80006b10:	e0 6a 03 98 	mov	r10,920
80006b14:	30 3c       	mov	r12,3
80006b16:	fe b0 e6 03 	rcall	8000371c <my_pdca_init_channel>
	pdca_enable(USB_USART_TX_PDCA_CHANNEL);
80006b1a:	30 3c       	mov	r12,3
80006b1c:	fe b0 ed ed 	rcall	800046f6 <pdca_enable>
	while(!(pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK)); //wait until transfer is done
80006b20:	2f ed       	sub	sp,-8
80006b22:	30 3c       	mov	r12,3
80006b24:	fe b0 ed f6 	rcall	80004710 <pdca_get_transfer_status>
80006b28:	ed bc 00 01 	bld	r12,0x1
	pdca_disable(USB_USART_TX_PDCA_CHANNEL);
80006b2c:	cf b1       	brne	80006b22 <hostmode_run+0x7a>
80006b2e:	30 3c       	mov	r12,3
80006b30:	fe b0 ed d6 	rcall	800046dc <pdca_disable>
	
	//change back USB USART to accept command tokens
	my_pdca_init_channel(USB_USART_RX_PDCA_CHANNEL, (uint32_t)(&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)),USB_USART_RX_PDCA_PID,0,0, PDCA_TRANSFER_SIZE_BYTE);
80006b34:	30 0b       	mov	r11,0
80006b36:	30 39       	mov	r9,3
80006b38:	1a db       	st.w	--sp,r11
80006b3a:	16 98       	mov	r8,r11
80006b3c:	1a db       	st.w	--sp,r11
80006b3e:	34 0a       	mov	r10,64
80006b40:	30 4c       	mov	r12,4
80006b42:	4f 46       	lddpc	r6,80006d10 <hostmode_run+0x268>
80006b44:	0c 9b       	mov	r11,r6
80006b46:	fe b0 e5 eb 	rcall	8000371c <my_pdca_init_channel>
	pdca_enable(USB_USART_RX_PDCA_CHANNEL);
80006b4a:	30 4c       	mov	r12,4
80006b4c:	fe b0 ed d5 	rcall	800046f6 <pdca_enable>
	
	for(uint8_t i=0;i<Nsequences_max;i++)
	{
		usart_putchar(USB_USART,(uint8_t)(t_experiment.t_sequence[i].clusters_per_sequence));
80006b50:	4f 15       	lddpc	r5,80006d14 <hostmode_run+0x26c>
80006b52:	fc 7c 14 00 	mov	r12,-191488
80006b56:	eb 3b 00 61 	ld.ub	r11,r5[97]
80006b5a:	e0 a0 06 16 	rcall	80007786 <usart_putchar>
80006b5e:	eb 3b 00 c5 	ld.ub	r11,r5[197]
80006b62:	fc 7c 14 00 	mov	r12,-191488
80006b66:	e0 a0 06 10 	rcall	80007786 <usart_putchar>
80006b6a:	eb 3b 01 29 	ld.ub	r11,r5[297]
80006b6e:	fc 7c 14 00 	mov	r12,-191488
80006b72:	e0 a0 06 0a 	rcall	80007786 <usart_putchar>
80006b76:	eb 3b 01 8d 	ld.ub	r11,r5[397]
80006b7a:	fc 7c 14 00 	mov	r12,-191488
80006b7e:	e0 a0 06 04 	rcall	80007786 <usart_putchar>
80006b82:	eb 3b 01 f1 	ld.ub	r11,r5[497]
80006b86:	fc 7c 14 00 	mov	r12,-191488
80006b8a:	e0 a0 05 fe 	rcall	80007786 <usart_putchar>
80006b8e:	eb 3b 02 55 	ld.ub	r11,r5[597]
80006b92:	fc 7c 14 00 	mov	r12,-191488
80006b96:	e0 a0 05 f8 	rcall	80007786 <usart_putchar>
80006b9a:	eb 3b 02 b9 	ld.ub	r11,r5[697]
80006b9e:	fc 7c 14 00 	mov	r12,-191488
80006ba2:	e0 a0 05 f2 	rcall	80007786 <usart_putchar>
	}
	
	USB_USART->cr|=AVR32_USART_CR_STTTO_MASK; //set timeout to stop until new character is received
80006ba6:	fc 74 14 00 	mov	r4,-191488
	my_pdca_init_channel(USB_USART_RX_PDCA_CHANNEL, (uint32_t)(&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)),USB_USART_RX_PDCA_PID,0,0, PDCA_TRANSFER_SIZE_BYTE);
	pdca_enable(USB_USART_RX_PDCA_CHANNEL);
	
	for(uint8_t i=0;i<Nsequences_max;i++)
	{
		usart_putchar(USB_USART,(uint8_t)(t_experiment.t_sequence[i].clusters_per_sequence));
80006baa:	eb 3b 03 1d 	ld.ub	r11,r5[797]
80006bae:	08 9c       	mov	r12,r4
80006bb0:	e0 a0 05 eb 	rcall	80007786 <usart_putchar>
	}
	
	USB_USART->cr|=AVR32_USART_CR_STTTO_MASK; //set timeout to stop until new character is received
80006bb4:	68 08       	ld.w	r8,r4[0x0]
80006bb6:	ab b8       	sbr	r8,0xb
	return "false";
}

char* get_HOST_cmd(void)
{
	if((USB_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
80006bb8:	89 08       	st.w	r4[0x0],r8
	{
		usart_putchar(USB_USART,(uint8_t)(t_experiment.t_sequence[i].clusters_per_sequence));
	}
	
	USB_USART->cr|=AVR32_USART_CR_STTTO_MASK; //set timeout to stop until new character is received
	USB_USART->rtor=15000;	//set to timeout in 1ms
80006bba:	08 97       	mov	r7,r4
80006bbc:	e0 61 3a 98 	mov	r1,15000
	
	reset_SD_sink_ptr();
80006bc0:	89 91       	st.w	r4[0x24],r1
80006bc2:	fe b0 e9 65 	rcall	80003e8c <reset_SD_sink_ptr>
	uint32_t SD_read_ptr=data_base_address;
	
	DAC1->dr0=t_experiment.t_Vgain; //set gain of RF amp
80006bc6:	eb 19 03 34 	ld.uh	r9,r5[820]
80006bca:	fe 78 6c 00 	mov	r8,-37888
80006bce:	2f ed       	sub	sp,-8
		{
			HOSTCMD=get_HOST_cmd();
			if(strcmp((HOSTCMD+1),"sequencetoken")==0)
			{
				uint8_t sequenceindex=*HOSTCMD;
				t_currentsequence=t_experiment.t_sequence[sequenceindex];
80006bd0:	91 b9       	st.w	r8[0x2c],r9
	USB_USART->rtor=15000;	//set to timeout in 1ms
	
	reset_SD_sink_ptr();
	uint32_t SD_read_ptr=data_base_address;
	
	DAC1->dr0=t_experiment.t_Vgain; //set gain of RF amp
80006bd2:	4d 20       	lddpc	r0,80006d18 <hostmode_run+0x270>
80006bd4:	e0 63 40 00 	mov	r3,16384
	return "false";
}

char* get_HOST_cmd(void)
{
	if((USB_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
80006bd8:	4d 14       	lddpc	r4,80006d1c <hostmode_run+0x274>
80006bda:	6e 58       	ld.w	r8,r7[0x14]
80006bdc:	ed b8 00 08 	bld	r8,0x8
	{//timeout detected
		USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
80006be0:	cf d1       	brne	80006bda <hostmode_run+0x132>
80006be2:	6e 08       	ld.w	r8,r7[0x0]
80006be4:	ab b8       	sbr	r8,0xb
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
80006be6:	8f 08       	st.w	r7[0x0],r8
char* get_HOST_cmd(void)
{
	if((USB_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
	{//timeout detected
		USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
80006be8:	30 4c       	mov	r12,4
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
80006bea:	8f 91       	st.w	r7[0x24],r1
80006bec:	fe b0 ed 78 	rcall	800046dc <pdca_disable>
		cmd_ptr=(char *)(AVR32_PDCA.channel[USB_USART_RX_PDCA_CHANNEL].mar);
80006bf0:	30 09       	mov	r9,0
80006bf2:	fc 78 00 00 	mov	r8,-196608
80006bf6:	f0 f8 01 00 	ld.w	r8,r8[256]
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
		cmd_ptr=&host_USART_buffer[0];
		
		pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
80006bfa:	b0 89       	st.b	r8[0x0],r9
80006bfc:	34 0a       	mov	r10,64
80006bfe:	0c 9b       	mov	r11,r6
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
		cmd_ptr=(char *)(AVR32_PDCA.channel[USB_USART_RX_PDCA_CHANNEL].mar);
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
		cmd_ptr=&host_USART_buffer[0];
80006c00:	30 4c       	mov	r12,4
		
		pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
80006c02:	89 06       	st.w	r4[0x0],r6
80006c04:	fe b0 ed 91 	rcall	80004726 <pdca_load_channel>
		pdca_enable(USB_USART_RX_PDCA_CHANNEL);
80006c08:	30 4c       	mov	r12,4
80006c0a:	fe b0 ed 76 	rcall	800046f6 <pdca_enable>
		return cmd_ptr;
80006c0e:	4c 5b       	lddpc	r11,80006d20 <hostmode_run+0x278>
	{
		return false;
	}
}

uint8_t hostmode_run(void)
80006c10:	68 02       	ld.w	r2,r4[0x0]
80006c12:	e4 cc ff ff 	sub	r12,r2,-1
80006c16:	e0 a0 12 0f 	rcall	80009034 <strcmp>
	{
		char *HOSTCMD="false";
		while(strcmp(HOSTCMD,"false")==0)
		{
			HOSTCMD=get_HOST_cmd();
			if(strcmp((HOSTCMD+1),"sequencetoken")==0)
80006c1a:	36 4a       	mov	r10,100
			{
				uint8_t sequenceindex=*HOSTCMD;
				t_currentsequence=t_experiment.t_sequence[sequenceindex];
80006c1c:	c4 c1       	brne	80006cb4 <hostmode_run+0x20c>
80006c1e:	05 88       	ld.ub	r8,r2[0x0]
80006c20:	f0 08 00 28 	add	r8,r8,r8<<0x2
80006c24:	f0 08 00 28 	add	r8,r8,r8<<0x2
80006c28:	4b cc       	lddpc	r12,80006d18 <hostmode_run+0x270>
80006c2a:	f0 cb ff ff 	sub	r11,r8,-1
80006c2e:	ea 0b 00 2b 	add	r11,r5,r11<<0x2
80006c32:	e0 a0 11 3f 	rcall	80008eb0 <memcpy>
				
				executesequence_SDstorage_multiprep_combined();
80006c36:	fe b0 f9 7f 	rcall	80005f34 <executesequence_SDstorage_multiprep_combined>
				
				if(did_data_fail())
80006c3a:	fe b0 e9 31 	rcall	80003e9c <did_data_fail>
80006c3e:	4b ab       	lddpc	r11,80006d24 <hostmode_run+0x27c>
80006c40:	58 0c       	cp.w	r12,0
				{
					usart_write_line(USB_USART, "fail\n");
80006c42:	c2 d0       	breq	80006c9c <hostmode_run+0x1f4>
80006c44:	fc 7c 14 00 	mov	r12,-191488
80006c48:	e0 a0 05 ad 	rcall	800077a2 <usart_write_line>
					usart_putchar(USB_USART,(uint8_t)(get_failure_cause()));
80006c4c:	fe b0 e9 2e 	rcall	80003ea8 <get_failure_cause>
80006c50:	18 9b       	mov	r11,r12
80006c52:	fc 7c 14 00 	mov	r12,-191488
80006c56:	e0 a0 05 98 	rcall	80007786 <usart_putchar>
					usart_putchar(USB_USART,(uint8_t)(get_saved_r1()));
80006c5a:	fe b0 e9 2d 	rcall	80003eb4 <get_saved_r1>
80006c5e:	18 9b       	mov	r11,r12
80006c60:	fc 7c 14 00 	mov	r12,-191488
80006c64:	e0 a0 05 91 	rcall	80007786 <usart_putchar>
					usart_write_line(USB_USART, "good\n");
					send_data_to_host(SD_read_ptr,t_currentsequence.clusters_per_sequence);
				}	
				
				
				SD_read_ptr+=t_currentsequence.clusters_per_sequence*blocks_per_cluster*bytes_per_block;
80006c68:	e1 18 00 5c 	ld.uh	r8,r0[92]
				//set back to command mode
				pdca_disable(USB_USART_RX_PDCA_CHANNEL);
80006c6c:	af 68       	lsl	r8,0xe
					usart_write_line(USB_USART, "good\n");
					send_data_to_host(SD_read_ptr,t_currentsequence.clusters_per_sequence);
				}	
				
				
				SD_read_ptr+=t_currentsequence.clusters_per_sequence*blocks_per_cluster*bytes_per_block;
80006c6e:	30 4c       	mov	r12,4
				//set back to command mode
				pdca_disable(USB_USART_RX_PDCA_CHANNEL);
80006c70:	10 03       	add	r3,r8
80006c72:	fe b0 ed 35 	rcall	800046dc <pdca_disable>
				my_pdca_init_channel(USB_USART_RX_PDCA_CHANNEL, (uint32_t)(&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)),USB_USART_RX_PDCA_PID,0,0, PDCA_TRANSFER_SIZE_BYTE);
80006c76:	30 0a       	mov	r10,0
80006c78:	30 39       	mov	r9,3
80006c7a:	1a da       	st.w	--sp,r10
80006c7c:	14 98       	mov	r8,r10
80006c7e:	1a da       	st.w	--sp,r10
80006c80:	4a 4b       	lddpc	r11,80006d10 <hostmode_run+0x268>
80006c82:	34 0a       	mov	r10,64
80006c84:	30 4c       	mov	r12,4
80006c86:	fe b0 e5 4b 	rcall	8000371c <my_pdca_init_channel>
				pdca_enable(USB_USART_RX_PDCA_CHANNEL);
80006c8a:	30 4c       	mov	r12,4
80006c8c:	fe b0 ed 35 	rcall	800046f6 <pdca_enable>
				USB_USART->cr|=AVR32_USART_CR_STTTO_MASK; //set timeout to stop until new character is received
80006c90:	6e 08       	ld.w	r8,r7[0x0]
80006c92:	ab b8       	sbr	r8,0xb
				USB_USART->rtor=15000;	//set to timeout in 1ms
80006c94:	8f 08       	st.w	r7[0x0],r8
80006c96:	8f 91       	st.w	r7[0x24],r1
80006c98:	2f ed       	sub	sp,-8
					usart_putchar(USB_USART,(uint8_t)(get_failure_cause()));
					usart_putchar(USB_USART,(uint8_t)(get_saved_r1()));
				}					
				else
				{
					usart_write_line(USB_USART, "good\n");
80006c9a:	ca 0b       	rjmp	80006bda <hostmode_run+0x132>
80006c9c:	4a 3b       	lddpc	r11,80006d28 <hostmode_run+0x280>
80006c9e:	fc 7c 14 00 	mov	r12,-191488
80006ca2:	e0 a0 05 80 	rcall	800077a2 <usart_write_line>
					send_data_to_host(SD_read_ptr,t_currentsequence.clusters_per_sequence);
80006ca6:	49 d8       	lddpc	r8,80006d18 <hostmode_run+0x270>
80006ca8:	06 9c       	mov	r12,r3
80006caa:	f1 3b 00 5d 	ld.ub	r11,r8[93]
80006cae:	fe b0 eb dd 	rcall	80004468 <send_data_to_host>
				my_pdca_init_channel(USB_USART_RX_PDCA_CHANNEL, (uint32_t)(&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)),USB_USART_RX_PDCA_PID,0,0, PDCA_TRANSFER_SIZE_BYTE);
				pdca_enable(USB_USART_RX_PDCA_CHANNEL);
				USB_USART->cr|=AVR32_USART_CR_STTTO_MASK; //set timeout to stop until new character is received
				USB_USART->rtor=15000;	//set to timeout in 1ms
			}
			else if(strcmp((HOSTCMD),"RESTART\n")==0)
80006cb2:	cd bb       	rjmp	80006c68 <hostmode_run+0x1c0>
80006cb4:	04 9c       	mov	r12,r2
80006cb6:	49 eb       	lddpc	r11,80006d2c <hostmode_run+0x284>
80006cb8:	e0 a0 11 be 	rcall	80009034 <strcmp>
	return "false";
}

char* get_HOST_cmd(void)
{
	if((USB_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
80006cbc:	c8 f1       	brne	80006bda <hostmode_run+0x132>
	
	while(!(pdca_get_transfer_status(USB_USART_RX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK)); //wait until transfer is done
	
	if(validate_sequences()==false)
	{
		usart_write_line(USB_USART, "badexp\n");
80006cbe:	da 3a       	popm	r0-r7,pc,r12=1
80006cc0:	49 cb       	lddpc	r11,80006d30 <hostmode_run+0x288>
80006cc2:	fc 7c 14 00 	mov	r12,-191488
80006cc6:	e0 a0 05 6e 	rcall	800077a2 <usart_write_line>
		
		usart_putchar(USB_USART,(uint8_t)(get_experiment_problem()));
80006cca:	fe b0 f2 11 	rcall	800050ec <get_experiment_problem>
80006cce:	18 9b       	mov	r11,r12
80006cd0:	fc 7c 14 00 	mov	r12,-191488
80006cd4:	e0 a0 05 59 	rcall	80007786 <usart_putchar>
		
		my_pdca_init_channel(USB_USART_RX_PDCA_CHANNEL, (uint32_t)(&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)),USB_USART_RX_PDCA_PID,0,0, PDCA_TRANSFER_SIZE_BYTE);
80006cd8:	0e 98       	mov	r8,r7
80006cda:	1a d7       	st.w	--sp,r7
80006cdc:	30 39       	mov	r9,3
80006cde:	1a d7       	st.w	--sp,r7
80006ce0:	34 0a       	mov	r10,64
80006ce2:	48 cb       	lddpc	r11,80006d10 <hostmode_run+0x268>
80006ce4:	30 4c       	mov	r12,4
80006ce6:	fe b0 e5 1b 	rcall	8000371c <my_pdca_init_channel>
		pdca_enable(USB_USART_RX_PDCA_CHANNEL);
80006cea:	30 4c       	mov	r12,4
80006cec:	fe b0 ed 05 	rcall	800046f6 <pdca_enable>
		USB_USART->cr|=AVR32_USART_CR_STTTO_MASK; //set timeout to stop until new character is received
80006cf0:	fc 78 14 00 	mov	r8,-191488
80006cf4:	70 09       	ld.w	r9,r8[0x0]
80006cf6:	ab b9       	sbr	r9,0xb
		USB_USART->rtor=15000;	//set to timeout in 1ms
80006cf8:	91 09       	st.w	r8[0x0],r9
80006cfa:	0e 9c       	mov	r12,r7
80006cfc:	e0 69 3a 98 	mov	r9,15000
80006d00:	2f ed       	sub	sp,-8
		
		return 0;
80006d02:	91 99       	st.w	r8[0x24],r9
80006d04:	d8 32       	popm	r0-r7,pc
80006d06:	d7 03       	nop
80006d08:	00 00       	add	r0,r0
80006d0a:	0b e8       	ld.ub	r8,r5[0x6]
80006d0c:	80 00       	ld.sh	r0,r0[0x0]
80006d0e:	e3 c8 00 00 	ldm	r8++,
80006d12:	95 94       	st.w	r10[0x24],r4
80006d14:	00 00       	add	r0,r0
80006d16:	0f e4       	ld.ub	r4,r7[0x6]
80006d18:	00 00       	add	r0,r0
80006d1a:	0f 80       	ld.ub	r0,r7[0x0]
80006d1c:	00 00       	add	r0,r0
80006d1e:	95 90       	st.w	r10[0x24],r0
80006d20:	80 00       	ld.sh	r0,r0[0x0]
80006d22:	e3 d4 80 00 	ldswp.w	r4,r1[0]
80006d26:	e3 e4 80 00 	sthh.w	r0[r0],r1:b,r4:b
80006d2a:	e3 ec 80 00 	sthh.w	r0[r0],r1:b,r12:b
80006d2e:	e3 f4 80 00 	ld.wls	r4,r1[0x0]
80006d32:	e3 c0 eb cd 	ldm	r0++,r0,r2-r3,r6-r9,r11,sp-pc

80006d34 <idle_getmode>:
80006d34:	eb cd 40 80 	pushm	r7,lr
80006d38:	e0 6c 75 30 	mov	r12,30000
80006d3c:	fe b0 e4 b3 	rcall	800036a2 <my_delay>
80006d40:	4a 98       	lddpc	r8,80006de4 <idle_getmode+0xb0>
80006d42:	11 89       	ld.ub	r9,r8[0x0]
80006d44:	30 08       	mov	r8,0
80006d46:	f0 09 18 00 	cp.b	r9,r8
80006d4a:	c2 c1       	brne	80006da2 <idle_getmode+0x6e>
80006d4c:	fc 78 14 00 	mov	r8,-191488
80006d50:	70 59       	ld.w	r9,r8[0x14]
80006d52:	ed b9 00 08 	bld	r9,0x8
80006d56:	c0 30       	breq	80006d5c <idle_getmode+0x28>
80006d58:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80006d5c:	70 09       	ld.w	r9,r8[0x0]
80006d5e:	ab b9       	sbr	r9,0xb
80006d60:	91 09       	st.w	r8[0x0],r9
80006d62:	e0 69 3a 98 	mov	r9,15000
80006d66:	30 4c       	mov	r12,4
80006d68:	91 99       	st.w	r8[0x24],r9
80006d6a:	fe b0 ec b9 	rcall	800046dc <pdca_disable>
80006d6e:	fc 78 00 00 	mov	r8,-196608
80006d72:	f0 f8 01 00 	ld.w	r8,r8[256]
80006d76:	30 09       	mov	r9,0
		USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
		cmd_ptr=(char *)(AVR32_PDCA.channel[USB_USART_RX_PDCA_CHANNEL].mar);
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
80006d78:	b0 89       	st.b	r8[0x0],r9
		cmd_ptr=&host_USART_buffer[0];
80006d7a:	49 c8       	lddpc	r8,80006de8 <idle_getmode+0xb4>
	{//timeout detected
		USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
		cmd_ptr=(char *)(AVR32_PDCA.channel[USB_USART_RX_PDCA_CHANNEL].mar);
80006d7c:	49 c7       	lddpc	r7,80006dec <idle_getmode+0xb8>
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
		cmd_ptr=&host_USART_buffer[0];
		
		pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
80006d7e:	10 9b       	mov	r11,r8
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
		cmd_ptr=(char *)(AVR32_PDCA.channel[USB_USART_RX_PDCA_CHANNEL].mar);
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
		cmd_ptr=&host_USART_buffer[0];
80006d80:	8f 08       	st.w	r7[0x0],r8
		
		pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
80006d82:	34 0a       	mov	r10,64
80006d84:	30 4c       	mov	r12,4
80006d86:	fe b0 ec d0 	rcall	80004726 <pdca_load_channel>
		pdca_enable(USB_USART_RX_PDCA_CHANNEL);
80006d8a:	30 4c       	mov	r12,4
80006d8c:	fe b0 ec b5 	rcall	800046f6 <pdca_enable>
			return select_checkSD;
		}
	}
	
	char *HOSTCMD=get_HOST_cmd();
	if(strcmp(HOSTCMD,"HOSTST\n")==0)
80006d90:	49 8b       	lddpc	r11,80006df0 <idle_getmode+0xbc>
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
		cmd_ptr=&host_USART_buffer[0];
		
		pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
		pdca_enable(USB_USART_RX_PDCA_CHANNEL);
		return cmd_ptr;
80006d92:	6e 07       	ld.w	r7,r7[0x0]
			return select_checkSD;
		}
	}
	
	char *HOSTCMD=get_HOST_cmd();
	if(strcmp(HOSTCMD,"HOSTST\n")==0)
80006d94:	0e 9c       	mov	r12,r7
80006d96:	e0 a0 11 4f 	rcall	80009034 <strcmp>
80006d9a:	c1 51       	brne	80006dc4 <idle_getmode+0x90>
80006d9c:	30 3c       	mov	r12,3
80006d9e:	e3 cd 80 80 	ldm	sp++,r7,pc
{
	my_delay(30000);
	
	if(lcdinit==true)
	{
		char *LCDCMD=get_LCD_cmd();
80006da2:	fe b0 fd b9 	rcall	80006914 <get_LCD_cmd>
		if(strcmp(LCDCMD,"BR1\r")==0)
80006da6:	49 4b       	lddpc	r11,80006df4 <idle_getmode+0xc0>
{
	my_delay(30000);
	
	if(lcdinit==true)
	{
		char *LCDCMD=get_LCD_cmd();
80006da8:	18 97       	mov	r7,r12
		if(strcmp(LCDCMD,"BR1\r")==0)
80006daa:	e0 a0 11 45 	rcall	80009034 <strcmp>
80006dae:	c0 90       	breq	80006dc0 <idle_getmode+0x8c>
		{
			return select_standalone;
		}
		else if(strcmp(LCDCMD,"BR2\r")==0)
80006db0:	0e 9c       	mov	r12,r7
80006db2:	49 2b       	lddpc	r11,80006df8 <idle_getmode+0xc4>
80006db4:	e0 a0 11 40 	rcall	80009034 <strcmp>
80006db8:	cc a1       	brne	80006d4c <idle_getmode+0x18>
80006dba:	30 2c       	mov	r12,2
80006dbc:	e3 cd 80 80 	ldm	sp++,r7,pc
	my_delay(30000);
	
	if(lcdinit==true)
	{
		char *LCDCMD=get_LCD_cmd();
		if(strcmp(LCDCMD,"BR1\r")==0)
80006dc0:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
	char *HOSTCMD=get_HOST_cmd();
	if(strcmp(HOSTCMD,"HOSTST\n")==0)
		{
			return start_hostmode;
		}
		else if(strcmp(HOSTCMD,"GET DATA\n")==0)
80006dc4:	48 eb       	lddpc	r11,80006dfc <idle_getmode+0xc8>
80006dc6:	0e 9c       	mov	r12,r7
80006dc8:	e0 a0 11 36 	rcall	80009034 <strcmp>
80006dcc:	c0 41       	brne	80006dd4 <idle_getmode+0xa0>
80006dce:	30 4c       	mov	r12,4
80006dd0:	e3 cd 80 80 	ldm	sp++,r7,pc
				break;		
		}
	}
}

uint8_t idle_getmode(void)
80006dd4:	0e 9c       	mov	r12,r7
80006dd6:	48 bb       	lddpc	r11,80006e00 <idle_getmode+0xcc>
80006dd8:	e0 a0 11 2e 	rcall	80009034 <strcmp>
		}
		else if(strcmp(HOSTCMD,"GET DATA\n")==0)
		{
			return get_data;
		}
		else if(strcmp(HOSTCMD,"PROGEXP\n")==0)
80006ddc:	cb e1       	brne	80006d58 <idle_getmode+0x24>
80006dde:	30 5c       	mov	r12,5
80006de0:	e3 cd 80 80 	ldm	sp++,r7,pc
80006de4:	00 00       	add	r0,r0
80006de6:	08 fd       	st.b	--r4,sp
80006de8:	00 00       	add	r0,r0
80006dea:	95 94       	st.w	r10[0x24],r4
80006dec:	00 00       	add	r0,r0
80006dee:	95 90       	st.w	r10[0x24],r0
80006df0:	80 00       	ld.sh	r0,r0[0x0]
80006df2:	e4 10 80 00 	andh	r0,0x8000
80006df6:	e4 00       	*unknown*
80006df8:	80 00       	ld.sh	r0,r0[0x0]
80006dfa:	e4 08       	*unknown*
80006dfc:	80 00       	ld.sh	r0,r0[0x0]
80006dfe:	e4 18 80 00 	andh	r8,0x8000
80006e02:	e4 24 eb cd 	sub	r4,322509

80006e04 <standalone_mode_run>:
80006e04:	eb cd 40 fe 	pushm	r1-r7,lr
80006e08:	20 6d       	sub	sp,24
80006e0a:	fe fb 04 0e 	ld.w	r11,pc[1038]
80006e0e:	fe 7c 28 00 	mov	r12,-55296
80006e12:	e0 a0 04 c8 	rcall	800077a2 <usart_write_line>
80006e16:	e0 6c 75 30 	mov	r12,30000
80006e1a:	fe b0 e4 44 	rcall	800036a2 <my_delay>

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
	my_delay(30000);
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
80006e1e:	fe b0 fd 7b 	rcall	80006914 <get_LCD_cmd>
80006e22:	fe fb 03 fa 	ld.w	r11,pc[1018]
80006e26:	e0 a0 11 07 	rcall	80009034 <strcmp>
80006e2a:	cf 01       	brne	80006e0a <standalone_mode_run+0x6>

bool standalone_mode_run(void)
{
	char tempstring1[24];
	while(detect_lcd()==false);
	usart_write_line(LCD_USART, "play stndprog\r\n");
80006e2c:	fe fb 03 f4 	ld.w	r11,pc[1012]
80006e30:	fe 7c 28 00 	mov	r12,-55296
80006e34:	e0 a0 04 b7 	rcall	800077a2 <usart_write_line>
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
80006e38:	fe fb 03 e0 	ld.w	r11,pc[992]
80006e3c:	fe 7c 28 00 	mov	r12,-55296
80006e40:	e0 a0 04 b1 	rcall	800077a2 <usart_write_line>
	my_delay(30000);
80006e44:	e0 6c 75 30 	mov	r12,30000
80006e48:	fe b0 e4 2d 	rcall	800036a2 <my_delay>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
80006e4c:	fe b0 fd 64 	rcall	80006914 <get_LCD_cmd>
80006e50:	fe fb 03 cc 	ld.w	r11,pc[972]
80006e54:	e0 a0 10 f0 	rcall	80009034 <strcmp>
80006e58:	cf 01       	brne	80006e38 <standalone_mode_run+0x34>
	char tempstring1[24];
	while(detect_lcd()==false);
	usart_write_line(LCD_USART, "play stndprog\r\n");
	while(detect_lcd()==false);
	
	usart_write_line(LCD_USART, "DMETER_VALUE 1 1\r\n");
80006e5a:	fe fb 03 ca 	ld.w	r11,pc[970]
80006e5e:	fe 7c 28 00 	mov	r12,-55296
80006e62:	e0 a0 04 a0 	rcall	800077a2 <usart_write_line>
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
80006e66:	fe fb 03 b2 	ld.w	r11,pc[946]
80006e6a:	fe 7c 28 00 	mov	r12,-55296
80006e6e:	e0 a0 04 9a 	rcall	800077a2 <usart_write_line>
	my_delay(30000);
80006e72:	e0 6c 75 30 	mov	r12,30000
80006e76:	fe b0 e4 16 	rcall	800036a2 <my_delay>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
80006e7a:	fe b0 fd 4d 	rcall	80006914 <get_LCD_cmd>
80006e7e:	fe fb 03 9e 	ld.w	r11,pc[926]
80006e82:	e0 a0 10 d9 	rcall	80009034 <strcmp>
80006e86:	cf 01       	brne	80006e66 <standalone_mode_run+0x62>
	while(detect_lcd()==false);
	
	usart_write_line(LCD_USART, "DMETER_VALUE 1 1\r\n");
	while(detect_lcd()==false);
	
	sprintf(tempstring1,"DMETER_VALUE 2 %u\r\n",t_experiment.N_experiments);
80006e88:	fe f4 03 a0 	ld.w	r4,pc[928]
80006e8c:	e8 f8 03 30 	ld.w	r8,r4[816]
80006e90:	1a 96       	mov	r6,sp
80006e92:	fe fb 03 9a 	ld.w	r11,pc[922]
80006e96:	1a d8       	st.w	--sp,r8
80006e98:	0c 9c       	mov	r12,r6
80006e9a:	e0 a0 10 af 	rcall	80008ff8 <sprintf>
	usart_write_line(LCD_USART, tempstring1);
80006e9e:	0c 9b       	mov	r11,r6
80006ea0:	fe 7c 28 00 	mov	r12,-55296
80006ea4:	e0 a0 04 7f 	rcall	800077a2 <usart_write_line>
80006ea8:	2f fd       	sub	sp,-4
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
80006eaa:	fe fb 03 6e 	ld.w	r11,pc[878]
80006eae:	fe 7c 28 00 	mov	r12,-55296
80006eb2:	e0 a0 04 78 	rcall	800077a2 <usart_write_line>
	my_delay(30000);
80006eb6:	e0 6c 75 30 	mov	r12,30000
80006eba:	fe b0 e3 f4 	rcall	800036a2 <my_delay>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
80006ebe:	fe b0 fd 2b 	rcall	80006914 <get_LCD_cmd>
80006ec2:	fe fb 03 5a 	ld.w	r11,pc[858]
80006ec6:	e0 a0 10 b7 	rcall	80009034 <strcmp>
80006eca:	cf 01       	brne	80006eaa <standalone_mode_run+0xa6>
	
	sprintf(tempstring1,"DMETER_VALUE 2 %u\r\n",t_experiment.N_experiments);
	usart_write_line(LCD_USART, tempstring1);
	while(detect_lcd()==false);
	
	usart_write_line(LCD_USART, "DMETER_VALUE 3 1\r\n");
80006ecc:	fe fb 03 64 	ld.w	r11,pc[868]
80006ed0:	fe 7c 28 00 	mov	r12,-55296
80006ed4:	e0 a0 04 67 	rcall	800077a2 <usart_write_line>
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
80006ed8:	fe fb 03 40 	ld.w	r11,pc[832]
80006edc:	fe 7c 28 00 	mov	r12,-55296
80006ee0:	e0 a0 04 61 	rcall	800077a2 <usart_write_line>
	my_delay(30000);
80006ee4:	e0 6c 75 30 	mov	r12,30000
80006ee8:	fe b0 e3 dd 	rcall	800036a2 <my_delay>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
80006eec:	fe b0 fd 14 	rcall	80006914 <get_LCD_cmd>
80006ef0:	fe fb 03 2c 	ld.w	r11,pc[812]
80006ef4:	e0 a0 10 a0 	rcall	80009034 <strcmp>
80006ef8:	cf 01       	brne	80006ed8 <standalone_mode_run+0xd4>
	while(detect_lcd()==false);
	
	usart_write_line(LCD_USART, "DMETER_VALUE 3 1\r\n");
	while(detect_lcd()==false);
	
	sprintf(tempstring1,"DMETER_VALUE 4 %u\r\n",t_experiment.N_sequences);
80006efa:	09 98       	ld.ub	r8,r4[0x1]
80006efc:	fe fb 03 38 	ld.w	r11,pc[824]
80006f00:	1a d8       	st.w	--sp,r8
80006f02:	0c 9c       	mov	r12,r6
80006f04:	e0 a0 10 7a 	rcall	80008ff8 <sprintf>
	usart_write_line(LCD_USART, tempstring1);
80006f08:	0c 9b       	mov	r11,r6
80006f0a:	fe 7c 28 00 	mov	r12,-55296
80006f0e:	e0 a0 04 4a 	rcall	800077a2 <usart_write_line>
80006f12:	2f fd       	sub	sp,-4
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
80006f14:	fe fb 03 04 	ld.w	r11,pc[772]
80006f18:	fe 7c 28 00 	mov	r12,-55296
80006f1c:	e0 a0 04 43 	rcall	800077a2 <usart_write_line>
	my_delay(30000);
80006f20:	e0 6c 75 30 	mov	r12,30000
80006f24:	fe b0 e3 bf 	rcall	800036a2 <my_delay>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
80006f28:	fe b0 fc f6 	rcall	80006914 <get_LCD_cmd>
80006f2c:	fe fb 02 f0 	ld.w	r11,pc[752]
80006f30:	e0 a0 10 82 	rcall	80009034 <strcmp>
80006f34:	18 91       	mov	r1,r12
80006f36:	ce f1       	brne	80006f14 <standalone_mode_run+0x110>
	
	sprintf(tempstring1,"DMETER_VALUE 4 %u\r\n",t_experiment.N_sequences);
	usart_write_line(LCD_USART, tempstring1);
	while(detect_lcd()==false);
	
	reset_SD_sink_ptr(); //start saving data at data_base_addr
80006f38:	fe b0 e7 aa 	rcall	80003e8c <reset_SD_sink_ptr>
	
	DAC1->dr0=t_experiment.t_Vgain;	//set gain of RF amp
80006f3c:	e9 19 03 34 	ld.uh	r9,r4[820]
80006f40:	fe 78 6c 00 	mov	r8,-37888
	
	tc_write_rc(SLOW_TC,SLOW_TC_slow_CHANNEL,t_experiment.t_sequence[0].t_TR);
80006f44:	e9 1a 00 66 	ld.uh	r10,r4[102]
80006f48:	02 9b       	mov	r11,r1
	usart_write_line(LCD_USART, tempstring1);
	while(detect_lcd()==false);
	
	reset_SD_sink_ptr(); //start saving data at data_base_addr
	
	DAC1->dr0=t_experiment.t_Vgain;	//set gain of RF amp
80006f4a:	91 b9       	st.w	r8[0x2c],r9
	
	tc_write_rc(SLOW_TC,SLOW_TC_slow_CHANNEL,t_experiment.t_sequence[0].t_TR);
80006f4c:	fe 7c 58 00 	mov	r12,-43008
80006f50:	fe b0 fc 36 	rcall	800067bc <tc_write_rc>
	tc_start(SLOW_TC, SLOW_TC_slow_CHANNEL);	//start slow timer
80006f54:	02 9b       	mov	r11,r1
80006f56:	fe 7c 58 00 	mov	r12,-43008
80006f5a:	fe b0 fb fa 	rcall	8000674e <tc_start>
	tc_start(SLOW_TC, SLOW_TC_fast_CHANNEL);	//start slow timer
80006f5e:	30 1b       	mov	r11,1
80006f60:	fe 7c 58 00 	mov	r12,-43008
80006f64:	fe b0 fb f5 	rcall	8000674e <tc_start>
	pdca_disable(USB_USART_RX_PDCA_CHANNEL);	//Not going to need USB USART for a while
80006f68:	30 4c       	mov	r12,4
80006f6a:	fe b0 eb b9 	rcall	800046dc <pdca_disable>
	pdca_disable(USB_USART_TX_PDCA_CHANNEL);
80006f6e:	30 3c       	mov	r12,3
80006f70:	fe b0 eb b6 	rcall	800046dc <pdca_disable>
	
	bool progscreen=true;	//state variable for user interface
	
	for(uint16_t experimentcount=0;experimentcount<t_experiment.N_experiments;experimentcount++)
80006f74:	e8 f9 03 30 	ld.w	r9,r4[816]
80006f78:	58 09       	cp.w	r9,0
80006f7a:	c4 e0       	breq	80007016 <standalone_mode_run+0x212>
80006f7c:	fe f8 02 ac 	ld.w	r8,pc[684]
80006f80:	30 12       	mov	r2,1
80006f82:	11 98       	ld.ub	r8,r8[0x1]
	{
		for(uint8_t sequencecount=0;sequencecount<t_experiment.N_sequences;sequencecount++)
80006f84:	58 08       	cp.w	r8,0
80006f86:	c4 20       	breq	8000700a <standalone_mode_run+0x206>
	pdca_disable(USB_USART_RX_PDCA_CHANNEL);	//Not going to need USB USART for a while
	pdca_disable(USB_USART_TX_PDCA_CHANNEL);
	
	bool progscreen=true;	//state variable for user interface
	
	for(uint16_t experimentcount=0;experimentcount<t_experiment.N_experiments;experimentcount++)
80006f88:	30 07       	mov	r7,0
	{
		for(uint8_t sequencecount=0;sequencecount<t_experiment.N_sequences;sequencecount++)
		{
			t_currentsequence=t_experiment.t_sequence[sequencecount]; //get sequence
80006f8a:	ee 07 00 28 	add	r8,r7,r7<<0x2
80006f8e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80006f92:	36 4a       	mov	r10,100
80006f94:	f0 cb ff ff 	sub	r11,r8,-1
80006f98:	fe fc 02 a0 	ld.w	r12,pc[672]
80006f9c:	e8 0b 00 2b 	add	r11,r4,r11<<0x2
80006fa0:	e0 a0 0f 88 	rcall	80008eb0 <memcpy>
			while((tc_read_sr(SLOW_TC, SLOW_TC_slow_CHANNEL) & AVR32_TC_SR1_CPCS_MASK)==0);
80006fa4:	30 0b       	mov	r11,0
80006fa6:	fe 7c 58 00 	mov	r12,-43008
80006faa:	fe b0 fb e4 	rcall	80006772 <tc_read_sr>
80006fae:	ed bc 00 04 	bld	r12,0x4
80006fb2:	cf 91       	brne	80006fa4 <standalone_mode_run+0x1a0>
			
			tc_write_rc(SLOW_TC,SLOW_TC_slow_CHANNEL,t_experiment.t_sequence[sequencecount].t_TR);
80006fb4:	ee c3 ff ff 	sub	r3,r7,-1
80006fb8:	e6 08 10 64 	mul	r8,r3,100
80006fbc:	30 0b       	mov	r11,0
80006fbe:	e8 08 03 0a 	ld.w	r10,r4[r8]
80006fc2:	fe 7c 58 00 	mov	r12,-43008
80006fc6:	5c 7a       	castu.h	r10
80006fc8:	fe b0 fb fa 	rcall	800067bc <tc_write_rc>
			
			
				char *LCDCMD=get_LCD_cmd();
80006fcc:	fe b0 fc a4 	rcall	80006914 <get_LCD_cmd>
80006fd0:	18 95       	mov	r5,r12
				if((progscreen==true) && (strcmp(LCDCMD,"BR2\r")==0))	//BR2 is first cancel button
80006fd2:	58 02       	cp.w	r2,0
80006fd4:	c2 31       	brne	8000701a <standalone_mode_run+0x216>
				{
					progscreen=false;
					usart_write_line(LCD_USART, "play confcanc\r\n");
					while(detect_lcd()==false);
				}
				else if((progscreen==false) && (strcmp(LCDCMD,"BR3\r")==0))	//BR3 is confirm cancel button
80006fd6:	fe fb 02 66 	ld.w	r11,pc[614]
80006fda:	e0 a0 10 2d 	rcall	80009034 <strcmp>
80006fde:	e0 80 01 14 	breq	80007206 <standalone_mode_run+0x402>
				{
					usart_write_line(LCD_USART, "play modesel\r\n"); //maybe modsel isn't necessary here, but will be done after return?
					return false;
				}
				else if((progscreen==false) && (strcmp(LCDCMD,"BR1\r")==0))	//BR1 if resume button
80006fe2:	0a 9c       	mov	r12,r5
80006fe4:	fe fb 02 5c 	ld.w	r11,pc[604]
80006fe8:	e0 a0 10 26 	rcall	80009034 <strcmp>
80006fec:	e0 80 00 88 	breq	800070fc <standalone_mode_run+0x2f8>
					usart_write_line(LCD_USART, tempstring1);
					while(wait_for_CR()==false);
					gpio_clr_gpio_pin(GEN1_pin);
					
				}
				executesequence_SDstorage_multiprep_combined();
80006ff0:	fe b0 f7 a2 	rcall	80005f34 <executesequence_SDstorage_multiprep_combined>
	
	bool progscreen=true;	//state variable for user interface
	
	for(uint16_t experimentcount=0;experimentcount<t_experiment.N_experiments;experimentcount++)
	{
		for(uint8_t sequencecount=0;sequencecount<t_experiment.N_sequences;sequencecount++)
80006ff4:	09 98       	ld.ub	r8,r4[0x1]
80006ff6:	2f f7       	sub	r7,-1
80006ff8:	5c 57       	castu.b	r7
80006ffa:	ee 08 18 00 	cp.b	r8,r7
80006ffe:	fe 9b ff c6 	brhi	80006f8a <standalone_mode_run+0x186>
80007002:	fe f9 02 26 	ld.w	r9,pc[550]
80007006:	f2 f9 03 30 	ld.w	r9,r9[816]
	pdca_disable(USB_USART_RX_PDCA_CHANNEL);	//Not going to need USB USART for a while
	pdca_disable(USB_USART_TX_PDCA_CHANNEL);
	
	bool progscreen=true;	//state variable for user interface
	
	for(uint16_t experimentcount=0;experimentcount<t_experiment.N_experiments;experimentcount++)
8000700a:	2f f1       	sub	r1,-1
8000700c:	5c 81       	casts.h	r1
8000700e:	f5 d1 c0 10 	bfextu	r10,r1,0x0,0x10
80007012:	12 3a       	cp.w	r10,r9
80007014:	cb 83       	brcs	80006f84 <standalone_mode_run+0x180>
	{
		for(uint8_t sequencecount=0;sequencecount<t_experiment.N_sequences;sequencecount++)
80007016:	30 1c       	mov	r12,1
80007018:	cf d8       	rjmp	80007212 <standalone_mode_run+0x40e>
			
			tc_write_rc(SLOW_TC,SLOW_TC_slow_CHANNEL,t_experiment.t_sequence[sequencecount].t_TR);
			
			
				char *LCDCMD=get_LCD_cmd();
				if((progscreen==true) && (strcmp(LCDCMD,"BR2\r")==0))	//BR2 is first cancel button
8000701a:	fe fb 02 2a 	ld.w	r11,pc[554]
8000701e:	e0 a0 10 0b 	rcall	80009034 <strcmp>
80007022:	c5 70       	breq	800070d0 <standalone_mode_run+0x2cc>
					while(detect_lcd()==false);
					
				}
				else if(progscreen==true)
				{
					sprintf(tempstring1,"DMETER_VALUE 1 %u\r",(experimentcount+1));
80007024:	f1 d1 c0 10 	bfextu	r8,r1,0x0,0x10
80007028:	2f f8       	sub	r8,-1
8000702a:	fe fb 02 1e 	ld.w	r11,pc[542]
8000702e:	1a d8       	st.w	--sp,r8
80007030:	0c 9c       	mov	r12,r6
80007032:	e0 a0 0f e3 	rcall	80008ff8 <sprintf>
					gpio_set_gpio_pin(GEN1_pin);
80007036:	30 9c       	mov	r12,9
80007038:	fe b0 e2 f3 	rcall	8000361e <gpio_set_gpio_pin>
					usart_write_line(LCD_USART, tempstring1);
8000703c:	0c 9b       	mov	r11,r6
8000703e:	fe 7c 28 00 	mov	r12,-55296
80007042:	e0 a0 03 b0 	rcall	800077a2 <usart_write_line>
	spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
}

bool wait_for_CR(void)
{
	if((LCD_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
80007046:	fe 79 28 00 	mov	r9,-55296
				}
				else if(progscreen==true)
				{
					sprintf(tempstring1,"DMETER_VALUE 1 %u\r",(experimentcount+1));
					gpio_set_gpio_pin(GEN1_pin);
					usart_write_line(LCD_USART, tempstring1);
8000704a:	2f fd       	sub	sp,-4
	spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
}

bool wait_for_CR(void)
{
	if((LCD_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
8000704c:	72 58       	ld.w	r8,r9[0x14]
8000704e:	fe 75 28 00 	mov	r5,-55296
80007052:	e2 18 01 00 	andl	r8,0x100,COH
80007056:	cf b0       	breq	8000704c <standalone_mode_run+0x248>
	{//timeout detected
		LCD_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
80007058:	6a 08       	ld.w	r8,r5[0x0]
8000705a:	ab b8       	sbr	r8,0xb
8000705c:	8b 08       	st.w	r5[0x0],r8
		LCD_USART->rtor=230;
8000705e:	e0 68 00 e6 	mov	r8,230
		
		pdca_disable(LCD_USART_RX_PDCA_CHANNEL);
80007062:	30 5c       	mov	r12,5
bool wait_for_CR(void)
{
	if((LCD_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
	{//timeout detected
		LCD_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
		LCD_USART->rtor=230;
80007064:	8b 98       	st.w	r5[0x24],r8
		
		pdca_disable(LCD_USART_RX_PDCA_CHANNEL);
80007066:	fe b0 eb 3b 	rcall	800046dc <pdca_disable>
		pdca_load_channel(LCD_USART_RX_PDCA_CHANNEL, (&LCD_USART_buffer),(uint32_t)(sizeof(LCD_USART_buffer)));
8000706a:	34 0a       	mov	r10,64
8000706c:	4f 8b       	lddpc	r11,8000724c <standalone_mode_run+0x448>
8000706e:	30 5c       	mov	r12,5
80007070:	fe b0 eb 5b 	rcall	80004726 <pdca_load_channel>
80007074:	30 5c       	mov	r12,5
		pdca_enable(LCD_USART_RX_PDCA_CHANNEL);
80007076:	fe b0 eb 40 	rcall	800046f6 <pdca_enable>
8000707a:	30 9c       	mov	r12,9
				{
					sprintf(tempstring1,"DMETER_VALUE 1 %u\r",(experimentcount+1));
					gpio_set_gpio_pin(GEN1_pin);
					usart_write_line(LCD_USART, tempstring1);
					while(wait_for_CR()==false);
					gpio_clr_gpio_pin(GEN1_pin);
8000707c:	fe b0 e2 de 	rcall	80003638 <gpio_clr_gpio_pin>
80007080:	4f 4b       	lddpc	r11,80007250 <standalone_mode_run+0x44c>
					
					
					sprintf(tempstring1,"DMETER_VALUE 3 %u\r",(sequencecount+1));
80007082:	1a d3       	st.w	--sp,r3
80007084:	0c 9c       	mov	r12,r6
80007086:	e0 a0 0f b9 	rcall	80008ff8 <sprintf>
8000708a:	30 9c       	mov	r12,9
8000708c:	fe b0 e2 c9 	rcall	8000361e <gpio_set_gpio_pin>
					gpio_set_gpio_pin(GEN1_pin);
80007090:	0c 9b       	mov	r11,r6
80007092:	0a 9c       	mov	r12,r5
					usart_write_line(LCD_USART, tempstring1);
80007094:	e0 a0 03 87 	rcall	800077a2 <usart_write_line>
80007098:	2f fd       	sub	sp,-4
8000709a:	6a 59       	ld.w	r9,r5[0x14]
8000709c:	fe 78 28 00 	mov	r8,-55296
	spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
}

bool wait_for_CR(void)
{
	if((LCD_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
800070a0:	e2 19 01 00 	andl	r9,0x100,COH
800070a4:	cf b0       	breq	8000709a <standalone_mode_run+0x296>
800070a6:	70 09       	ld.w	r9,r8[0x0]
800070a8:	ab b9       	sbr	r9,0xb
	{//timeout detected
		LCD_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
800070aa:	91 09       	st.w	r8[0x0],r9
800070ac:	e0 69 00 e6 	mov	r9,230
		LCD_USART->rtor=230;
800070b0:	30 5c       	mov	r12,5
800070b2:	91 99       	st.w	r8[0x24],r9
		
		pdca_disable(LCD_USART_RX_PDCA_CHANNEL);
800070b4:	fe b0 eb 14 	rcall	800046dc <pdca_disable>
800070b8:	34 0a       	mov	r10,64
800070ba:	4e 5b       	lddpc	r11,8000724c <standalone_mode_run+0x448>
		pdca_load_channel(LCD_USART_RX_PDCA_CHANNEL, (&LCD_USART_buffer),(uint32_t)(sizeof(LCD_USART_buffer)));
800070bc:	30 5c       	mov	r12,5
800070be:	fe b0 eb 34 	rcall	80004726 <pdca_load_channel>
800070c2:	30 5c       	mov	r12,5
800070c4:	fe b0 eb 19 	rcall	800046f6 <pdca_enable>
		pdca_enable(LCD_USART_RX_PDCA_CHANNEL);
800070c8:	30 9c       	mov	r12,9
800070ca:	fe b0 e2 b7 	rcall	80003638 <gpio_clr_gpio_pin>
					
					sprintf(tempstring1,"DMETER_VALUE 3 %u\r",(sequencecount+1));
					gpio_set_gpio_pin(GEN1_pin);
					usart_write_line(LCD_USART, tempstring1);
					while(wait_for_CR()==false);
					gpio_clr_gpio_pin(GEN1_pin);
800070ce:	c9 1b       	rjmp	80006ff0 <standalone_mode_run+0x1ec>
800070d0:	4e 1b       	lddpc	r11,80007254 <standalone_mode_run+0x450>
800070d2:	fe 7c 28 00 	mov	r12,-55296
			
				char *LCDCMD=get_LCD_cmd();
				if((progscreen==true) && (strcmp(LCDCMD,"BR2\r")==0))	//BR2 is first cancel button
				{
					progscreen=false;
					usart_write_line(LCD_USART, "play confcanc\r\n");
800070d6:	e0 a0 03 66 	rcall	800077a2 <usart_write_line>
800070da:	4d 0b       	lddpc	r11,80007218 <standalone_mode_run+0x414>
800070dc:	fe 7c 28 00 	mov	r12,-55296
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
800070e0:	e0 a0 03 61 	rcall	800077a2 <usart_write_line>
800070e4:	e0 6c 75 30 	mov	r12,30000
	my_delay(30000);
800070e8:	fe b0 e2 dd 	rcall	800036a2 <my_delay>
800070ec:	fe b0 fc 14 	rcall	80006914 <get_LCD_cmd>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
800070f0:	4c bb       	lddpc	r11,8000721c <standalone_mode_run+0x418>
800070f2:	e0 a0 0f a1 	rcall	80009034 <strcmp>
800070f6:	cf 21       	brne	800070da <standalone_mode_run+0x2d6>
800070f8:	18 92       	mov	r2,r12
800070fa:	c7 bb       	rjmp	80006ff0 <standalone_mode_run+0x1ec>
800070fc:	4c 9b       	lddpc	r11,80007220 <standalone_mode_run+0x41c>
800070fe:	fe 7c 28 00 	mov	r12,-55296
					return false;
				}
				else if((progscreen==false) && (strcmp(LCDCMD,"BR1\r")==0))	//BR1 if resume button
				{
					progscreen=true;
					usart_write_line(LCD_USART, "play stndprog\r\n");
80007102:	e0 a0 03 50 	rcall	800077a2 <usart_write_line>
80007106:	4c 5b       	lddpc	r11,80007218 <standalone_mode_run+0x414>
80007108:	fe 7c 28 00 	mov	r12,-55296
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
8000710c:	e0 a0 03 4b 	rcall	800077a2 <usart_write_line>
80007110:	e0 6c 75 30 	mov	r12,30000
	my_delay(30000);
80007114:	fe b0 e2 c7 	rcall	800036a2 <my_delay>
80007118:	fe b0 fb fe 	rcall	80006914 <get_LCD_cmd>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
8000711c:	4c 0b       	lddpc	r11,8000721c <standalone_mode_run+0x418>
8000711e:	e0 a0 0f 8b 	rcall	80009034 <strcmp>
80007122:	cf 21       	brne	80007106 <standalone_mode_run+0x302>
80007124:	f1 d1 c0 10 	bfextu	r8,r1,0x0,0x10
					progscreen=true;
					usart_write_line(LCD_USART, "play stndprog\r\n");
					
					while(detect_lcd()==false);
	
					sprintf(tempstring1,"DMETER_VALUE 1 %u\r",(experimentcount+1));
80007128:	2f f8       	sub	r8,-1
8000712a:	4c 8b       	lddpc	r11,80007248 <standalone_mode_run+0x444>
8000712c:	1a d8       	st.w	--sp,r8
8000712e:	0c 9c       	mov	r12,r6
80007130:	e0 a0 0f 64 	rcall	80008ff8 <sprintf>
80007134:	0c 9b       	mov	r11,r6
80007136:	fe 7c 28 00 	mov	r12,-55296
					usart_write_line(LCD_USART, tempstring1);
8000713a:	e0 a0 03 34 	rcall	800077a2 <usart_write_line>
8000713e:	2f fd       	sub	sp,-4
80007140:	4b 6b       	lddpc	r11,80007218 <standalone_mode_run+0x414>
80007142:	fe 7c 28 00 	mov	r12,-55296
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
80007146:	e0 a0 03 2e 	rcall	800077a2 <usart_write_line>
8000714a:	e0 6c 75 30 	mov	r12,30000
	my_delay(30000);
8000714e:	fe b0 e2 aa 	rcall	800036a2 <my_delay>
80007152:	fe b0 fb e1 	rcall	80006914 <get_LCD_cmd>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
80007156:	4b 2b       	lddpc	r11,8000721c <standalone_mode_run+0x418>
80007158:	e0 a0 0f 6e 	rcall	80009034 <strcmp>
8000715c:	cf 21       	brne	80007140 <standalone_mode_run+0x33c>
8000715e:	e8 f8 03 30 	ld.w	r8,r4[816]
					sprintf(tempstring1,"DMETER_VALUE 1 %u\r",(experimentcount+1));
					usart_write_line(LCD_USART, tempstring1);
					
					while(detect_lcd()==false);
	
					sprintf(tempstring1,"DMETER_VALUE 2 %u\r",t_experiment.N_experiments);
80007162:	4b eb       	lddpc	r11,80007258 <standalone_mode_run+0x454>
80007164:	1a d8       	st.w	--sp,r8
80007166:	0c 9c       	mov	r12,r6
80007168:	e0 a0 0f 48 	rcall	80008ff8 <sprintf>
8000716c:	0c 9b       	mov	r11,r6
8000716e:	fe 7c 28 00 	mov	r12,-55296
					usart_write_line(LCD_USART, tempstring1);
80007172:	e0 a0 03 18 	rcall	800077a2 <usart_write_line>
80007176:	2f fd       	sub	sp,-4
80007178:	4a 8b       	lddpc	r11,80007218 <standalone_mode_run+0x414>
8000717a:	fe 7c 28 00 	mov	r12,-55296
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
8000717e:	e0 a0 03 12 	rcall	800077a2 <usart_write_line>
80007182:	e0 6c 75 30 	mov	r12,30000
	my_delay(30000);
80007186:	fe b0 e2 8e 	rcall	800036a2 <my_delay>
8000718a:	fe b0 fb c5 	rcall	80006914 <get_LCD_cmd>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
8000718e:	4a 4b       	lddpc	r11,8000721c <standalone_mode_run+0x418>
80007190:	e0 a0 0f 52 	rcall	80009034 <strcmp>
80007194:	cf 21       	brne	80007178 <standalone_mode_run+0x374>
80007196:	1a d3       	st.w	--sp,r3
80007198:	4a eb       	lddpc	r11,80007250 <standalone_mode_run+0x44c>
					sprintf(tempstring1,"DMETER_VALUE 2 %u\r",t_experiment.N_experiments);
					usart_write_line(LCD_USART, tempstring1);
					
					while(detect_lcd()==false);
					
					sprintf(tempstring1,"DMETER_VALUE 3 %u\r",(sequencecount+1));
8000719a:	0c 9c       	mov	r12,r6
8000719c:	e0 a0 0f 2e 	rcall	80008ff8 <sprintf>
800071a0:	0c 9b       	mov	r11,r6
800071a2:	fe 7c 28 00 	mov	r12,-55296
					usart_write_line(LCD_USART, tempstring1);
800071a6:	e0 a0 02 fe 	rcall	800077a2 <usart_write_line>
800071aa:	2f fd       	sub	sp,-4
800071ac:	49 bb       	lddpc	r11,80007218 <standalone_mode_run+0x414>
800071ae:	fe 7c 28 00 	mov	r12,-55296
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
800071b2:	e0 a0 02 f8 	rcall	800077a2 <usart_write_line>
800071b6:	e0 6c 75 30 	mov	r12,30000
	my_delay(30000);
800071ba:	fe b0 e2 74 	rcall	800036a2 <my_delay>
800071be:	fe b0 fb ab 	rcall	80006914 <get_LCD_cmd>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
800071c2:	49 7b       	lddpc	r11,8000721c <standalone_mode_run+0x418>
800071c4:	e0 a0 0f 38 	rcall	80009034 <strcmp>
800071c8:	cf 21       	brne	800071ac <standalone_mode_run+0x3a8>
800071ca:	09 98       	ld.ub	r8,r4[0x1]
800071cc:	4a 4b       	lddpc	r11,8000725c <standalone_mode_run+0x458>
					sprintf(tempstring1,"DMETER_VALUE 3 %u\r",(sequencecount+1));
					usart_write_line(LCD_USART, tempstring1);
					
					while(detect_lcd()==false);
	
					sprintf(tempstring1,"DMETER_VALUE 4 %u\r",t_experiment.N_sequences);
800071ce:	1a d8       	st.w	--sp,r8
800071d0:	0c 9c       	mov	r12,r6
800071d2:	e0 a0 0f 13 	rcall	80008ff8 <sprintf>
800071d6:	0c 9b       	mov	r11,r6
800071d8:	fe 7c 28 00 	mov	r12,-55296
					usart_write_line(LCD_USART, tempstring1);
800071dc:	e0 a0 02 e3 	rcall	800077a2 <usart_write_line>
800071e0:	2f fd       	sub	sp,-4
800071e2:	48 eb       	lddpc	r11,80007218 <standalone_mode_run+0x414>
800071e4:	fe 7c 28 00 	mov	r12,-55296
	
};

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
800071e8:	e0 a0 02 dd 	rcall	800077a2 <usart_write_line>
800071ec:	e0 6c 75 30 	mov	r12,30000
	my_delay(30000);
800071f0:	fe b0 e2 59 	rcall	800036a2 <my_delay>
800071f4:	fe b0 fb 90 	rcall	80006914 <get_LCD_cmd>
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
800071f8:	48 9b       	lddpc	r11,8000721c <standalone_mode_run+0x418>
800071fa:	e0 a0 0f 1d 	rcall	80009034 <strcmp>
800071fe:	cf 21       	brne	800071e2 <standalone_mode_run+0x3de>
80007200:	30 12       	mov	r2,1
80007202:	fe 9f fe f7 	bral	80006ff0 <standalone_mode_run+0x1ec>
80007206:	fe 7c 28 00 	mov	r12,-55296
					usart_write_line(LCD_USART, "play confcanc\r\n");
					while(detect_lcd()==false);
				}
				else if((progscreen==false) && (strcmp(LCDCMD,"BR3\r")==0))	//BR3 is confirm cancel button
				{
					usart_write_line(LCD_USART, "play modesel\r\n"); //maybe modsel isn't necessary here, but will be done after return?
8000720a:	49 6b       	lddpc	r11,80007260 <standalone_mode_run+0x45c>
8000720c:	e0 a0 02 cb 	rcall	800077a2 <usart_write_line>
80007210:	04 9c       	mov	r12,r2
80007212:	2f ad       	sub	sp,-24
80007214:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
		}
		
	}
	
	return true;
}
80007218:	80 00       	ld.sh	r0,r0[0x0]
8000721a:	e3 b4       	*unknown*
8000721c:	80 00       	ld.sh	r0,r0[0x0]
8000721e:	e3 bc       	*unknown*
80007220:	80 00       	ld.sh	r0,r0[0x0]
80007222:	e4 30 80 00 	sub	r0,360448
80007226:	e4 40 00 00 	cp.w	r0,262144
8000722a:	0f e4       	ld.ub	r4,r7[0x6]
8000722c:	80 00       	ld.sh	r0,r0[0x0]
8000722e:	e4 54 80 00 	cp.w	r4,360448
80007232:	e4 68 80 00 	mov	r8,294912
80007236:	e4 7c 00 00 	mov	r12,327680
8000723a:	0f 80       	ld.ub	r0,r7[0x0]
8000723c:	80 00       	ld.sh	r0,r0[0x0]
8000723e:	e4 a0 80 00 	rcall	8009723e <_data_lma+0x8866e>
80007242:	e4 00       	*unknown*
80007244:	80 00       	ld.sh	r0,r0[0x0]
80007246:	e4 08       	*unknown*
80007248:	80 00       	ld.sh	r0,r0[0x0]
8000724a:	e4 b8       	*unknown*
8000724c:	00 00       	add	r0,r0
8000724e:	13 24       	ld.uh	r4,r9++
80007250:	80 00       	ld.sh	r0,r0[0x0]
80007252:	e4 e0 80 00 	ld.d	r0,r2[-32768]
80007256:	e4 90 80 00 	breq	800b7256 <_data_lma+0xa8686>
8000725a:	e4 cc 80 00 	sub	r12,r2,-32768
8000725e:	e4 f4 80 00 	ld.w	r4,r2[-32768]
80007262:	e4 a8       	*unknown*

80007264 <idle>:
80007264:	d4 31       	pushm	r0-r7,lr
80007266:	20 5d       	sub	sp,20
80007268:	30 03       	mov	r3,0
8000726a:	fe f6 04 56 	ld.w	r6,pc[1110]
8000726e:	fe f7 04 56 	ld.w	r7,pc[1110]
80007272:	fe f5 04 56 	ld.w	r5,pc[1110]
80007276:	c0 48       	rjmp	8000727e <idle+0x1a>
80007278:	fe b0 fd 5e 	rcall	80006d34 <idle_getmode>
8000727c:	18 93       	mov	r3,r12
8000727e:	58 03       	cp.w	r3,0
80007280:	c2 11       	brne	800072c2 <idle+0x5e>
80007282:	0d 88       	ld.ub	r8,r6[0x0]
80007284:	e6 08 18 00 	cp.b	r8,r3
80007288:	cf 81       	brne	80007278 <idle+0x14>
8000728a:	fe fb 04 42 	ld.w	r11,pc[1090]
8000728e:	fe 7c 28 00 	mov	r12,-55296
80007292:	e0 a0 02 88 	rcall	800077a2 <usart_write_line>
80007296:	e0 6c 75 30 	mov	r12,30000
8000729a:	fe b0 e2 04 	rcall	800036a2 <my_delay>
8000729e:	fe b0 fb 3b 	rcall	80006914 <get_LCD_cmd>
800072a2:	fe fb 04 2e 	ld.w	r11,pc[1070]
800072a6:	e0 a0 0e c7 	rcall	80009034 <strcmp>

bool detect_lcd(void)
{
	usart_write_line(LCD_USART, "PING\r");
	my_delay(30000);
	if(strcmp(get_LCD_cmd(),"0\r")==0) //in verbose off mode, pont will be 0\r
800072aa:	ce 71       	brne	80007278 <idle+0x14>
		{
			if(lcdinit==false) //check for LCD
			{
				if(detect_lcd()==true)
				{
					usart_write_line(LCD_USART, "play modesel\r\n");
800072ac:	fe fb 04 28 	ld.w	r11,pc[1064]
800072b0:	fe 7c 28 00 	mov	r12,-55296
800072b4:	e0 a0 02 77 	rcall	800077a2 <usart_write_line>
					lcdinit=true;
800072b8:	30 19       	mov	r9,1
800072ba:	fe f8 04 06 	ld.w	r8,pc[1030]
800072be:	b0 89       	st.b	r8[0x0],r9
800072c0:	cd cb       	rjmp	80007278 <idle+0x14>
	return SD_card_valid;
}

bool SD_card_inserted(void)
{
	if(gpio_get_pin_value(SD_detect_pin)==0)
800072c2:	36 ac       	mov	r12,106
800072c4:	fe b0 e1 a2 	rcall	80003608 <gpio_get_pin_value>
800072c8:	c3 60       	breq	80007334 <idle+0xd0>
800072ca:	30 14       	mov	r4,1
			}
			tempmode=idle_getmode();
		}
		uint8_t tempsd=check_SD();
		
		switch(tempmode) {
800072cc:	30 38       	mov	r8,3
800072ce:	f0 03 18 00 	cp.b	r3,r8
800072d2:	c5 70       	breq	80007380 <idle+0x11c>
800072d4:	f0 03 18 00 	cp.b	r3,r8
800072d8:	e0 8b 00 5e 	brhi	80007394 <idle+0x130>
800072dc:	30 19       	mov	r9,1
800072de:	f2 03 18 00 	cp.b	r3,r9
800072e2:	e0 80 00 99 	breq	80007414 <idle+0x1b0>
800072e6:	30 2a       	mov	r10,2
800072e8:	f4 03 18 00 	cp.b	r3,r10
800072ec:	c0 30       	breq	800072f2 <idle+0x8e>
				break;

			case get_data:
				if(tempsd!=SD_card_valid)
				{
					usart_write_line(USB_USART, "bad SD card\n");	//if SD card is bad, say so and return
800072ee:	30 03       	mov	r3,0
800072f0:	cc 9b       	rjmp	80007282 <idle+0x1e>
					usart_write_line(LCD_USART, "play modesel\r\n");
				}	
				break;
				
			case select_checkSD:
				switch (tempsd) {
800072f2:	f4 04 18 00 	cp.b	r4,r10
800072f6:	e0 80 01 9c 	breq	8000762e <idle+0x3ca>
800072fa:	f0 04 18 00 	cp.b	r4,r8
800072fe:	e0 80 01 8c 	breq	80007616 <idle+0x3b2>
80007302:	f2 04 18 00 	cp.b	r4,r9
80007306:	e0 80 01 7c 	breq	800075fe <idle+0x39a>
					case  SD_card_valid:
						usart_write_line(LCD_USART, "play goodSD\r\n");
8000730a:	fe fb 03 ce 	ld.w	r11,pc[974]
8000730e:	fe 7c 28 00 	mov	r12,-55296
80007312:	e0 a0 02 48 	rcall	800077a2 <usart_write_line>
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
80007316:	fe b0 fa ff 	rcall	80006914 <get_LCD_cmd>
8000731a:	fe fb 03 c2 	ld.w	r11,pc[962]
8000731e:	e0 a0 0e 8b 	rcall	80009034 <strcmp>
80007322:	cf a1       	brne	80007316 <idle+0xb2>
						usart_write_line(LCD_USART, "play modesel\r\n");
						break;
					case SD_card_invalid:
						usart_write_line(USB_USART, "play badSD\r\n");
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
						usart_write_line(LCD_USART, "play modesel\r\n");
80007324:	18 93       	mov	r3,r12
80007326:	fe fb 03 ae 	ld.w	r11,pc[942]
8000732a:	fe 7c 28 00 	mov	r12,-55296
8000732e:	e0 a0 02 3a 	rcall	800077a2 <usart_write_line>
80007332:	ca 8b       	rjmp	80007282 <idle+0x1e>
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	  };
80007334:	fe fb 03 ac 	ld.w	r11,pc[940]
80007338:	76 08       	ld.w	r8,r11[0x0]
  
	if(sd_mmc_spi_init(SD_spiOptions, PBA_SPEED)==false)
8000733a:	20 4d       	sub	sp,16
8000733c:	50 08       	stdsp	sp[0x0],r8
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	  };
8000733e:	50 58       	stdsp	sp[0x14],r8
80007340:	76 18       	ld.w	r8,r11[0x4]
  
	if(sd_mmc_spi_init(SD_spiOptions, PBA_SPEED)==false)
80007342:	50 18       	stdsp	sp[0x4],r8
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	  };
80007344:	50 68       	stdsp	sp[0x18],r8
80007346:	76 28       	ld.w	r8,r11[0x8]
  
	if(sd_mmc_spi_init(SD_spiOptions, PBA_SPEED)==false)
80007348:	50 28       	stdsp	sp[0x8],r8
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	  };
8000734a:	50 78       	stdsp	sp[0x1c],r8
8000734c:	76 38       	ld.w	r8,r11[0xc]
  
	if(sd_mmc_spi_init(SD_spiOptions, PBA_SPEED)==false)
8000734e:	e0 6c 87 00 	mov	r12,34560
80007352:	ea 1c 03 93 	orh	r12,0x393
80007356:	50 38       	stdsp	sp[0xc],r8
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	  };
80007358:	50 88       	stdsp	sp[0x20],r8
  
	if(sd_mmc_spi_init(SD_spiOptions, PBA_SPEED)==false)
8000735a:	fe b0 dd 45 	rcall	80002de4 <sd_mmc_spi_init>
8000735e:	2f cd       	sub	sp,-16
80007360:	58 0c       	cp.w	r12,0
80007362:	c7 80       	breq	80007452 <idle+0x1ee>
	{
		return SD_card_init_failed;
	}
  
	if(card_type!=SD_CARD_2_SDHC)
80007364:	30 38       	mov	r8,3
80007366:	fe fa 03 7e 	ld.w	r10,pc[894]
8000736a:	15 84       	ld.ub	r4,r10[0x0]
8000736c:	f0 04 18 00 	cp.b	r4,r8
80007370:	f9 b4 01 03 	movne	r4,3
80007374:	f9 b4 00 00 	moveq	r4,0
			}
			tempmode=idle_getmode();
		}
		uint8_t tempsd=check_SD();
		
		switch(tempmode) {
80007378:	30 38       	mov	r8,3
8000737a:	f0 03 18 00 	cp.b	r3,r8
8000737e:	ca b1       	brne	800072d4 <idle+0x70>
			case start_hostmode:
				if(tempsd!=SD_card_valid)
80007380:	58 04       	cp.w	r4,0
80007382:	c6 a0       	breq	80007456 <idle+0x1f2>
				{
					usart_write_line(USB_USART, "bad SD card\n");
80007384:	fe fb 03 64 	ld.w	r11,pc[868]
80007388:	fc 7c 14 00 	mov	r12,-191488
8000738c:	30 03       	mov	r3,0
8000738e:	e0 a0 02 0a 	rcall	800077a2 <usart_write_line>
80007392:	c7 8b       	rjmp	80007282 <idle+0x1e>
			}
			tempmode=idle_getmode();
		}
		uint8_t tempsd=check_SD();
		
		switch(tempmode) {
80007394:	30 48       	mov	r8,4
80007396:	f0 03 18 00 	cp.b	r3,r8
8000739a:	c2 20       	breq	800073de <idle+0x17a>
8000739c:	30 58       	mov	r8,5
8000739e:	f0 03 18 00 	cp.b	r3,r8
800073a2:	ca 61       	brne	800072ee <idle+0x8a>
						break;
				}	
				break;

			case program_experiment:
				if(tempsd!=SD_card_valid)
800073a4:	58 04       	cp.w	r4,0
800073a6:	c4 f1       	brne	80007444 <idle+0x1e0>
				{
					usart_write_line(USB_USART, "bad SD card\n");
				}
				else
				{
					usart_write_line(USB_USART, "good SD card\n");
800073a8:	fe fb 03 44 	ld.w	r11,pc[836]
800073ac:	fc 7c 14 00 	mov	r12,-191488
800073b0:	cf 9d       	rcall	800077a2 <usart_write_line>
800073b2:	fe b0 fb 05 	rcall	800069bc <get_experiment_from_host_to_SD>
					get_experiment_from_host_to_SD();
800073b6:	32 08       	mov	r8,32
				
					my_SD_read_experiment_PDCA(experiment_base_address,(uint32_t)(&experiment.MODE), (uint32_t)(&bank1[0]), sizeof(experiment), blocks_per_cluster);
800073b8:	e0 69 03 98 	mov	r9,920
800073bc:	fe fa 03 34 	ld.w	r10,pc[820]
800073c0:	fe fb 03 34 	ld.w	r11,pc[820]
800073c4:	08 9c       	mov	r12,r4
800073c6:	fe b0 e2 6d 	rcall	800038a0 <my_SD_read_experiment_PDCA>
800073ca:	fe b0 ee 97 	rcall	800050f8 <validate_sequences>
				
					if(validate_sequences()==true)
800073ce:	c6 80       	breq	8000749e <idle+0x23a>
800073d0:	08 93       	mov	r3,r4
					{
						usart_write_line(USB_USART, "goodexp\n");
800073d2:	fe fb 03 26 	ld.w	r11,pc[806]
800073d6:	fc 7c 14 00 	mov	r12,-191488
800073da:	ce 4d       	rcall	800077a2 <usart_write_line>
800073dc:	c5 3b       	rjmp	80007282 <idle+0x1e>
800073de:	58 04       	cp.w	r4,0
800073e0:	c3 21       	brne	80007444 <idle+0x1e0>
					}
				}
				break;

			case get_data:
				if(tempsd!=SD_card_valid)
800073e2:	fe fb 03 0a 	ld.w	r11,pc[778]
				{
					usart_write_line(USB_USART, "bad SD card\n");	//if SD card is bad, say so and return
				}
				else
				{//if SD card is good, say so.  Then read the experiment and validate it
					usart_write_line(USB_USART, "good SD card\n");	
800073e6:	fc 7c 14 00 	mov	r12,-191488
800073ea:	cd cd       	rcall	800077a2 <usart_write_line>
800073ec:	32 08       	mov	r8,32
800073ee:	e0 69 03 98 	mov	r9,920
					//this will read in entire first cluster of SD
					my_SD_read_experiment_PDCA(experiment_base_address,(uint32_t)(&experiment.MODE), (uint32_t)(&bank1[0]), sizeof(experiment), blocks_per_cluster);
800073f2:	fe fa 02 fe 	ld.w	r10,pc[766]
800073f6:	fe fb 02 fe 	ld.w	r11,pc[766]
800073fa:	08 9c       	mov	r12,r4
800073fc:	fe b0 e2 52 	rcall	800038a0 <my_SD_read_experiment_PDCA>
80007400:	fe b0 ee 7c 	rcall	800050f8 <validate_sequences>
80007404:	c5 41       	brne	800074ac <idle+0x248>
				
					if(validate_sequences()==true)
80007406:	08 93       	mov	r3,r4
80007408:	fe fb 02 f4 	ld.w	r11,pc[756]
							}
						}
					}
					else
					{
						usart_write_line(USB_USART, "badexperiment\n");
8000740c:	fc 7c 14 00 	mov	r12,-191488
80007410:	cc 9d       	rcall	800077a2 <usart_write_line>
80007412:	c3 8b       	rjmp	80007282 <idle+0x1e>
80007414:	58 04       	cp.w	r4,0
80007416:	c2 90       	breq	80007468 <idle+0x204>
80007418:	f2 04 18 00 	cp.b	r4,r9
					//go to host execution
				}	
				break;

			case select_standalone:
				if(tempsd==SD_card_valid)
8000741c:	e0 80 01 39 	breq	8000768e <idle+0x42a>
					
						usart_write_line(LCD_USART, "play modesel\r\n");
						//will eventually have branch here to cancel, examine experiment, or proceed
					}
				}
				else if(tempsd==SD_card_not_inserted)
80007420:	30 28       	mov	r8,2
80007422:	f0 04 18 00 	cp.b	r4,r8
80007426:	e0 80 01 40 	breq	800076a6 <idle+0x442>
				{	//no SD card inserted
					usart_write_line(LCD_USART, "play noSD\r\n");
					while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
					usart_write_line(LCD_USART, "play modesel\r\n");
				}
				else if(tempsd==SD_card_init_failed)
8000742a:	fe fb 02 d6 	ld.w	r11,pc[726]
8000742e:	fc 7c 14 00 	mov	r12,-191488
					while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
					usart_write_line(LCD_USART, "play modesel\r\n");
				}
				else if(tempsd==SD_card_invalid)
				{	//SD card init but not valid
					usart_write_line(USB_USART, "play badSD\r\n");
80007432:	cb 8d       	rcall	800077a2 <usart_write_line>
80007434:	fe b0 fa 70 	rcall	80006914 <get_LCD_cmd>
80007438:	fe fb 02 a4 	ld.w	r11,pc[676]
8000743c:	e0 a0 0d fc 	rcall	80009034 <strcmp>
					while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
80007440:	cf a1       	brne	80007434 <idle+0x1d0>
80007442:	c7 1b       	rjmp	80007324 <idle+0xc0>
80007444:	fe fb 02 a4 	ld.w	r11,pc[676]
80007448:	fc 7c 14 00 	mov	r12,-191488
8000744c:	30 03       	mov	r3,0
				break;

			case get_data:
				if(tempsd!=SD_card_valid)
				{
					usart_write_line(USB_USART, "bad SD card\n");	//if SD card is bad, say so and return
8000744e:	ca ad       	rcall	800077a2 <usart_write_line>
80007450:	c1 9b       	rjmp	80007282 <idle+0x1e>
80007452:	30 24       	mov	r4,2
80007454:	c3 cb       	rjmp	800072cc <idle+0x68>
80007456:	fe fb 02 96 	ld.w	r11,pc[662]
8000745a:	fc 7c 14 00 	mov	r12,-191488
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	  };
  
	if(sd_mmc_spi_init(SD_spiOptions, PBA_SPEED)==false)
8000745e:	ca 2d       	rcall	800077a2 <usart_write_line>
80007460:	08 93       	mov	r3,r4
				{
					usart_write_line(USB_USART, "bad SD card\n");
				}
				else
				{
					usart_write_line(USB_USART, "good SD card\n");
80007462:	fe b0 fb 23 	rcall	80006aa8 <hostmode_run>
80007466:	c0 eb       	rjmp	80007282 <idle+0x1e>
80007468:	32 08       	mov	r8,32
8000746a:	e0 69 03 98 	mov	r9,920
					hostmode_run();
8000746e:	fe fa 02 96 	ld.w	r10,pc[662]
80007472:	fe fb 02 82 	ld.w	r11,pc[642]

			case select_standalone:
				if(tempsd==SD_card_valid)
				{	//valid SD card detected
					//retrieve experiment from SD card
					my_SD_read_experiment_PDCA(experiment_base_address,(uint32_t)(&experiment.MODE), (uint32_t)(&bank0[0]), sizeof(experiment), blocks_per_cluster);
80007476:	08 9c       	mov	r12,r4
80007478:	fe b0 e2 14 	rcall	800038a0 <my_SD_read_experiment_PDCA>
8000747c:	fe b0 ee 3e 	rcall	800050f8 <validate_sequences>
80007480:	e0 81 00 e3 	brne	80007646 <idle+0x3e2>
80007484:	fe fb 02 84 	ld.w	r11,pc[644]
80007488:	fe 7c 28 00 	mov	r12,-55296
					if(validate_sequences()==false)
8000748c:	c8 bd       	rcall	800077a2 <usart_write_line>
8000748e:	fe b0 fa 43 	rcall	80006914 <get_LCD_cmd>
					{	//sequence was not valid
						usart_write_line(LCD_USART, "play badexp\r\n");
80007492:	fe fb 02 4a 	ld.w	r11,pc[586]
80007496:	e0 a0 0d cf 	rcall	80009034 <strcmp>
8000749a:	cf a1       	brne	8000748e <idle+0x22a>
8000749c:	c4 4b       	rjmp	80007324 <idle+0xc0>
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
8000749e:	08 93       	mov	r3,r4
800074a0:	fe fb 02 6c 	ld.w	r11,pc[620]
800074a4:	fc 7c 14 00 	mov	r12,-191488
800074a8:	c7 dd       	rcall	800077a2 <usart_write_line>
800074aa:	ce ca       	rjmp	80007282 <idle+0x1e>
800074ac:	fe fb 02 64 	ld.w	r11,pc[612]
					{
						usart_write_line(USB_USART, "goodexp\n");
					}
					else
					{
						usart_write_line(USB_USART, "badexp\n");
800074b0:	fc 7c 14 00 	mov	r12,-191488
800074b4:	c7 7d       	rcall	800077a2 <usart_write_line>
800074b6:	fe b0 eb 1d 	rcall	80004af0 <gettruesequence>
800074ba:	30 3c       	mov	r12,3
800074bc:	fe b0 e9 10 	rcall	800046dc <pdca_disable>
					//this will read in entire first cluster of SD
					my_SD_read_experiment_PDCA(experiment_base_address,(uint32_t)(&experiment.MODE), (uint32_t)(&bank1[0]), sizeof(experiment), blocks_per_cluster);
				
					if(validate_sequences()==true)
					{	//if experiment is valid, say so, then get true experiment
						usart_write_line(USB_USART, "goodexperiment\n");
800074c0:	fe f8 02 30 	ld.w	r8,pc[560]
800074c4:	1a d4       	st.w	--sp,r4
800074c6:	30 e9       	mov	r9,14
800074c8:	e0 6a 03 98 	mov	r10,920
						gettruesequence();
800074cc:	fe fb 02 28 	ld.w	r11,pc[552]
						//send entire cluster's worth of data to host.  this will start with experiment and also include other "stuff" in the first cluster
						pdca_disable(USB_USART_TX_PDCA_CHANNEL);//goin to set up PDCA to send all of experiment, then start reading out bank1 until an entire cluster has been written
800074d0:	30 3c       	mov	r12,3
800074d2:	e0 64 3c 68 	mov	r4,15464
						my_pdca_init_channel(USB_USART_TX_PDCA_CHANNEL, (uint32_t)(&experiment.MODE),(uint32_t)(sizeof(experiment)), USB_USART_TX_PDCA_PID,   (uint32_t)(&bank1[0]),  (blocks_per_cluster*512-(uint32_t)(sizeof(experiment))), PDCA_TRANSFER_SIZE_BYTE);
800074d6:	1a d4       	st.w	--sp,r4
800074d8:	fe b0 e1 22 	rcall	8000371c <my_pdca_init_channel>
800074dc:	30 3c       	mov	r12,3
800074de:	fe b0 e9 0c 	rcall	800046f6 <pdca_enable>
800074e2:	2f ed       	sub	sp,-8
800074e4:	30 3c       	mov	r12,3
800074e6:	fe b0 e9 15 	rcall	80004710 <pdca_get_transfer_status>
800074ea:	ed bc 00 01 	bld	r12,0x1
800074ee:	cf b1       	brne	800074e4 <idle+0x280>
						pdca_enable(USB_USART_TX_PDCA_CHANNEL);
800074f0:	30 3c       	mov	r12,3
800074f2:	fe b0 e8 f5 	rcall	800046dc <pdca_disable>
800074f6:	fe fa 02 1e 	ld.w	r10,pc[542]
						while(!(pdca_get_transfer_status(USB_USART_TX_PDCA_CHANNEL) & AVR32_PDCA_TRC_MASK)); //wait until transfer is done
800074fa:	fc 7c 14 00 	mov	r12,-191488
800074fe:	f5 3b 00 61 	ld.ub	r11,r10[97]
80007502:	c4 2d       	rcall	80007786 <usart_putchar>
						pdca_disable(USB_USART_TX_PDCA_CHANNEL);
80007504:	fe f9 02 10 	ld.w	r9,pc[528]
80007508:	fc 7c 14 00 	mov	r12,-191488
					
						for(uint8_t i=0;i<Nsequences_max;i++)
						{
							usart_putchar(USB_USART,(uint8_t)(t_experiment.t_sequence[i].clusters_per_sequence));
8000750c:	f3 3b 00 c5 	ld.ub	r11,r9[197]
80007510:	c3 bd       	rcall	80007786 <usart_putchar>
80007512:	fe f8 02 02 	ld.w	r8,pc[514]
80007516:	fc 7c 14 00 	mov	r12,-191488
8000751a:	f1 3b 01 29 	ld.ub	r11,r8[297]
8000751e:	c3 4d       	rcall	80007786 <usart_putchar>
80007520:	4f da       	lddpc	r10,80007714 <idle+0x4b0>
80007522:	fc 7c 14 00 	mov	r12,-191488
80007526:	f5 3b 01 8d 	ld.ub	r11,r10[397]
8000752a:	c2 ed       	rcall	80007786 <usart_putchar>
8000752c:	4f a9       	lddpc	r9,80007714 <idle+0x4b0>
8000752e:	fc 7c 14 00 	mov	r12,-191488
80007532:	f3 3b 01 f1 	ld.ub	r11,r9[497]
80007536:	c2 8d       	rcall	80007786 <usart_putchar>
80007538:	4f 78       	lddpc	r8,80007714 <idle+0x4b0>
8000753a:	fc 7c 14 00 	mov	r12,-191488
8000753e:	f1 3b 02 55 	ld.ub	r11,r8[597]
80007542:	c2 2d       	rcall	80007786 <usart_putchar>
80007544:	4f 4a       	lddpc	r10,80007714 <idle+0x4b0>
80007546:	fc 7c 14 00 	mov	r12,-191488
8000754a:	f5 3b 02 b9 	ld.ub	r11,r10[697]
8000754e:	c1 cd       	rcall	80007786 <usart_putchar>
80007550:	4f 19       	lddpc	r9,80007714 <idle+0x4b0>
80007552:	fc 7c 14 00 	mov	r12,-191488
80007556:	f3 3b 03 1d 	ld.ub	r11,r9[797]
8000755a:	c1 6d       	rcall	80007786 <usart_putchar>
8000755c:	4e e8       	lddpc	r8,80007714 <idle+0x4b0>
8000755e:	f0 f9 03 30 	ld.w	r9,r8[816]
80007562:	58 09       	cp.w	r9,0
80007564:	fe 90 fe c5 	breq	800072ee <idle+0x8a>
80007568:	30 0b       	mov	r11,0
8000756a:	11 98       	ld.ub	r8,r8[0x1]
8000756c:	50 0b       	stdsp	sp[0x0],r11
8000756e:	e0 61 40 00 	mov	r1,16384
80007572:	fc 74 14 00 	mov	r4,-191488
80007576:	16 92       	mov	r2,r11
80007578:	58 08       	cp.w	r8,0
8000757a:	c3 90       	breq	800075ec <idle+0x388>
8000757c:	30 03       	mov	r3,0
8000757e:	68 58       	ld.w	r8,r4[0x14]
80007580:	ed b8 00 08 	bld	r8,0x8
80007584:	cf d1       	brne	8000757e <idle+0x31a>
80007586:	68 08       	ld.w	r8,r4[0x0]
80007588:	e0 6a 3a 98 	mov	r10,15000
						}
					
						uint32_t SD_read_ptr=data_base_address;
					
						//now need to send actual data
						for(uint8_t i=0;i<t_experiment.N_experiments;i++)
8000758c:	ab b8       	sbr	r8,0xb
8000758e:	89 08       	st.w	r4[0x0],r8
80007590:	89 9a       	st.w	r4[0x24],r10
80007592:	30 4c       	mov	r12,4
80007594:	fe b0 e8 a4 	rcall	800046dc <pdca_disable>
80007598:	fc 79 00 00 	mov	r9,-196608
8000759c:	f2 f8 01 00 	ld.w	r8,r9[256]
800075a0:	b0 82       	st.b	r8[0x0],r2
	return "false";
}

char* get_HOST_cmd(void)
{
	if((USB_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
800075a2:	0e 9b       	mov	r11,r7
800075a4:	34 0a       	mov	r10,64
		USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
		cmd_ptr=(char *)(AVR32_PDCA.channel[USB_USART_RX_PDCA_CHANNEL].mar);
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
800075a6:	30 4c       	mov	r12,4
						uint32_t SD_read_ptr=data_base_address;
					
						//now need to send actual data
						for(uint8_t i=0;i<t_experiment.N_experiments;i++)
						{
							for(uint8_t j=0;j<t_experiment.N_sequences;j++)
800075a8:	8b 07       	st.w	r5[0x0],r7
800075aa:	fe b0 e8 be 	rcall	80004726 <pdca_load_channel>
	return "false";
}

char* get_HOST_cmd(void)
{
	if((USB_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
800075ae:	30 4c       	mov	r12,4
800075b0:	fe b0 e8 a3 	rcall	800046f6 <pdca_enable>
800075b4:	4d 9b       	lddpc	r11,80007718 <idle+0x4b4>
	{//timeout detected
		USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
800075b6:	6a 0c       	ld.w	r12,r5[0x0]
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
800075b8:	e0 a0 0d 3e 	rcall	80009034 <strcmp>

char* get_HOST_cmd(void)
{
	if((USB_USART->csr & AVR32_USART_CSR_TIMEOUT_MASK) != 0)
	{//timeout detected
		USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
800075bc:	ce 11       	brne	8000757e <idle+0x31a>
800075be:	4d 68       	lddpc	r8,80007714 <idle+0x4b0>
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
800075c0:	e6 00 10 64 	mul	r0,r3,100
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
800075c4:	02 9c       	mov	r12,r1
800075c6:	f0 00 00 00 	add	r0,r8,r0
		cmd_ptr=(char *)(AVR32_PDCA.channel[USB_USART_RX_PDCA_CHANNEL].mar);
800075ca:	2a 00       	sub	r0,-96
800075cc:	01 9b       	ld.ub	r11,r0[0x1]
800075ce:	fe b0 e7 4d 	rcall	80004468 <send_data_to_host>
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
		cmd_ptr=&host_USART_buffer[0];
		
		pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
800075d2:	80 88       	ld.uh	r8,r0[0x0]
800075d4:	af 68       	lsl	r8,0xe
800075d6:	2f f3       	sub	r3,-1
		USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
		
		pdca_disable(USB_USART_RX_PDCA_CHANNEL);
		cmd_ptr=(char *)(AVR32_PDCA.channel[USB_USART_RX_PDCA_CHANNEL].mar);
		*(cmd_ptr)=0x00;  //make sure command string is null terminated
		cmd_ptr=&host_USART_buffer[0];
800075d8:	10 01       	add	r1,r8
		
		pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
800075da:	4c fb       	lddpc	r11,80007714 <idle+0x4b0>
800075dc:	5c 53       	castu.b	r3
		pdca_enable(USB_USART_RX_PDCA_CHANNEL);
800075de:	17 98       	ld.ub	r8,r11[0x1]
800075e0:	e6 08 18 00 	cp.b	r8,r3
						//now need to send actual data
						for(uint8_t i=0;i<t_experiment.N_experiments;i++)
						{
							for(uint8_t j=0;j<t_experiment.N_sequences;j++)
							{
								while(strcmp(get_HOST_cmd(),"SEND SEQUENCE\n")!=0); //wait for host to ask for each sequence
800075e4:	fe 9b ff cd 	brhi	8000757e <idle+0x31a>
800075e8:	f6 f9 03 30 	ld.w	r9,r11[816]
800075ec:	40 0a       	lddsp	r10,sp[0x0]
								send_data_to_host(SD_read_ptr,t_experiment.t_sequence[j].clusters_per_sequence);
800075ee:	2f fa       	sub	r10,-1
800075f0:	5c 5a       	castu.b	r10
800075f2:	50 0a       	stdsp	sp[0x0],r10
800075f4:	12 3a       	cp.w	r10,r9
800075f6:	cc 13       	brcs	80007578 <idle+0x314>
800075f8:	30 03       	mov	r3,0
800075fa:	fe 9f fe 44 	bral	80007282 <idle+0x1e>
800075fe:	4c 8b       	lddpc	r11,8000771c <idle+0x4b8>
80007600:	fe 7c 28 00 	mov	r12,-55296
								SD_read_ptr+=t_experiment.t_sequence[j].clusters_per_sequence*blocks_per_cluster*bytes_per_block;
80007604:	cc fc       	rcall	800077a2 <usart_write_line>
						uint32_t SD_read_ptr=data_base_address;
					
						//now need to send actual data
						for(uint8_t i=0;i<t_experiment.N_experiments;i++)
						{
							for(uint8_t j=0;j<t_experiment.N_sequences;j++)
80007606:	fe b0 f9 87 	rcall	80006914 <get_LCD_cmd>
8000760a:	4b 5b       	lddpc	r11,800076dc <idle+0x478>
8000760c:	e0 a0 0d 14 	rcall	80009034 <strcmp>
80007610:	cf b1       	brne	80007606 <idle+0x3a2>
80007612:	fe 9f fe 89 	bral	80007324 <idle+0xc0>
80007616:	4b bb       	lddpc	r11,80007700 <idle+0x49c>
80007618:	fc 7c 14 00 	mov	r12,-191488
						}
					
						uint32_t SD_read_ptr=data_base_address;
					
						//now need to send actual data
						for(uint8_t i=0;i<t_experiment.N_experiments;i++)
8000761c:	cc 3c       	rcall	800077a2 <usart_write_line>
8000761e:	fe b0 f9 7b 	rcall	80006914 <get_LCD_cmd>
80007622:	4a fb       	lddpc	r11,800076dc <idle+0x478>
80007624:	e0 a0 0d 08 	rcall	80009034 <strcmp>
				break;

			case get_data:
				if(tempsd!=SD_card_valid)
				{
					usart_write_line(USB_USART, "bad SD card\n");	//if SD card is bad, say so and return
80007628:	cf b1       	brne	8000761e <idle+0x3ba>
8000762a:	fe 9f fe 7d 	bral	80007324 <idle+0xc0>
						usart_write_line(LCD_USART, "play goodSD\r\n");
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
						usart_write_line(LCD_USART, "play modesel\r\n");
						break;
					case SD_card_not_inserted:
						usart_write_line(LCD_USART, "play noSD\r\n");
8000762e:	4b db       	lddpc	r11,80007720 <idle+0x4bc>
80007630:	fc 7c 14 00 	mov	r12,-191488
80007634:	cb 7c       	rcall	800077a2 <usart_write_line>
80007636:	fe b0 f9 6f 	rcall	80006914 <get_LCD_cmd>
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
8000763a:	4a 9b       	lddpc	r11,800076dc <idle+0x478>
8000763c:	e0 a0 0c fc 	rcall	80009034 <strcmp>
80007640:	cf b1       	brne	80007636 <idle+0x3d2>
80007642:	fe 9f fe 71 	bral	80007324 <idle+0xc0>
80007646:	4b 8b       	lddpc	r11,80007724 <idle+0x4c0>
						usart_write_line(USB_USART, "play SDerr\r\n");
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
						usart_write_line(LCD_USART, "play modesel\r\n");
						break;
					case SD_card_invalid:
						usart_write_line(USB_USART, "play badSD\r\n");
80007648:	fe 7c 28 00 	mov	r12,-55296
8000764c:	ca bc       	rcall	800077a2 <usart_write_line>
8000764e:	fe b0 f9 63 	rcall	80006914 <get_LCD_cmd>
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
80007652:	4a 3b       	lddpc	r11,800076dc <idle+0x478>
80007654:	e0 a0 0c f0 	rcall	80009034 <strcmp>
80007658:	cf b1       	brne	8000764e <idle+0x3ea>
8000765a:	18 94       	mov	r4,r12
8000765c:	fe b0 fb d4 	rcall	80006e04 <standalone_mode_run>
80007660:	34 0a       	mov	r10,64
						usart_write_line(LCD_USART, "play noSD\r\n");
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
						usart_write_line(LCD_USART, "play modesel\r\n");
						break;
					case SD_card_init_failed:
						usart_write_line(USB_USART, "play SDerr\r\n");
80007662:	49 9b       	lddpc	r11,800076c4 <idle+0x460>
80007664:	30 4c       	mov	r12,4
80007666:	fe b0 e8 60 	rcall	80004726 <pdca_load_channel>
8000766a:	30 4c       	mov	r12,4
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
8000766c:	fe b0 e8 45 	rcall	800046f6 <pdca_enable>
80007670:	fc 78 14 00 	mov	r8,-191488
80007674:	70 09       	ld.w	r9,r8[0x0]
80007676:	ab b9       	sbr	r9,0xb
80007678:	91 09       	st.w	r8[0x0],r9
8000767a:	e0 69 3a 98 	mov	r9,15000
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
						usart_write_line(LCD_USART, "play modesel\r\n");
					}
					else
					{	//sequence was valid
						usart_write_line(LCD_USART, "play goodexp\r\n");
8000767e:	08 93       	mov	r3,r4
80007680:	91 99       	st.w	r8[0x24],r9
80007682:	49 5b       	lddpc	r11,800076d4 <idle+0x470>
80007684:	fe 7c 28 00 	mov	r12,-55296
						while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
80007688:	c8 dc       	rcall	800077a2 <usart_write_line>
8000768a:	fe 9f fd fc 	bral	80007282 <idle+0x1e>
8000768e:	4a 4b       	lddpc	r11,8000771c <idle+0x4b8>
80007690:	fe 7c 28 00 	mov	r12,-55296
						standalone_mode_run();
80007694:	c8 7c       	rcall	800077a2 <usart_write_line>
80007696:	fe b0 f9 3f 	rcall	80006914 <get_LCD_cmd>
					
						//re-enable USB USART to receive commands from host
						pdca_load_channel(USB_USART_RX_PDCA_CHANNEL, (&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)));
8000769a:	49 1b       	lddpc	r11,800076dc <idle+0x478>
8000769c:	e0 a0 0c cc 	rcall	80009034 <strcmp>
800076a0:	cf b1       	brne	80007696 <idle+0x432>
						pdca_enable(USB_USART_RX_PDCA_CHANNEL);
800076a2:	fe 9f fe 41 	bral	80007324 <idle+0xc0>
800076a6:	49 fb       	lddpc	r11,80007720 <idle+0x4bc>
						USB_USART->cr|=AVR32_USART_CR_STTTO_MASK;	//set to not start counting again until after new character is received
800076a8:	fc 7c 14 00 	mov	r12,-191488
800076ac:	c7 bc       	rcall	800077a2 <usart_write_line>
800076ae:	fe b0 f9 33 	rcall	80006914 <get_LCD_cmd>
						USB_USART->rtor=15000; //baud rate is 3mbaud, so 15000 gives 5ms timeout
800076b2:	48 bb       	lddpc	r11,800076dc <idle+0x478>
800076b4:	e0 a0 0c c0 	rcall	80009034 <strcmp>
800076b8:	cf b1       	brne	800076ae <idle+0x44a>
					
						usart_write_line(LCD_USART, "play modesel\r\n");
800076ba:	fe 9f fe 35 	bral	80007324 <idle+0xc0>
800076be:	d7 03       	nop
800076c0:	00 00       	add	r0,r0
800076c2:	08 fd       	st.b	--r4,sp
800076c4:	00 00       	add	r0,r0
800076c6:	95 94       	st.w	r10[0x24],r4
						//will eventually have branch here to cancel, examine experiment, or proceed
					}
				}
				else if(tempsd==SD_card_not_inserted)
				{	//no SD card inserted
					usart_write_line(LCD_USART, "play noSD\r\n");
800076c8:	00 00       	add	r0,r0
800076ca:	95 90       	st.w	r10[0x24],r0
800076cc:	80 00       	ld.sh	r0,r0[0x0]
800076ce:	e3 b4       	*unknown*
800076d0:	80 00       	ld.sh	r0,r0[0x0]
					while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
800076d2:	e3 bc       	*unknown*
800076d4:	80 00       	ld.sh	r0,r0[0x0]
800076d6:	e4 a8       	*unknown*
800076d8:	80 00       	ld.sh	r0,r0[0x0]
800076da:	e5 74 80 00 	stcond	r2[-32768],r4
800076de:	e4 08       	*unknown*
800076e0:	80 00       	ld.sh	r0,r0[0x0]
					usart_write_line(LCD_USART, "play modesel\r\n");
				}
				else if(tempsd==SD_card_init_failed)
				{	//SD card failed to init
					usart_write_line(USB_USART, "play SDerr\r\n");
800076e2:	e3 9c       	*unknown*
800076e4:	00 00       	add	r0,r0
800076e6:	0b 4e       	ld.w	lr,--r5
800076e8:	80 00       	ld.sh	r0,r0[0x0]
800076ea:	e5 08 80 00 	ld.sh	r8,r2[-32768]
					while(strcmp(get_LCD_cmd(),"BR2\r")!=0);
800076ee:	e5 18 00 00 	ld.uh	r8,r2[0]
800076f2:	13 64       	ld.uh	r4,--r9
800076f4:	00 00       	add	r0,r0
800076f6:	0b e8       	ld.ub	r8,r5[0x6]
800076f8:	80 00       	ld.sh	r0,r0[0x0]
800076fa:	e3 c8 80 00 	ldm	r8++,pc
800076fe:	e5 a4 80 00 	cop	cp4,cr0,cr0,cr0,0x48
80007702:	e5 64 00 00 	st.b	r2[0],r4
80007706:	53 7c       	stdsp	sp[0xdc],r12
80007708:	80 00       	ld.sh	r0,r0[0x0]
8000770a:	e5 28 80 00 	ld.sb	r8,r2[-32768]
8000770e:	e3 c0 80 00 	ldm	r0++,pc
80007712:	e5 84       	*unknown*
80007714:	00 00       	add	r0,r0
80007716:	0f e4       	ld.ub	r4,r7[0x6]
80007718:	80 00       	ld.sh	r0,r0[0x0]
8000771a:	e5 94       	*unknown*
8000771c:	80 00       	ld.sh	r0,r0[0x0]
8000771e:	e5 48 80 00 	st.w	r2[-32768],r8
80007722:	e5 54 80 00 	st.h	r2[-32768],r4
80007726:	e5 38 d4 01 	ld.ub	r8,r2[-11263]

80007728 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80007728:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000772a:	f6 08 15 04 	lsl	r8,r11,0x4
8000772e:	14 38       	cp.w	r8,r10
80007730:	e0 8b 00 26 	brhi	8000777c <usart_set_async_baudrate+0x54>
80007734:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80007736:	f0 09 16 01 	lsr	r9,r8,0x1
8000773a:	f2 0a 00 39 	add	r9,r9,r10<<0x3
8000773e:	f2 08 0d 08 	divu	r8,r9,r8
80007742:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80007744:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80007746:	f0 cb 00 01 	sub	r11,r8,1
8000774a:	e0 4b ff fe 	cp.w	r11,65534
8000774e:	e0 8b 00 1b 	brhi	80007784 <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80007752:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80007754:	e8 6b 00 00 	mov	r11,524288
80007758:	e4 1a ff f7 	andh	r10,0xfff7
8000775c:	e0 1a fe cf 	andl	r10,0xfecf
80007760:	59 0e       	cp.w	lr,16
80007762:	f6 0e 17 10 	movne	lr,r11
80007766:	f9 be 00 00 	moveq	lr,0
8000776a:	fd ea 10 0a 	or	r10,lr,r10
8000776e:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80007770:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80007774:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80007778:	99 88       	st.w	r12[0x20],r8
8000777a:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000777c:	f6 08 15 03 	lsl	r8,r11,0x3
80007780:	30 8e       	mov	lr,8
80007782:	cd ab       	rjmp	80007736 <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80007784:	da 0a       	popm	pc,r12=1

80007786 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80007786:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80007788:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
8000778a:	ed b8 00 01 	bld	r8,0x1
8000778e:	c0 51       	brne	80007798 <usart_putchar+0x12>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80007790:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80007794:	99 7b       	st.w	r12[0x1c],r11
80007796:	5e fd       	retal	0
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80007798:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
8000779a:	e0 49 27 10 	cp.w	r9,10000
8000779e:	cf 51       	brne	80007788 <usart_putchar+0x2>
800077a0:	5e fe       	retal	-1

800077a2 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800077a2:	17 8a       	ld.ub	r10,r11[0x0]
800077a4:	58 0a       	cp.w	r10,0
800077a6:	5e 0c       	reteq	r12
800077a8:	30 09       	mov	r9,0
800077aa:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800077ac:	ed b8 00 01 	bld	r8,0x1
800077b0:	c0 91       	brne	800077c2 <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800077b2:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
800077b6:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800077b8:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800077ba:	17 8a       	ld.ub	r10,r11[0x0]
800077bc:	58 0a       	cp.w	r10,0
800077be:	cf 51       	brne	800077a8 <usart_write_line+0x6>
800077c0:	5e fc       	retal	r12
800077c2:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800077c4:	e0 49 27 10 	cp.w	r9,10000
800077c8:	cf 11       	brne	800077aa <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
800077ca:	2f fb       	sub	r11,-1
800077cc:	cf 7b       	rjmp	800077ba <usart_write_line+0x18>
800077ce:	d7 03       	nop

800077d0 <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800077d0:	eb cd 40 e0 	pushm	r5-r7,lr
800077d4:	18 97       	mov	r7,r12
800077d6:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800077d8:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800077dc:	ed b8 00 10 	bld	r8,0x10
800077e0:	c2 e1       	brne	8000783c <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
800077e2:	3f f8       	mov	r8,-1
800077e4:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800077e6:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800077e8:	30 08       	mov	r8,0
800077ea:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
800077ec:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
800077ee:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800077f0:	ea 68 61 0c 	mov	r8,680204
800077f4:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800077f6:	58 06       	cp.w	r6,0
800077f8:	c2 00       	breq	80007838 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
800077fa:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800077fc:	30 49       	mov	r9,4
800077fe:	f2 08 18 00 	cp.b	r8,r9
80007802:	e0 88 00 1b 	brls	80007838 <usart_init_rs232+0x68>
80007806:	30 95       	mov	r5,9
80007808:	ea 08 18 00 	cp.b	r8,r5
8000780c:	e0 8b 00 16 	brhi	80007838 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80007810:	0d d9       	ld.ub	r9,r6[0x5]
80007812:	30 78       	mov	r8,7
80007814:	f0 09 18 00 	cp.b	r9,r8
80007818:	e0 8b 00 10 	brhi	80007838 <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
8000781c:	8c 39       	ld.sh	r9,r6[0x6]
8000781e:	e0 68 01 01 	mov	r8,257
80007822:	f0 09 19 00 	cp.h	r9,r8
80007826:	e0 8b 00 09 	brhi	80007838 <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
8000782a:	ed 39 00 08 	ld.ub	r9,r6[8]
8000782e:	30 38       	mov	r8,3
80007830:	f0 09 18 00 	cp.b	r9,r8
80007834:	e0 88 00 0a 	brls	80007848 <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80007838:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8000783c:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000783e:	3f f8       	mov	r8,-1
80007840:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80007842:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80007844:	d5 03       	csrf	0x10
80007846:	cd 1b       	rjmp	800077e8 <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80007848:	6c 0b       	ld.w	r11,r6[0x0]
8000784a:	0e 9c       	mov	r12,r7
8000784c:	c6 ef       	rcall	80007728 <usart_set_async_baudrate>
8000784e:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80007850:	cf 40       	breq	80007838 <usart_init_rs232+0x68>
80007852:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80007854:	ea 08 18 00 	cp.b	r8,r5
80007858:	c2 a0       	breq	800078ac <usart_init_rs232+0xdc>
8000785a:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8000785c:	20 58       	sub	r8,5
8000785e:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80007862:	8f 18       	st.w	r7[0x4],r8
80007864:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80007866:	ed 3a 00 08 	ld.ub	r10,r6[8]
8000786a:	0d d8       	ld.ub	r8,r6[0x5]
8000786c:	a9 78       	lsl	r8,0x9
8000786e:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80007872:	12 48       	or	r8,r9
80007874:	8f 18       	st.w	r7[0x4],r8
80007876:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80007878:	8c 38       	ld.sh	r8,r6[0x6]
8000787a:	f2 08 19 00 	cp.h	r8,r9
8000787e:	e0 88 00 11 	brls	800078a0 <usart_init_rs232+0xd0>
80007882:	6e 19       	ld.w	r9,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80007884:	ad b9       	sbr	r9,0xd
80007886:	8f 19       	st.w	r7[0x4],r9
80007888:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000788a:	20 28       	sub	r8,2
8000788c:	8f a8       	st.w	r7[0x28],r8
8000788e:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80007890:	e0 18 ff f0 	andl	r8,0xfff0
80007894:	8f 18       	st.w	r7[0x4],r8
80007896:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80007898:	35 08       	mov	r8,80
8000789a:	8f 08       	st.w	r7[0x0],r8
8000789c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800078a0:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800078a2:	5c 78       	castu.h	r8
800078a4:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800078a8:	8f 18       	st.w	r7[0x4],r8
800078aa:	cf 2b       	rjmp	8000788e <usart_init_rs232+0xbe>
800078ac:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800078ae:	b1 b8       	sbr	r8,0x11
800078b0:	8f 18       	st.w	r7[0x4],r8
800078b2:	cd 9b       	rjmp	80007864 <usart_init_rs232+0x94>

800078b4 <usart_init_hw_handshaking>:
800078b4:	eb cd 40 e0 	pushm	r5-r7,lr
800078b8:	18 97       	mov	r7,r12
800078ba:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800078bc:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800078c0:	ed b8 00 10 	bld	r8,0x10
800078c4:	c2 e1       	brne	80007920 <usart_init_hw_handshaking+0x6c>
  usart->idr = 0xFFFFFFFF;
800078c6:	3f f8       	mov	r8,-1
800078c8:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800078ca:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800078cc:	30 08       	mov	r8,0
800078ce:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
800078d0:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
800078d2:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800078d4:	ea 68 61 0c 	mov	r8,680204
800078d8:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800078da:	58 06       	cp.w	r6,0
800078dc:	c2 00       	breq	8000791c <usart_init_hw_handshaking+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
800078de:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800078e0:	30 49       	mov	r9,4
800078e2:	f2 08 18 00 	cp.b	r8,r9
800078e6:	e0 88 00 1b 	brls	8000791c <usart_init_hw_handshaking+0x68>
800078ea:	30 95       	mov	r5,9
800078ec:	ea 08 18 00 	cp.b	r8,r5
800078f0:	e0 8b 00 16 	brhi	8000791c <usart_init_hw_handshaking+0x68>
800078f4:	0d d9       	ld.ub	r9,r6[0x5]
800078f6:	30 78       	mov	r8,7
800078f8:	f0 09 18 00 	cp.b	r9,r8
800078fc:	e0 8b 00 10 	brhi	8000791c <usart_init_hw_handshaking+0x68>
80007900:	8c 39       	ld.sh	r9,r6[0x6]
80007902:	e0 68 01 01 	mov	r8,257
80007906:	f0 09 19 00 	cp.h	r9,r8
8000790a:	e0 8b 00 09 	brhi	8000791c <usart_init_hw_handshaking+0x68>
8000790e:	ed 39 00 08 	ld.ub	r9,r6[8]
80007912:	30 38       	mov	r8,3
80007914:	f0 09 18 00 	cp.b	r9,r8
80007918:	e0 88 00 0a 	brls	8000792c <usart_init_hw_handshaking+0x78>

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8000791c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80007920:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80007922:	3f f8       	mov	r8,-1
80007924:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80007926:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80007928:	d5 03       	csrf	0x10
8000792a:	cd 1b       	rjmp	800078cc <usart_init_hw_handshaking+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8000792c:	6c 0b       	ld.w	r11,r6[0x0]
8000792e:	0e 9c       	mov	r12,r7
80007930:	cf ce       	rcall	80007728 <usart_set_async_baudrate>
80007932:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80007934:	cf 40       	breq	8000791c <usart_init_hw_handshaking+0x68>
80007936:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80007938:	ea 08 18 00 	cp.b	r8,r5
8000793c:	c2 f0       	breq	8000799a <usart_init_hw_handshaking+0xe6>
8000793e:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80007940:	20 58       	sub	r8,5
80007942:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80007946:	8f 18       	st.w	r7[0x4],r8
80007948:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000794a:	ed 3a 00 08 	ld.ub	r10,r6[8]
8000794e:	0d d8       	ld.ub	r8,r6[0x5]
80007950:	a9 78       	lsl	r8,0x9
80007952:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80007956:	12 48       	or	r8,r9
80007958:	8f 18       	st.w	r7[0x4],r8
8000795a:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8000795c:	8c 38       	ld.sh	r8,r6[0x6]
8000795e:	f2 08 19 00 	cp.h	r8,r9
80007962:	e0 88 00 16 	brls	8000798e <usart_init_hw_handshaking+0xda>
80007966:	6e 19       	ld.w	r9,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80007968:	ad b9       	sbr	r9,0xd
8000796a:	8f 19       	st.w	r7[0x4],r9
8000796c:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000796e:	20 28       	sub	r8,2
80007970:	8f a8       	st.w	r7[0x28],r8
80007972:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80007974:	e0 18 ff f0 	andl	r8,0xfff0
80007978:	8f 18       	st.w	r7[0x4],r8
8000797a:	35 08       	mov	r8,80
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8000797c:	8f 08       	st.w	r7[0x0],r8
8000797e:	30 0c       	mov	r12,0
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80007980:	6e 18       	ld.w	r8,r7[0x4]
80007982:	e0 18 ff f0 	andl	r8,0xfff0
80007986:	a1 b8       	sbr	r8,0x1
80007988:	8f 18       	st.w	r7[0x4],r8
8000798a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8000798e:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80007990:	5c 78       	castu.h	r8
80007992:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80007996:	8f 18       	st.w	r7[0x4],r8
80007998:	ce db       	rjmp	80007972 <usart_init_hw_handshaking+0xbe>
8000799a:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000799c:	b1 b8       	sbr	r8,0x11
8000799e:	8f 18       	st.w	r7[0x4],r8
800079a0:	cd 4b       	rjmp	80007948 <usart_init_hw_handshaking+0x94>
800079a2:	d7 03       	nop

800079a4 <_stext>:
800079a4:	48 dd       	lddpc	sp,800079d8 <udata_clear_loop_end+0x4>
800079a6:	fe c0 99 a6 	sub	r0,pc,-26202
800079aa:	e3 b0 00 01 	mtsr	0x4,r0
800079ae:	d5 53       	csrf	0x15
800079b0:	48 b0       	lddpc	r0,800079dc <udata_clear_loop_end+0x8>
800079b2:	48 c1       	lddpc	r1,800079e0 <udata_clear_loop_end+0xc>
800079b4:	02 30       	cp.w	r0,r1
800079b6:	c0 62       	brcc	800079c2 <idata_load_loop_end>
800079b8:	48 b2       	lddpc	r2,800079e4 <udata_clear_loop_end+0x10>

800079ba <idata_load_loop>:
800079ba:	a5 05       	ld.d	r4,r2++
800079bc:	a1 24       	st.d	r0++,r4
800079be:	02 30       	cp.w	r0,r1
800079c0:	cf d3       	brcs	800079ba <idata_load_loop>

800079c2 <idata_load_loop_end>:
800079c2:	48 a0       	lddpc	r0,800079e8 <udata_clear_loop_end+0x14>
800079c4:	48 a1       	lddpc	r1,800079ec <udata_clear_loop_end+0x18>
800079c6:	02 30       	cp.w	r0,r1
800079c8:	c0 62       	brcc	800079d4 <udata_clear_loop_end>
800079ca:	30 02       	mov	r2,0
800079cc:	30 03       	mov	r3,0

800079ce <udata_clear_loop>:
800079ce:	a1 22       	st.d	r0++,r2
800079d0:	02 30       	cp.w	r0,r1
800079d2:	cf e3       	brcs	800079ce <udata_clear_loop>

800079d4 <udata_clear_loop_end>:
800079d4:	fe cf fb d0 	sub	pc,pc,-1072
800079d8:	00 01       	add	r1,r0
800079da:	00 00       	add	r0,r0
800079dc:	00 00       	add	r0,r0
800079de:	01 dc       	ld.ub	r12,r0[0x5]
800079e0:	00 00       	add	r0,r0
800079e2:	07 10       	ld.sh	r0,r3++
800079e4:	80 00       	ld.sh	r0,r0[0x0]
800079e6:	eb d0 00 00 	ldins.h	r0:b,r5[0]
800079ea:	07 10       	ld.sh	r0,r3++
800079ec:	00 00       	add	r0,r0
800079ee:	95 e8       	st.w	r10[0x38],r8

800079f0 <board_init>:
	}
#endif 
}

void board_init(void)
{
800079f0:	d4 31       	pushm	r0-r7,lr
800079f2:	21 1d       	sub	sp,68
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_init(void)
{
  Set_system_register(AVR32_CPUCR,
800079f4:	e1 b8 00 03 	mfsr	r8,0xc
800079f8:	b1 a8       	sbr	r8,0x10
800079fa:	e3 b8 00 03 	mtsr	0xc,r8
	.pba_f        = PBA_SPEED,
	.osc0_f       = FOSC0,
	.osc0_startup = OSC0_STARTUP
};

	if (pcl_configure_clocks(&pcl_freq_param) != PASS)
800079fe:	fe fc 03 b6 	ld.w	r12,pc[950]
80007a02:	fe b0 e6 e5 	rcall	800047cc <pcl_configure_clocks>
80007a06:	e0 81 01 d5 	brne	80007db0 <board_init+0x3c0>
80007a0a:	18 96       	mov	r6,r12
		AVR32_HMATRIX.SCFG[i].defmstr_type = mode;
	}
#endif
#if (defined AVR32_HMATRIXB)
	for(uint32_t i = 0;i < AVR32_HMATRIXB_SLAVE_NUM; i++) {
		AVR32_HMATRIXB.SCFG[i].defmstr_type = mode;
80007a0c:	fe 68 20 00 	mov	r8,-122880
80007a10:	18 97       	mov	r7,r12
80007a12:	ec c9 ff f0 	sub	r9,r6,-16
80007a16:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007a1a:	f5 d7 d2 02 	bfins	r10,r7,0x10,0x2
80007a1e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for(uint32_t i = 0; i < AVR32_HMATRIX_SLAVE_NUM; i++) {
		AVR32_HMATRIX.SCFG[i].defmstr_type = mode;
	}
#endif
#if (defined AVR32_HMATRIXB)
	for(uint32_t i = 0;i < AVR32_HMATRIXB_SLAVE_NUM; i++) {
80007a22:	2f f6       	sub	r6,-1
80007a24:	58 86       	cp.w	r6,8
80007a26:	cf 61       	brne	80007a12 <board_init+0x22>
	if (pcl_configure_clocks(&pcl_freq_param) != PASS)
	while (true);
	
	configure_hmatrix(AVR32_HMATRIXB_DEFMSTR_TYPE_NO_DEFAULT);
	
	AVR32_LowLevelInit();
80007a28:	fe b0 de 8b 	rcall	8000373e <AVR32_LowLevelInit>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a2c:	fc 18 40 00 	movh	r8,0x4000
80007a30:	34 03       	mov	r3,64
80007a32:	f1 43 02 44 	st.w	r8[580],r3
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a36:	f1 43 02 58 	st.w	r8[600],r3
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a3a:	fc 19 00 80 	movh	r9,0x80
80007a3e:	f1 49 01 44 	st.w	r8[324],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a42:	f1 49 01 58 	st.w	r8[344],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a46:	e0 69 20 00 	mov	r9,8192
80007a4a:	f1 49 00 44 	st.w	r8[68],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a4e:	f1 49 00 58 	st.w	r8[88],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a52:	e0 69 08 00 	mov	r9,2048
80007a56:	f1 49 00 44 	st.w	r8[68],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_set_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80007a5a:	f1 49 00 54 	st.w	r8[84],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a5e:	f1 46 02 44 	st.w	r8[580],r6
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a62:	f1 46 02 58 	st.w	r8[600],r6
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a66:	30 45       	mov	r5,4
80007a68:	f1 45 02 44 	st.w	r8[580],r5
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a6c:	f1 45 02 58 	st.w	r8[600],r5
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a70:	30 21       	mov	r1,2
80007a72:	f1 41 02 44 	st.w	r8[580],r1
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a76:	f1 41 02 58 	st.w	r8[600],r1
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a7a:	30 16       	mov	r6,1
80007a7c:	f1 46 02 44 	st.w	r8[580],r6
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a80:	f1 46 02 58 	st.w	r8[600],r6
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a84:	f1 43 00 44 	st.w	r8[68],r3
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a88:	f1 43 00 58 	st.w	r8[88],r3
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a8c:	e0 69 00 80 	mov	r9,128
80007a90:	f1 49 00 44 	st.w	r8[68],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007a94:	f1 49 00 58 	st.w	r8[88],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007a98:	e0 69 01 00 	mov	r9,256
80007a9c:	f1 49 00 44 	st.w	r8[68],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007aa0:	f1 49 00 58 	st.w	r8[88],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007aa4:	e0 69 02 00 	mov	r9,512
80007aa8:	f1 49 00 44 	st.w	r8[68],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007aac:	f1 49 00 58 	st.w	r8[88],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007ab0:	e0 60 04 00 	mov	r0,1024
80007ab4:	f1 40 00 44 	st.w	r8[68],r0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007ab8:	f1 40 00 58 	st.w	r8[88],r0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_enable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80007abc:	e2 69 00 00 	mov	r9,131072
80007ac0:	f1 49 02 44 	st.w	r8[580],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_clr_gpio_pin(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80007ac4:	f1 49 02 58 	st.w	r8[600],r9
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void gpio_local_disable_pin_output_driver(uint32_t pin)
{
  AVR32_GPIO_LOCAL.port[pin >> 5].oderc = 1 << (pin & 0x1F);
80007ac8:	f1 40 03 48 	st.w	r8[840],r0
	static const gpio_map_t GCLK_GPIO_MAP =
	{
		{AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION}
	};
	
	gpio_enable_module(GCLK_GPIO_MAP,
80007acc:	0c 9b       	mov	r11,r6
80007ace:	fe fc 02 ea 	ld.w	r12,pc[746]
80007ad2:	fe b0 dd 87 	rcall	800035e0 <gpio_enable_module>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80007ad6:	e0 69 07 03 	mov	r9,1795
80007ada:	fe 78 08 00 	mov	r8,-63488
		{SPI1_MOSI_PIN, SPI1_MOSI_FUNCTION},
		{SPI1_MISO_PIN, SPI1_MISO_FUNCTION},
		{SPI1_NPCS2_PIN, SPI1_NPCS2_FUNCTION}
	};
	
	gpio_enable_module(SPI_GPIO_MAP,
80007ade:	0a 9b       	mov	r11,r5
80007ae0:	f1 49 00 88 	st.w	r8[136],r9
80007ae4:	fe fc 02 d8 	ld.w	r12,pc[728]
80007ae8:	fe b0 dd 7c 	rcall	800035e0 <gpio_enable_module>
  .spck_delay	=0,	//! Delay before first clock pulse after selecting slave (in PBA clock periods). 
  .trans_delay	=0,	//! Delay between each transfer/character (in PBA clock periods).
  .stay_act		=0,	 //! Sets this chip to stay active after last transfer to it.
  .spi_mode		=1,	//! Which SPI mode to use when transmitting.
  .modfdis		=1	 //! Disables the mode fault detection.
};
80007aec:	fe f9 02 d4 	ld.w	r9,pc[724]
80007af0:	72 38       	ld.w	r8,r9[0xc]
80007af2:	fa c4 ff e0 	sub	r4,sp,-32
80007af6:	89 38       	st.w	r4[0xc],r8
  .spck_delay	=0,	//! Delay before first clock pulse after selecting slave (in PBA clock periods).
  .trans_delay	=0,	//! Delay between each transfer/character (in PBA clock periods).
  .stay_act		=1,	//! Sets this chip to stay active after last transfer to it.
  .spi_mode		=0,	//! Which SPI mode to use when transmitting.
  .modfdis		=1	//! Disables the mode fault detection.
};
80007af8:	fe f8 02 cc 	ld.w	r8,pc[716]
80007afc:	70 3a       	ld.w	r10,r8[0xc]
80007afe:	fa c2 ff f0 	sub	r2,sp,-16
80007b02:	85 3a       	st.w	r2[0xc],r10
  .spck_delay	=0,	//! Delay before first clock pulse after selecting slave (in PBA clock periods). 
  .trans_delay	=0,	//! Delay between each transfer/character (in PBA clock periods).
  .stay_act		=0,	 //! Sets this chip to stay active after last transfer to it.
  .spi_mode		=1,	//! Which SPI mode to use when transmitting.
  .modfdis		=1	 //! Disables the mode fault detection.
};
80007b04:	72 0a       	ld.w	r10,r9[0x0]
80007b06:	89 0a       	st.w	r4[0x0],r10
80007b08:	72 1a       	ld.w	r10,r9[0x4]
80007b0a:	89 1a       	st.w	r4[0x4],r10
80007b0c:	72 29       	ld.w	r9,r9[0x8]
80007b0e:	89 29       	st.w	r4[0x8],r9
  .spck_delay	=0,	//! Delay before first clock pulse after selecting slave (in PBA clock periods).
  .trans_delay	=0,	//! Delay between each transfer/character (in PBA clock periods).
  .stay_act		=1,	//! Sets this chip to stay active after last transfer to it.
  .spi_mode		=0,	//! Which SPI mode to use when transmitting.
  .modfdis		=1	//! Disables the mode fault detection.
};
80007b10:	70 09       	ld.w	r9,r8[0x0]
80007b12:	85 09       	st.w	r2[0x0],r9
80007b14:	70 19       	ld.w	r9,r8[0x4]
80007b16:	85 19       	st.w	r2[0x4],r9
80007b18:	70 28       	ld.w	r8,r8[0x8]

	spi_initMaster(SPI1, &SPI1_OPTIONS_0); 
80007b1a:	08 9b       	mov	r11,r4
  .spck_delay	=0,	//! Delay before first clock pulse after selecting slave (in PBA clock periods).
  .trans_delay	=0,	//! Delay between each transfer/character (in PBA clock periods).
  .stay_act		=1,	//! Sets this chip to stay active after last transfer to it.
  .spi_mode		=0,	//! Which SPI mode to use when transmitting.
  .modfdis		=1	//! Disables the mode fault detection.
};
80007b1c:	85 28       	st.w	r2[0x8],r8

	spi_initMaster(SPI1, &SPI1_OPTIONS_0); 
80007b1e:	fe 7c 34 00 	mov	r12,-52224
80007b22:	fe b0 f4 b5 	rcall	8000648c <spi_initMaster>
	spi_selectionMode(SPI1,1,0,0);
80007b26:	0e 99       	mov	r9,r7
80007b28:	0e 9a       	mov	r10,r7
80007b2a:	0c 9b       	mov	r11,r6
80007b2c:	fe 7c 34 00 	mov	r12,-52224
80007b30:	fe b0 f4 cb 	rcall	800064c6 <spi_selectionMode>
	spi_enable(SPI1);
80007b34:	fe 7c 34 00 	mov	r12,-52224
80007b38:	fe b0 f5 7b 	rcall	8000662e <spi_enable>
	spi_setupChipReg(SPI1,&SPI1_OPTIONS_0,PBA_SPEED);
80007b3c:	08 9b       	mov	r11,r4
80007b3e:	e0 6a 87 00 	mov	r10,34560
80007b42:	ea 1a 03 93 	orh	r10,0x393
80007b46:	fe 7c 34 00 	mov	r12,-52224
80007b4a:	fe b0 f5 18 	rcall	8000657a <spi_setupChipReg>
	spi_setupChipReg(SPI1,&SPI1_OPTIONS_3,PBA_SPEED);
80007b4e:	e0 6a 87 00 	mov	r10,34560
80007b52:	ea 1a 03 93 	orh	r10,0x393
80007b56:	04 9b       	mov	r11,r2
80007b58:	fe 7c 34 00 	mov	r12,-52224
80007b5c:	fe b0 f5 0f 	rcall	8000657a <spi_setupChipReg>
	spi_selectChip(SPI1, 3);
80007b60:	30 3b       	mov	r11,3
80007b62:	fe 7c 34 00 	mov	r12,-52224
80007b66:	fe b0 f4 cf 	rcall	80006504 <spi_selectChip>
		{USB_USART_TX_PIN, USB_USART_TX_FUNCTION},
		{USB_USART_RTS_PIN, USB_USART_RTS_FUNCTION},
		{USB_USART_CTS_PIN, USB_USART_CTS_FUNCTION}
	};
	
	gpio_enable_module(USB_USART_GPIO_MAP,
80007b6a:	0a 9b       	mov	r11,r5
80007b6c:	fe fc 02 5c 	ld.w	r12,pc[604]
80007b70:	fe b0 dd 38 	rcall	800035e0 <gpio_enable_module>
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};
			
	usart_init_hw_handshaking(USB_USART, &USB_USART_OPTIONS, PBA_SPEED);
80007b74:	e0 6a 87 00 	mov	r10,34560
80007b78:	ea 1a 03 93 	orh	r10,0x393
80007b7c:	fe fb 02 50 	ld.w	r11,pc[592]
80007b80:	fc 7c 14 00 	mov	r12,-191488
80007b84:	c9 8e       	rcall	800078b4 <usart_init_hw_handshaking>
80007b86:	02 9b       	mov	r11,r1
	{
		{LCD_USART_RX_PIN, LCD_USART_RX_FUNCTION},
		{LCD_USART_TX_PIN, LCD_USART_TX_FUNCTION}
	};
	
	gpio_enable_module(LCD_USART_GPIO_MAP,
80007b88:	fe fc 02 48 	ld.w	r12,pc[584]
80007b8c:	fe b0 dd 2a 	rcall	800035e0 <gpio_enable_module>
80007b90:	e0 6a 87 00 	mov	r10,34560
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};
			
	usart_init_rs232(LCD_USART, &LCD_USART_OPTIONS, PBA_SPEED);
80007b94:	ea 1a 03 93 	orh	r10,0x393
80007b98:	fe fb 02 3c 	ld.w	r11,pc[572]
80007b9c:	fe 7c 28 00 	mov	r12,-55296
80007ba0:	c1 8e       	rcall	800077d0 <usart_init_rs232>
80007ba2:	fe 78 28 00 	mov	r8,-55296
	LCD_USART->cr|=AVR32_USART_CR_STTTO_MASK; //set timeout to stop until new character is received
80007ba6:	70 09       	ld.w	r9,r8[0x0]
80007ba8:	ab b9       	sbr	r9,0xb
80007baa:	91 09       	st.w	r8[0x0],r9
80007bac:	e0 69 00 e6 	mov	r9,230
	LCD_USART->rtor=230;	//set to timeout in 2ms
80007bb0:	91 99       	st.w	r8[0x24],r9
80007bb2:	1a d7       	st.w	--sp,r7
80007bb4:	06 9a       	mov	r10,r3
	
	
	my_pdca_init_channel(LCD_USART_RX_PDCA_CHANNEL, (uint32_t)(&LCD_USART_buffer),(uint32_t)(sizeof(LCD_USART_buffer)),LCD_USART_RX_PDCA_PID,0,0, PDCA_TRANSFER_SIZE_BYTE);
80007bb6:	1a d7       	st.w	--sp,r7
80007bb8:	0e 98       	mov	r8,r7
80007bba:	02 99       	mov	r9,r1
80007bbc:	fe fb 02 1c 	ld.w	r11,pc[540]
80007bc0:	30 5c       	mov	r12,5
80007bc2:	fe b0 dd ad 	rcall	8000371c <my_pdca_init_channel>
80007bc6:	30 5c       	mov	r12,5
80007bc8:	fe b0 e5 8a 	rcall	800046dc <pdca_disable>
	pdca_disable(LCD_USART_RX_PDCA_CHANNEL);
80007bcc:	06 9a       	mov	r10,r3
80007bce:	1a d7       	st.w	--sp,r7
	
	my_pdca_init_channel(USB_USART_RX_PDCA_CHANNEL, (uint32_t)(&host_USART_buffer),(uint32_t)(sizeof(host_USART_buffer)),USB_USART_RX_PDCA_PID,0,0, PDCA_TRANSFER_SIZE_BYTE);
80007bd0:	0e 98       	mov	r8,r7
80007bd2:	1a d7       	st.w	--sp,r7
80007bd4:	30 39       	mov	r9,3
80007bd6:	fe fb 02 06 	ld.w	r11,pc[518]
80007bda:	0a 9c       	mov	r12,r5
80007bdc:	fe b0 dd a0 	rcall	8000371c <my_pdca_init_channel>
80007be0:	0a 9c       	mov	r12,r5
80007be2:	fe b0 e5 7d 	rcall	800046dc <pdca_disable>
	pdca_disable(USB_USART_RX_PDCA_CHANNEL);
80007be6:	fc 78 14 00 	mov	r8,-191488
	
	USB_USART->cr|=AVR32_USART_CR_STTTO_MASK; //set timeout to stop until new character is received
80007bea:	70 09       	ld.w	r9,r8[0x0]
80007bec:	ab b9       	sbr	r9,0xb
80007bee:	91 09       	st.w	r8[0x0],r9
80007bf0:	e0 69 3a 98 	mov	r9,15000
	USB_USART->rtor=15000;	//set to timeout in 1ms
80007bf4:	91 99       	st.w	r8[0x24],r9
80007bf6:	4f b8       	lddpc	r8,80007de0 <board_init+0x3f0>
80007bf8:	70 39       	ld.w	r9,r8[0xc]
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
80007bfa:	0a 9b       	mov	r11,r5
80007bfc:	fa c5 ff f0 	sub	r5,sp,-16

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
80007c00:	8b 39       	st.w	r5[0xc],r9
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
80007c02:	70 09       	ld.w	r9,r8[0x0]
80007c04:	8b 09       	st.w	r5[0x0],r9
80007c06:	70 19       	ld.w	r9,r8[0x4]
80007c08:	8b 19       	st.w	r5[0x4],r9
80007c0a:	70 28       	ld.w	r8,r8[0x8]
80007c0c:	4f 6c       	lddpc	r12,80007de4 <board_init+0x3f4>
80007c0e:	8b 28       	st.w	r5[0x8],r8
80007c10:	fe b0 dc e8 	rcall	800035e0 <gpio_enable_module>

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
80007c14:	0a 9b       	mov	r11,r5
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
80007c16:	fc 7c 18 00 	mov	r12,-190464

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
80007c1a:	fe b0 f4 39 	rcall	8000648c <spi_initMaster>
  // Initialize as master.
  spi_initMaster(SPI0, &SD_spiOptions);
80007c1e:	0e 99       	mov	r9,r7
80007c20:	0e 9a       	mov	r10,r7
80007c22:	0e 9b       	mov	r11,r7
80007c24:	fc 7c 18 00 	mov	r12,-190464
  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SPI0, 0, 0, 0);
80007c28:	fe b0 f4 4f 	rcall	800064c6 <spi_selectionMode>
80007c2c:	fc 7c 18 00 	mov	r12,-190464
80007c30:	fe b0 f4 ff 	rcall	8000662e <spi_enable>
  // Enable SPI module.
  spi_enable(SPI0);
80007c34:	6a 38       	ld.w	r8,r5[0xc]
80007c36:	20 4d       	sub	sp,16
80007c38:	50 38       	stdsp	sp[0xc],r8
80007c3a:	6a 08       	ld.w	r8,r5[0x0]
  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(SD_spiOptions, PBA_SPEED);
80007c3c:	50 08       	stdsp	sp[0x0],r8
80007c3e:	6a 18       	ld.w	r8,r5[0x4]
80007c40:	50 18       	stdsp	sp[0x4],r8
80007c42:	6a 28       	ld.w	r8,r5[0x8]
80007c44:	e0 6c 87 00 	mov	r12,34560
80007c48:	ea 1c 03 93 	orh	r12,0x393
80007c4c:	50 28       	stdsp	sp[0x8],r8
80007c4e:	fe b0 d8 cb 	rcall	80002de4 <sd_mmc_spi_init>
80007c52:	4e 6b       	lddpc	r11,80007de8 <board_init+0x3f8>
80007c54:	2f 8d       	sub	sp,-32
80007c56:	fc 7c 20 00 	mov	r12,-188416
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt_1);
80007c5a:	fe b0 f5 2b 	rcall	800066b0 <tc_init_waveform>
80007c5e:	30 aa       	mov	r10,10
80007c60:	0e 9b       	mov	r11,r7
80007c62:	fc 7c 20 00 	mov	r12,-188416

	tc_write_rc(tc, FAST_TC_CHANNEL, 10);
80007c66:	fe b0 f5 ab 	rcall	800067bc <tc_write_rc>
80007c6a:	4e 1a       	lddpc	r10,80007dec <board_init+0x3fc>
80007c6c:	0e 9b       	mov	r11,r7
80007c6e:	fc 7c 20 00 	mov	r12,-188416
	// configure the timer interrupt
	tc_configure_interrupts(tc, FAST_TC_CHANNEL, &tc_interrupt);
80007c72:	fe b0 f5 c1 	rcall	800067f4 <tc_configure_interrupts>
80007c76:	4d fb       	lddpc	r11,80007df0 <board_init+0x400>
80007c78:	fe 7c 58 00 	mov	r12,-43008
80007c7c:	fe b0 f5 1a 	rcall	800066b0 <tc_init_waveform>
		.clki     = false,	// Clock inversion.
		.tcclks   = TC_CLOCK_SOURCE_TC3	// Internal source clock 3, connected to fPBA / 8.
	};

	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt_2);
80007c80:	e0 6a 1d 4c 	mov	r10,7500
80007c84:	0c 9b       	mov	r11,r6
80007c86:	fe 7c 58 00 	mov	r12,-43008
	tc_write_rc(tc, SLOW_TC_fast_CHANNEL, 7500); //counter will count milliseconds
80007c8a:	fe b0 f5 99 	rcall	800067bc <tc_write_rc>
80007c8e:	e0 6a 0d ac 	mov	r10,3500
80007c92:	0c 9b       	mov	r11,r6
80007c94:	fe 7c 58 00 	mov	r12,-43008
	tc_write_ra(tc, SLOW_TC_fast_CHANNEL, 3500); //configure ra so that TIOA0 is toggled
80007c98:	fe b0 f5 76 	rcall	80006784 <tc_write_ra>
80007c9c:	4d 6b       	lddpc	r11,80007df4 <board_init+0x404>
80007c9e:	fe 7c 58 00 	mov	r12,-43008
80007ca2:	fe b0 f5 07 	rcall	800066b0 <tc_init_waveform>
		.burst    = false,	// Burst signal selection.
		.clki     = false,	// Clock inversion.
		.tcclks   = TC_CLOCK_SOURCE_XC0	// Use XC1 as clock source.  Must configure TIOA0 to be XC1
	};
	
	tc_init_waveform(tc, &waveform_opt_3);
80007ca6:	36 4a       	mov	r10,100
80007ca8:	0e 9b       	mov	r11,r7
80007caa:	fe 7c 58 00 	mov	r12,-43008
	tc_write_rc(tc, SLOW_TC_slow_CHANNEL, 100); //
80007cae:	fe b0 f5 87 	rcall	800067bc <tc_write_rc>
80007cb2:	02 9a       	mov	r10,r1
80007cb4:	0e 9b       	mov	r11,r7
80007cb6:	fe 7c 58 00 	mov	r12,-43008
	tc_select_external_clock(tc,SLOW_TC_slow_CHANNEL,AVR32_TC_BMR_TC0XC0S_TIOA1); //use TIOA1 as XC0
80007cba:	fe b0 f4 dc 	rcall	80006672 <tc_select_external_clock>
80007cbe:	30 5b       	mov	r11,5
80007cc0:	4c ec       	lddpc	r12,80007df8 <board_init+0x408>
80007cc2:	fe b0 dc 8f 	rcall	800035e0 <gpio_enable_module>
    {AVR32_ADCREFN_PIN,AVR32_ADCREFN_FUNCTION},
    {DAC0A_pin, DAC0A_FUNCTION},
	{DAC1A_pin, DAC1A_FUNCTION}
  };
  
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
80007cc6:	30 08       	mov	r8,0
80007cc8:	30 09       	mov	r9,0
80007cca:	fa e9 00 30 	st.d	sp[48],r8
    .reference                  = DACIFB_REFERENCE_EXT ,        // VDDANA Reference
    .channel_selection          = DACIFB_CHANNEL_SELECTION_A,     // Selection Channels A&B
    .low_power                  = false,                          // Low Power Mode
    .dual                       = false,                          // Dual Mode
    .prescaler_clock_hz         = DAC_PRESCALER_CLK     // Prescaler Clock (Should be 500Khz)
};
80007cce:	e0 68 00 90 	mov	r8,144
80007cd2:	fb 58 00 32 	st.h	sp[50],r8
volatile avr32_dacifb_t *dacifb1 = &AVR32_DACIFB1; // DACIFB IP registers address

//The factory calibration for DADIFB is broken, so use manual calibration
//dacifb_get_calibration_data(DAC0,&dacifb_opt,0);

dacifb_opt.gain_calibration_value=0x0090;
80007cd6:	e0 68 01 53 	mov	r8,339
80007cda:	e0 65 70 e0 	mov	r5,28896
dacifb_opt.offset_calibration_value=0x0153;
80007cde:	ea 15 00 72 	orh	r5,0x72
    .reference                  = DACIFB_REFERENCE_EXT ,        // VDDANA Reference
    .channel_selection          = DACIFB_CHANNEL_SELECTION_A,     // Selection Channels A&B
    .low_power                  = false,                          // Low Power Mode
    .dual                       = false,                          // Dual Mode
    .prescaler_clock_hz         = DAC_PRESCALER_CLK     // Prescaler Clock (Should be 500Khz)
};
80007ce2:	fb 58 00 34 	st.h	sp[52],r8
80007ce6:	fa c4 ff d0 	sub	r4,sp,-48

//The factory calibration for DADIFB is broken, so use manual calibration
//dacifb_get_calibration_data(DAC0,&dacifb_opt,0);

dacifb_opt.gain_calibration_value=0x0090;
dacifb_opt.offset_calibration_value=0x0153;
80007cea:	e0 6a 87 00 	mov	r10,34560

  // configure DACIFB0
dacifb_configure(DAC0,&dacifb_opt,PBA_SPEED);
80007cee:	ea 1a 03 93 	orh	r10,0x393
80007cf2:	08 9b       	mov	r11,r4
80007cf4:	fb 66 00 31 	st.b	sp[49],r6
80007cf8:	fb 66 00 3f 	st.b	sp[63],r6
    .reference                  = DACIFB_REFERENCE_EXT ,        // VDDANA Reference
    .channel_selection          = DACIFB_CHANNEL_SELECTION_A,     // Selection Channels A&B
    .low_power                  = false,                          // Low Power Mode
    .dual                       = false,                          // Dual Mode
    .prescaler_clock_hz         = DAC_PRESCALER_CLK     // Prescaler Clock (Should be 500Khz)
};
80007cfc:	fb 67 00 40 	st.b	sp[64],r7
    .auto_refresh_mode    = true,                      // Auto Refresh Mode
    .trigger_mode         = DACIFB_TRIGGER_MODE_MANUAL, // Trigger selection
    .left_adjustment      = false,                      // Right Adjustment
    .data_shift           = 0,                          // Number of Data Shift
    .data_round_enable    = false                       // Data Rouding Mode                                              };
};
80007d00:	fb 67 00 41 	st.b	sp[65],r7
80007d04:	fb 67 00 42 	st.b	sp[66],r7
80007d08:	fb 67 00 43 	st.b	sp[67],r7
80007d0c:	50 e5       	stdsp	sp[0x38],r5
80007d0e:	fe 7c 68 00 	mov	r12,-38912
80007d12:	fe b0 db 7c 	rcall	8000340a <dacifb_configure>

dacifb_opt.gain_calibration_value=0x0090;
dacifb_opt.offset_calibration_value=0x0153;

  // configure DACIFB0
dacifb_configure(DAC0,&dacifb_opt,PBA_SPEED);
80007d16:	0a 99       	mov	r9,r5
80007d18:	fa c3 ff c1 	sub	r3,sp,-63
80007d1c:	0c 9b       	mov	r11,r6

dacifb_configure_channel(DAC0,DACIFB_CHANNEL_SELECTION_A,&dacifb_channel_opt,DAC_PRESCALER_CLK);
80007d1e:	06 9a       	mov	r10,r3
80007d20:	fe 7c 68 00 	mov	r12,-38912
80007d24:	fe b0 da 62 	rcall	800031e8 <dacifb_configure_channel>
80007d28:	fe 7c 68 00 	mov	r12,-38912
80007d2c:	e0 6a 87 00 	mov	r10,34560

dacifb_start_channel(DAC0,DACIFB_CHANNEL_SELECTION_A,PBA_SPEED);
80007d30:	ea 1a 03 93 	orh	r10,0x393
80007d34:	0c 9b       	mov	r11,r6
80007d36:	fe b0 da 0d 	rcall	80003150 <dacifb_start_channel>
80007d3a:	00 99       	mov	r9,r0
80007d3c:	0e 9a       	mov	r10,r7
80007d3e:	0c 9b       	mov	r11,r6
80007d40:	fe 7c 68 00 	mov	r12,-38912

//The factory calibration for DADIFB is broken, so use manual calibration					
dacifb_set_value(DAC0,DACIFB_CHANNEL_SELECTION_A,false,1024);					   
80007d44:	fe b0 d9 f0 	rcall	80003124 <dacifb_set_value>
80007d48:	e0 68 00 84 	mov	r8,132
80007d4c:	fb 58 00 32 	st.h	sp[50],r8
					   				 
//dacifb_get_calibration_data(DAC1, &dacifb_opt,1);
							
dacifb_opt.gain_calibration_value=0x0084;
80007d50:	e0 68 01 02 	mov	r8,258
80007d54:	08 9b       	mov	r11,r4
80007d56:	fb 58 00 34 	st.h	sp[52],r8
dacifb_opt.offset_calibration_value=0x0102;							
80007d5a:	e0 6a 87 00 	mov	r10,34560
80007d5e:	ea 1a 03 93 	orh	r10,0x393

  // configure DACIFB1
dacifb_configure(DAC1,&dacifb_opt,PBA_SPEED);
80007d62:	fe 7c 6c 00 	mov	r12,-37888
80007d66:	fe b0 db 52 	rcall	8000340a <dacifb_configure>
80007d6a:	0a 99       	mov	r9,r5
80007d6c:	06 9a       	mov	r10,r3
80007d6e:	0c 9b       	mov	r11,r6
80007d70:	fe 7c 6c 00 	mov	r12,-37888
				   
dacifb_configure_channel(DAC1,DACIFB_CHANNEL_SELECTION_A,&dacifb_channel_opt,DAC_PRESCALER_CLK);
80007d74:	fe b0 da 3a 	rcall	800031e8 <dacifb_configure_channel>
80007d78:	fe 7c 6c 00 	mov	r12,-37888
80007d7c:	e0 6a 87 00 	mov	r10,34560

dacifb_start_channel(DAC1,DACIFB_CHANNEL_SELECTION_A,PBA_SPEED);
80007d80:	ea 1a 03 93 	orh	r10,0x393
80007d84:	0c 9b       	mov	r11,r6
80007d86:	fe b0 d9 e5 	rcall	80003150 <dacifb_start_channel>
80007d8a:	00 99       	mov	r9,r0
80007d8c:	0e 9a       	mov	r10,r7
80007d8e:	0c 9b       	mov	r11,r6
80007d90:	fe 7c 6c 00 	mov	r12,-37888
					   
dacifb_set_value(DAC1,DACIFB_CHANNEL_SELECTION_A,false,1024);					   				   				 
80007d94:	fe b0 d9 c8 	rcall	80003124 <dacifb_set_value>
80007d98:	fe 78 68 00 	mov	r8,-38912
80007d9c:	e0 69 08 00 	mov	r9,2048

DAC0->dr0=2048;
80007da0:	91 b9       	st.w	r8[0x2c],r9
80007da2:	e0 69 0f ff 	mov	r9,4095
80007da6:	fe 78 6c 00 	mov	r8,-37888
DAC1->dr0=4095;
80007daa:	91 b9       	st.w	r8[0x2c],r9
80007dac:	2e fd       	sub	sp,-68
80007dae:	d8 32       	popm	r0-r7,pc
80007db0:	c0 08       	rjmp	80007db0 <board_init+0x3c0>
80007db2:	d7 03       	nop
}
80007db4:	00 00       	add	r0,r0
80007db6:	01 e4       	ld.ub	r4,r0[0x6]
80007db8:	80 00       	ld.sh	r0,r0[0x0]
80007dba:	e6 38 80 00 	sub	r8,491520
80007dbe:	e5 b8       	*unknown*
80007dc0:	80 00       	ld.sh	r0,r0[0x0]
80007dc2:	e6 24 80 00 	sub	r4,425984
80007dc6:	e5 c0 80 00 	ldmts	r0,pc
80007dca:	e6 04       	*unknown*
80007dcc:	80 00       	ld.sh	r0,r0[0x0]
80007dce:	e5 f0 80 00 	ld.wls	r0,r2[0x0]
80007dd2:	e6 34 80 00 	sub	r4,491520
80007dd6:	e6 0c 00 00 	add	r0,r3,r12
80007dda:	13 24       	ld.uh	r4,r9++
80007ddc:	00 00       	add	r0,r0
80007dde:	95 94       	st.w	r10[0x24],r4
80007de0:	80 00       	ld.sh	r0,r0[0x0]
80007de2:	e5 d8 80 00 	ldswp.w	r8,r2[0]
80007de6:	e5 d0 80 00 	ldswp.w	r0,r2[0]
80007dea:	e5 fc 80 00 	ld.wls	r12,r2[0x0]
80007dee:	e5 b4       	*unknown*
80007df0:	80 00       	ld.sh	r0,r0[0x0]
80007df2:	e6 3c 80 00 	sub	r12,491520
80007df6:	e5 e8 80 00 	sthh.w	r0[r0],r2:b,r8:b
80007dfa:	e6 18 fc 78 	andh	r8,0xfc78,COH

80007dfc <tc_irq>:

uint32_t temp;

__attribute__((__interrupt__)) void tc_irq(void)
{
	uint32_t temp=AVR32_TC0.channel[0].sr;
80007dfc:	fc 78 20 00 	mov	r8,-188416
80007e00:	70 88       	ld.w	r8,r8[0x20]
}
80007e02:	d6 03       	rete

80007e04 <main>:

int main (void) {
80007e04:	eb cd 40 c0 	pushm	r6-r7,lr
	
		DDS_options.pcs=DDS_PCS;
		DDS_options.SERmode=SER_MODE_3WIRE;
		DDS_options.LSBfirst=MSB_FIRST;
80007e08:	30 0a       	mov	r10,0
		DDS_options_CH0.RURDenable=AMP_MUL_MANUAL;
		DDS_options_CH0.ASF=512;
		DDS_options_CH0.FTW=357913941;
		DDS_options_CH0.POW=0;

		DDS_options_CH1.pcs=DDS_PCS;
80007e0a:	4c 18       	lddpc	r8,80007f0c <main+0x108>
		DDS_options.PLLdiv=DDS_PLL_div;		//use 6 for 20MHz clock
		DDS_options.CHRGPMP=CHRGPMP_75uA;
		DDS_options.PPC=0b101;
		DDS_options.MODLEVEL=MODLEVEL_4;

		DDS_options_CH0.pcs=DDS_PCS;
80007e0c:	4c 19       	lddpc	r9,80007f10 <main+0x10c>
	uint32_t temp=AVR32_TC0.channel[0].sr;
}

int main (void) {
	
		DDS_options.pcs=DDS_PCS;
80007e0e:	4c 2b       	lddpc	r11,80007f14 <main+0x110>
		DDS_options_CH1.coreenable=DCPDN_ON;
		DDS_options_CH1.DACenable=DACPDN_ON;
		DDS_options_CH1.matchedpipes=MATCHED_PIPES_DIS;
		DDS_options_CH1.sinorcos=COS_OUT;
		DDS_options_CH1.ampmulenable=AMP_MUL_EN;
		DDS_options_CH1.RURDenable=AMP_MUL_MANUAL;
80007e10:	f1 6a 00 09 	st.b	r8[9],r10
		DDS_options_CH1.pcs=DDS_PCS;
		DDS_options_CH1.channels=CH_EN_1;
		DDS_options_CH1.AFPmod=Amod;
		DDS_options_CH1.DACfsc=DAC_FSC_FULL;
		DDS_options_CH1.coreenable=DCPDN_ON;
		DDS_options_CH1.DACenable=DACPDN_ON;
80007e14:	b0 da       	st.b	r8[0x5],r10
		DDS_options_CH1.matchedpipes=MATCHED_PIPES_DIS;
80007e16:	b0 ea       	st.b	r8[0x6],r10
		DDS_options_CH1.sinorcos=COS_OUT;
80007e18:	b0 fa       	st.b	r8[0x7],r10

int main (void) {
	
		DDS_options.pcs=DDS_PCS;
		DDS_options.SERmode=SER_MODE_3WIRE;
		DDS_options.LSBfirst=MSB_FIRST;
80007e1a:	b6 ba       	st.b	r11[0x3],r10
		DDS_options.VCOgain=DDS_VCO_gain;
		//DDS_options.PLLdiv=10;	//use 10 with 12MHz clock
		DDS_options.PLLdiv=DDS_PLL_div;		//use 6 for 20MHz clock
		DDS_options.CHRGPMP=CHRGPMP_75uA;
80007e1c:	b6 ea       	st.b	r11[0x6],r10

		DDS_options_CH0.pcs=DDS_PCS;
		DDS_options_CH0.channels=CH_EN_0;
		DDS_options_CH0.AFPmod=Amod;
		DDS_options_CH0.DACfsc=DAC_FSC_FULL;
		DDS_options_CH0.coreenable=DCPDN_ON;
80007e1e:	b2 ca       	st.b	r9[0x4],r10
		DDS_options_CH0.DACenable=DACPDN_ON;
80007e20:	b2 da       	st.b	r9[0x5],r10
		DDS_options_CH0.matchedpipes=MATCHED_PIPES_DIS;
80007e22:	b2 ea       	st.b	r9[0x6],r10
		DDS_options_CH0.sinorcos=COS_OUT;
80007e24:	b2 fa       	st.b	r9[0x7],r10
		DDS_options_CH0.ampmulenable=AMP_MUL_EN;
		DDS_options_CH0.RURDenable=AMP_MUL_MANUAL;
80007e26:	f3 6a 00 09 	st.b	r9[9],r10
}

int main (void) {
	
		DDS_options.pcs=DDS_PCS;
		DDS_options.SERmode=SER_MODE_3WIRE;
80007e2a:	30 1a       	mov	r10,1
		DDS_options_CH1.DACfsc=DAC_FSC_FULL;
		DDS_options_CH1.coreenable=DCPDN_ON;
		DDS_options_CH1.DACenable=DACPDN_ON;
		DDS_options_CH1.matchedpipes=MATCHED_PIPES_DIS;
		DDS_options_CH1.sinorcos=COS_OUT;
		DDS_options_CH1.ampmulenable=AMP_MUL_EN;
80007e2c:	f1 6a 00 08 	st.b	r8[8],r10
		DDS_options_CH0.FTW=357913941;
		DDS_options_CH0.POW=0;

		DDS_options_CH1.pcs=DDS_PCS;
		DDS_options_CH1.channels=CH_EN_1;
		DDS_options_CH1.AFPmod=Amod;
80007e30:	b0 aa       	st.b	r8[0x2],r10
		DDS_options.VCOgain=DDS_VCO_gain;
		//DDS_options.PLLdiv=10;	//use 10 with 12MHz clock
		DDS_options.PLLdiv=DDS_PLL_div;		//use 6 for 20MHz clock
		DDS_options.CHRGPMP=CHRGPMP_75uA;
		DDS_options.PPC=0b101;
		DDS_options.MODLEVEL=MODLEVEL_4;
80007e32:	f7 6a 00 08 	st.b	r11[8],r10
}

int main (void) {
	
		DDS_options.pcs=DDS_PCS;
		DDS_options.SERmode=SER_MODE_3WIRE;
80007e36:	b6 aa       	st.b	r11[0x2],r10
		DDS_options.LSBfirst=MSB_FIRST;
		DDS_options.VCOgain=DDS_VCO_gain;
80007e38:	b6 ca       	st.b	r11[0x4],r10
		DDS_options.CHRGPMP=CHRGPMP_75uA;
		DDS_options.PPC=0b101;
		DDS_options.MODLEVEL=MODLEVEL_4;

		DDS_options_CH0.pcs=DDS_PCS;
		DDS_options_CH0.channels=CH_EN_0;
80007e3a:	b2 9a       	st.b	r9[0x1],r10
		DDS_options_CH0.AFPmod=Amod;
80007e3c:	b2 aa       	st.b	r9[0x2],r10
		DDS_options_CH0.DACfsc=DAC_FSC_FULL;
		DDS_options_CH0.coreenable=DCPDN_ON;
		DDS_options_CH0.DACenable=DACPDN_ON;
		DDS_options_CH0.matchedpipes=MATCHED_PIPES_DIS;
		DDS_options_CH0.sinorcos=COS_OUT;
		DDS_options_CH0.ampmulenable=AMP_MUL_EN;
80007e3e:	f3 6a 00 08 	st.b	r9[8],r10
	uint32_t temp=AVR32_TC0.channel[0].sr;
}

int main (void) {
	
		DDS_options.pcs=DDS_PCS;
80007e42:	30 7a       	mov	r10,7
		DDS_options_CH0.RURDenable=AMP_MUL_MANUAL;
		DDS_options_CH0.ASF=512;
		DDS_options_CH0.FTW=357913941;
		DDS_options_CH0.POW=0;

		DDS_options_CH1.pcs=DDS_PCS;
80007e44:	b0 8a       	st.b	r8[0x0],r10
	uint32_t temp=AVR32_TC0.channel[0].sr;
}

int main (void) {
	
		DDS_options.pcs=DDS_PCS;
80007e46:	b6 8a       	st.b	r11[0x0],r10
		DDS_options.PLLdiv=DDS_PLL_div;		//use 6 for 20MHz clock
		DDS_options.CHRGPMP=CHRGPMP_75uA;
		DDS_options.PPC=0b101;
		DDS_options.MODLEVEL=MODLEVEL_4;

		DDS_options_CH0.pcs=DDS_PCS;
80007e48:	b2 8a       	st.b	r9[0x0],r10
		DDS_options_CH0.channels=CH_EN_0;
		DDS_options_CH0.AFPmod=Amod;
		DDS_options_CH0.DACfsc=DAC_FSC_FULL;
80007e4a:	30 3a       	mov	r10,3
		DDS_options_CH0.POW=0;

		DDS_options_CH1.pcs=DDS_PCS;
		DDS_options_CH1.channels=CH_EN_1;
		DDS_options_CH1.AFPmod=Amod;
		DDS_options_CH1.DACfsc=DAC_FSC_FULL;
80007e4c:	b0 ba       	st.b	r8[0x3],r10
		DDS_options.MODLEVEL=MODLEVEL_4;

		DDS_options_CH0.pcs=DDS_PCS;
		DDS_options_CH0.channels=CH_EN_0;
		DDS_options_CH0.AFPmod=Amod;
		DDS_options_CH0.DACfsc=DAC_FSC_FULL;
80007e4e:	b2 ba       	st.b	r9[0x3],r10
		DDS_options_CH0.DACenable=DACPDN_ON;
		DDS_options_CH0.matchedpipes=MATCHED_PIPES_DIS;
		DDS_options_CH0.sinorcos=COS_OUT;
		DDS_options_CH0.ampmulenable=AMP_MUL_EN;
		DDS_options_CH0.RURDenable=AMP_MUL_MANUAL;
		DDS_options_CH0.ASF=512;
80007e50:	e0 6a 02 00 	mov	r10,512
		DDS_options_CH1.DACenable=DACPDN_ON;
		DDS_options_CH1.matchedpipes=MATCHED_PIPES_DIS;
		DDS_options_CH1.sinorcos=COS_OUT;
		DDS_options_CH1.ampmulenable=AMP_MUL_EN;
		DDS_options_CH1.RURDenable=AMP_MUL_MANUAL;
		DDS_options_CH1.ASF=512;
80007e54:	b0 5a       	st.h	r8[0xa],r10
		DDS_options_CH0.DACenable=DACPDN_ON;
		DDS_options_CH0.matchedpipes=MATCHED_PIPES_DIS;
		DDS_options_CH0.sinorcos=COS_OUT;
		DDS_options_CH0.ampmulenable=AMP_MUL_EN;
		DDS_options_CH0.RURDenable=AMP_MUL_MANUAL;
		DDS_options_CH0.ASF=512;
80007e56:	b2 5a       	st.h	r9[0xa],r10
		DDS_options_CH0.FTW=357913941;
80007e58:	e0 6a 55 55 	mov	r10,21845
80007e5c:	ea 1a 15 55 	orh	r10,0x1555
		DDS_options_CH1.matchedpipes=MATCHED_PIPES_DIS;
		DDS_options_CH1.sinorcos=COS_OUT;
		DDS_options_CH1.ampmulenable=AMP_MUL_EN;
		DDS_options_CH1.RURDenable=AMP_MUL_MANUAL;
		DDS_options_CH1.ASF=512;
		DDS_options_CH1.FTW=357913941;
80007e60:	91 3a       	st.w	r8[0xc],r10
		DDS_options_CH0.matchedpipes=MATCHED_PIPES_DIS;
		DDS_options_CH0.sinorcos=COS_OUT;
		DDS_options_CH0.ampmulenable=AMP_MUL_EN;
		DDS_options_CH0.RURDenable=AMP_MUL_MANUAL;
		DDS_options_CH0.ASF=512;
		DDS_options_CH0.FTW=357913941;
80007e62:	93 3a       	st.w	r9[0xc],r10
		DDS_options_CH0.POW=0;
80007e64:	30 0a       	mov	r10,0
80007e66:	f3 5a 00 10 	st.h	r9[16],r10
		DDS_options.pcs=DDS_PCS;
		DDS_options.SERmode=SER_MODE_3WIRE;
		DDS_options.LSBfirst=MSB_FIRST;
		DDS_options.VCOgain=DDS_VCO_gain;
		//DDS_options.PLLdiv=10;	//use 10 with 12MHz clock
		DDS_options.PLLdiv=DDS_PLL_div;		//use 6 for 20MHz clock
80007e6a:	30 f9       	mov	r9,15
80007e6c:	b6 d9       	st.b	r11[0x5],r9
		DDS_options.CHRGPMP=CHRGPMP_75uA;
		DDS_options.PPC=0b101;
80007e6e:	30 59       	mov	r9,5
80007e70:	b6 f9       	st.b	r11[0x7],r9
		DDS_options_CH0.ASF=512;
		DDS_options_CH0.FTW=357913941;
		DDS_options_CH0.POW=0;

		DDS_options_CH1.pcs=DDS_PCS;
		DDS_options_CH1.channels=CH_EN_1;
80007e72:	30 29       	mov	r9,2
		DDS_options_CH1.AFPmod=Amod;
		DDS_options_CH1.DACfsc=DAC_FSC_FULL;
		DDS_options_CH1.coreenable=DCPDN_ON;
80007e74:	b0 ca       	st.b	r8[0x4],r10
		DDS_options_CH0.ASF=512;
		DDS_options_CH0.FTW=357913941;
		DDS_options_CH0.POW=0;

		DDS_options_CH1.pcs=DDS_PCS;
		DDS_options_CH1.channels=CH_EN_1;
80007e76:	b0 99       	st.b	r8[0x1],r9
		DDS_options_CH1.sinorcos=COS_OUT;
		DDS_options_CH1.ampmulenable=AMP_MUL_EN;
		DDS_options_CH1.RURDenable=AMP_MUL_MANUAL;
		DDS_options_CH1.ASF=512;
		DDS_options_CH1.FTW=357913941;
		DDS_options_CH1.POW=4096;
80007e78:	e0 69 10 00 	mov	r9,4096
80007e7c:	f1 59 00 10 	st.h	r8[16],r9
	
	board_init();
80007e80:	fe b0 fd b8 	rcall	800079f0 <board_init>
	
	fnEnterAVRInterrupt((int)(AVR32_TC0_IRQ0 / AVR32_INTC_MAX_NUM_IRQS_PER_GRP), INT_LEVEL_0,(void (*)(void))tc_irq);
80007e84:	fe ca 00 88 	sub	r10,pc,136
80007e88:	30 0b       	mov	r11,0
80007e8a:	32 1c       	mov	r12,33
80007e8c:	fe b0 dc 2e 	rcall	800036e8 <fnEnterAVRInterrupt>
	
	pdca_disable(SPI1_RX_PDCA_CHANNEL);
80007e90:	30 0c       	mov	r12,0
80007e92:	fe b0 e4 25 	rcall	800046dc <pdca_disable>
	my_pdca_init_channel(SPI1_RX_PDCA_CHANNEL,(uint32_t)(&bank0),(samplebuffer_size/2), SPI1_RX_PDCA_PID,   (uint32_t)(&bank1),  (samplebuffer_size/2), PDCA_TRANSFER_SIZE_HALF_WORD);
80007e96:	e0 6a 20 00 	mov	r10,8192
80007e9a:	30 16       	mov	r6,1
80007e9c:	49 f8       	lddpc	r8,80007f18 <main+0x114>
80007e9e:	1a d6       	st.w	--sp,r6
80007ea0:	30 b9       	mov	r9,11
80007ea2:	1a da       	st.w	--sp,r10
80007ea4:	49 eb       	lddpc	r11,80007f1c <main+0x118>
80007ea6:	30 0c       	mov	r12,0
80007ea8:	fe b0 dc 3a 	rcall	8000371c <my_pdca_init_channel>
	
	pdca_disable(SPI0_TX_PDCA_CHANNEL);
80007eac:	30 2c       	mov	r12,2
80007eae:	fe b0 e4 17 	rcall	800046dc <pdca_disable>
	my_pdca_init_channel(SPI0_TX_PDCA_CHANNEL,(uint32_t)(&bank1),0, SPI0_TX_PDCA_PID, 0, 0, PDCA_TRANSFER_SIZE_BYTE);	//initialize with 0 in TCR and TCRR so that nothing happens until TCR is written
80007eb2:	31 59       	mov	r9,21
80007eb4:	30 07       	mov	r7,0
80007eb6:	49 9b       	lddpc	r11,80007f18 <main+0x114>
80007eb8:	1a d7       	st.w	--sp,r7
80007eba:	0e 98       	mov	r8,r7
80007ebc:	1a d7       	st.w	--sp,r7
80007ebe:	0e 9a       	mov	r10,r7
80007ec0:	30 2c       	mov	r12,2
80007ec2:	fe b0 dc 2d 	rcall	8000371c <my_pdca_init_channel>
	pdca_enable(SPI0_TX_PDCA_CHANNEL); //needs to be enabled at start of a sequence!
80007ec6:	30 2c       	mov	r12,2
80007ec8:	fe b0 e4 17 	rcall	800046f6 <pdca_enable>
	
	pdca_disable(SPI0_RX_PDCA_CHANNEL);
80007ecc:	0c 9c       	mov	r12,r6
80007ece:	fe b0 e4 07 	rcall	800046dc <pdca_disable>
	my_pdca_init_channel(SPI0_RX_PDCA_CHANNEL,(uint32_t)(&bank0),0, SPI0_RX_PDCA_PID, 0, 0, PDCA_TRANSFER_SIZE_BYTE);	//initialize with 0 in TCR and TCRR so that nothing happens until TCR is written
80007ed2:	0e 98       	mov	r8,r7
80007ed4:	1a d7       	st.w	--sp,r7
80007ed6:	30 a9       	mov	r9,10
80007ed8:	1a d7       	st.w	--sp,r7
80007eda:	0e 9a       	mov	r10,r7
80007edc:	0c 9c       	mov	r12,r6
80007ede:	49 0b       	lddpc	r11,80007f1c <main+0x118>
80007ee0:	fe b0 dc 1e 	rcall	8000371c <my_pdca_init_channel>
__attribute__((__interrupt__)) void tc_irq(void)
{
	uint32_t temp=AVR32_TC0.channel[0].sr;
}

int main (void) {
80007ee4:	48 f8       	lddpc	r8,80007f20 <main+0x11c>
80007ee6:	2f ad       	sub	sp,-24
80007ee8:	48 fa       	lddpc	r10,80007f24 <main+0x120>
80007eea:	f0 c9 fe 00 	sub	r9,r8,-512
	my_pdca_init_channel(SPI0_RX_PDCA_CHANNEL,(uint32_t)(&bank0),0, SPI0_RX_PDCA_PID, 0, 0, PDCA_TRANSFER_SIZE_BYTE);	//initialize with 0 in TCR and TCRR so that nothing happens until TCR is written
	
	uint8_t temp=0;	//MUST MAKE SURE THAN MOSI IS HELD HIGH DURING READ OPERATIONS, OTHERWISE READ RESULTS WILL BE MESSED UP
	for(int i=0;i<512;i++)
		{
			dummyblock[i]=0xFF;
80007eee:	10 aa       	st.w	r8++,r10
80007ef0:	12 38       	cp.w	r8,r9
		}
	
	cpu_irq_disable();
80007ef2:	cf e1       	brne	80007eee <main+0xea>
	
//	boot();

	pdca_enable(LCD_USART_RX_PDCA_CHANNEL);
80007ef4:	d3 03       	ssrf	0x10
80007ef6:	30 5c       	mov	r12,5
80007ef8:	fe b0 e3 ff 	rcall	800046f6 <pdca_enable>
	
	pdca_enable(USB_USART_RX_PDCA_CHANNEL);
80007efc:	30 4c       	mov	r12,4
80007efe:	fe b0 e3 fc 	rcall	800046f6 <pdca_enable>

	idle();
80007f02:	fe b0 f9 b1 	rcall	80007264 <idle>
	
}
80007f06:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80007f0a:	d7 03       	nop
80007f0c:	00 00       	add	r0,r0
80007f0e:	53 64       	stdsp	sp[0xd8],r4
80007f10:	00 00       	add	r0,r0
80007f12:	95 7c       	st.w	r10[0x1c],r12
80007f14:	00 00       	add	r0,r0
80007f16:	95 d4       	st.w	r10[0x34],r4
80007f18:	00 00       	add	r0,r0
80007f1a:	13 64       	ld.uh	r4,--r9
80007f1c:	00 00       	add	r0,r0
80007f1e:	53 7c       	stdsp	sp[0xdc],r12
80007f20:	00 00       	add	r0,r0
80007f22:	93 7c       	st.w	r9[0x1c],r12
80007f24:	ff ff ff ff 	st.bal	pc[0x1ff],pc

80007f28 <ceilf>:
80007f28:	d4 21       	pushm	r4-r7,lr
80007f2a:	eb dc c0 1f 	bfextu	r5,r12,0x0,0x1f
80007f2e:	18 9b       	mov	r11,r12
80007f30:	ea 06 16 17 	lsr	r6,r5,0x17
80007f34:	18 97       	mov	r7,r12
80007f36:	27 f6       	sub	r6,127
80007f38:	59 66       	cp.w	r6,22
80007f3a:	e0 89 00 36 	brgt	80007fa6 <ceilf+0x7e>
80007f3e:	58 06       	cp.w	r6,0
80007f40:	c1 44       	brge	80007f68 <ceilf+0x40>
80007f42:	e0 6b f2 ca 	mov	r11,62154
80007f46:	ea 1b 71 49 	orh	r11,0x7149
80007f4a:	e0 a0 05 9f 	rcall	80008a88 <__avr32_f32_add>
80007f4e:	18 9b       	mov	r11,r12
80007f50:	30 0c       	mov	r12,0
80007f52:	e0 a0 02 db 	rcall	80008508 <__avr32_f32_cmp_lt>
80007f56:	c3 50       	breq	80007fc0 <ceilf+0x98>
80007f58:	58 07       	cp.w	r7,0
80007f5a:	c3 15       	brlt	80007fbc <ceilf+0x94>
80007f5c:	fc 18 3f 80 	movh	r8,0x3f80
80007f60:	58 05       	cp.w	r5,0
80007f62:	f0 07 17 10 	movne	r7,r8
80007f66:	c2 d8       	rjmp	80007fc0 <ceilf+0x98>
80007f68:	e0 65 ff ff 	mov	r5,65535
80007f6c:	ea 15 00 7f 	orh	r5,0x7f
80007f70:	ea 06 08 45 	asr	r5,r5,r6
80007f74:	eb ec 00 08 	and	r8,r5,r12
80007f78:	c2 50       	breq	80007fc2 <ceilf+0x9a>
80007f7a:	e0 6b f2 ca 	mov	r11,62154
80007f7e:	ea 1b 71 49 	orh	r11,0x7149
80007f82:	e0 a0 05 83 	rcall	80008a88 <__avr32_f32_add>
80007f86:	18 9b       	mov	r11,r12
80007f88:	30 0c       	mov	r12,0
80007f8a:	e0 a0 02 bf 	rcall	80008508 <__avr32_f32_cmp_lt>
80007f8e:	c1 90       	breq	80007fc0 <ceilf+0x98>
80007f90:	58 07       	cp.w	r7,0
80007f92:	e0 8a 00 07 	brle	80007fa0 <ceilf+0x78>
80007f96:	fc 18 00 80 	movh	r8,0x80
80007f9a:	f0 06 08 46 	asr	r6,r8,r6
80007f9e:	0c 07       	add	r7,r6
80007fa0:	5c d5       	com	r5
80007fa2:	0a 67       	and	r7,r5
80007fa4:	c0 e8       	rjmp	80007fc0 <ceilf+0x98>
80007fa6:	e0 68 ff ff 	mov	r8,65535
80007faa:	ea 18 7f 7f 	orh	r8,0x7f7f
80007fae:	10 35       	cp.w	r5,r8
80007fb0:	e0 88 00 09 	brls	80007fc2 <ceilf+0x9a>
80007fb4:	e0 a0 05 6a 	rcall	80008a88 <__avr32_f32_add>
80007fb8:	18 9b       	mov	r11,r12
80007fba:	c0 48       	rjmp	80007fc2 <ceilf+0x9a>
80007fbc:	fc 17 80 00 	movh	r7,0x8000
80007fc0:	0e 9b       	mov	r11,r7
80007fc2:	16 9c       	mov	r12,r11
80007fc4:	d8 22       	popm	r4-r7,pc
80007fc6:	d7 03       	nop

80007fc8 <roundf>:
80007fc8:	d4 01       	pushm	lr
80007fca:	f1 dc c2 e8 	bfextu	r8,r12,0x17,0x8
80007fce:	18 9b       	mov	r11,r12
80007fd0:	18 99       	mov	r9,r12
80007fd2:	27 f8       	sub	r8,127
80007fd4:	59 68       	cp.w	r8,22
80007fd6:	e0 89 00 1f 	brgt	80008014 <roundf+0x4c>
80007fda:	58 08       	cp.w	r8,0
80007fdc:	c0 94       	brge	80007fee <roundf+0x26>
80007fde:	18 9b       	mov	r11,r12
80007fe0:	e6 1b 80 00 	andh	r11,0x8000,COH
80007fe4:	5b f8       	cp.w	r8,-1
80007fe6:	c1 d1       	brne	80008020 <roundf+0x58>
80007fe8:	ea 1b 3f 80 	orh	r11,0x3f80
80007fec:	c1 a8       	rjmp	80008020 <roundf+0x58>
80007fee:	e0 6a ff ff 	mov	r10,65535
80007ff2:	ea 1a 00 7f 	orh	r10,0x7f
80007ff6:	f4 08 08 4a 	asr	r10,r10,r8
80007ffa:	f5 ec 00 0c 	and	r12,r10,r12
80007ffe:	c1 10       	breq	80008020 <roundf+0x58>
80008000:	fc 1b 00 40 	movh	r11,0x40
80008004:	5c da       	com	r10
80008006:	f6 08 08 48 	asr	r8,r11,r8
8000800a:	f0 09 00 09 	add	r9,r8,r9
8000800e:	f5 e9 00 0b 	and	r11,r10,r9
80008012:	c0 78       	rjmp	80008020 <roundf+0x58>
80008014:	e0 48 00 80 	cp.w	r8,128
80008018:	c0 41       	brne	80008020 <roundf+0x58>
8000801a:	e0 a0 05 37 	rcall	80008a88 <__avr32_f32_add>
8000801e:	18 9b       	mov	r11,r12
80008020:	16 9c       	mov	r12,r11
80008022:	d8 02       	popm	pc

80008024 <__avr32_f64_mul>:
80008024:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80008028:	e0 80 00 dc 	breq	800081e0 <__avr32_f64_mul_op1_zero>
8000802c:	d4 21       	pushm	r4-r7,lr
8000802e:	f7 e9 20 0e 	eor	lr,r11,r9
80008032:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008036:	30 15       	mov	r5,1
80008038:	c4 30       	breq	800080be <__avr32_f64_mul_op1_subnormal>
8000803a:	ab 6b       	lsl	r11,0xa
8000803c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80008040:	ab 6a       	lsl	r10,0xa
80008042:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80008046:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000804a:	c5 c0       	breq	80008102 <__avr32_f64_mul_op2_subnormal>
8000804c:	a1 78       	lsl	r8,0x1
8000804e:	5c f9       	rol	r9
80008050:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80008054:	e0 47 07 ff 	cp.w	r7,2047
80008058:	c7 70       	breq	80008146 <__avr32_f64_mul_op_nan_or_inf>
8000805a:	e0 46 07 ff 	cp.w	r6,2047
8000805e:	c7 40       	breq	80008146 <__avr32_f64_mul_op_nan_or_inf>
80008060:	ee 06 00 0c 	add	r12,r7,r6
80008064:	e0 2c 03 fe 	sub	r12,1022
80008068:	f6 08 06 44 	mulu.d	r4,r11,r8
8000806c:	f4 09 07 44 	macu.d	r4,r10,r9
80008070:	f4 08 06 46 	mulu.d	r6,r10,r8
80008074:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008078:	08 07       	add	r7,r4
8000807a:	f4 05 00 4a 	adc	r10,r10,r5
8000807e:	5c 0b       	acr	r11
80008080:	ed bb 00 14 	bld	r11,0x14
80008084:	c0 50       	breq	8000808e <__avr32_f64_mul+0x6a>
80008086:	a1 77       	lsl	r7,0x1
80008088:	5c fa       	rol	r10
8000808a:	5c fb       	rol	r11
8000808c:	20 1c       	sub	r12,1
8000808e:	58 0c       	cp.w	r12,0
80008090:	e0 8a 00 6f 	brle	8000816e <__avr32_f64_mul_res_subnormal>
80008094:	e0 4c 07 ff 	cp.w	r12,2047
80008098:	e0 84 00 9c 	brge	800081d0 <__avr32_f64_mul_res_inf>
8000809c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800080a0:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800080a4:	ef e6 12 17 	or	r7,r7,r6>>0x1
800080a8:	ee 17 80 00 	eorh	r7,0x8000
800080ac:	f1 b7 04 20 	satu	r7,0x1
800080b0:	0e 0a       	add	r10,r7
800080b2:	5c 0b       	acr	r11
800080b4:	ed be 00 1f 	bld	lr,0x1f
800080b8:	ef bb 00 1f 	bst	r11,0x1f
800080bc:	d8 22       	popm	r4-r7,pc

800080be <__avr32_f64_mul_op1_subnormal>:
800080be:	e4 1b 00 0f 	andh	r11,0xf
800080c2:	f4 0c 12 00 	clz	r12,r10
800080c6:	f6 06 12 00 	clz	r6,r11
800080ca:	f7 bc 03 e1 	sublo	r12,-31
800080ce:	f8 06 17 30 	movlo	r6,r12
800080d2:	f7 b6 02 01 	subhs	r6,1
800080d6:	e0 46 00 20 	cp.w	r6,32
800080da:	c0 d4       	brge	800080f4 <__avr32_f64_mul_op1_subnormal+0x36>
800080dc:	ec 0c 11 20 	rsub	r12,r6,32
800080e0:	f6 06 09 4b 	lsl	r11,r11,r6
800080e4:	f4 0c 0a 4c 	lsr	r12,r10,r12
800080e8:	18 4b       	or	r11,r12
800080ea:	f4 06 09 4a 	lsl	r10,r10,r6
800080ee:	20 b6       	sub	r6,11
800080f0:	0c 17       	sub	r7,r6
800080f2:	ca ab       	rjmp	80008046 <__avr32_f64_mul+0x22>
800080f4:	f4 06 09 4b 	lsl	r11,r10,r6
800080f8:	c6 40       	breq	800081c0 <__avr32_f64_mul_res_zero>
800080fa:	30 0a       	mov	r10,0
800080fc:	20 b6       	sub	r6,11
800080fe:	0c 17       	sub	r7,r6
80008100:	ca 3b       	rjmp	80008046 <__avr32_f64_mul+0x22>

80008102 <__avr32_f64_mul_op2_subnormal>:
80008102:	e4 19 00 0f 	andh	r9,0xf
80008106:	f0 0c 12 00 	clz	r12,r8
8000810a:	f2 05 12 00 	clz	r5,r9
8000810e:	f7 bc 03 ea 	sublo	r12,-22
80008112:	f8 05 17 30 	movlo	r5,r12
80008116:	f7 b5 02 0a 	subhs	r5,10
8000811a:	e0 45 00 20 	cp.w	r5,32
8000811e:	c0 d4       	brge	80008138 <__avr32_f64_mul_op2_subnormal+0x36>
80008120:	ea 0c 11 20 	rsub	r12,r5,32
80008124:	f2 05 09 49 	lsl	r9,r9,r5
80008128:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000812c:	18 49       	or	r9,r12
8000812e:	f0 05 09 48 	lsl	r8,r8,r5
80008132:	20 25       	sub	r5,2
80008134:	0a 16       	sub	r6,r5
80008136:	c8 fb       	rjmp	80008054 <__avr32_f64_mul+0x30>
80008138:	f0 05 09 49 	lsl	r9,r8,r5
8000813c:	c4 20       	breq	800081c0 <__avr32_f64_mul_res_zero>
8000813e:	30 08       	mov	r8,0
80008140:	20 25       	sub	r5,2
80008142:	0a 16       	sub	r6,r5
80008144:	c8 8b       	rjmp	80008054 <__avr32_f64_mul+0x30>

80008146 <__avr32_f64_mul_op_nan_or_inf>:
80008146:	e4 19 00 0f 	andh	r9,0xf
8000814a:	e4 1b 00 0f 	andh	r11,0xf
8000814e:	14 4b       	or	r11,r10
80008150:	10 49       	or	r9,r8
80008152:	e0 47 07 ff 	cp.w	r7,2047
80008156:	c0 91       	brne	80008168 <__avr32_f64_mul_op1_not_naninf>
80008158:	58 0b       	cp.w	r11,0
8000815a:	c3 81       	brne	800081ca <__avr32_f64_mul_res_nan>
8000815c:	e0 46 07 ff 	cp.w	r6,2047
80008160:	c3 81       	brne	800081d0 <__avr32_f64_mul_res_inf>
80008162:	58 09       	cp.w	r9,0
80008164:	c3 60       	breq	800081d0 <__avr32_f64_mul_res_inf>
80008166:	c3 28       	rjmp	800081ca <__avr32_f64_mul_res_nan>

80008168 <__avr32_f64_mul_op1_not_naninf>:
80008168:	58 09       	cp.w	r9,0
8000816a:	c3 30       	breq	800081d0 <__avr32_f64_mul_res_inf>
8000816c:	c2 f8       	rjmp	800081ca <__avr32_f64_mul_res_nan>

8000816e <__avr32_f64_mul_res_subnormal>:
8000816e:	5c 3c       	neg	r12
80008170:	2f fc       	sub	r12,-1
80008172:	f1 bc 04 c0 	satu	r12,0x6
80008176:	e0 4c 00 20 	cp.w	r12,32
8000817a:	c1 14       	brge	8000819c <__avr32_f64_mul_res_subnormal+0x2e>
8000817c:	f8 08 11 20 	rsub	r8,r12,32
80008180:	0e 46       	or	r6,r7
80008182:	ee 0c 0a 47 	lsr	r7,r7,r12
80008186:	f4 08 09 49 	lsl	r9,r10,r8
8000818a:	12 47       	or	r7,r9
8000818c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008190:	f6 08 09 49 	lsl	r9,r11,r8
80008194:	12 4a       	or	r10,r9
80008196:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000819a:	c8 3b       	rjmp	800080a0 <__avr32_f64_mul+0x7c>
8000819c:	f8 08 11 20 	rsub	r8,r12,32
800081a0:	f9 b9 00 00 	moveq	r9,0
800081a4:	c0 30       	breq	800081aa <__avr32_f64_mul_res_subnormal+0x3c>
800081a6:	f6 08 09 49 	lsl	r9,r11,r8
800081aa:	0e 46       	or	r6,r7
800081ac:	ed ea 10 16 	or	r6,r6,r10<<0x1
800081b0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800081b4:	f3 ea 10 07 	or	r7,r9,r10
800081b8:	f6 0c 0a 4a 	lsr	r10,r11,r12
800081bc:	30 0b       	mov	r11,0
800081be:	c7 1b       	rjmp	800080a0 <__avr32_f64_mul+0x7c>

800081c0 <__avr32_f64_mul_res_zero>:
800081c0:	1c 9b       	mov	r11,lr
800081c2:	e6 1b 80 00 	andh	r11,0x8000,COH
800081c6:	30 0a       	mov	r10,0
800081c8:	d8 22       	popm	r4-r7,pc

800081ca <__avr32_f64_mul_res_nan>:
800081ca:	3f fb       	mov	r11,-1
800081cc:	3f fa       	mov	r10,-1
800081ce:	d8 22       	popm	r4-r7,pc

800081d0 <__avr32_f64_mul_res_inf>:
800081d0:	f0 6b 00 00 	mov	r11,-1048576
800081d4:	ed be 00 1f 	bld	lr,0x1f
800081d8:	ef bb 00 1f 	bst	r11,0x1f
800081dc:	30 0a       	mov	r10,0
800081de:	d8 22       	popm	r4-r7,pc

800081e0 <__avr32_f64_mul_op1_zero>:
800081e0:	f7 e9 20 0b 	eor	r11,r11,r9
800081e4:	e6 1b 80 00 	andh	r11,0x8000,COH
800081e8:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800081ec:	e0 4c 07 ff 	cp.w	r12,2047
800081f0:	5e 1c       	retne	r12
800081f2:	3f fa       	mov	r10,-1
800081f4:	3f fb       	mov	r11,-1
800081f6:	5e fc       	retal	r12

800081f8 <__avr32_f64_sub_from_add>:
800081f8:	ee 19 80 00 	eorh	r9,0x8000

800081fc <__avr32_f64_sub>:
800081fc:	f7 e9 20 0c 	eor	r12,r11,r9
80008200:	e0 86 00 ca 	brmi	80008394 <__avr32_f64_add_from_sub>
80008204:	eb cd 40 e0 	pushm	r5-r7,lr
80008208:	16 9c       	mov	r12,r11
8000820a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000820e:	bf db       	cbr	r11,0x1f
80008210:	bf d9       	cbr	r9,0x1f
80008212:	10 3a       	cp.w	r10,r8
80008214:	f2 0b 13 00 	cpc	r11,r9
80008218:	c0 92       	brcc	8000822a <__avr32_f64_sub+0x2e>
8000821a:	16 97       	mov	r7,r11
8000821c:	12 9b       	mov	r11,r9
8000821e:	0e 99       	mov	r9,r7
80008220:	14 97       	mov	r7,r10
80008222:	10 9a       	mov	r10,r8
80008224:	0e 98       	mov	r8,r7
80008226:	ee 1c 80 00 	eorh	r12,0x8000
8000822a:	f6 07 16 14 	lsr	r7,r11,0x14
8000822e:	ab 7b       	lsl	r11,0xb
80008230:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008234:	ab 7a       	lsl	r10,0xb
80008236:	bf bb       	sbr	r11,0x1f
80008238:	f2 06 16 14 	lsr	r6,r9,0x14
8000823c:	c4 40       	breq	800082c4 <__avr32_f64_sub_opL_subnormal>
8000823e:	ab 79       	lsl	r9,0xb
80008240:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008244:	ab 78       	lsl	r8,0xb
80008246:	bf b9       	sbr	r9,0x1f

80008248 <__avr32_f64_sub_opL_subnormal_done>:
80008248:	e0 47 07 ff 	cp.w	r7,2047
8000824c:	c4 f0       	breq	800082ea <__avr32_f64_sub_opH_nan_or_inf>
8000824e:	0e 26       	rsub	r6,r7
80008250:	c1 20       	breq	80008274 <__avr32_f64_sub_shift_done>
80008252:	ec 05 11 20 	rsub	r5,r6,32
80008256:	e0 46 00 20 	cp.w	r6,32
8000825a:	c7 c2       	brcc	80008352 <__avr32_f64_sub_longshift>
8000825c:	f0 05 09 4e 	lsl	lr,r8,r5
80008260:	f2 05 09 45 	lsl	r5,r9,r5
80008264:	f0 06 0a 48 	lsr	r8,r8,r6
80008268:	f2 06 0a 49 	lsr	r9,r9,r6
8000826c:	0a 48       	or	r8,r5
8000826e:	58 0e       	cp.w	lr,0
80008270:	5f 1e       	srne	lr
80008272:	1c 48       	or	r8,lr

80008274 <__avr32_f64_sub_shift_done>:
80008274:	10 1a       	sub	r10,r8
80008276:	f6 09 01 4b 	sbc	r11,r11,r9
8000827a:	f6 06 12 00 	clz	r6,r11
8000827e:	c0 e0       	breq	8000829a <__avr32_f64_sub_longnormalize_done>
80008280:	c7 83       	brcs	80008370 <__avr32_f64_sub_longnormalize>
80008282:	ec 0e 11 20 	rsub	lr,r6,32
80008286:	f6 06 09 4b 	lsl	r11,r11,r6
8000828a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000828e:	1c 4b       	or	r11,lr
80008290:	f4 06 09 4a 	lsl	r10,r10,r6
80008294:	0c 17       	sub	r7,r6
80008296:	e0 8a 00 39 	brle	80008308 <__avr32_f64_sub_subnormal_result>

8000829a <__avr32_f64_sub_longnormalize_done>:
8000829a:	f4 09 15 15 	lsl	r9,r10,0x15
8000829e:	ab 9a       	lsr	r10,0xb
800082a0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800082a4:	ab 9b       	lsr	r11,0xb
800082a6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800082aa:	18 4b       	or	r11,r12

800082ac <__avr32_f64_sub_round>:
800082ac:	fc 17 80 00 	movh	r7,0x8000
800082b0:	ed ba 00 00 	bld	r10,0x0
800082b4:	f7 b7 01 ff 	subne	r7,-1
800082b8:	0e 39       	cp.w	r9,r7
800082ba:	5f 29       	srhs	r9
800082bc:	12 0a       	add	r10,r9
800082be:	5c 0b       	acr	r11
800082c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800082c4 <__avr32_f64_sub_opL_subnormal>:
800082c4:	ab 79       	lsl	r9,0xb
800082c6:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800082ca:	ab 78       	lsl	r8,0xb
800082cc:	f3 e8 10 0e 	or	lr,r9,r8
800082d0:	f9 b6 01 01 	movne	r6,1
800082d4:	ee 0e 11 00 	rsub	lr,r7,0
800082d8:	f9 b7 00 01 	moveq	r7,1
800082dc:	ef bb 00 1f 	bst	r11,0x1f
800082e0:	f7 ea 10 0e 	or	lr,r11,r10
800082e4:	f9 b7 00 00 	moveq	r7,0
800082e8:	cb 0b       	rjmp	80008248 <__avr32_f64_sub_opL_subnormal_done>

800082ea <__avr32_f64_sub_opH_nan_or_inf>:
800082ea:	bf db       	cbr	r11,0x1f
800082ec:	f7 ea 10 0e 	or	lr,r11,r10
800082f0:	c0 81       	brne	80008300 <__avr32_f64_sub_return_nan>
800082f2:	e0 46 07 ff 	cp.w	r6,2047
800082f6:	c0 50       	breq	80008300 <__avr32_f64_sub_return_nan>
800082f8:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800082fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008300 <__avr32_f64_sub_return_nan>:
80008300:	3f fa       	mov	r10,-1
80008302:	3f fb       	mov	r11,-1
80008304:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008308 <__avr32_f64_sub_subnormal_result>:
80008308:	5c 37       	neg	r7
8000830a:	2f f7       	sub	r7,-1
8000830c:	f1 b7 04 c0 	satu	r7,0x6
80008310:	e0 47 00 20 	cp.w	r7,32
80008314:	c1 14       	brge	80008336 <__avr32_f64_sub_subnormal_result+0x2e>
80008316:	ee 08 11 20 	rsub	r8,r7,32
8000831a:	f4 08 09 49 	lsl	r9,r10,r8
8000831e:	5f 16       	srne	r6
80008320:	f4 07 0a 4a 	lsr	r10,r10,r7
80008324:	0c 4a       	or	r10,r6
80008326:	f6 08 09 49 	lsl	r9,r11,r8
8000832a:	f5 e9 10 0a 	or	r10,r10,r9
8000832e:	f4 07 0a 4b 	lsr	r11,r10,r7
80008332:	30 07       	mov	r7,0
80008334:	cb 3b       	rjmp	8000829a <__avr32_f64_sub_longnormalize_done>
80008336:	ee 08 11 40 	rsub	r8,r7,64
8000833a:	f6 08 09 49 	lsl	r9,r11,r8
8000833e:	14 49       	or	r9,r10
80008340:	5f 16       	srne	r6
80008342:	f6 07 0a 4a 	lsr	r10,r11,r7
80008346:	0c 4a       	or	r10,r6
80008348:	30 0b       	mov	r11,0
8000834a:	30 07       	mov	r7,0
8000834c:	ca 7b       	rjmp	8000829a <__avr32_f64_sub_longnormalize_done>
8000834e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008352 <__avr32_f64_sub_longshift>:
80008352:	f1 b6 04 c0 	satu	r6,0x6
80008356:	f0 0e 17 00 	moveq	lr,r8
8000835a:	c0 40       	breq	80008362 <__avr32_f64_sub_longshift+0x10>
8000835c:	f2 05 09 4e 	lsl	lr,r9,r5
80008360:	10 4e       	or	lr,r8
80008362:	f2 06 0a 48 	lsr	r8,r9,r6
80008366:	30 09       	mov	r9,0
80008368:	58 0e       	cp.w	lr,0
8000836a:	5f 1e       	srne	lr
8000836c:	1c 48       	or	r8,lr
8000836e:	c8 3b       	rjmp	80008274 <__avr32_f64_sub_shift_done>

80008370 <__avr32_f64_sub_longnormalize>:
80008370:	f4 06 12 00 	clz	r6,r10
80008374:	f9 b7 03 00 	movlo	r7,0
80008378:	f9 b6 03 00 	movlo	r6,0
8000837c:	f9 bc 03 00 	movlo	r12,0
80008380:	f7 b6 02 e0 	subhs	r6,-32
80008384:	f4 06 09 4b 	lsl	r11,r10,r6
80008388:	30 0a       	mov	r10,0
8000838a:	0c 17       	sub	r7,r6
8000838c:	fe 9a ff be 	brle	80008308 <__avr32_f64_sub_subnormal_result>
80008390:	c8 5b       	rjmp	8000829a <__avr32_f64_sub_longnormalize_done>
80008392:	d7 03       	nop

80008394 <__avr32_f64_add_from_sub>:
80008394:	ee 19 80 00 	eorh	r9,0x8000

80008398 <__avr32_f64_add>:
80008398:	f7 e9 20 0c 	eor	r12,r11,r9
8000839c:	fe 96 ff 2e 	brmi	800081f8 <__avr32_f64_sub_from_add>
800083a0:	eb cd 40 e0 	pushm	r5-r7,lr
800083a4:	16 9c       	mov	r12,r11
800083a6:	e6 1c 80 00 	andh	r12,0x8000,COH
800083aa:	bf db       	cbr	r11,0x1f
800083ac:	bf d9       	cbr	r9,0x1f
800083ae:	12 3b       	cp.w	r11,r9
800083b0:	c0 72       	brcc	800083be <__avr32_f64_add+0x26>
800083b2:	16 97       	mov	r7,r11
800083b4:	12 9b       	mov	r11,r9
800083b6:	0e 99       	mov	r9,r7
800083b8:	14 97       	mov	r7,r10
800083ba:	10 9a       	mov	r10,r8
800083bc:	0e 98       	mov	r8,r7
800083be:	30 0e       	mov	lr,0
800083c0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800083c4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800083c8:	b5 ab       	sbr	r11,0x14
800083ca:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800083ce:	c5 f0       	breq	8000848c <__avr32_f64_add_op2_subnormal>
800083d0:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800083d4:	b5 a9       	sbr	r9,0x14
800083d6:	e0 47 07 ff 	cp.w	r7,2047
800083da:	c2 50       	breq	80008424 <__avr32_f64_add_opH_nan_or_inf>
800083dc:	0e 26       	rsub	r6,r7
800083de:	c0 f0       	breq	800083fc <__avr32_f64_add_shift_done>
800083e0:	ec 05 11 20 	rsub	r5,r6,32
800083e4:	e0 46 00 20 	cp.w	r6,32
800083e8:	c3 52       	brcc	80008452 <__avr32_f64_add_longshift>
800083ea:	f0 05 09 4e 	lsl	lr,r8,r5
800083ee:	f2 05 09 45 	lsl	r5,r9,r5
800083f2:	f0 06 0a 48 	lsr	r8,r8,r6
800083f6:	f2 06 0a 49 	lsr	r9,r9,r6
800083fa:	0a 48       	or	r8,r5

800083fc <__avr32_f64_add_shift_done>:
800083fc:	10 0a       	add	r10,r8
800083fe:	f6 09 00 4b 	adc	r11,r11,r9
80008402:	ed bb 00 15 	bld	r11,0x15
80008406:	c3 40       	breq	8000846e <__avr32_f64_add_res_of>

80008408 <__avr32_f64_add_res_of_done>:
80008408:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000840c:	18 4b       	or	r11,r12

8000840e <__avr32_f64_add_round>:
8000840e:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008412:	18 4e       	or	lr,r12
80008414:	ee 1e 80 00 	eorh	lr,0x8000
80008418:	f1 be 04 20 	satu	lr,0x1
8000841c:	1c 0a       	add	r10,lr
8000841e:	5c 0b       	acr	r11
80008420:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008424 <__avr32_f64_add_opH_nan_or_inf>:
80008424:	b5 cb       	cbr	r11,0x14
80008426:	f7 ea 10 0e 	or	lr,r11,r10
8000842a:	c1 01       	brne	8000844a <__avr32_f64_add_return_nan>
8000842c:	e0 46 07 ff 	cp.w	r6,2047
80008430:	c0 30       	breq	80008436 <__avr32_f64_add_opL_nan_or_inf>
80008432:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008436 <__avr32_f64_add_opL_nan_or_inf>:
80008436:	b5 c9       	cbr	r9,0x14
80008438:	f3 e8 10 0e 	or	lr,r9,r8
8000843c:	c0 71       	brne	8000844a <__avr32_f64_add_return_nan>
8000843e:	30 0a       	mov	r10,0
80008440:	fc 1b 7f f0 	movh	r11,0x7ff0
80008444:	18 4b       	or	r11,r12
80008446:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000844a <__avr32_f64_add_return_nan>:
8000844a:	3f fa       	mov	r10,-1
8000844c:	3f fb       	mov	r11,-1
8000844e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008452 <__avr32_f64_add_longshift>:
80008452:	f1 b6 04 c0 	satu	r6,0x6
80008456:	f0 0e 17 00 	moveq	lr,r8
8000845a:	c0 60       	breq	80008466 <__avr32_f64_add_longshift+0x14>
8000845c:	f2 05 09 4e 	lsl	lr,r9,r5
80008460:	58 08       	cp.w	r8,0
80008462:	5f 18       	srne	r8
80008464:	10 4e       	or	lr,r8
80008466:	f2 06 0a 48 	lsr	r8,r9,r6
8000846a:	30 09       	mov	r9,0
8000846c:	cc 8b       	rjmp	800083fc <__avr32_f64_add_shift_done>

8000846e <__avr32_f64_add_res_of>:
8000846e:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008472:	a1 9b       	lsr	r11,0x1
80008474:	5d 0a       	ror	r10
80008476:	5d 0e       	ror	lr
80008478:	2f f7       	sub	r7,-1
8000847a:	e0 47 07 ff 	cp.w	r7,2047
8000847e:	f9 ba 00 00 	moveq	r10,0
80008482:	f9 bb 00 00 	moveq	r11,0
80008486:	f9 be 00 00 	moveq	lr,0
8000848a:	cb fb       	rjmp	80008408 <__avr32_f64_add_res_of_done>

8000848c <__avr32_f64_add_op2_subnormal>:
8000848c:	30 16       	mov	r6,1
8000848e:	58 07       	cp.w	r7,0
80008490:	ca 31       	brne	800083d6 <__avr32_f64_add+0x3e>
80008492:	b5 cb       	cbr	r11,0x14
80008494:	10 0a       	add	r10,r8
80008496:	f6 09 00 4b 	adc	r11,r11,r9
8000849a:	18 4b       	or	r11,r12
8000849c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800084a0 <__avr32_f64_cmp_ge>:
800084a0:	1a de       	st.w	--sp,lr
800084a2:	1a d7       	st.w	--sp,r7
800084a4:	a1 7b       	lsl	r11,0x1
800084a6:	5f 3c       	srlo	r12
800084a8:	a1 79       	lsl	r9,0x1
800084aa:	5f 37       	srlo	r7
800084ac:	5c fc       	rol	r12
800084ae:	fc 1e ff e0 	movh	lr,0xffe0
800084b2:	58 0a       	cp.w	r10,0
800084b4:	fc 0b 13 00 	cpc	r11,lr
800084b8:	e0 8b 00 1d 	brhi	800084f2 <__avr32_f64_cmp_ge+0x52>
800084bc:	58 08       	cp.w	r8,0
800084be:	fc 09 13 00 	cpc	r9,lr
800084c2:	e0 8b 00 18 	brhi	800084f2 <__avr32_f64_cmp_ge+0x52>
800084c6:	58 0b       	cp.w	r11,0
800084c8:	f5 ba 00 00 	subfeq	r10,0
800084cc:	c1 50       	breq	800084f6 <__avr32_f64_cmp_ge+0x56>
800084ce:	1b 07       	ld.w	r7,sp++
800084d0:	1b 0e       	ld.w	lr,sp++
800084d2:	58 3c       	cp.w	r12,3
800084d4:	c0 a0       	breq	800084e8 <__avr32_f64_cmp_ge+0x48>
800084d6:	58 1c       	cp.w	r12,1
800084d8:	c0 33       	brcs	800084de <__avr32_f64_cmp_ge+0x3e>
800084da:	5e 0f       	reteq	1
800084dc:	5e 1d       	retne	0
800084de:	10 3a       	cp.w	r10,r8
800084e0:	f2 0b 13 00 	cpc	r11,r9
800084e4:	5e 2f       	reths	1
800084e6:	5e 3d       	retlo	0
800084e8:	14 38       	cp.w	r8,r10
800084ea:	f6 09 13 00 	cpc	r9,r11
800084ee:	5e 2f       	reths	1
800084f0:	5e 3d       	retlo	0
800084f2:	1b 07       	ld.w	r7,sp++
800084f4:	d8 0a       	popm	pc,r12=0
800084f6:	58 17       	cp.w	r7,1
800084f8:	5f 0c       	sreq	r12
800084fa:	58 09       	cp.w	r9,0
800084fc:	f5 b8 00 00 	subfeq	r8,0
80008500:	1b 07       	ld.w	r7,sp++
80008502:	1b 0e       	ld.w	lr,sp++
80008504:	5e 0f       	reteq	1
80008506:	5e fc       	retal	r12

80008508 <__avr32_f32_cmp_lt>:
80008508:	f8 0a 15 01 	lsl	r10,r12,0x1
8000850c:	f6 09 15 01 	lsl	r9,r11,0x1
80008510:	f5 ba 00 00 	subfeq	r10,0
80008514:	5e 0d       	reteq	0
80008516:	fc 18 ff 00 	movh	r8,0xff00
8000851a:	10 3a       	cp.w	r10,r8
8000851c:	5e bd       	rethi	0
8000851e:	10 39       	cp.w	r9,r8
80008520:	5e bd       	rethi	0
80008522:	f7 ec 20 08 	eor	r8,r11,r12
80008526:	ed bc 00 1f 	bld	r12,0x1f
8000852a:	5f 38       	srlo	r8
8000852c:	5e 68       	retmi	r8
8000852e:	c0 43       	brcs	80008536 <__avr32_f32_cmp_lt+0x2e>
80008530:	16 3c       	cp.w	r12,r11
80008532:	5e 2d       	reths	0
80008534:	5e 3f       	retlo	1
80008536:	18 3b       	cp.w	r11,r12
80008538:	5e 2d       	reths	0
8000853a:	5e 3f       	retlo	1

8000853c <__avr32_f64_div>:
8000853c:	eb cd 40 ff 	pushm	r0-r7,lr
80008540:	f7 e9 20 0e 	eor	lr,r11,r9
80008544:	f6 07 16 14 	lsr	r7,r11,0x14
80008548:	a9 7b       	lsl	r11,0x9
8000854a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000854e:	a9 7a       	lsl	r10,0x9
80008550:	bd bb       	sbr	r11,0x1d
80008552:	e4 1b 3f ff 	andh	r11,0x3fff
80008556:	ab d7       	cbr	r7,0xb
80008558:	e0 80 00 cc 	breq	800086f0 <__avr32_f64_div_round_subnormal+0x54>
8000855c:	e0 47 07 ff 	cp.w	r7,2047
80008560:	e0 84 00 b5 	brge	800086ca <__avr32_f64_div_round_subnormal+0x2e>
80008564:	f2 06 16 14 	lsr	r6,r9,0x14
80008568:	a9 79       	lsl	r9,0x9
8000856a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000856e:	a9 78       	lsl	r8,0x9
80008570:	bd b9       	sbr	r9,0x1d
80008572:	e4 19 3f ff 	andh	r9,0x3fff
80008576:	ab d6       	cbr	r6,0xb
80008578:	e0 80 00 e2 	breq	8000873c <__avr32_f64_div_round_subnormal+0xa0>
8000857c:	e0 46 07 ff 	cp.w	r6,2047
80008580:	e0 84 00 b2 	brge	800086e4 <__avr32_f64_div_round_subnormal+0x48>
80008584:	0c 17       	sub	r7,r6
80008586:	fe 37 fc 01 	sub	r7,-1023
8000858a:	fc 1c 80 00 	movh	r12,0x8000
8000858e:	f8 03 16 01 	lsr	r3,r12,0x1
80008592:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008596:	5c d4       	com	r4
80008598:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000859c:	e6 09 06 44 	mulu.d	r4,r3,r9
800085a0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085a4:	e6 05 06 44 	mulu.d	r4,r3,r5
800085a8:	ea 03 15 02 	lsl	r3,r5,0x2
800085ac:	e6 09 06 44 	mulu.d	r4,r3,r9
800085b0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085b4:	e6 05 06 44 	mulu.d	r4,r3,r5
800085b8:	ea 03 15 02 	lsl	r3,r5,0x2
800085bc:	e6 09 06 44 	mulu.d	r4,r3,r9
800085c0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085c4:	e6 05 06 44 	mulu.d	r4,r3,r5
800085c8:	ea 03 15 02 	lsl	r3,r5,0x2
800085cc:	e6 08 06 40 	mulu.d	r0,r3,r8
800085d0:	e4 09 07 40 	macu.d	r0,r2,r9
800085d4:	e6 09 06 44 	mulu.d	r4,r3,r9
800085d8:	02 04       	add	r4,r1
800085da:	5c 05       	acr	r5
800085dc:	a3 65       	lsl	r5,0x2
800085de:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800085e2:	a3 64       	lsl	r4,0x2
800085e4:	5c 34       	neg	r4
800085e6:	f8 05 01 45 	sbc	r5,r12,r5
800085ea:	e6 04 06 40 	mulu.d	r0,r3,r4
800085ee:	e4 05 07 40 	macu.d	r0,r2,r5
800085f2:	e6 05 06 44 	mulu.d	r4,r3,r5
800085f6:	02 04       	add	r4,r1
800085f8:	5c 05       	acr	r5
800085fa:	ea 03 15 02 	lsl	r3,r5,0x2
800085fe:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008602:	e8 02 15 02 	lsl	r2,r4,0x2
80008606:	e6 08 06 40 	mulu.d	r0,r3,r8
8000860a:	e4 09 07 40 	macu.d	r0,r2,r9
8000860e:	e6 09 06 44 	mulu.d	r4,r3,r9
80008612:	02 04       	add	r4,r1
80008614:	5c 05       	acr	r5
80008616:	a3 65       	lsl	r5,0x2
80008618:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000861c:	a3 64       	lsl	r4,0x2
8000861e:	5c 34       	neg	r4
80008620:	f8 05 01 45 	sbc	r5,r12,r5
80008624:	e6 04 06 40 	mulu.d	r0,r3,r4
80008628:	e4 05 07 40 	macu.d	r0,r2,r5
8000862c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008630:	02 04       	add	r4,r1
80008632:	5c 05       	acr	r5
80008634:	ea 03 15 02 	lsl	r3,r5,0x2
80008638:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000863c:	e8 02 15 02 	lsl	r2,r4,0x2
80008640:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008644:	e4 0b 07 40 	macu.d	r0,r2,r11
80008648:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000864c:	02 02       	add	r2,r1
8000864e:	5c 03       	acr	r3
80008650:	ed b3 00 1c 	bld	r3,0x1c
80008654:	c0 90       	breq	80008666 <__avr32_f64_div+0x12a>
80008656:	a1 72       	lsl	r2,0x1
80008658:	5c f3       	rol	r3
8000865a:	20 17       	sub	r7,1
8000865c:	a3 9a       	lsr	r10,0x3
8000865e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008662:	a3 9b       	lsr	r11,0x3
80008664:	c0 58       	rjmp	8000866e <__avr32_f64_div+0x132>
80008666:	a5 8a       	lsr	r10,0x4
80008668:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000866c:	a5 8b       	lsr	r11,0x4
8000866e:	58 07       	cp.w	r7,0
80008670:	e0 8a 00 8b 	brle	80008786 <__avr32_f64_div_res_subnormal>
80008674:	e0 12 ff 00 	andl	r2,0xff00
80008678:	e8 12 00 80 	orl	r2,0x80
8000867c:	e6 08 06 40 	mulu.d	r0,r3,r8
80008680:	e4 09 07 40 	macu.d	r0,r2,r9
80008684:	e4 08 06 44 	mulu.d	r4,r2,r8
80008688:	e6 09 06 48 	mulu.d	r8,r3,r9
8000868c:	00 05       	add	r5,r0
8000868e:	f0 01 00 48 	adc	r8,r8,r1
80008692:	5c 09       	acr	r9
80008694:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008698:	58 04       	cp.w	r4,0
8000869a:	5c 25       	cpc	r5

8000869c <__avr32_f64_div_round_subnormal>:
8000869c:	f4 08 13 00 	cpc	r8,r10
800086a0:	f6 09 13 00 	cpc	r9,r11
800086a4:	5f 36       	srlo	r6
800086a6:	f8 06 17 00 	moveq	r6,r12
800086aa:	e4 0a 16 08 	lsr	r10,r2,0x8
800086ae:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800086b2:	e6 0b 16 08 	lsr	r11,r3,0x8
800086b6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800086ba:	ed be 00 1f 	bld	lr,0x1f
800086be:	ef bb 00 1f 	bst	r11,0x1f
800086c2:	0c 0a       	add	r10,r6
800086c4:	5c 0b       	acr	r11
800086c6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800086ca:	e4 1b 00 0f 	andh	r11,0xf
800086ce:	14 4b       	or	r11,r10
800086d0:	e0 81 00 a7 	brne	8000881e <__avr32_f64_div_res_subnormal+0x98>
800086d4:	f2 06 16 14 	lsr	r6,r9,0x14
800086d8:	ab d6       	cbr	r6,0xb
800086da:	e0 46 07 ff 	cp.w	r6,2047
800086de:	e0 81 00 a4 	brne	80008826 <__avr32_f64_div_res_subnormal+0xa0>
800086e2:	c9 e8       	rjmp	8000881e <__avr32_f64_div_res_subnormal+0x98>
800086e4:	e4 19 00 0f 	andh	r9,0xf
800086e8:	10 49       	or	r9,r8
800086ea:	e0 81 00 9a 	brne	8000881e <__avr32_f64_div_res_subnormal+0x98>
800086ee:	c9 28       	rjmp	80008812 <__avr32_f64_div_res_subnormal+0x8c>
800086f0:	a3 7b       	lsl	r11,0x3
800086f2:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800086f6:	a3 7a       	lsl	r10,0x3
800086f8:	f5 eb 10 04 	or	r4,r10,r11
800086fc:	e0 80 00 a0 	breq	8000883c <__avr32_f64_div_op1_zero>
80008700:	f6 04 12 00 	clz	r4,r11
80008704:	c1 70       	breq	80008732 <__avr32_f64_div_round_subnormal+0x96>
80008706:	c0 c3       	brcs	8000871e <__avr32_f64_div_round_subnormal+0x82>
80008708:	e8 05 11 20 	rsub	r5,r4,32
8000870c:	f6 04 09 4b 	lsl	r11,r11,r4
80008710:	f4 05 0a 45 	lsr	r5,r10,r5
80008714:	0a 4b       	or	r11,r5
80008716:	f4 04 09 4a 	lsl	r10,r10,r4
8000871a:	08 17       	sub	r7,r4
8000871c:	c0 b8       	rjmp	80008732 <__avr32_f64_div_round_subnormal+0x96>
8000871e:	f4 04 12 00 	clz	r4,r10
80008722:	f9 b4 03 00 	movlo	r4,0
80008726:	f7 b4 02 e0 	subhs	r4,-32
8000872a:	f4 04 09 4b 	lsl	r11,r10,r4
8000872e:	30 0a       	mov	r10,0
80008730:	08 17       	sub	r7,r4
80008732:	a3 8a       	lsr	r10,0x2
80008734:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008738:	a3 8b       	lsr	r11,0x2
8000873a:	c1 1b       	rjmp	8000855c <__avr32_f64_div+0x20>
8000873c:	a3 79       	lsl	r9,0x3
8000873e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008742:	a3 78       	lsl	r8,0x3
80008744:	f3 e8 10 04 	or	r4,r9,r8
80008748:	c6 f0       	breq	80008826 <__avr32_f64_div_res_subnormal+0xa0>
8000874a:	f2 04 12 00 	clz	r4,r9
8000874e:	c1 70       	breq	8000877c <__avr32_f64_div_round_subnormal+0xe0>
80008750:	c0 c3       	brcs	80008768 <__avr32_f64_div_round_subnormal+0xcc>
80008752:	e8 05 11 20 	rsub	r5,r4,32
80008756:	f2 04 09 49 	lsl	r9,r9,r4
8000875a:	f0 05 0a 45 	lsr	r5,r8,r5
8000875e:	0a 49       	or	r9,r5
80008760:	f0 04 09 48 	lsl	r8,r8,r4
80008764:	08 16       	sub	r6,r4
80008766:	c0 b8       	rjmp	8000877c <__avr32_f64_div_round_subnormal+0xe0>
80008768:	f0 04 12 00 	clz	r4,r8
8000876c:	f9 b4 03 00 	movlo	r4,0
80008770:	f7 b4 02 e0 	subhs	r4,-32
80008774:	f0 04 09 49 	lsl	r9,r8,r4
80008778:	30 08       	mov	r8,0
8000877a:	08 16       	sub	r6,r4
8000877c:	a3 88       	lsr	r8,0x2
8000877e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008782:	a3 89       	lsr	r9,0x2
80008784:	cf ca       	rjmp	8000857c <__avr32_f64_div+0x40>

80008786 <__avr32_f64_div_res_subnormal>:
80008786:	5c 37       	neg	r7
80008788:	2f f7       	sub	r7,-1
8000878a:	f1 b7 04 c0 	satu	r7,0x6
8000878e:	e0 47 00 20 	cp.w	r7,32
80008792:	c1 54       	brge	800087bc <__avr32_f64_div_res_subnormal+0x36>
80008794:	ee 06 11 20 	rsub	r6,r7,32
80008798:	e4 07 0a 42 	lsr	r2,r2,r7
8000879c:	e6 06 09 4c 	lsl	r12,r3,r6
800087a0:	18 42       	or	r2,r12
800087a2:	e6 07 0a 43 	lsr	r3,r3,r7
800087a6:	f4 06 09 41 	lsl	r1,r10,r6
800087aa:	f4 07 0a 4a 	lsr	r10,r10,r7
800087ae:	f6 06 09 4c 	lsl	r12,r11,r6
800087b2:	18 4a       	or	r10,r12
800087b4:	f6 07 0a 4b 	lsr	r11,r11,r7
800087b8:	30 00       	mov	r0,0
800087ba:	c1 58       	rjmp	800087e4 <__avr32_f64_div_res_subnormal+0x5e>
800087bc:	ee 06 11 20 	rsub	r6,r7,32
800087c0:	f9 b0 00 00 	moveq	r0,0
800087c4:	f9 bc 00 00 	moveq	r12,0
800087c8:	c0 50       	breq	800087d2 <__avr32_f64_div_res_subnormal+0x4c>
800087ca:	f4 06 09 40 	lsl	r0,r10,r6
800087ce:	f6 06 09 4c 	lsl	r12,r11,r6
800087d2:	e6 07 0a 42 	lsr	r2,r3,r7
800087d6:	30 03       	mov	r3,0
800087d8:	f4 07 0a 41 	lsr	r1,r10,r7
800087dc:	18 41       	or	r1,r12
800087de:	f6 07 0a 4a 	lsr	r10,r11,r7
800087e2:	30 0b       	mov	r11,0
800087e4:	e0 12 ff 00 	andl	r2,0xff00
800087e8:	e8 12 00 80 	orl	r2,0x80
800087ec:	e6 08 06 46 	mulu.d	r6,r3,r8
800087f0:	e4 09 07 46 	macu.d	r6,r2,r9
800087f4:	e4 08 06 44 	mulu.d	r4,r2,r8
800087f8:	e6 09 06 48 	mulu.d	r8,r3,r9
800087fc:	0c 05       	add	r5,r6
800087fe:	f0 07 00 48 	adc	r8,r8,r7
80008802:	5c 09       	acr	r9
80008804:	30 07       	mov	r7,0
80008806:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000880a:	00 34       	cp.w	r4,r0
8000880c:	e2 05 13 00 	cpc	r5,r1
80008810:	c4 6b       	rjmp	8000869c <__avr32_f64_div_round_subnormal>
80008812:	1c 9b       	mov	r11,lr
80008814:	e6 1b 80 00 	andh	r11,0x8000,COH
80008818:	30 0a       	mov	r10,0
8000881a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000881e:	3f fb       	mov	r11,-1
80008820:	30 0a       	mov	r10,0
80008822:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008826:	f5 eb 10 04 	or	r4,r10,r11
8000882a:	c0 90       	breq	8000883c <__avr32_f64_div_op1_zero>
8000882c:	1c 9b       	mov	r11,lr
8000882e:	e6 1b 80 00 	andh	r11,0x8000,COH
80008832:	ea 1b 7f f0 	orh	r11,0x7ff0
80008836:	30 0a       	mov	r10,0
80008838:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000883c <__avr32_f64_div_op1_zero>:
8000883c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008840:	ce f0       	breq	8000881e <__avr32_f64_div_res_subnormal+0x98>
80008842:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008846:	e0 44 07 ff 	cp.w	r4,2047
8000884a:	ce 41       	brne	80008812 <__avr32_f64_div_res_subnormal+0x8c>
8000884c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008850:	ce 10       	breq	80008812 <__avr32_f64_div_res_subnormal+0x8c>
80008852:	ce 6b       	rjmp	8000881e <__avr32_f64_div_res_subnormal+0x98>

80008854 <__avr32_f32_div>:
80008854:	f7 ec 20 08 	eor	r8,r11,r12
80008858:	a1 7c       	lsl	r12,0x1
8000885a:	a1 7b       	lsl	r11,0x1
8000885c:	c7 a0       	breq	80008950 <__divsf_return_op1+0x16>
8000885e:	18 7c       	tst	r12,r12
80008860:	f9 b9 00 00 	moveq	r9,0
80008864:	c0 90       	breq	80008876 <__avr32_f32_div+0x22>
80008866:	f8 09 16 18 	lsr	r9,r12,0x18
8000886a:	c7 e0       	breq	80008966 <__divsf_return_op1+0x2c>
8000886c:	e0 49 00 ff 	cp.w	r9,255
80008870:	c6 82       	brcc	80008940 <__divsf_return_op1+0x6>
80008872:	a7 7c       	lsl	r12,0x7
80008874:	bf bc       	sbr	r12,0x1f
80008876:	f6 0a 16 18 	lsr	r10,r11,0x18
8000887a:	c7 e0       	breq	80008976 <__divsf_return_op1+0x3c>
8000887c:	e0 4a 00 ff 	cp.w	r10,255
80008880:	c6 62       	brcc	8000894c <__divsf_return_op1+0x12>
80008882:	a7 7b       	lsl	r11,0x7
80008884:	bf bb       	sbr	r11,0x1f
80008886:	58 09       	cp.w	r9,0
80008888:	f5 bc 00 00 	subfeq	r12,0
8000888c:	5e 0d       	reteq	0
8000888e:	1a d5       	st.w	--sp,r5
80008890:	bb 27       	st.d	--sp,r6
80008892:	14 19       	sub	r9,r10
80008894:	28 19       	sub	r9,-127
80008896:	fc 1a 80 00 	movh	r10,0x8000
8000889a:	a3 8c       	lsr	r12,0x2
8000889c:	f6 05 16 02 	lsr	r5,r11,0x2
800088a0:	f4 0b 16 01 	lsr	r11,r10,0x1
800088a4:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
800088a8:	5c d6       	com	r6
800088aa:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
800088ae:	f6 05 06 46 	mulu.d	r6,r11,r5
800088b2:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800088b6:	f6 07 06 46 	mulu.d	r6,r11,r7
800088ba:	ee 0b 15 02 	lsl	r11,r7,0x2
800088be:	f6 05 06 46 	mulu.d	r6,r11,r5
800088c2:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800088c6:	f6 07 06 46 	mulu.d	r6,r11,r7
800088ca:	ee 0b 15 02 	lsl	r11,r7,0x2
800088ce:	f6 05 06 46 	mulu.d	r6,r11,r5
800088d2:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800088d6:	f6 07 06 46 	mulu.d	r6,r11,r7
800088da:	ee 0b 15 02 	lsl	r11,r7,0x2
800088de:	f6 05 06 46 	mulu.d	r6,r11,r5
800088e2:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800088e6:	f6 07 06 46 	mulu.d	r6,r11,r7
800088ea:	ee 0b 15 02 	lsl	r11,r7,0x2
800088ee:	f6 0c 06 46 	mulu.d	r6,r11,r12
800088f2:	a5 8c       	lsr	r12,0x4
800088f4:	ed b7 00 1c 	bld	r7,0x1c
800088f8:	c0 40       	breq	80008900 <__avr32_f32_div+0xac>
800088fa:	a1 77       	lsl	r7,0x1
800088fc:	20 19       	sub	r9,1
800088fe:	a1 7c       	lsl	r12,0x1
80008900:	58 09       	cp.w	r9,0
80008902:	e0 8a 00 42 	brle	80008986 <__avr32_f32_div_res_subnormal>
80008906:	e0 17 ff e0 	andl	r7,0xffe0
8000890a:	e8 17 00 10 	orl	r7,0x10
8000890e:	ea 07 06 4a 	mulu.d	r10,r5,r7
80008912:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80008916:	58 0a       	cp.w	r10,0

80008918 <__avr32_f32_div_round_subnormal>:
80008918:	f8 0b 13 00 	cpc	r11,r12
8000891c:	5f 3b       	srlo	r11
8000891e:	ea 0b 17 00 	moveq	r11,r5
80008922:	ee 0c 16 05 	lsr	r12,r7,0x5
80008926:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000892a:	bb 07       	ld.d	r6,sp++
8000892c:	1b 05       	ld.w	r5,sp++
8000892e:	ed b8 00 1f 	bld	r8,0x1f
80008932:	ef bc 00 1f 	bst	r12,0x1f
80008936:	16 0c       	add	r12,r11
80008938:	5e fc       	retal	r12

8000893a <__divsf_return_op1>:
8000893a:	a1 78       	lsl	r8,0x1
8000893c:	5d 0c       	ror	r12
8000893e:	5e fc       	retal	r12
80008940:	5e 1e       	retne	-1
80008942:	fc 19 ff 00 	movh	r9,0xff00
80008946:	12 3b       	cp.w	r11,r9
80008948:	cf 93       	brcs	8000893a <__divsf_return_op1>
8000894a:	5e fe       	retal	-1
8000894c:	5e 0d       	reteq	0
8000894e:	5e fe       	retal	-1
80008950:	18 7c       	tst	r12,r12
80008952:	5e 0e       	reteq	-1
80008954:	f8 09 16 18 	lsr	r9,r12,0x18
80008958:	c0 70       	breq	80008966 <__divsf_return_op1+0x2c>
8000895a:	e0 49 00 ff 	cp.w	r9,255
8000895e:	cf 12       	brcc	80008940 <__divsf_return_op1+0x6>
80008960:	fc 1c ff 00 	movh	r12,0xff00
80008964:	ce bb       	rjmp	8000893a <__divsf_return_op1>
80008966:	a7 7c       	lsl	r12,0x7
80008968:	f8 09 12 00 	clz	r9,r12
8000896c:	f8 09 09 4c 	lsl	r12,r12,r9
80008970:	f2 09 11 01 	rsub	r9,r9,1
80008974:	c8 1b       	rjmp	80008876 <__avr32_f32_div+0x22>
80008976:	a7 7b       	lsl	r11,0x7
80008978:	f6 0a 12 00 	clz	r10,r11
8000897c:	f6 0a 09 4b 	lsl	r11,r11,r10
80008980:	f4 0a 11 01 	rsub	r10,r10,1
80008984:	c8 5b       	rjmp	8000888e <__avr32_f32_div+0x3a>

80008986 <__avr32_f32_div_res_subnormal>:
80008986:	5c 39       	neg	r9
80008988:	2f f9       	sub	r9,-1
8000898a:	f1 b9 04 a0 	satu	r9,0x5
8000898e:	f2 0a 11 20 	rsub	r10,r9,32
80008992:	ee 09 0a 47 	lsr	r7,r7,r9
80008996:	f8 0a 09 46 	lsl	r6,r12,r10
8000899a:	f8 09 0a 4c 	lsr	r12,r12,r9
8000899e:	e0 17 ff e0 	andl	r7,0xffe0
800089a2:	e8 17 00 10 	orl	r7,0x10
800089a6:	ea 07 06 4a 	mulu.d	r10,r5,r7
800089aa:	30 09       	mov	r9,0
800089ac:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
800089b0:	0c 3a       	cp.w	r10,r6
800089b2:	cb 3b       	rjmp	80008918 <__avr32_f32_div_round_subnormal>

800089b4 <__avr32_f32_sub_from_add>:
800089b4:	ee 1b 80 00 	eorh	r11,0x8000

800089b8 <__avr32_f32_sub>:
800089b8:	f7 ec 20 08 	eor	r8,r11,r12
800089bc:	c6 46       	brmi	80008a84 <__avr32_f32_add_from_sub>
800089be:	18 98       	mov	r8,r12
800089c0:	e6 1c 80 00 	andh	r12,0x8000,COH
800089c4:	bf db       	cbr	r11,0x1f
800089c6:	bf d8       	cbr	r8,0x1f
800089c8:	f0 0b 0c 4a 	max	r10,r8,r11
800089cc:	f0 0b 0d 49 	min	r9,r8,r11
800089d0:	10 3a       	cp.w	r10,r8
800089d2:	f7 bc 01 01 	subne	r12,1
800089d6:	e6 1c 80 00 	andh	r12,0x8000,COH
800089da:	f4 08 15 08 	lsl	r8,r10,0x8
800089de:	bf b8       	sbr	r8,0x1f
800089e0:	b7 9a       	lsr	r10,0x17
800089e2:	e0 4a 00 ff 	cp.w	r10,255
800089e6:	c3 80       	breq	80008a56 <__avr32_f32_sub_op1_nan_or_inf>
800089e8:	f2 0b 15 08 	lsl	r11,r9,0x8
800089ec:	bf bb       	sbr	r11,0x1f
800089ee:	b7 99       	lsr	r9,0x17
800089f0:	1a dc       	st.w	--sp,r12
800089f2:	c2 90       	breq	80008a44 <__avr32_f32_sub_op2_subnormal>
800089f4:	f4 09 01 0c 	sub	r12,r10,r9
800089f8:	c0 c0       	breq	80008a10 <__avr32_f32_sub_shift_done>
800089fa:	f1 bc 04 a0 	satu	r12,0x5
800089fe:	f8 09 11 20 	rsub	r9,r12,32
80008a02:	f6 09 09 49 	lsl	r9,r11,r9
80008a06:	f7 b8 01 01 	subne	r8,1
80008a0a:	5f 19       	srne	r9
80008a0c:	f6 0c 0a 4b 	lsr	r11,r11,r12

80008a10 <__avr32_f32_sub_shift_done>:
80008a10:	16 18       	sub	r8,r11
80008a12:	1b 0c       	ld.w	r12,sp++
80008a14:	f0 0b 12 00 	clz	r11,r8
80008a18:	5e 3d       	retlo	0
80008a1a:	f0 0b 09 48 	lsl	r8,r8,r11
80008a1e:	16 1a       	sub	r10,r11
80008a20:	e0 8a 00 26 	brle	80008a6c <__avr32_f32_sub_subnormal_result>
80008a24:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80008a28:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80008a2c:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

80008a30 <__avr32_f32_sub_round>:
80008a30:	fc 1a 80 00 	movh	r10,0x8000
80008a34:	ed bc 00 00 	bld	r12,0x0
80008a38:	f7 ba 01 ff 	subne	r10,-1
80008a3c:	14 39       	cp.w	r9,r10
80008a3e:	f7 bc 02 ff 	subhs	r12,-1
80008a42:	5e fc       	retal	r12

80008a44 <__avr32_f32_sub_op2_subnormal>:
80008a44:	bf db       	cbr	r11,0x1f
80008a46:	f9 b9 01 01 	movne	r9,1
80008a4a:	58 0a       	cp.w	r10,0
80008a4c:	cd 41       	brne	800089f4 <__avr32_f32_sub+0x3c>
80008a4e:	bf d8       	cbr	r8,0x1f
80008a50:	f9 ba 01 01 	movne	r10,1
80008a54:	cd 0b       	rjmp	800089f4 <__avr32_f32_sub+0x3c>

80008a56 <__avr32_f32_sub_op1_nan_or_inf>:
80008a56:	f0 0b 15 01 	lsl	r11,r8,0x1
80008a5a:	5e 1e       	retne	-1
80008a5c:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80008a60:	f2 0b 16 17 	lsr	r11,r9,0x17
80008a64:	e0 4b 00 ff 	cp.w	r11,255
80008a68:	5e 1c       	retne	r12
80008a6a:	5e fe       	retal	-1

80008a6c <__avr32_f32_sub_subnormal_result>:
80008a6c:	f4 0a 11 09 	rsub	r10,r10,9
80008a70:	f4 0b 11 20 	rsub	r11,r10,32
80008a74:	5e 3d       	retlo	0
80008a76:	f0 0a 0a 4a 	lsr	r10,r8,r10
80008a7a:	14 4c       	or	r12,r10
80008a7c:	f0 0b 09 48 	lsl	r8,r8,r11
80008a80:	10 49       	or	r9,r8
80008a82:	cd 7b       	rjmp	80008a30 <__avr32_f32_sub_round>

80008a84 <__avr32_f32_add_from_sub>:
80008a84:	ee 1b 80 00 	eorh	r11,0x8000

80008a88 <__avr32_f32_add>:
80008a88:	f7 ec 20 08 	eor	r8,r11,r12
80008a8c:	c9 46       	brmi	800089b4 <__avr32_f32_sub_from_add>
80008a8e:	18 98       	mov	r8,r12
80008a90:	e6 1c 80 00 	andh	r12,0x8000,COH
80008a94:	bf db       	cbr	r11,0x1f
80008a96:	bf d8       	cbr	r8,0x1f
80008a98:	f0 0b 0c 4a 	max	r10,r8,r11
80008a9c:	f0 0b 0d 49 	min	r9,r8,r11
80008aa0:	f4 08 15 08 	lsl	r8,r10,0x8
80008aa4:	bf b8       	sbr	r8,0x1f
80008aa6:	b7 9a       	lsr	r10,0x17
80008aa8:	e0 4a 00 ff 	cp.w	r10,255
80008aac:	c2 d0       	breq	80008b06 <__avr32_f32_add_op1_nan_or_inf>
80008aae:	f2 0b 15 08 	lsl	r11,r9,0x8
80008ab2:	bf bb       	sbr	r11,0x1f
80008ab4:	b7 99       	lsr	r9,0x17
80008ab6:	c1 e0       	breq	80008af2 <__avr32_f32_add_op2_subnormal>
80008ab8:	1a dc       	st.w	--sp,r12
80008aba:	14 29       	rsub	r9,r10
80008abc:	f1 b9 04 a0 	satu	r9,0x5
80008ac0:	f6 09 0a 4c 	lsr	r12,r11,r9
80008ac4:	f2 09 11 18 	rsub	r9,r9,24
80008ac8:	f6 09 09 4b 	lsl	r11,r11,r9
80008acc:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
80008ad0:	18 08       	add	r8,r12
80008ad2:	1b 0c       	ld.w	r12,sp++
80008ad4:	c2 63       	brcs	80008b20 <__avr32_f32_add_res_of>
80008ad6:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80008ada:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80008ade:	fc 1a 80 00 	movh	r10,0x8000
80008ae2:	ed bc 00 00 	bld	r12,0x0
80008ae6:	f7 ba 01 ff 	subne	r10,-1
80008aea:	14 3b       	cp.w	r11,r10
80008aec:	f7 bc 02 ff 	subhs	r12,-1
80008af0:	5e fc       	retal	r12

80008af2 <__avr32_f32_add_op2_subnormal>:
80008af2:	bf db       	cbr	r11,0x1f
80008af4:	f9 b9 01 01 	movne	r9,1
80008af8:	58 0a       	cp.w	r10,0
80008afa:	cd f1       	brne	80008ab8 <__avr32_f32_add+0x30>
80008afc:	bf d8       	cbr	r8,0x1f
80008afe:	10 0b       	add	r11,r8
80008b00:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80008b04:	5e fc       	retal	r12

80008b06 <__avr32_f32_add_op1_nan_or_inf>:
80008b06:	f0 0b 15 01 	lsl	r11,r8,0x1
80008b0a:	5e 1e       	retne	-1
80008b0c:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80008b10:	f2 0b 16 17 	lsr	r11,r9,0x17
80008b14:	e0 4b 00 ff 	cp.w	r11,255
80008b18:	5e 1c       	retne	r12
80008b1a:	a9 79       	lsl	r9,0x9
80008b1c:	5e 0c       	reteq	r12
80008b1e:	5e fe       	retal	-1

80008b20 <__avr32_f32_add_res_of>:
80008b20:	a1 98       	lsr	r8,0x1
80008b22:	2f fa       	sub	r10,-1
80008b24:	e0 4a 00 ff 	cp.w	r10,255
80008b28:	f9 b8 00 00 	moveq	r8,0
80008b2c:	f9 bb 00 00 	moveq	r11,0
80008b30:	cd 3b       	rjmp	80008ad6 <__avr32_f32_add+0x4e>
80008b32:	d7 03       	nop

80008b34 <__avr32_f32_to_f64>:
80008b34:	f8 0b 15 01 	lsl	r11,r12,0x1
80008b38:	f9 ba 00 00 	moveq	r10,0
80008b3c:	5e 0b       	reteq	r11
80008b3e:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80008b42:	e0 49 00 ff 	cp.w	r9,255
80008b46:	c1 e0       	breq	80008b82 <__extendsfdf_return_op1+0x6>
80008b48:	a7 7b       	lsl	r11,0x7
80008b4a:	30 0a       	mov	r10,0
80008b4c:	58 09       	cp.w	r9,0
80008b4e:	f7 b9 00 ff 	subeq	r9,-1
80008b52:	5f 18       	srne	r8
80008b54:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80008b58:	fe 39 fc 80 	sub	r9,-896
80008b5c:	f6 08 12 00 	clz	r8,r11
80008b60:	10 19       	sub	r9,r8
80008b62:	f6 08 09 4b 	lsl	r11,r11,r8
80008b66:	ed bb 00 1f 	bld	r11,0x1f
80008b6a:	f7 b9 01 01 	subne	r9,1
80008b6e:	ab 9a       	lsr	r10,0xb
80008b70:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008b74:	a1 7b       	lsl	r11,0x1
80008b76:	ab 9b       	lsr	r11,0xb
80008b78:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80008b7c <__extendsfdf_return_op1>:
80008b7c:	a1 7c       	lsl	r12,0x1
80008b7e:	5d 0b       	ror	r11
80008b80:	5e fb       	retal	r11
80008b82:	fc 1a ff e0 	movh	r10,0xffe0
80008b86:	a9 6b       	lsl	r11,0x8
80008b88:	f9 bb 01 ff 	movne	r11,-1
80008b8c:	f4 0b 17 00 	moveq	r11,r10
80008b90:	30 0a       	mov	r10,0
80008b92:	cf 5b       	rjmp	80008b7c <__extendsfdf_return_op1>

80008b94 <__avr32_f64_to_f32>:
80008b94:	f6 09 15 01 	lsl	r9,r11,0x1
80008b98:	b5 99       	lsr	r9,0x15
80008b9a:	5e 0d       	reteq	0
80008b9c:	f6 08 15 0a 	lsl	r8,r11,0xa
80008ba0:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80008ba4:	ab 6a       	lsl	r10,0xa
80008ba6:	5c 3a       	neg	r10
80008ba8:	5c fc       	rol	r12
80008baa:	e0 49 07 ff 	cp.w	r9,2047
80008bae:	c1 a0       	breq	80008be2 <__truncdfsf_return_op1+0x6>
80008bb0:	e0 29 03 80 	sub	r9,896
80008bb4:	bf bc       	sbr	r12,0x1f
80008bb6:	58 09       	cp.w	r9,0
80008bb8:	e0 8a 00 1a 	brle	80008bec <__truncdfsf_return_op1+0x10>
80008bbc:	37 fa       	mov	r10,127
80008bbe:	ed bc 00 08 	bld	r12,0x8
80008bc2:	f7 ba 00 ff 	subeq	r10,-1
80008bc6:	14 0c       	add	r12,r10
80008bc8:	f7 b9 03 fe 	sublo	r9,-2
80008bcc:	ed bc 00 1f 	bld	r12,0x1f
80008bd0:	f7 b9 01 01 	subne	r9,1
80008bd4:	f8 0c 16 07 	lsr	r12,r12,0x7
80008bd8:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80008bdc <__truncdfsf_return_op1>:
80008bdc:	a1 7b       	lsl	r11,0x1
80008bde:	5d 0c       	ror	r12
80008be0:	5e fc       	retal	r12
80008be2:	bf dc       	cbr	r12,0x1f
80008be4:	5e 1e       	retne	-1
80008be6:	fc 1c 7f 80 	movh	r12,0x7f80
80008bea:	5e fc       	retal	r12
80008bec:	f2 09 11 01 	rsub	r9,r9,1
80008bf0:	59 99       	cp.w	r9,25
80008bf2:	f9 bc 02 00 	movhs	r12,0
80008bf6:	c1 32       	brcc	80008c1c <__truncdfsf_return_op1+0x40>
80008bf8:	f2 0a 11 20 	rsub	r10,r9,32
80008bfc:	f8 0a 09 4a 	lsl	r10,r12,r10
80008c00:	5f 1a       	srne	r10
80008c02:	f8 09 0a 4c 	lsr	r12,r12,r9
80008c06:	14 4c       	or	r12,r10
80008c08:	37 fa       	mov	r10,127
80008c0a:	ed bc 00 08 	bld	r12,0x8
80008c0e:	f7 ba 00 ff 	subeq	r10,-1
80008c12:	14 0c       	add	r12,r10
80008c14:	f8 0c 16 07 	lsr	r12,r12,0x7
80008c18:	a1 7b       	lsl	r11,0x1
80008c1a:	5d 0c       	ror	r12
80008c1c:	5e fc       	retal	r12

80008c1e <__avr32_udiv64>:
80008c1e:	d4 31       	pushm	r0-r7,lr
80008c20:	1a 97       	mov	r7,sp
80008c22:	20 2d       	sub	sp,8
80008c24:	10 9e       	mov	lr,r8
80008c26:	12 95       	mov	r5,r9
80008c28:	14 96       	mov	r6,r10
80008c2a:	58 09       	cp.w	r9,0
80008c2c:	c4 91       	brne	80008cbe <__avr32_udiv64+0xa0>
80008c2e:	16 38       	cp.w	r8,r11
80008c30:	e0 88 00 57 	brls	80008cde <__avr32_udiv64+0xc0>
80008c34:	f0 08 12 00 	clz	r8,r8
80008c38:	c0 d0       	breq	80008c52 <__avr32_udiv64+0x34>
80008c3a:	f6 08 09 4b 	lsl	r11,r11,r8
80008c3e:	f0 09 11 20 	rsub	r9,r8,32
80008c42:	fc 08 09 4e 	lsl	lr,lr,r8
80008c46:	f4 09 0a 49 	lsr	r9,r10,r9
80008c4a:	f4 08 09 46 	lsl	r6,r10,r8
80008c4e:	f3 eb 10 0b 	or	r11,r9,r11
80008c52:	fc 05 16 10 	lsr	r5,lr,0x10
80008c56:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80008c5a:	f6 05 0d 0a 	divu	r10,r11,r5
80008c5e:	ec 08 16 10 	lsr	r8,r6,0x10
80008c62:	14 99       	mov	r9,r10
80008c64:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80008c68:	b9 3a       	mul	r10,r12
80008c6a:	10 3a       	cp.w	r10,r8
80008c6c:	e0 88 00 0c 	brls	80008c84 <__avr32_udiv64+0x66>
80008c70:	20 19       	sub	r9,1
80008c72:	1c 08       	add	r8,lr
80008c74:	10 3e       	cp.w	lr,r8
80008c76:	e0 8b 00 07 	brhi	80008c84 <__avr32_udiv64+0x66>
80008c7a:	10 3a       	cp.w	r10,r8
80008c7c:	f7 b9 0b 01 	subhi	r9,1
80008c80:	f1 de eb 08 	addhi	r8,r8,lr
80008c84:	f0 0a 01 0b 	sub	r11,r8,r10
80008c88:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80008c8c:	f6 05 0d 0a 	divu	r10,r11,r5
80008c90:	ed eb 11 06 	or	r6,r6,r11<<0x10
80008c94:	14 98       	mov	r8,r10
80008c96:	f4 0c 02 4c 	mul	r12,r10,r12
80008c9a:	0c 3c       	cp.w	r12,r6
80008c9c:	e0 88 00 0a 	brls	80008cb0 <__avr32_udiv64+0x92>
80008ca0:	20 18       	sub	r8,1
80008ca2:	1c 06       	add	r6,lr
80008ca4:	0c 3e       	cp.w	lr,r6
80008ca6:	e0 8b 00 05 	brhi	80008cb0 <__avr32_udiv64+0x92>
80008caa:	0c 3c       	cp.w	r12,r6
80008cac:	f7 b8 0b 01 	subhi	r8,1
80008cb0:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
80008cb4:	30 0c       	mov	r12,0
80008cb6:	16 9a       	mov	r10,r11
80008cb8:	18 9b       	mov	r11,r12
80008cba:	2f ed       	sub	sp,-8
80008cbc:	d8 32       	popm	r0-r7,pc
80008cbe:	16 39       	cp.w	r9,r11
80008cc0:	e0 8b 00 51 	brhi	80008d62 <__avr32_udiv64+0x144>
80008cc4:	f2 0c 12 00 	clz	r12,r9
80008cc8:	c5 31       	brne	80008d6e <__avr32_udiv64+0x150>
80008cca:	14 38       	cp.w	r8,r10
80008ccc:	5f 89       	srls	r9
80008cce:	16 35       	cp.w	r5,r11
80008cd0:	5f 38       	srlo	r8
80008cd2:	10 49       	or	r9,r8
80008cd4:	f8 09 18 00 	cp.b	r9,r12
80008cd8:	c4 50       	breq	80008d62 <__avr32_udiv64+0x144>
80008cda:	30 1b       	mov	r11,1
80008cdc:	c4 58       	rjmp	80008d66 <__avr32_udiv64+0x148>
80008cde:	58 08       	cp.w	r8,0
80008ce0:	c0 51       	brne	80008cea <__avr32_udiv64+0xcc>
80008ce2:	30 19       	mov	r9,1
80008ce4:	f2 08 0d 08 	divu	r8,r9,r8
80008ce8:	10 9e       	mov	lr,r8
80008cea:	fc 08 12 00 	clz	r8,lr
80008cee:	e0 81 00 91 	brne	80008e10 <__avr32_udiv64+0x1f2>
80008cf2:	1c 1b       	sub	r11,lr
80008cf4:	fc 05 16 10 	lsr	r5,lr,0x10
80008cf8:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80008cfc:	30 1c       	mov	r12,1
80008cfe:	f6 05 0d 0a 	divu	r10,r11,r5
80008d02:	ec 08 16 10 	lsr	r8,r6,0x10
80008d06:	f4 09 02 43 	mul	r3,r10,r9
80008d0a:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80008d0e:	14 9b       	mov	r11,r10
80008d10:	10 33       	cp.w	r3,r8
80008d12:	e0 88 00 0c 	brls	80008d2a <__avr32_udiv64+0x10c>
80008d16:	20 1b       	sub	r11,1
80008d18:	1c 08       	add	r8,lr
80008d1a:	10 3e       	cp.w	lr,r8
80008d1c:	e0 8b 00 07 	brhi	80008d2a <__avr32_udiv64+0x10c>
80008d20:	10 33       	cp.w	r3,r8
80008d22:	f7 bb 0b 01 	subhi	r11,1
80008d26:	f1 de eb 08 	addhi	r8,r8,lr
80008d2a:	f0 03 01 03 	sub	r3,r8,r3
80008d2e:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80008d32:	e6 05 0d 02 	divu	r2,r3,r5
80008d36:	ed e3 11 06 	or	r6,r6,r3<<0x10
80008d3a:	04 98       	mov	r8,r2
80008d3c:	e4 09 02 49 	mul	r9,r2,r9
80008d40:	0c 39       	cp.w	r9,r6
80008d42:	e0 88 00 0a 	brls	80008d56 <__avr32_udiv64+0x138>
80008d46:	20 18       	sub	r8,1
80008d48:	1c 06       	add	r6,lr
80008d4a:	0c 3e       	cp.w	lr,r6
80008d4c:	e0 8b 00 05 	brhi	80008d56 <__avr32_udiv64+0x138>
80008d50:	0c 39       	cp.w	r9,r6
80008d52:	f7 b8 0b 01 	subhi	r8,1
80008d56:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80008d5a:	16 9a       	mov	r10,r11
80008d5c:	18 9b       	mov	r11,r12
80008d5e:	2f ed       	sub	sp,-8
80008d60:	d8 32       	popm	r0-r7,pc
80008d62:	30 0b       	mov	r11,0
80008d64:	16 9c       	mov	r12,r11
80008d66:	16 9a       	mov	r10,r11
80008d68:	18 9b       	mov	r11,r12
80008d6a:	2f ed       	sub	sp,-8
80008d6c:	d8 32       	popm	r0-r7,pc
80008d6e:	f2 0c 09 45 	lsl	r5,r9,r12
80008d72:	f8 0e 11 20 	rsub	lr,r12,32
80008d76:	f0 0c 09 43 	lsl	r3,r8,r12
80008d7a:	f4 0e 0a 46 	lsr	r6,r10,lr
80008d7e:	f0 0e 0a 48 	lsr	r8,r8,lr
80008d82:	f6 0e 0a 4e 	lsr	lr,r11,lr
80008d86:	0a 48       	or	r8,r5
80008d88:	f0 01 16 10 	lsr	r1,r8,0x10
80008d8c:	fc 01 0d 04 	divu	r4,lr,r1
80008d90:	ee e5 ff f8 	st.d	r7[-8],r4
80008d94:	f6 0c 09 49 	lsl	r9,r11,r12
80008d98:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80008d9c:	ed e9 10 09 	or	r9,r6,r9
80008da0:	08 96       	mov	r6,r4
80008da2:	f2 0e 16 10 	lsr	lr,r9,0x10
80008da6:	ee f4 ff f8 	ld.w	r4,r7[-8]
80008daa:	ec 05 02 4b 	mul	r11,r6,r5
80008dae:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80008db2:	1c 3b       	cp.w	r11,lr
80008db4:	e0 88 00 07 	brls	80008dc2 <__avr32_udiv64+0x1a4>
80008db8:	20 16       	sub	r6,1
80008dba:	10 0e       	add	lr,r8
80008dbc:	1c 38       	cp.w	r8,lr
80008dbe:	e0 88 00 6d 	brls	80008e98 <__avr32_udiv64+0x27a>
80008dc2:	16 1e       	sub	lr,r11
80008dc4:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008dc8:	fc 01 0d 00 	divu	r0,lr,r1
80008dcc:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80008dd0:	00 9b       	mov	r11,r0
80008dd2:	e0 05 02 4e 	mul	lr,r0,r5
80008dd6:	12 3e       	cp.w	lr,r9
80008dd8:	e0 88 00 07 	brls	80008de6 <__avr32_udiv64+0x1c8>
80008ddc:	20 1b       	sub	r11,1
80008dde:	10 09       	add	r9,r8
80008de0:	12 38       	cp.w	r8,r9
80008de2:	e0 88 00 55 	brls	80008e8c <__avr32_udiv64+0x26e>
80008de6:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80008dea:	1c 19       	sub	r9,lr
80008dec:	f6 03 06 42 	mulu.d	r2,r11,r3
80008df0:	06 39       	cp.w	r9,r3
80008df2:	c0 93       	brcs	80008e04 <__avr32_udiv64+0x1e6>
80008df4:	5f 09       	sreq	r9
80008df6:	f4 0c 09 4c 	lsl	r12,r10,r12
80008dfa:	04 3c       	cp.w	r12,r2
80008dfc:	5f 38       	srlo	r8
80008dfe:	f3 e8 00 08 	and	r8,r9,r8
80008e02:	c0 20       	breq	80008e06 <__avr32_udiv64+0x1e8>
80008e04:	20 1b       	sub	r11,1
80008e06:	30 0c       	mov	r12,0
80008e08:	16 9a       	mov	r10,r11
80008e0a:	18 9b       	mov	r11,r12
80008e0c:	2f ed       	sub	sp,-8
80008e0e:	d8 32       	popm	r0-r7,pc
80008e10:	f6 08 09 49 	lsl	r9,r11,r8
80008e14:	fc 08 09 4e 	lsl	lr,lr,r8
80008e18:	f0 01 11 20 	rsub	r1,r8,32
80008e1c:	fc 05 16 10 	lsr	r5,lr,0x10
80008e20:	f4 01 0a 42 	lsr	r2,r10,r1
80008e24:	f6 01 0a 41 	lsr	r1,r11,r1
80008e28:	12 42       	or	r2,r9
80008e2a:	e2 05 0d 00 	divu	r0,r1,r5
80008e2e:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80008e32:	e4 06 16 10 	lsr	r6,r2,0x10
80008e36:	00 93       	mov	r3,r0
80008e38:	ed e1 11 06 	or	r6,r6,r1<<0x10
80008e3c:	e0 09 02 4c 	mul	r12,r0,r9
80008e40:	0c 3c       	cp.w	r12,r6
80008e42:	e0 88 00 07 	brls	80008e50 <__avr32_udiv64+0x232>
80008e46:	20 13       	sub	r3,1
80008e48:	1c 06       	add	r6,lr
80008e4a:	0c 3e       	cp.w	lr,r6
80008e4c:	e0 88 00 2c 	brls	80008ea4 <__avr32_udiv64+0x286>
80008e50:	ec 0c 01 01 	sub	r1,r6,r12
80008e54:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008e58:	e2 05 0d 00 	divu	r0,r1,r5
80008e5c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008e60:	00 9c       	mov	r12,r0
80008e62:	e0 09 02 41 	mul	r1,r0,r9
80008e66:	16 31       	cp.w	r1,r11
80008e68:	e0 88 00 0c 	brls	80008e80 <__avr32_udiv64+0x262>
80008e6c:	20 1c       	sub	r12,1
80008e6e:	1c 0b       	add	r11,lr
80008e70:	16 3e       	cp.w	lr,r11
80008e72:	e0 8b 00 07 	brhi	80008e80 <__avr32_udiv64+0x262>
80008e76:	16 31       	cp.w	r1,r11
80008e78:	f7 bc 0b 01 	subhi	r12,1
80008e7c:	f7 de eb 0b 	addhi	r11,r11,lr
80008e80:	f4 08 09 46 	lsl	r6,r10,r8
80008e84:	02 1b       	sub	r11,r1
80008e86:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80008e8a:	c3 ab       	rjmp	80008cfe <__avr32_udiv64+0xe0>
80008e8c:	12 3e       	cp.w	lr,r9
80008e8e:	f3 d8 eb 09 	addhi	r9,r9,r8
80008e92:	f7 bb 0b 01 	subhi	r11,1
80008e96:	ca 8b       	rjmp	80008de6 <__avr32_udiv64+0x1c8>
80008e98:	1c 3b       	cp.w	r11,lr
80008e9a:	f7 b6 0b 01 	subhi	r6,1
80008e9e:	fd d8 eb 0e 	addhi	lr,lr,r8
80008ea2:	c9 0b       	rjmp	80008dc2 <__avr32_udiv64+0x1a4>
80008ea4:	0c 3c       	cp.w	r12,r6
80008ea6:	f7 b3 0b 01 	subhi	r3,1
80008eaa:	ed de eb 06 	addhi	r6,r6,lr
80008eae:	cd 1b       	rjmp	80008e50 <__avr32_udiv64+0x232>

80008eb0 <memcpy>:
80008eb0:	58 8a       	cp.w	r10,8
80008eb2:	c2 f5       	brlt	80008f10 <memcpy+0x60>
80008eb4:	f9 eb 10 09 	or	r9,r12,r11
80008eb8:	e2 19 00 03 	andl	r9,0x3,COH
80008ebc:	e0 81 00 97 	brne	80008fea <memcpy+0x13a>
80008ec0:	e0 4a 00 20 	cp.w	r10,32
80008ec4:	c3 b4       	brge	80008f3a <memcpy+0x8a>
80008ec6:	f4 08 14 02 	asr	r8,r10,0x2
80008eca:	f0 09 11 08 	rsub	r9,r8,8
80008ece:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80008ed2:	76 69       	ld.w	r9,r11[0x18]
80008ed4:	99 69       	st.w	r12[0x18],r9
80008ed6:	76 59       	ld.w	r9,r11[0x14]
80008ed8:	99 59       	st.w	r12[0x14],r9
80008eda:	76 49       	ld.w	r9,r11[0x10]
80008edc:	99 49       	st.w	r12[0x10],r9
80008ede:	76 39       	ld.w	r9,r11[0xc]
80008ee0:	99 39       	st.w	r12[0xc],r9
80008ee2:	76 29       	ld.w	r9,r11[0x8]
80008ee4:	99 29       	st.w	r12[0x8],r9
80008ee6:	76 19       	ld.w	r9,r11[0x4]
80008ee8:	99 19       	st.w	r12[0x4],r9
80008eea:	76 09       	ld.w	r9,r11[0x0]
80008eec:	99 09       	st.w	r12[0x0],r9
80008eee:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80008ef2:	f8 08 00 28 	add	r8,r12,r8<<0x2
80008ef6:	e0 1a 00 03 	andl	r10,0x3
80008efa:	f4 0a 11 04 	rsub	r10,r10,4
80008efe:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008f02:	17 a9       	ld.ub	r9,r11[0x2]
80008f04:	b0 a9       	st.b	r8[0x2],r9
80008f06:	17 99       	ld.ub	r9,r11[0x1]
80008f08:	b0 99       	st.b	r8[0x1],r9
80008f0a:	17 89       	ld.ub	r9,r11[0x0]
80008f0c:	b0 89       	st.b	r8[0x0],r9
80008f0e:	5e fc       	retal	r12
80008f10:	f4 0a 11 09 	rsub	r10,r10,9
80008f14:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008f18:	17 f9       	ld.ub	r9,r11[0x7]
80008f1a:	b8 f9       	st.b	r12[0x7],r9
80008f1c:	17 e9       	ld.ub	r9,r11[0x6]
80008f1e:	b8 e9       	st.b	r12[0x6],r9
80008f20:	17 d9       	ld.ub	r9,r11[0x5]
80008f22:	b8 d9       	st.b	r12[0x5],r9
80008f24:	17 c9       	ld.ub	r9,r11[0x4]
80008f26:	b8 c9       	st.b	r12[0x4],r9
80008f28:	17 b9       	ld.ub	r9,r11[0x3]
80008f2a:	b8 b9       	st.b	r12[0x3],r9
80008f2c:	17 a9       	ld.ub	r9,r11[0x2]
80008f2e:	b8 a9       	st.b	r12[0x2],r9
80008f30:	17 99       	ld.ub	r9,r11[0x1]
80008f32:	b8 99       	st.b	r12[0x1],r9
80008f34:	17 89       	ld.ub	r9,r11[0x0]
80008f36:	b8 89       	st.b	r12[0x0],r9
80008f38:	5e fc       	retal	r12
80008f3a:	eb cd 40 c0 	pushm	r6-r7,lr
80008f3e:	18 99       	mov	r9,r12
80008f40:	22 0a       	sub	r10,32
80008f42:	b7 07       	ld.d	r6,r11++
80008f44:	b3 26       	st.d	r9++,r6
80008f46:	b7 07       	ld.d	r6,r11++
80008f48:	b3 26       	st.d	r9++,r6
80008f4a:	b7 07       	ld.d	r6,r11++
80008f4c:	b3 26       	st.d	r9++,r6
80008f4e:	b7 07       	ld.d	r6,r11++
80008f50:	b3 26       	st.d	r9++,r6
80008f52:	22 0a       	sub	r10,32
80008f54:	cf 74       	brge	80008f42 <memcpy+0x92>
80008f56:	2f 0a       	sub	r10,-16
80008f58:	c0 65       	brlt	80008f64 <memcpy+0xb4>
80008f5a:	b7 07       	ld.d	r6,r11++
80008f5c:	b3 26       	st.d	r9++,r6
80008f5e:	b7 07       	ld.d	r6,r11++
80008f60:	b3 26       	st.d	r9++,r6
80008f62:	21 0a       	sub	r10,16
80008f64:	5c 3a       	neg	r10
80008f66:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80008f6a:	d7 03       	nop
80008f6c:	d7 03       	nop
80008f6e:	f7 36 00 0e 	ld.ub	r6,r11[14]
80008f72:	f3 66 00 0e 	st.b	r9[14],r6
80008f76:	f7 36 00 0d 	ld.ub	r6,r11[13]
80008f7a:	f3 66 00 0d 	st.b	r9[13],r6
80008f7e:	f7 36 00 0c 	ld.ub	r6,r11[12]
80008f82:	f3 66 00 0c 	st.b	r9[12],r6
80008f86:	f7 36 00 0b 	ld.ub	r6,r11[11]
80008f8a:	f3 66 00 0b 	st.b	r9[11],r6
80008f8e:	f7 36 00 0a 	ld.ub	r6,r11[10]
80008f92:	f3 66 00 0a 	st.b	r9[10],r6
80008f96:	f7 36 00 09 	ld.ub	r6,r11[9]
80008f9a:	f3 66 00 09 	st.b	r9[9],r6
80008f9e:	f7 36 00 08 	ld.ub	r6,r11[8]
80008fa2:	f3 66 00 08 	st.b	r9[8],r6
80008fa6:	f7 36 00 07 	ld.ub	r6,r11[7]
80008faa:	f3 66 00 07 	st.b	r9[7],r6
80008fae:	f7 36 00 06 	ld.ub	r6,r11[6]
80008fb2:	f3 66 00 06 	st.b	r9[6],r6
80008fb6:	f7 36 00 05 	ld.ub	r6,r11[5]
80008fba:	f3 66 00 05 	st.b	r9[5],r6
80008fbe:	f7 36 00 04 	ld.ub	r6,r11[4]
80008fc2:	f3 66 00 04 	st.b	r9[4],r6
80008fc6:	f7 36 00 03 	ld.ub	r6,r11[3]
80008fca:	f3 66 00 03 	st.b	r9[3],r6
80008fce:	f7 36 00 02 	ld.ub	r6,r11[2]
80008fd2:	f3 66 00 02 	st.b	r9[2],r6
80008fd6:	f7 36 00 01 	ld.ub	r6,r11[1]
80008fda:	f3 66 00 01 	st.b	r9[1],r6
80008fde:	f7 36 00 00 	ld.ub	r6,r11[0]
80008fe2:	f3 66 00 00 	st.b	r9[0],r6
80008fe6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008fea:	20 1a       	sub	r10,1
80008fec:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80008ff0:	f8 0a 0b 09 	st.b	r12[r10],r9
80008ff4:	cf b1       	brne	80008fea <memcpy+0x13a>
80008ff6:	5e fc       	retal	r12

80008ff8 <sprintf>:
80008ff8:	d4 01       	pushm	lr
80008ffa:	21 7d       	sub	sp,92
80008ffc:	e0 68 ff ff 	mov	r8,65535
80009000:	ea 18 7f ff 	orh	r8,0x7fff
80009004:	50 58       	stdsp	sp[0x14],r8
80009006:	50 28       	stdsp	sp[0x8],r8
80009008:	e0 68 02 08 	mov	r8,520
8000900c:	ba 68       	st.h	sp[0xc],r8
8000900e:	3f f8       	mov	r8,-1
80009010:	ba 78       	st.h	sp[0xe],r8
80009012:	48 88       	lddpc	r8,80009030 <sprintf+0x38>
80009014:	50 4c       	stdsp	sp[0x10],r12
80009016:	16 9a       	mov	r10,r11
80009018:	50 0c       	stdsp	sp[0x0],r12
8000901a:	fa c9 ff a0 	sub	r9,sp,-96
8000901e:	70 0c       	ld.w	r12,r8[0x0]
80009020:	1a 9b       	mov	r11,sp
80009022:	cf 9d       	rcall	80009414 <_vfprintf_r>
80009024:	30 09       	mov	r9,0
80009026:	40 08       	lddsp	r8,sp[0x0]
80009028:	b0 89       	st.b	r8[0x0],r9
8000902a:	2e 9d       	sub	sp,-92
8000902c:	d8 02       	popm	pc
8000902e:	d7 03       	nop
80009030:	00 00       	add	r0,r0
80009032:	02 f8       	st.b	--r1,r8

80009034 <strcmp>:
80009034:	f9 eb 10 0a 	or	r10,r12,r11
80009038:	e2 1a 00 03 	andl	r10,0x3,COH
8000903c:	c3 41       	brne	800090a4 <strcmp+0x70>
8000903e:	78 0a       	ld.w	r10,r12[0x0]
80009040:	76 09       	ld.w	r9,r11[0x0]
80009042:	5c ea       	tnbz	r10
80009044:	c1 70       	breq	80009072 <strcmp+0x3e>
80009046:	12 3a       	cp.w	r10,r9
80009048:	c1 51       	brne	80009072 <strcmp+0x3e>
8000904a:	78 1a       	ld.w	r10,r12[0x4]
8000904c:	76 19       	ld.w	r9,r11[0x4]
8000904e:	5c ea       	tnbz	r10
80009050:	c1 10       	breq	80009072 <strcmp+0x3e>
80009052:	12 3a       	cp.w	r10,r9
80009054:	c0 f1       	brne	80009072 <strcmp+0x3e>
80009056:	78 2a       	ld.w	r10,r12[0x8]
80009058:	76 29       	ld.w	r9,r11[0x8]
8000905a:	5c ea       	tnbz	r10
8000905c:	c0 b0       	breq	80009072 <strcmp+0x3e>
8000905e:	12 3a       	cp.w	r10,r9
80009060:	c0 91       	brne	80009072 <strcmp+0x3e>
80009062:	78 3a       	ld.w	r10,r12[0xc]
80009064:	76 39       	ld.w	r9,r11[0xc]
80009066:	5c ea       	tnbz	r10
80009068:	c0 50       	breq	80009072 <strcmp+0x3e>
8000906a:	2f 0c       	sub	r12,-16
8000906c:	2f 0b       	sub	r11,-16
8000906e:	12 3a       	cp.w	r10,r9
80009070:	ce 70       	breq	8000903e <strcmp+0xa>
80009072:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
80009076:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
8000907a:	5e 0c       	reteq	r12
8000907c:	16 1c       	sub	r12,r11
8000907e:	5e 1c       	retne	r12
80009080:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
80009084:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
80009088:	5e 0c       	reteq	r12
8000908a:	16 1c       	sub	r12,r11
8000908c:	5e 1c       	retne	r12
8000908e:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
80009092:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
80009096:	5e 0c       	reteq	r12
80009098:	16 1c       	sub	r12,r11
8000909a:	5e 1c       	retne	r12
8000909c:	5c 5a       	castu.b	r10
8000909e:	5c 59       	castu.b	r9
800090a0:	12 1a       	sub	r10,r9
800090a2:	5e fa       	retal	r10
800090a4:	17 8a       	ld.ub	r10,r11[0x0]
800090a6:	19 89       	ld.ub	r9,r12[0x0]
800090a8:	58 0a       	cp.w	r10,0
800090aa:	5e 09       	reteq	r9
800090ac:	14 19       	sub	r9,r10
800090ae:	5e 19       	retne	r9
800090b0:	17 9a       	ld.ub	r10,r11[0x1]
800090b2:	19 99       	ld.ub	r9,r12[0x1]
800090b4:	58 0a       	cp.w	r10,0
800090b6:	5e 09       	reteq	r9
800090b8:	14 19       	sub	r9,r10
800090ba:	5e 19       	retne	r9
800090bc:	17 aa       	ld.ub	r10,r11[0x2]
800090be:	19 a9       	ld.ub	r9,r12[0x2]
800090c0:	58 0a       	cp.w	r10,0
800090c2:	5e 09       	reteq	r9
800090c4:	14 19       	sub	r9,r10
800090c6:	5e 19       	retne	r9
800090c8:	17 ba       	ld.ub	r10,r11[0x3]
800090ca:	19 b9       	ld.ub	r9,r12[0x3]
800090cc:	58 0a       	cp.w	r10,0
800090ce:	5e 09       	reteq	r9
800090d0:	14 19       	sub	r9,r10
800090d2:	5e 19       	retne	r9
800090d4:	2f cb       	sub	r11,-4
800090d6:	2f cc       	sub	r12,-4
800090d8:	ce 6b       	rjmp	800090a4 <strcmp+0x70>
800090da:	d7 03       	nop

800090dc <get_arg>:
800090dc:	d4 31       	pushm	r0-r7,lr
800090de:	20 8d       	sub	sp,32
800090e0:	fa c4 ff bc 	sub	r4,sp,-68
800090e4:	50 4b       	stdsp	sp[0x10],r11
800090e6:	68 2e       	ld.w	lr,r4[0x8]
800090e8:	50 58       	stdsp	sp[0x14],r8
800090ea:	12 96       	mov	r6,r9
800090ec:	7c 0b       	ld.w	r11,lr[0x0]
800090ee:	70 05       	ld.w	r5,r8[0x0]
800090f0:	50 6e       	stdsp	sp[0x18],lr
800090f2:	58 0b       	cp.w	r11,0
800090f4:	f4 0b 17 00 	moveq	r11,r10
800090f8:	68 03       	ld.w	r3,r4[0x0]
800090fa:	68 11       	ld.w	r1,r4[0x4]
800090fc:	40 49       	lddsp	r9,sp[0x10]
800090fe:	30 08       	mov	r8,0
80009100:	c2 c9       	rjmp	80009358 <get_arg+0x27c>
80009102:	2f fb       	sub	r11,-1
80009104:	32 5c       	mov	r12,37
80009106:	17 8a       	ld.ub	r10,r11[0x0]
80009108:	f8 0a 18 00 	cp.b	r10,r12
8000910c:	5f 1e       	srne	lr
8000910e:	f0 0a 18 00 	cp.b	r10,r8
80009112:	5f 1c       	srne	r12
80009114:	fd ec 00 0c 	and	r12,lr,r12
80009118:	f0 0c 18 00 	cp.b	r12,r8
8000911c:	cf 31       	brne	80009102 <get_arg+0x26>
8000911e:	58 0a       	cp.w	r10,0
80009120:	e0 80 01 29 	breq	80009372 <get_arg+0x296>
80009124:	30 0c       	mov	r12,0
80009126:	3f fa       	mov	r10,-1
80009128:	18 90       	mov	r0,r12
8000912a:	50 3a       	stdsp	sp[0xc],r10
8000912c:	18 94       	mov	r4,r12
8000912e:	18 92       	mov	r2,r12
80009130:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80009134:	16 97       	mov	r7,r11
80009136:	50 7c       	stdsp	sp[0x1c],r12
80009138:	4c dc       	lddpc	r12,8000926c <get_arg+0x190>
8000913a:	0f 3a       	ld.ub	r10,r7++
8000913c:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80009140:	40 7c       	lddsp	r12,sp[0x1c]
80009142:	1c 0c       	add	r12,lr
80009144:	4c be       	lddpc	lr,80009270 <get_arg+0x194>
80009146:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000914a:	20 1e       	sub	lr,1
8000914c:	50 0e       	stdsp	sp[0x0],lr
8000914e:	4c ae       	lddpc	lr,80009274 <get_arg+0x198>
80009150:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80009154:	50 7c       	stdsp	sp[0x1c],r12
80009156:	40 0c       	lddsp	r12,sp[0x0]
80009158:	58 7c       	cp.w	r12,7
8000915a:	e0 8b 00 f8 	brhi	8000934a <get_arg+0x26e>
8000915e:	4c 7e       	lddpc	lr,80009278 <get_arg+0x19c>
80009160:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80009164:	36 8b       	mov	r11,104
80009166:	f6 0a 18 00 	cp.b	r10,r11
8000916a:	e0 80 00 f0 	breq	8000934a <get_arg+0x26e>
8000916e:	37 1b       	mov	r11,113
80009170:	f6 0a 18 00 	cp.b	r10,r11
80009174:	c0 70       	breq	80009182 <get_arg+0xa6>
80009176:	34 cb       	mov	r11,76
80009178:	f6 0a 18 00 	cp.b	r10,r11
8000917c:	c0 51       	brne	80009186 <get_arg+0xaa>
8000917e:	a3 b4       	sbr	r4,0x3
80009180:	ce 58       	rjmp	8000934a <get_arg+0x26e>
80009182:	a5 b4       	sbr	r4,0x5
80009184:	ce 38       	rjmp	8000934a <get_arg+0x26e>
80009186:	0f 8b       	ld.ub	r11,r7[0x0]
80009188:	36 ca       	mov	r10,108
8000918a:	f4 0b 18 00 	cp.b	r11,r10
8000918e:	c0 51       	brne	80009198 <get_arg+0xbc>
80009190:	a5 b4       	sbr	r4,0x5
80009192:	ee cb ff ff 	sub	r11,r7,-1
80009196:	cd b8       	rjmp	8000934c <get_arg+0x270>
80009198:	a5 a4       	sbr	r4,0x4
8000919a:	cd 88       	rjmp	8000934a <get_arg+0x26e>
8000919c:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800091a0:	36 7c       	mov	r12,103
800091a2:	f8 0a 18 00 	cp.b	r10,r12
800091a6:	e0 8b 00 27 	brhi	800091f4 <get_arg+0x118>
800091aa:	36 5b       	mov	r11,101
800091ac:	f6 0a 18 00 	cp.b	r10,r11
800091b0:	c4 82       	brcc	80009240 <get_arg+0x164>
800091b2:	34 fb       	mov	r11,79
800091b4:	f6 0a 18 00 	cp.b	r10,r11
800091b8:	c4 80       	breq	80009248 <get_arg+0x16c>
800091ba:	e0 8b 00 0c 	brhi	800091d2 <get_arg+0xf6>
800091be:	34 5b       	mov	r11,69
800091c0:	f6 0a 18 00 	cp.b	r10,r11
800091c4:	c3 e0       	breq	80009240 <get_arg+0x164>
800091c6:	34 7b       	mov	r11,71
800091c8:	f6 0a 18 00 	cp.b	r10,r11
800091cc:	c3 a0       	breq	80009240 <get_arg+0x164>
800091ce:	34 4b       	mov	r11,68
800091d0:	c0 88       	rjmp	800091e0 <get_arg+0x104>
800091d2:	35 8b       	mov	r11,88
800091d4:	f6 0a 18 00 	cp.b	r10,r11
800091d8:	c2 c0       	breq	80009230 <get_arg+0x154>
800091da:	e0 8b 00 07 	brhi	800091e8 <get_arg+0x10c>
800091de:	35 5b       	mov	r11,85
800091e0:	f6 0a 18 00 	cp.b	r10,r11
800091e4:	c3 51       	brne	8000924e <get_arg+0x172>
800091e6:	c3 18       	rjmp	80009248 <get_arg+0x16c>
800091e8:	36 3b       	mov	r11,99
800091ea:	f6 0a 18 00 	cp.b	r10,r11
800091ee:	c2 f0       	breq	8000924c <get_arg+0x170>
800091f0:	36 4b       	mov	r11,100
800091f2:	c0 e8       	rjmp	8000920e <get_arg+0x132>
800091f4:	37 0b       	mov	r11,112
800091f6:	f6 0a 18 00 	cp.b	r10,r11
800091fa:	c2 50       	breq	80009244 <get_arg+0x168>
800091fc:	e0 8b 00 0d 	brhi	80009216 <get_arg+0x13a>
80009200:	36 eb       	mov	r11,110
80009202:	f6 0a 18 00 	cp.b	r10,r11
80009206:	c1 f0       	breq	80009244 <get_arg+0x168>
80009208:	e0 8b 00 14 	brhi	80009230 <get_arg+0x154>
8000920c:	36 9b       	mov	r11,105
8000920e:	f6 0a 18 00 	cp.b	r10,r11
80009212:	c1 e1       	brne	8000924e <get_arg+0x172>
80009214:	c0 e8       	rjmp	80009230 <get_arg+0x154>
80009216:	37 5b       	mov	r11,117
80009218:	f6 0a 18 00 	cp.b	r10,r11
8000921c:	c0 a0       	breq	80009230 <get_arg+0x154>
8000921e:	37 8b       	mov	r11,120
80009220:	f6 0a 18 00 	cp.b	r10,r11
80009224:	c0 60       	breq	80009230 <get_arg+0x154>
80009226:	37 3b       	mov	r11,115
80009228:	f6 0a 18 00 	cp.b	r10,r11
8000922c:	c1 11       	brne	8000924e <get_arg+0x172>
8000922e:	c0 b8       	rjmp	80009244 <get_arg+0x168>
80009230:	ed b4 00 04 	bld	r4,0x4
80009234:	c0 a0       	breq	80009248 <get_arg+0x16c>
80009236:	ed b4 00 05 	bld	r4,0x5
8000923a:	c0 91       	brne	8000924c <get_arg+0x170>
8000923c:	30 20       	mov	r0,2
8000923e:	c0 88       	rjmp	8000924e <get_arg+0x172>
80009240:	30 40       	mov	r0,4
80009242:	c0 68       	rjmp	8000924e <get_arg+0x172>
80009244:	30 30       	mov	r0,3
80009246:	c0 48       	rjmp	8000924e <get_arg+0x172>
80009248:	30 10       	mov	r0,1
8000924a:	c0 28       	rjmp	8000924e <get_arg+0x172>
8000924c:	30 00       	mov	r0,0
8000924e:	40 3b       	lddsp	r11,sp[0xc]
80009250:	5b fb       	cp.w	r11,-1
80009252:	c0 40       	breq	8000925a <get_arg+0x17e>
80009254:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80009258:	c7 98       	rjmp	8000934a <get_arg+0x26e>
8000925a:	58 60       	cp.w	r0,6
8000925c:	e0 8b 00 77 	brhi	8000934a <get_arg+0x26e>
80009260:	6c 0a       	ld.w	r10,r6[0x0]
80009262:	ea cc ff ff 	sub	r12,r5,-1
80009266:	48 6e       	lddpc	lr,8000927c <get_arg+0x1a0>
80009268:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000926c:	80 00       	ld.sh	r0,r0[0x0]
8000926e:	e9 18 80 00 	ld.uh	r8,r4[-32768]
80009272:	e8 50 80 00 	cp.w	r0,622592
80009276:	e7 e4 80 00 	sthh.w	r0[r0],r3:b,r4:b
8000927a:	e6 44 80 00 	cp.w	r4,425984
8000927e:	e6 64 f4 cb 	mov	r4,455883
80009282:	ff f8 8d 0b 	st.hls	pc[0x216],r8
80009286:	f4 ea 00 00 	ld.d	r10,r10[0]
8000928a:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000928e:	c0 f8       	rjmp	800092ac <get_arg+0x1d0>
80009290:	f4 cb ff fc 	sub	r11,r10,-4
80009294:	8d 0b       	st.w	r6[0x0],r11
80009296:	74 0a       	ld.w	r10,r10[0x0]
80009298:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000929c:	c0 88       	rjmp	800092ac <get_arg+0x1d0>
8000929e:	f4 cb ff f8 	sub	r11,r10,-8
800092a2:	8d 0b       	st.w	r6[0x0],r11
800092a4:	f4 ea 00 00 	ld.d	r10,r10[0]
800092a8:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800092ac:	0e 9b       	mov	r11,r7
800092ae:	18 95       	mov	r5,r12
800092b0:	c4 e8       	rjmp	8000934c <get_arg+0x270>
800092b2:	62 0a       	ld.w	r10,r1[0x0]
800092b4:	5b fa       	cp.w	r10,-1
800092b6:	c0 b1       	brne	800092cc <get_arg+0x1f0>
800092b8:	50 19       	stdsp	sp[0x4],r9
800092ba:	50 28       	stdsp	sp[0x8],r8
800092bc:	e0 6a 00 80 	mov	r10,128
800092c0:	30 0b       	mov	r11,0
800092c2:	02 9c       	mov	r12,r1
800092c4:	e0 a0 1d 8e 	rcall	8000cde0 <memset>
800092c8:	40 28       	lddsp	r8,sp[0x8]
800092ca:	40 19       	lddsp	r9,sp[0x4]
800092cc:	e4 cc 00 01 	sub	r12,r2,1
800092d0:	0e 9b       	mov	r11,r7
800092d2:	50 3c       	stdsp	sp[0xc],r12
800092d4:	f2 0c 0c 49 	max	r9,r9,r12
800092d8:	c3 a8       	rjmp	8000934c <get_arg+0x270>
800092da:	62 0a       	ld.w	r10,r1[0x0]
800092dc:	5b fa       	cp.w	r10,-1
800092de:	c0 b1       	brne	800092f4 <get_arg+0x218>
800092e0:	50 19       	stdsp	sp[0x4],r9
800092e2:	50 28       	stdsp	sp[0x8],r8
800092e4:	e0 6a 00 80 	mov	r10,128
800092e8:	30 0b       	mov	r11,0
800092ea:	02 9c       	mov	r12,r1
800092ec:	e0 a0 1d 7a 	rcall	8000cde0 <memset>
800092f0:	40 28       	lddsp	r8,sp[0x8]
800092f2:	40 19       	lddsp	r9,sp[0x4]
800092f4:	20 12       	sub	r2,1
800092f6:	30 0a       	mov	r10,0
800092f8:	0e 9b       	mov	r11,r7
800092fa:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800092fe:	f2 02 0c 49 	max	r9,r9,r2
80009302:	c2 58       	rjmp	8000934c <get_arg+0x270>
80009304:	16 97       	mov	r7,r11
80009306:	6c 0a       	ld.w	r10,r6[0x0]
80009308:	f4 cb ff fc 	sub	r11,r10,-4
8000930c:	8d 0b       	st.w	r6[0x0],r11
8000930e:	74 0a       	ld.w	r10,r10[0x0]
80009310:	0e 9b       	mov	r11,r7
80009312:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80009316:	2f f5       	sub	r5,-1
80009318:	c1 a8       	rjmp	8000934c <get_arg+0x270>
8000931a:	f4 c2 00 30 	sub	r2,r10,48
8000931e:	c0 68       	rjmp	8000932a <get_arg+0x24e>
80009320:	e4 02 00 22 	add	r2,r2,r2<<0x2
80009324:	2f f7       	sub	r7,-1
80009326:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000932a:	0f 8a       	ld.ub	r10,r7[0x0]
8000932c:	58 0a       	cp.w	r10,0
8000932e:	c0 e0       	breq	8000934a <get_arg+0x26e>
80009330:	23 0a       	sub	r10,48
80009332:	58 9a       	cp.w	r10,9
80009334:	fe 98 ff f6 	brls	80009320 <get_arg+0x244>
80009338:	c0 98       	rjmp	8000934a <get_arg+0x26e>
8000933a:	2f f7       	sub	r7,-1
8000933c:	0f 8a       	ld.ub	r10,r7[0x0]
8000933e:	58 0a       	cp.w	r10,0
80009340:	c0 50       	breq	8000934a <get_arg+0x26e>
80009342:	23 0a       	sub	r10,48
80009344:	58 9a       	cp.w	r10,9
80009346:	fe 98 ff fa 	brls	8000933a <get_arg+0x25e>
8000934a:	0e 9b       	mov	r11,r7
8000934c:	40 7c       	lddsp	r12,sp[0x1c]
8000934e:	30 ba       	mov	r10,11
80009350:	f4 0c 18 00 	cp.b	r12,r10
80009354:	fe 91 fe ee 	brne	80009130 <get_arg+0x54>
80009358:	40 42       	lddsp	r2,sp[0x10]
8000935a:	17 8c       	ld.ub	r12,r11[0x0]
8000935c:	0a 32       	cp.w	r2,r5
8000935e:	5f 4a       	srge	r10
80009360:	f0 0c 18 00 	cp.b	r12,r8
80009364:	5f 1c       	srne	r12
80009366:	f9 ea 00 0a 	and	r10,r12,r10
8000936a:	f0 0a 18 00 	cp.b	r10,r8
8000936e:	fe 91 fe cb 	brne	80009104 <get_arg+0x28>
80009372:	30 08       	mov	r8,0
80009374:	40 4e       	lddsp	lr,sp[0x10]
80009376:	17 8a       	ld.ub	r10,r11[0x0]
80009378:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000937c:	f0 0a 18 00 	cp.b	r10,r8
80009380:	fc 09 17 10 	movne	r9,lr
80009384:	e6 05 00 38 	add	r8,r3,r5<<0x3
80009388:	06 9e       	mov	lr,r3
8000938a:	c2 a8       	rjmp	800093de <get_arg+0x302>
8000938c:	62 0a       	ld.w	r10,r1[0x0]
8000938e:	58 3a       	cp.w	r10,3
80009390:	c1 e0       	breq	800093cc <get_arg+0x2f0>
80009392:	e0 89 00 07 	brgt	800093a0 <get_arg+0x2c4>
80009396:	58 1a       	cp.w	r10,1
80009398:	c1 a0       	breq	800093cc <get_arg+0x2f0>
8000939a:	58 2a       	cp.w	r10,2
8000939c:	c1 81       	brne	800093cc <get_arg+0x2f0>
8000939e:	c0 58       	rjmp	800093a8 <get_arg+0x2cc>
800093a0:	58 5a       	cp.w	r10,5
800093a2:	c0 c0       	breq	800093ba <get_arg+0x2de>
800093a4:	c0 b5       	brlt	800093ba <get_arg+0x2de>
800093a6:	c1 38       	rjmp	800093cc <get_arg+0x2f0>
800093a8:	6c 0a       	ld.w	r10,r6[0x0]
800093aa:	f4 cc ff f8 	sub	r12,r10,-8
800093ae:	8d 0c       	st.w	r6[0x0],r12
800093b0:	f4 e2 00 00 	ld.d	r2,r10[0]
800093b4:	f0 e3 00 00 	st.d	r8[0],r2
800093b8:	c1 08       	rjmp	800093d8 <get_arg+0x2fc>
800093ba:	6c 0a       	ld.w	r10,r6[0x0]
800093bc:	f4 cc ff f8 	sub	r12,r10,-8
800093c0:	8d 0c       	st.w	r6[0x0],r12
800093c2:	f4 e2 00 00 	ld.d	r2,r10[0]
800093c6:	f0 e3 00 00 	st.d	r8[0],r2
800093ca:	c0 78       	rjmp	800093d8 <get_arg+0x2fc>
800093cc:	6c 0a       	ld.w	r10,r6[0x0]
800093ce:	f4 cc ff fc 	sub	r12,r10,-4
800093d2:	8d 0c       	st.w	r6[0x0],r12
800093d4:	74 0a       	ld.w	r10,r10[0x0]
800093d6:	91 0a       	st.w	r8[0x0],r10
800093d8:	2f f5       	sub	r5,-1
800093da:	2f 88       	sub	r8,-8
800093dc:	2f c1       	sub	r1,-4
800093de:	12 35       	cp.w	r5,r9
800093e0:	fe 9a ff d6 	brle	8000938c <get_arg+0x2b0>
800093e4:	1c 93       	mov	r3,lr
800093e6:	40 52       	lddsp	r2,sp[0x14]
800093e8:	40 6e       	lddsp	lr,sp[0x18]
800093ea:	85 05       	st.w	r2[0x0],r5
800093ec:	9d 0b       	st.w	lr[0x0],r11
800093ee:	40 4b       	lddsp	r11,sp[0x10]
800093f0:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800093f4:	2f 8d       	sub	sp,-32
800093f6:	d8 32       	popm	r0-r7,pc

800093f8 <__sprint_r>:
800093f8:	d4 21       	pushm	r4-r7,lr
800093fa:	14 97       	mov	r7,r10
800093fc:	74 28       	ld.w	r8,r10[0x8]
800093fe:	58 08       	cp.w	r8,0
80009400:	c0 41       	brne	80009408 <__sprint_r+0x10>
80009402:	95 18       	st.w	r10[0x4],r8
80009404:	10 9c       	mov	r12,r8
80009406:	d8 22       	popm	r4-r7,pc
80009408:	e0 a0 18 c2 	rcall	8000c58c <__sfvwrite_r>
8000940c:	30 08       	mov	r8,0
8000940e:	8f 18       	st.w	r7[0x4],r8
80009410:	8f 28       	st.w	r7[0x8],r8
80009412:	d8 22       	popm	r4-r7,pc

80009414 <_vfprintf_r>:
80009414:	d4 31       	pushm	r0-r7,lr
80009416:	fa cd 06 bc 	sub	sp,sp,1724
8000941a:	51 09       	stdsp	sp[0x40],r9
8000941c:	16 91       	mov	r1,r11
8000941e:	14 97       	mov	r7,r10
80009420:	18 95       	mov	r5,r12
80009422:	e0 a0 1a 2d 	rcall	8000c87c <_localeconv_r>
80009426:	78 0c       	ld.w	r12,r12[0x0]
80009428:	50 cc       	stdsp	sp[0x30],r12
8000942a:	58 05       	cp.w	r5,0
8000942c:	c0 70       	breq	8000943a <_vfprintf_r+0x26>
8000942e:	6a 68       	ld.w	r8,r5[0x18]
80009430:	58 08       	cp.w	r8,0
80009432:	c0 41       	brne	8000943a <_vfprintf_r+0x26>
80009434:	0a 9c       	mov	r12,r5
80009436:	e0 a0 17 47 	rcall	8000c2c4 <__sinit>
8000943a:	4c f8       	lddpc	r8,80009574 <_vfprintf_r+0x160>
8000943c:	10 31       	cp.w	r1,r8
8000943e:	c0 31       	brne	80009444 <_vfprintf_r+0x30>
80009440:	6a 01       	ld.w	r1,r5[0x0]
80009442:	c0 a8       	rjmp	80009456 <_vfprintf_r+0x42>
80009444:	4c d8       	lddpc	r8,80009578 <_vfprintf_r+0x164>
80009446:	10 31       	cp.w	r1,r8
80009448:	c0 31       	brne	8000944e <_vfprintf_r+0x3a>
8000944a:	6a 11       	ld.w	r1,r5[0x4]
8000944c:	c0 58       	rjmp	80009456 <_vfprintf_r+0x42>
8000944e:	4c c8       	lddpc	r8,8000957c <_vfprintf_r+0x168>
80009450:	10 31       	cp.w	r1,r8
80009452:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80009456:	82 68       	ld.sh	r8,r1[0xc]
80009458:	ed b8 00 03 	bld	r8,0x3
8000945c:	c0 41       	brne	80009464 <_vfprintf_r+0x50>
8000945e:	62 48       	ld.w	r8,r1[0x10]
80009460:	58 08       	cp.w	r8,0
80009462:	c0 71       	brne	80009470 <_vfprintf_r+0x5c>
80009464:	02 9b       	mov	r11,r1
80009466:	0a 9c       	mov	r12,r5
80009468:	e0 a0 0f 64 	rcall	8000b330 <__swsetup_r>
8000946c:	e0 81 0f 5c 	brne	8000b324 <_vfprintf_r+0x1f10>
80009470:	82 68       	ld.sh	r8,r1[0xc]
80009472:	10 99       	mov	r9,r8
80009474:	e2 19 00 1a 	andl	r9,0x1a,COH
80009478:	58 a9       	cp.w	r9,10
8000947a:	c3 c1       	brne	800094f2 <_vfprintf_r+0xde>
8000947c:	82 79       	ld.sh	r9,r1[0xe]
8000947e:	30 0a       	mov	r10,0
80009480:	f4 09 19 00 	cp.h	r9,r10
80009484:	c3 75       	brlt	800094f2 <_vfprintf_r+0xde>
80009486:	a1 d8       	cbr	r8,0x1
80009488:	fb 58 05 d0 	st.h	sp[1488],r8
8000948c:	62 88       	ld.w	r8,r1[0x20]
8000948e:	fb 48 05 e4 	st.w	sp[1508],r8
80009492:	62 a8       	ld.w	r8,r1[0x28]
80009494:	fb 48 05 ec 	st.w	sp[1516],r8
80009498:	fa c8 ff bc 	sub	r8,sp,-68
8000949c:	fb 48 05 d4 	st.w	sp[1492],r8
800094a0:	fb 48 05 c4 	st.w	sp[1476],r8
800094a4:	e0 68 04 00 	mov	r8,1024
800094a8:	fb 48 05 d8 	st.w	sp[1496],r8
800094ac:	fb 48 05 cc 	st.w	sp[1484],r8
800094b0:	30 08       	mov	r8,0
800094b2:	fb 59 05 d2 	st.h	sp[1490],r9
800094b6:	0e 9a       	mov	r10,r7
800094b8:	41 09       	lddsp	r9,sp[0x40]
800094ba:	fa c7 fa 3c 	sub	r7,sp,-1476
800094be:	fb 48 05 dc 	st.w	sp[1500],r8
800094c2:	0a 9c       	mov	r12,r5
800094c4:	0e 9b       	mov	r11,r7
800094c6:	ca 7f       	rcall	80009414 <_vfprintf_r>
800094c8:	50 bc       	stdsp	sp[0x2c],r12
800094ca:	c0 95       	brlt	800094dc <_vfprintf_r+0xc8>
800094cc:	0e 9b       	mov	r11,r7
800094ce:	0a 9c       	mov	r12,r5
800094d0:	e0 a0 16 1e 	rcall	8000c10c <_fflush_r>
800094d4:	40 be       	lddsp	lr,sp[0x2c]
800094d6:	f9 be 01 ff 	movne	lr,-1
800094da:	50 be       	stdsp	sp[0x2c],lr
800094dc:	fb 08 05 d0 	ld.sh	r8,sp[1488]
800094e0:	ed b8 00 06 	bld	r8,0x6
800094e4:	e0 81 0f 22 	brne	8000b328 <_vfprintf_r+0x1f14>
800094e8:	82 68       	ld.sh	r8,r1[0xc]
800094ea:	a7 a8       	sbr	r8,0x6
800094ec:	a2 68       	st.h	r1[0xc],r8
800094ee:	e0 8f 0f 1d 	bral	8000b328 <_vfprintf_r+0x1f14>
800094f2:	30 08       	mov	r8,0
800094f4:	fb 48 06 b4 	st.w	sp[1716],r8
800094f8:	fb 48 06 90 	st.w	sp[1680],r8
800094fc:	fb 48 06 8c 	st.w	sp[1676],r8
80009500:	fb 48 06 b0 	st.w	sp[1712],r8
80009504:	30 08       	mov	r8,0
80009506:	30 09       	mov	r9,0
80009508:	50 a7       	stdsp	sp[0x28],r7
8000950a:	50 78       	stdsp	sp[0x1c],r8
8000950c:	fa c4 f9 e0 	sub	r4,sp,-1568
80009510:	3f f8       	mov	r8,-1
80009512:	50 59       	stdsp	sp[0x14],r9
80009514:	fb 44 06 88 	st.w	sp[1672],r4
80009518:	fb 48 05 44 	st.w	sp[1348],r8
8000951c:	12 9c       	mov	r12,r9
8000951e:	50 69       	stdsp	sp[0x18],r9
80009520:	50 d9       	stdsp	sp[0x34],r9
80009522:	50 e9       	stdsp	sp[0x38],r9
80009524:	50 b9       	stdsp	sp[0x2c],r9
80009526:	12 97       	mov	r7,r9
80009528:	40 a2       	lddsp	r2,sp[0x28]
8000952a:	32 5a       	mov	r10,37
8000952c:	30 08       	mov	r8,0
8000952e:	c0 28       	rjmp	80009532 <_vfprintf_r+0x11e>
80009530:	2f f2       	sub	r2,-1
80009532:	05 89       	ld.ub	r9,r2[0x0]
80009534:	f0 09 18 00 	cp.b	r9,r8
80009538:	5f 1b       	srne	r11
8000953a:	f4 09 18 00 	cp.b	r9,r10
8000953e:	5f 19       	srne	r9
80009540:	f3 eb 00 0b 	and	r11,r9,r11
80009544:	f0 0b 18 00 	cp.b	r11,r8
80009548:	cf 41       	brne	80009530 <_vfprintf_r+0x11c>
8000954a:	40 ab       	lddsp	r11,sp[0x28]
8000954c:	e4 0b 01 06 	sub	r6,r2,r11
80009550:	c2 40       	breq	80009598 <_vfprintf_r+0x184>
80009552:	fa f8 06 90 	ld.w	r8,sp[1680]
80009556:	0c 08       	add	r8,r6
80009558:	89 0b       	st.w	r4[0x0],r11
8000955a:	fb 48 06 90 	st.w	sp[1680],r8
8000955e:	89 16       	st.w	r4[0x4],r6
80009560:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009564:	2f f8       	sub	r8,-1
80009566:	fb 48 06 8c 	st.w	sp[1676],r8
8000956a:	58 78       	cp.w	r8,7
8000956c:	e0 89 00 0a 	brgt	80009580 <_vfprintf_r+0x16c>
80009570:	2f 84       	sub	r4,-8
80009572:	c1 08       	rjmp	80009592 <_vfprintf_r+0x17e>
80009574:	80 00       	ld.sh	r0,r0[0x0]
80009576:	ea 28 80 00 	sub	r8,688128
8000957a:	ea 48 80 00 	cp.w	r8,688128
8000957e:	ea 68 fa ca 	mov	r8,719562
80009582:	f9 78 02 9b 	stcond	r12[667],r8
80009586:	0a 9c       	mov	r12,r5
80009588:	c3 8f       	rcall	800093f8 <__sprint_r>
8000958a:	e0 81 0e c9 	brne	8000b31c <_vfprintf_r+0x1f08>
8000958e:	fa c4 f9 e0 	sub	r4,sp,-1568
80009592:	40 ba       	lddsp	r10,sp[0x2c]
80009594:	0c 0a       	add	r10,r6
80009596:	50 ba       	stdsp	sp[0x2c],r10
80009598:	05 89       	ld.ub	r9,r2[0x0]
8000959a:	30 08       	mov	r8,0
8000959c:	f0 09 18 00 	cp.b	r9,r8
800095a0:	e0 80 0e ae 	breq	8000b2fc <_vfprintf_r+0x1ee8>
800095a4:	30 09       	mov	r9,0
800095a6:	fb 68 06 bb 	st.b	sp[1723],r8
800095aa:	0e 96       	mov	r6,r7
800095ac:	e4 c8 ff ff 	sub	r8,r2,-1
800095b0:	3f fe       	mov	lr,-1
800095b2:	50 94       	stdsp	sp[0x24],r4
800095b4:	50 41       	stdsp	sp[0x10],r1
800095b6:	0e 94       	mov	r4,r7
800095b8:	04 91       	mov	r1,r2
800095ba:	50 89       	stdsp	sp[0x20],r9
800095bc:	50 a8       	stdsp	sp[0x28],r8
800095be:	50 2e       	stdsp	sp[0x8],lr
800095c0:	50 39       	stdsp	sp[0xc],r9
800095c2:	12 93       	mov	r3,r9
800095c4:	12 90       	mov	r0,r9
800095c6:	10 97       	mov	r7,r8
800095c8:	0a 92       	mov	r2,r5
800095ca:	c0 78       	rjmp	800095d8 <_vfprintf_r+0x1c4>
800095cc:	3f fc       	mov	r12,-1
800095ce:	0a 97       	mov	r7,r5
800095d0:	50 2c       	stdsp	sp[0x8],r12
800095d2:	c0 38       	rjmp	800095d8 <_vfprintf_r+0x1c4>
800095d4:	30 0b       	mov	r11,0
800095d6:	50 3b       	stdsp	sp[0xc],r11
800095d8:	0f 38       	ld.ub	r8,r7++
800095da:	c0 28       	rjmp	800095de <_vfprintf_r+0x1ca>
800095dc:	12 90       	mov	r0,r9
800095de:	f0 c9 00 20 	sub	r9,r8,32
800095e2:	e0 49 00 58 	cp.w	r9,88
800095e6:	e0 8b 0a 33 	brhi	8000aa4c <_vfprintf_r+0x1638>
800095ea:	4d 9a       	lddpc	r10,8000974c <_vfprintf_r+0x338>
800095ec:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
800095f0:	50 a7       	stdsp	sp[0x28],r7
800095f2:	50 80       	stdsp	sp[0x20],r0
800095f4:	0c 97       	mov	r7,r6
800095f6:	04 95       	mov	r5,r2
800095f8:	08 96       	mov	r6,r4
800095fa:	02 92       	mov	r2,r1
800095fc:	4d 59       	lddpc	r9,80009750 <_vfprintf_r+0x33c>
800095fe:	40 94       	lddsp	r4,sp[0x24]
80009600:	10 90       	mov	r0,r8
80009602:	40 41       	lddsp	r1,sp[0x10]
80009604:	50 d9       	stdsp	sp[0x34],r9
80009606:	e0 8f 08 95 	bral	8000a730 <_vfprintf_r+0x131c>
8000960a:	30 08       	mov	r8,0
8000960c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80009610:	f0 09 18 00 	cp.b	r9,r8
80009614:	ce 21       	brne	800095d8 <_vfprintf_r+0x1c4>
80009616:	32 08       	mov	r8,32
80009618:	c6 e8       	rjmp	800096f4 <_vfprintf_r+0x2e0>
8000961a:	a1 a3       	sbr	r3,0x0
8000961c:	cd eb       	rjmp	800095d8 <_vfprintf_r+0x1c4>
8000961e:	0f 89       	ld.ub	r9,r7[0x0]
80009620:	f2 c8 00 30 	sub	r8,r9,48
80009624:	58 98       	cp.w	r8,9
80009626:	e0 8b 00 1d 	brhi	80009660 <_vfprintf_r+0x24c>
8000962a:	ee c8 ff ff 	sub	r8,r7,-1
8000962e:	30 0b       	mov	r11,0
80009630:	23 09       	sub	r9,48
80009632:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80009636:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000963a:	11 39       	ld.ub	r9,r8++
8000963c:	f2 ca 00 30 	sub	r10,r9,48
80009640:	58 9a       	cp.w	r10,9
80009642:	fe 98 ff f7 	brls	80009630 <_vfprintf_r+0x21c>
80009646:	e0 49 00 24 	cp.w	r9,36
8000964a:	cc 51       	brne	800095d4 <_vfprintf_r+0x1c0>
8000964c:	e0 4b 00 20 	cp.w	r11,32
80009650:	e0 89 0e 65 	brgt	8000b31a <_vfprintf_r+0x1f06>
80009654:	20 1b       	sub	r11,1
80009656:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000965a:	12 3b       	cp.w	r11,r9
8000965c:	c0 95       	brlt	8000966e <_vfprintf_r+0x25a>
8000965e:	c1 08       	rjmp	8000967e <_vfprintf_r+0x26a>
80009660:	fa f9 06 b4 	ld.w	r9,sp[1716]
80009664:	ec ca ff ff 	sub	r10,r6,-1
80009668:	12 36       	cp.w	r6,r9
8000966a:	c1 f5       	brlt	800096a8 <_vfprintf_r+0x294>
8000966c:	c2 68       	rjmp	800096b8 <_vfprintf_r+0x2a4>
8000966e:	fa ce f9 44 	sub	lr,sp,-1724
80009672:	10 97       	mov	r7,r8
80009674:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80009678:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000967c:	c3 58       	rjmp	800096e6 <_vfprintf_r+0x2d2>
8000967e:	10 97       	mov	r7,r8
80009680:	fa c8 f9 50 	sub	r8,sp,-1712
80009684:	1a d8       	st.w	--sp,r8
80009686:	fa c8 fa b8 	sub	r8,sp,-1352
8000968a:	1a d8       	st.w	--sp,r8
8000968c:	fa c8 fb b4 	sub	r8,sp,-1100
80009690:	02 9a       	mov	r10,r1
80009692:	1a d8       	st.w	--sp,r8
80009694:	04 9c       	mov	r12,r2
80009696:	fa c8 f9 40 	sub	r8,sp,-1728
8000969a:	fa c9 ff b4 	sub	r9,sp,-76
8000969e:	fe b0 fd 1f 	rcall	800090dc <get_arg>
800096a2:	2f dd       	sub	sp,-12
800096a4:	78 00       	ld.w	r0,r12[0x0]
800096a6:	c2 08       	rjmp	800096e6 <_vfprintf_r+0x2d2>
800096a8:	fa cc f9 44 	sub	r12,sp,-1724
800096ac:	14 96       	mov	r6,r10
800096ae:	f8 04 00 38 	add	r8,r12,r4<<0x3
800096b2:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800096b6:	c1 88       	rjmp	800096e6 <_vfprintf_r+0x2d2>
800096b8:	41 08       	lddsp	r8,sp[0x40]
800096ba:	59 f9       	cp.w	r9,31
800096bc:	e0 89 00 11 	brgt	800096de <_vfprintf_r+0x2ca>
800096c0:	f0 cb ff fc 	sub	r11,r8,-4
800096c4:	51 0b       	stdsp	sp[0x40],r11
800096c6:	70 00       	ld.w	r0,r8[0x0]
800096c8:	fa cb f9 44 	sub	r11,sp,-1724
800096cc:	f6 09 00 38 	add	r8,r11,r9<<0x3
800096d0:	f1 40 fd 88 	st.w	r8[-632],r0
800096d4:	2f f9       	sub	r9,-1
800096d6:	14 96       	mov	r6,r10
800096d8:	fb 49 06 b4 	st.w	sp[1716],r9
800096dc:	c0 58       	rjmp	800096e6 <_vfprintf_r+0x2d2>
800096de:	70 00       	ld.w	r0,r8[0x0]
800096e0:	14 96       	mov	r6,r10
800096e2:	2f c8       	sub	r8,-4
800096e4:	51 08       	stdsp	sp[0x40],r8
800096e6:	58 00       	cp.w	r0,0
800096e8:	fe 94 ff 78 	brge	800095d8 <_vfprintf_r+0x1c4>
800096ec:	5c 30       	neg	r0
800096ee:	a3 a3       	sbr	r3,0x2
800096f0:	c7 4b       	rjmp	800095d8 <_vfprintf_r+0x1c4>
800096f2:	32 b8       	mov	r8,43
800096f4:	fb 68 06 bb 	st.b	sp[1723],r8
800096f8:	c7 0b       	rjmp	800095d8 <_vfprintf_r+0x1c4>
800096fa:	0f 38       	ld.ub	r8,r7++
800096fc:	e0 48 00 2a 	cp.w	r8,42
80009700:	c0 30       	breq	80009706 <_vfprintf_r+0x2f2>
80009702:	30 09       	mov	r9,0
80009704:	c7 d8       	rjmp	800097fe <_vfprintf_r+0x3ea>
80009706:	0f 88       	ld.ub	r8,r7[0x0]
80009708:	f0 c9 00 30 	sub	r9,r8,48
8000970c:	58 99       	cp.w	r9,9
8000970e:	e0 8b 00 23 	brhi	80009754 <_vfprintf_r+0x340>
80009712:	ee c5 ff ff 	sub	r5,r7,-1
80009716:	30 0b       	mov	r11,0
80009718:	23 08       	sub	r8,48
8000971a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000971e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80009722:	0b 38       	ld.ub	r8,r5++
80009724:	f0 c9 00 30 	sub	r9,r8,48
80009728:	58 99       	cp.w	r9,9
8000972a:	fe 98 ff f7 	brls	80009718 <_vfprintf_r+0x304>
8000972e:	e0 48 00 24 	cp.w	r8,36
80009732:	fe 91 ff 51 	brne	800095d4 <_vfprintf_r+0x1c0>
80009736:	e0 4b 00 20 	cp.w	r11,32
8000973a:	e0 89 0d f0 	brgt	8000b31a <_vfprintf_r+0x1f06>
8000973e:	20 1b       	sub	r11,1
80009740:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009744:	10 3b       	cp.w	r11,r8
80009746:	c0 e5       	brlt	80009762 <_vfprintf_r+0x34e>
80009748:	c1 58       	rjmp	80009772 <_vfprintf_r+0x35e>
8000974a:	d7 03       	nop
8000974c:	80 00       	ld.sh	r0,r0[0x0]
8000974e:	e6 80 80 00 	breq	800d974e <_data_lma+0xcab7e>
80009752:	e8 bc       	*unknown*
80009754:	fa fa 06 b4 	ld.w	r10,sp[1716]
80009758:	ec c9 ff ff 	sub	r9,r6,-1
8000975c:	14 36       	cp.w	r6,r10
8000975e:	c1 f5       	brlt	8000979c <_vfprintf_r+0x388>
80009760:	c2 88       	rjmp	800097b0 <_vfprintf_r+0x39c>
80009762:	fa ca f9 44 	sub	r10,sp,-1724
80009766:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000976a:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000976e:	50 2b       	stdsp	sp[0x8],r11
80009770:	c3 c8       	rjmp	800097e8 <_vfprintf_r+0x3d4>
80009772:	fa c8 f9 50 	sub	r8,sp,-1712
80009776:	1a d8       	st.w	--sp,r8
80009778:	fa c8 fa b8 	sub	r8,sp,-1352
8000977c:	1a d8       	st.w	--sp,r8
8000977e:	fa c8 fb b4 	sub	r8,sp,-1100
80009782:	02 9a       	mov	r10,r1
80009784:	1a d8       	st.w	--sp,r8
80009786:	04 9c       	mov	r12,r2
80009788:	fa c8 f9 40 	sub	r8,sp,-1728
8000978c:	fa c9 ff b4 	sub	r9,sp,-76
80009790:	fe b0 fc a6 	rcall	800090dc <get_arg>
80009794:	2f dd       	sub	sp,-12
80009796:	78 0c       	ld.w	r12,r12[0x0]
80009798:	50 2c       	stdsp	sp[0x8],r12
8000979a:	c2 78       	rjmp	800097e8 <_vfprintf_r+0x3d4>
8000979c:	12 96       	mov	r6,r9
8000979e:	0e 95       	mov	r5,r7
800097a0:	fa c9 f9 44 	sub	r9,sp,-1724
800097a4:	f2 04 00 38 	add	r8,r9,r4<<0x3
800097a8:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800097ac:	50 28       	stdsp	sp[0x8],r8
800097ae:	c1 d8       	rjmp	800097e8 <_vfprintf_r+0x3d4>
800097b0:	41 08       	lddsp	r8,sp[0x40]
800097b2:	59 fa       	cp.w	r10,31
800097b4:	e0 89 00 14 	brgt	800097dc <_vfprintf_r+0x3c8>
800097b8:	f0 cb ff fc 	sub	r11,r8,-4
800097bc:	70 08       	ld.w	r8,r8[0x0]
800097be:	51 0b       	stdsp	sp[0x40],r11
800097c0:	50 28       	stdsp	sp[0x8],r8
800097c2:	fa c6 f9 44 	sub	r6,sp,-1724
800097c6:	40 2e       	lddsp	lr,sp[0x8]
800097c8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
800097cc:	f1 4e fd 88 	st.w	r8[-632],lr
800097d0:	2f fa       	sub	r10,-1
800097d2:	0e 95       	mov	r5,r7
800097d4:	fb 4a 06 b4 	st.w	sp[1716],r10
800097d8:	12 96       	mov	r6,r9
800097da:	c0 78       	rjmp	800097e8 <_vfprintf_r+0x3d4>
800097dc:	70 0c       	ld.w	r12,r8[0x0]
800097de:	0e 95       	mov	r5,r7
800097e0:	2f c8       	sub	r8,-4
800097e2:	50 2c       	stdsp	sp[0x8],r12
800097e4:	12 96       	mov	r6,r9
800097e6:	51 08       	stdsp	sp[0x40],r8
800097e8:	40 2b       	lddsp	r11,sp[0x8]
800097ea:	58 0b       	cp.w	r11,0
800097ec:	fe 95 fe f0 	brlt	800095cc <_vfprintf_r+0x1b8>
800097f0:	0a 97       	mov	r7,r5
800097f2:	cf 3a       	rjmp	800095d8 <_vfprintf_r+0x1c4>
800097f4:	f2 09 00 29 	add	r9,r9,r9<<0x2
800097f8:	0f 38       	ld.ub	r8,r7++
800097fa:	f4 09 00 19 	add	r9,r10,r9<<0x1
800097fe:	f0 ca 00 30 	sub	r10,r8,48
80009802:	58 9a       	cp.w	r10,9
80009804:	fe 98 ff f8 	brls	800097f4 <_vfprintf_r+0x3e0>
80009808:	3f fa       	mov	r10,-1
8000980a:	f2 0a 0c 49 	max	r9,r9,r10
8000980e:	50 29       	stdsp	sp[0x8],r9
80009810:	ce 7a       	rjmp	800095de <_vfprintf_r+0x1ca>
80009812:	a7 b3       	sbr	r3,0x7
80009814:	ce 2a       	rjmp	800095d8 <_vfprintf_r+0x1c4>
80009816:	30 09       	mov	r9,0
80009818:	23 08       	sub	r8,48
8000981a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000981e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80009822:	0f 38       	ld.ub	r8,r7++
80009824:	f0 ca 00 30 	sub	r10,r8,48
80009828:	58 9a       	cp.w	r10,9
8000982a:	fe 98 ff f7 	brls	80009818 <_vfprintf_r+0x404>
8000982e:	e0 48 00 24 	cp.w	r8,36
80009832:	fe 91 fe d5 	brne	800095dc <_vfprintf_r+0x1c8>
80009836:	e0 49 00 20 	cp.w	r9,32
8000983a:	e0 89 0d 70 	brgt	8000b31a <_vfprintf_r+0x1f06>
8000983e:	f2 c4 00 01 	sub	r4,r9,1
80009842:	30 19       	mov	r9,1
80009844:	50 39       	stdsp	sp[0xc],r9
80009846:	cc 9a       	rjmp	800095d8 <_vfprintf_r+0x1c4>
80009848:	a3 b3       	sbr	r3,0x3
8000984a:	cc 7a       	rjmp	800095d8 <_vfprintf_r+0x1c4>
8000984c:	a7 a3       	sbr	r3,0x6
8000984e:	cc 5a       	rjmp	800095d8 <_vfprintf_r+0x1c4>
80009850:	0f 88       	ld.ub	r8,r7[0x0]
80009852:	36 ce       	mov	lr,108
80009854:	fc 08 18 00 	cp.b	r8,lr
80009858:	c0 41       	brne	80009860 <_vfprintf_r+0x44c>
8000985a:	2f f7       	sub	r7,-1
8000985c:	a5 b3       	sbr	r3,0x5
8000985e:	cb da       	rjmp	800095d8 <_vfprintf_r+0x1c4>
80009860:	a5 a3       	sbr	r3,0x4
80009862:	cb ba       	rjmp	800095d8 <_vfprintf_r+0x1c4>
80009864:	a5 b3       	sbr	r3,0x5
80009866:	cb 9a       	rjmp	800095d8 <_vfprintf_r+0x1c4>
80009868:	50 a7       	stdsp	sp[0x28],r7
8000986a:	50 80       	stdsp	sp[0x20],r0
8000986c:	0c 97       	mov	r7,r6
8000986e:	10 90       	mov	r0,r8
80009870:	08 96       	mov	r6,r4
80009872:	04 95       	mov	r5,r2
80009874:	40 94       	lddsp	r4,sp[0x24]
80009876:	02 92       	mov	r2,r1
80009878:	0e 99       	mov	r9,r7
8000987a:	40 41       	lddsp	r1,sp[0x10]
8000987c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009880:	40 3c       	lddsp	r12,sp[0xc]
80009882:	58 0c       	cp.w	r12,0
80009884:	c1 d0       	breq	800098be <_vfprintf_r+0x4aa>
80009886:	10 36       	cp.w	r6,r8
80009888:	c0 64       	brge	80009894 <_vfprintf_r+0x480>
8000988a:	fa cb f9 44 	sub	r11,sp,-1724
8000988e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009892:	c1 d8       	rjmp	800098cc <_vfprintf_r+0x4b8>
80009894:	fa c8 f9 50 	sub	r8,sp,-1712
80009898:	1a d8       	st.w	--sp,r8
8000989a:	fa c8 fa b8 	sub	r8,sp,-1352
8000989e:	1a d8       	st.w	--sp,r8
800098a0:	fa c8 fb b4 	sub	r8,sp,-1100
800098a4:	1a d8       	st.w	--sp,r8
800098a6:	fa c8 f9 40 	sub	r8,sp,-1728
800098aa:	fa c9 ff b4 	sub	r9,sp,-76
800098ae:	04 9a       	mov	r10,r2
800098b0:	0c 9b       	mov	r11,r6
800098b2:	0a 9c       	mov	r12,r5
800098b4:	fe b0 fc 14 	rcall	800090dc <get_arg>
800098b8:	2f dd       	sub	sp,-12
800098ba:	19 b8       	ld.ub	r8,r12[0x3]
800098bc:	c2 28       	rjmp	80009900 <_vfprintf_r+0x4ec>
800098be:	2f f7       	sub	r7,-1
800098c0:	10 39       	cp.w	r9,r8
800098c2:	c0 84       	brge	800098d2 <_vfprintf_r+0x4be>
800098c4:	fa ca f9 44 	sub	r10,sp,-1724
800098c8:	f4 06 00 36 	add	r6,r10,r6<<0x3
800098cc:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800098d0:	c1 88       	rjmp	80009900 <_vfprintf_r+0x4ec>
800098d2:	41 09       	lddsp	r9,sp[0x40]
800098d4:	59 f8       	cp.w	r8,31
800098d6:	e0 89 00 12 	brgt	800098fa <_vfprintf_r+0x4e6>
800098da:	f2 ca ff fc 	sub	r10,r9,-4
800098de:	51 0a       	stdsp	sp[0x40],r10
800098e0:	72 09       	ld.w	r9,r9[0x0]
800098e2:	fa c6 f9 44 	sub	r6,sp,-1724
800098e6:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800098ea:	2f f8       	sub	r8,-1
800098ec:	f5 49 fd 88 	st.w	r10[-632],r9
800098f0:	fb 48 06 b4 	st.w	sp[1716],r8
800098f4:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
800098f8:	c0 48       	rjmp	80009900 <_vfprintf_r+0x4ec>
800098fa:	13 b8       	ld.ub	r8,r9[0x3]
800098fc:	2f c9       	sub	r9,-4
800098fe:	51 09       	stdsp	sp[0x40],r9
80009900:	fb 68 06 60 	st.b	sp[1632],r8
80009904:	30 0e       	mov	lr,0
80009906:	30 08       	mov	r8,0
80009908:	30 12       	mov	r2,1
8000990a:	fb 68 06 bb 	st.b	sp[1723],r8
8000990e:	50 2e       	stdsp	sp[0x8],lr
80009910:	e0 8f 08 b0 	bral	8000aa70 <_vfprintf_r+0x165c>
80009914:	50 a7       	stdsp	sp[0x28],r7
80009916:	50 80       	stdsp	sp[0x20],r0
80009918:	0c 97       	mov	r7,r6
8000991a:	04 95       	mov	r5,r2
8000991c:	08 96       	mov	r6,r4
8000991e:	02 92       	mov	r2,r1
80009920:	40 94       	lddsp	r4,sp[0x24]
80009922:	10 90       	mov	r0,r8
80009924:	40 41       	lddsp	r1,sp[0x10]
80009926:	a5 a3       	sbr	r3,0x4
80009928:	c0 a8       	rjmp	8000993c <_vfprintf_r+0x528>
8000992a:	50 a7       	stdsp	sp[0x28],r7
8000992c:	50 80       	stdsp	sp[0x20],r0
8000992e:	0c 97       	mov	r7,r6
80009930:	04 95       	mov	r5,r2
80009932:	08 96       	mov	r6,r4
80009934:	02 92       	mov	r2,r1
80009936:	40 94       	lddsp	r4,sp[0x24]
80009938:	10 90       	mov	r0,r8
8000993a:	40 41       	lddsp	r1,sp[0x10]
8000993c:	ed b3 00 05 	bld	r3,0x5
80009940:	c5 11       	brne	800099e2 <_vfprintf_r+0x5ce>
80009942:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009946:	40 3c       	lddsp	r12,sp[0xc]
80009948:	58 0c       	cp.w	r12,0
8000994a:	c1 e0       	breq	80009986 <_vfprintf_r+0x572>
8000994c:	10 36       	cp.w	r6,r8
8000994e:	c0 64       	brge	8000995a <_vfprintf_r+0x546>
80009950:	fa cb f9 44 	sub	r11,sp,-1724
80009954:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009958:	c2 08       	rjmp	80009998 <_vfprintf_r+0x584>
8000995a:	fa c8 f9 50 	sub	r8,sp,-1712
8000995e:	1a d8       	st.w	--sp,r8
80009960:	fa c8 fa b8 	sub	r8,sp,-1352
80009964:	0c 9b       	mov	r11,r6
80009966:	1a d8       	st.w	--sp,r8
80009968:	fa c8 fb b4 	sub	r8,sp,-1100
8000996c:	1a d8       	st.w	--sp,r8
8000996e:	fa c9 ff b4 	sub	r9,sp,-76
80009972:	fa c8 f9 40 	sub	r8,sp,-1728
80009976:	04 9a       	mov	r10,r2
80009978:	0a 9c       	mov	r12,r5
8000997a:	fe b0 fb b1 	rcall	800090dc <get_arg>
8000997e:	2f dd       	sub	sp,-12
80009980:	78 1b       	ld.w	r11,r12[0x4]
80009982:	78 09       	ld.w	r9,r12[0x0]
80009984:	c2 b8       	rjmp	800099da <_vfprintf_r+0x5c6>
80009986:	ee ca ff ff 	sub	r10,r7,-1
8000998a:	10 37       	cp.w	r7,r8
8000998c:	c0 b4       	brge	800099a2 <_vfprintf_r+0x58e>
8000998e:	fa c9 f9 44 	sub	r9,sp,-1724
80009992:	14 97       	mov	r7,r10
80009994:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009998:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000999c:	ec f9 fd 88 	ld.w	r9,r6[-632]
800099a0:	c1 d8       	rjmp	800099da <_vfprintf_r+0x5c6>
800099a2:	41 09       	lddsp	r9,sp[0x40]
800099a4:	59 f8       	cp.w	r8,31
800099a6:	e0 89 00 14 	brgt	800099ce <_vfprintf_r+0x5ba>
800099aa:	f2 cb ff f8 	sub	r11,r9,-8
800099ae:	51 0b       	stdsp	sp[0x40],r11
800099b0:	fa c6 f9 44 	sub	r6,sp,-1724
800099b4:	72 1b       	ld.w	r11,r9[0x4]
800099b6:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800099ba:	72 09       	ld.w	r9,r9[0x0]
800099bc:	f9 4b fd 8c 	st.w	r12[-628],r11
800099c0:	f9 49 fd 88 	st.w	r12[-632],r9
800099c4:	2f f8       	sub	r8,-1
800099c6:	14 97       	mov	r7,r10
800099c8:	fb 48 06 b4 	st.w	sp[1716],r8
800099cc:	c0 78       	rjmp	800099da <_vfprintf_r+0x5c6>
800099ce:	f2 c8 ff f8 	sub	r8,r9,-8
800099d2:	72 1b       	ld.w	r11,r9[0x4]
800099d4:	14 97       	mov	r7,r10
800099d6:	51 08       	stdsp	sp[0x40],r8
800099d8:	72 09       	ld.w	r9,r9[0x0]
800099da:	16 98       	mov	r8,r11
800099dc:	fa e9 00 00 	st.d	sp[0],r8
800099e0:	ca e8       	rjmp	80009b3c <_vfprintf_r+0x728>
800099e2:	ed b3 00 04 	bld	r3,0x4
800099e6:	c1 71       	brne	80009a14 <_vfprintf_r+0x600>
800099e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800099ec:	40 3e       	lddsp	lr,sp[0xc]
800099ee:	58 0e       	cp.w	lr,0
800099f0:	c0 80       	breq	80009a00 <_vfprintf_r+0x5ec>
800099f2:	10 36       	cp.w	r6,r8
800099f4:	c6 94       	brge	80009ac6 <_vfprintf_r+0x6b2>
800099f6:	fa cc f9 44 	sub	r12,sp,-1724
800099fa:	f8 06 00 36 	add	r6,r12,r6<<0x3
800099fe:	c8 28       	rjmp	80009b02 <_vfprintf_r+0x6ee>
80009a00:	ee ca ff ff 	sub	r10,r7,-1
80009a04:	10 37       	cp.w	r7,r8
80009a06:	e0 84 00 81 	brge	80009b08 <_vfprintf_r+0x6f4>
80009a0a:	fa cb f9 44 	sub	r11,sp,-1724
80009a0e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009a12:	c7 78       	rjmp	80009b00 <_vfprintf_r+0x6ec>
80009a14:	ed b3 00 06 	bld	r3,0x6
80009a18:	c4 b1       	brne	80009aae <_vfprintf_r+0x69a>
80009a1a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009a1e:	40 3c       	lddsp	r12,sp[0xc]
80009a20:	58 0c       	cp.w	r12,0
80009a22:	c1 d0       	breq	80009a5c <_vfprintf_r+0x648>
80009a24:	10 36       	cp.w	r6,r8
80009a26:	c0 64       	brge	80009a32 <_vfprintf_r+0x61e>
80009a28:	fa cb f9 44 	sub	r11,sp,-1724
80009a2c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009a30:	c1 f8       	rjmp	80009a6e <_vfprintf_r+0x65a>
80009a32:	fa c8 f9 50 	sub	r8,sp,-1712
80009a36:	1a d8       	st.w	--sp,r8
80009a38:	fa c8 fa b8 	sub	r8,sp,-1352
80009a3c:	1a d8       	st.w	--sp,r8
80009a3e:	fa c8 fb b4 	sub	r8,sp,-1100
80009a42:	1a d8       	st.w	--sp,r8
80009a44:	fa c8 f9 40 	sub	r8,sp,-1728
80009a48:	fa c9 ff b4 	sub	r9,sp,-76
80009a4c:	04 9a       	mov	r10,r2
80009a4e:	0c 9b       	mov	r11,r6
80009a50:	0a 9c       	mov	r12,r5
80009a52:	fe b0 fb 45 	rcall	800090dc <get_arg>
80009a56:	2f dd       	sub	sp,-12
80009a58:	98 18       	ld.sh	r8,r12[0x2]
80009a5a:	c2 68       	rjmp	80009aa6 <_vfprintf_r+0x692>
80009a5c:	ee ca ff ff 	sub	r10,r7,-1
80009a60:	10 37       	cp.w	r7,r8
80009a62:	c0 94       	brge	80009a74 <_vfprintf_r+0x660>
80009a64:	fa c9 f9 44 	sub	r9,sp,-1724
80009a68:	14 97       	mov	r7,r10
80009a6a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009a6e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80009a72:	c1 a8       	rjmp	80009aa6 <_vfprintf_r+0x692>
80009a74:	41 09       	lddsp	r9,sp[0x40]
80009a76:	59 f8       	cp.w	r8,31
80009a78:	e0 89 00 13 	brgt	80009a9e <_vfprintf_r+0x68a>
80009a7c:	f2 cb ff fc 	sub	r11,r9,-4
80009a80:	51 0b       	stdsp	sp[0x40],r11
80009a82:	72 09       	ld.w	r9,r9[0x0]
80009a84:	fa c6 f9 44 	sub	r6,sp,-1724
80009a88:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80009a8c:	2f f8       	sub	r8,-1
80009a8e:	f7 49 fd 88 	st.w	r11[-632],r9
80009a92:	fb 48 06 b4 	st.w	sp[1716],r8
80009a96:	14 97       	mov	r7,r10
80009a98:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80009a9c:	c0 58       	rjmp	80009aa6 <_vfprintf_r+0x692>
80009a9e:	92 18       	ld.sh	r8,r9[0x2]
80009aa0:	14 97       	mov	r7,r10
80009aa2:	2f c9       	sub	r9,-4
80009aa4:	51 09       	stdsp	sp[0x40],r9
80009aa6:	50 18       	stdsp	sp[0x4],r8
80009aa8:	bf 58       	asr	r8,0x1f
80009aaa:	50 08       	stdsp	sp[0x0],r8
80009aac:	c4 88       	rjmp	80009b3c <_vfprintf_r+0x728>
80009aae:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009ab2:	40 3c       	lddsp	r12,sp[0xc]
80009ab4:	58 0c       	cp.w	r12,0
80009ab6:	c1 d0       	breq	80009af0 <_vfprintf_r+0x6dc>
80009ab8:	10 36       	cp.w	r6,r8
80009aba:	c0 64       	brge	80009ac6 <_vfprintf_r+0x6b2>
80009abc:	fa cb f9 44 	sub	r11,sp,-1724
80009ac0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009ac4:	c1 f8       	rjmp	80009b02 <_vfprintf_r+0x6ee>
80009ac6:	fa c8 f9 50 	sub	r8,sp,-1712
80009aca:	1a d8       	st.w	--sp,r8
80009acc:	fa c8 fa b8 	sub	r8,sp,-1352
80009ad0:	0c 9b       	mov	r11,r6
80009ad2:	1a d8       	st.w	--sp,r8
80009ad4:	fa c8 fb b4 	sub	r8,sp,-1100
80009ad8:	04 9a       	mov	r10,r2
80009ada:	1a d8       	st.w	--sp,r8
80009adc:	0a 9c       	mov	r12,r5
80009ade:	fa c8 f9 40 	sub	r8,sp,-1728
80009ae2:	fa c9 ff b4 	sub	r9,sp,-76
80009ae6:	fe b0 fa fb 	rcall	800090dc <get_arg>
80009aea:	2f dd       	sub	sp,-12
80009aec:	78 0b       	ld.w	r11,r12[0x0]
80009aee:	c2 48       	rjmp	80009b36 <_vfprintf_r+0x722>
80009af0:	ee ca ff ff 	sub	r10,r7,-1
80009af4:	10 37       	cp.w	r7,r8
80009af6:	c0 94       	brge	80009b08 <_vfprintf_r+0x6f4>
80009af8:	fa c9 f9 44 	sub	r9,sp,-1724
80009afc:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009b00:	14 97       	mov	r7,r10
80009b02:	ec fb fd 88 	ld.w	r11,r6[-632]
80009b06:	c1 88       	rjmp	80009b36 <_vfprintf_r+0x722>
80009b08:	41 09       	lddsp	r9,sp[0x40]
80009b0a:	59 f8       	cp.w	r8,31
80009b0c:	e0 89 00 11 	brgt	80009b2e <_vfprintf_r+0x71a>
80009b10:	f2 cb ff fc 	sub	r11,r9,-4
80009b14:	51 0b       	stdsp	sp[0x40],r11
80009b16:	fa c6 f9 44 	sub	r6,sp,-1724
80009b1a:	72 0b       	ld.w	r11,r9[0x0]
80009b1c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009b20:	f3 4b fd 88 	st.w	r9[-632],r11
80009b24:	2f f8       	sub	r8,-1
80009b26:	14 97       	mov	r7,r10
80009b28:	fb 48 06 b4 	st.w	sp[1716],r8
80009b2c:	c0 58       	rjmp	80009b36 <_vfprintf_r+0x722>
80009b2e:	72 0b       	ld.w	r11,r9[0x0]
80009b30:	14 97       	mov	r7,r10
80009b32:	2f c9       	sub	r9,-4
80009b34:	51 09       	stdsp	sp[0x40],r9
80009b36:	50 1b       	stdsp	sp[0x4],r11
80009b38:	bf 5b       	asr	r11,0x1f
80009b3a:	50 0b       	stdsp	sp[0x0],r11
80009b3c:	fa ea 00 00 	ld.d	r10,sp[0]
80009b40:	58 0a       	cp.w	r10,0
80009b42:	5c 2b       	cpc	r11
80009b44:	c0 e4       	brge	80009b60 <_vfprintf_r+0x74c>
80009b46:	30 08       	mov	r8,0
80009b48:	fa ea 00 00 	ld.d	r10,sp[0]
80009b4c:	30 09       	mov	r9,0
80009b4e:	f0 0a 01 0a 	sub	r10,r8,r10
80009b52:	f2 0b 01 4b 	sbc	r11,r9,r11
80009b56:	32 d8       	mov	r8,45
80009b58:	fa eb 00 00 	st.d	sp[0],r10
80009b5c:	fb 68 06 bb 	st.b	sp[1723],r8
80009b60:	30 18       	mov	r8,1
80009b62:	e0 8f 06 fd 	bral	8000a95c <_vfprintf_r+0x1548>
80009b66:	50 a7       	stdsp	sp[0x28],r7
80009b68:	50 80       	stdsp	sp[0x20],r0
80009b6a:	0c 97       	mov	r7,r6
80009b6c:	04 95       	mov	r5,r2
80009b6e:	08 96       	mov	r6,r4
80009b70:	02 92       	mov	r2,r1
80009b72:	40 94       	lddsp	r4,sp[0x24]
80009b74:	10 90       	mov	r0,r8
80009b76:	40 41       	lddsp	r1,sp[0x10]
80009b78:	0e 99       	mov	r9,r7
80009b7a:	ed b3 00 03 	bld	r3,0x3
80009b7e:	c4 11       	brne	80009c00 <_vfprintf_r+0x7ec>
80009b80:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009b84:	40 3a       	lddsp	r10,sp[0xc]
80009b86:	58 0a       	cp.w	r10,0
80009b88:	c1 90       	breq	80009bba <_vfprintf_r+0x7a6>
80009b8a:	10 36       	cp.w	r6,r8
80009b8c:	c6 45       	brlt	80009c54 <_vfprintf_r+0x840>
80009b8e:	fa c8 f9 50 	sub	r8,sp,-1712
80009b92:	1a d8       	st.w	--sp,r8
80009b94:	fa c8 fa b8 	sub	r8,sp,-1352
80009b98:	1a d8       	st.w	--sp,r8
80009b9a:	fa c8 fb b4 	sub	r8,sp,-1100
80009b9e:	0c 9b       	mov	r11,r6
80009ba0:	1a d8       	st.w	--sp,r8
80009ba2:	04 9a       	mov	r10,r2
80009ba4:	fa c8 f9 40 	sub	r8,sp,-1728
80009ba8:	fa c9 ff b4 	sub	r9,sp,-76
80009bac:	0a 9c       	mov	r12,r5
80009bae:	fe b0 fa 97 	rcall	800090dc <get_arg>
80009bb2:	2f dd       	sub	sp,-12
80009bb4:	78 16       	ld.w	r6,r12[0x4]
80009bb6:	50 76       	stdsp	sp[0x1c],r6
80009bb8:	c4 88       	rjmp	80009c48 <_vfprintf_r+0x834>
80009bba:	2f f7       	sub	r7,-1
80009bbc:	10 39       	cp.w	r9,r8
80009bbe:	c0 c4       	brge	80009bd6 <_vfprintf_r+0x7c2>
80009bc0:	fa ce f9 44 	sub	lr,sp,-1724
80009bc4:	fc 06 00 36 	add	r6,lr,r6<<0x3
80009bc8:	ec fc fd 8c 	ld.w	r12,r6[-628]
80009bcc:	50 7c       	stdsp	sp[0x1c],r12
80009bce:	ec f6 fd 88 	ld.w	r6,r6[-632]
80009bd2:	50 56       	stdsp	sp[0x14],r6
80009bd4:	c6 68       	rjmp	80009ca0 <_vfprintf_r+0x88c>
80009bd6:	41 09       	lddsp	r9,sp[0x40]
80009bd8:	59 f8       	cp.w	r8,31
80009bda:	e0 89 00 10 	brgt	80009bfa <_vfprintf_r+0x7e6>
80009bde:	f2 ca ff f8 	sub	r10,r9,-8
80009be2:	72 1b       	ld.w	r11,r9[0x4]
80009be4:	51 0a       	stdsp	sp[0x40],r10
80009be6:	72 09       	ld.w	r9,r9[0x0]
80009be8:	fa ca f9 44 	sub	r10,sp,-1724
80009bec:	50 7b       	stdsp	sp[0x1c],r11
80009bee:	50 59       	stdsp	sp[0x14],r9
80009bf0:	f4 08 00 39 	add	r9,r10,r8<<0x3
80009bf4:	40 5b       	lddsp	r11,sp[0x14]
80009bf6:	40 7a       	lddsp	r10,sp[0x1c]
80009bf8:	c4 78       	rjmp	80009c86 <_vfprintf_r+0x872>
80009bfa:	72 18       	ld.w	r8,r9[0x4]
80009bfc:	50 78       	stdsp	sp[0x1c],r8
80009bfe:	c4 c8       	rjmp	80009c96 <_vfprintf_r+0x882>
80009c00:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009c04:	40 3e       	lddsp	lr,sp[0xc]
80009c06:	58 0e       	cp.w	lr,0
80009c08:	c2 30       	breq	80009c4e <_vfprintf_r+0x83a>
80009c0a:	10 36       	cp.w	r6,r8
80009c0c:	c0 94       	brge	80009c1e <_vfprintf_r+0x80a>
80009c0e:	fa cc f9 44 	sub	r12,sp,-1724
80009c12:	f8 06 00 36 	add	r6,r12,r6<<0x3
80009c16:	ec fb fd 8c 	ld.w	r11,r6[-628]
80009c1a:	50 7b       	stdsp	sp[0x1c],r11
80009c1c:	cd 9b       	rjmp	80009bce <_vfprintf_r+0x7ba>
80009c1e:	fa c8 f9 50 	sub	r8,sp,-1712
80009c22:	1a d8       	st.w	--sp,r8
80009c24:	fa c8 fa b8 	sub	r8,sp,-1352
80009c28:	04 9a       	mov	r10,r2
80009c2a:	1a d8       	st.w	--sp,r8
80009c2c:	fa c8 fb b4 	sub	r8,sp,-1100
80009c30:	0c 9b       	mov	r11,r6
80009c32:	1a d8       	st.w	--sp,r8
80009c34:	0a 9c       	mov	r12,r5
80009c36:	fa c8 f9 40 	sub	r8,sp,-1728
80009c3a:	fa c9 ff b4 	sub	r9,sp,-76
80009c3e:	fe b0 fa 4f 	rcall	800090dc <get_arg>
80009c42:	2f dd       	sub	sp,-12
80009c44:	78 1a       	ld.w	r10,r12[0x4]
80009c46:	50 7a       	stdsp	sp[0x1c],r10
80009c48:	78 0c       	ld.w	r12,r12[0x0]
80009c4a:	50 5c       	stdsp	sp[0x14],r12
80009c4c:	c2 a8       	rjmp	80009ca0 <_vfprintf_r+0x88c>
80009c4e:	2f f7       	sub	r7,-1
80009c50:	10 39       	cp.w	r9,r8
80009c52:	c0 94       	brge	80009c64 <_vfprintf_r+0x850>
80009c54:	fa c9 f9 44 	sub	r9,sp,-1724
80009c58:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009c5c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80009c60:	50 78       	stdsp	sp[0x1c],r8
80009c62:	cb 6b       	rjmp	80009bce <_vfprintf_r+0x7ba>
80009c64:	41 09       	lddsp	r9,sp[0x40]
80009c66:	59 f8       	cp.w	r8,31
80009c68:	e0 89 00 15 	brgt	80009c92 <_vfprintf_r+0x87e>
80009c6c:	f2 ca ff f8 	sub	r10,r9,-8
80009c70:	72 16       	ld.w	r6,r9[0x4]
80009c72:	72 09       	ld.w	r9,r9[0x0]
80009c74:	51 0a       	stdsp	sp[0x40],r10
80009c76:	50 59       	stdsp	sp[0x14],r9
80009c78:	fa ce f9 44 	sub	lr,sp,-1724
80009c7c:	50 76       	stdsp	sp[0x1c],r6
80009c7e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80009c82:	40 5b       	lddsp	r11,sp[0x14]
80009c84:	0c 9a       	mov	r10,r6
80009c86:	f2 eb fd 88 	st.d	r9[-632],r10
80009c8a:	2f f8       	sub	r8,-1
80009c8c:	fb 48 06 b4 	st.w	sp[1716],r8
80009c90:	c0 88       	rjmp	80009ca0 <_vfprintf_r+0x88c>
80009c92:	72 1c       	ld.w	r12,r9[0x4]
80009c94:	50 7c       	stdsp	sp[0x1c],r12
80009c96:	f2 c8 ff f8 	sub	r8,r9,-8
80009c9a:	51 08       	stdsp	sp[0x40],r8
80009c9c:	72 09       	ld.w	r9,r9[0x0]
80009c9e:	50 59       	stdsp	sp[0x14],r9
80009ca0:	40 5b       	lddsp	r11,sp[0x14]
80009ca2:	40 7a       	lddsp	r10,sp[0x1c]
80009ca4:	e0 a0 1d 0a 	rcall	8000d6b8 <__isinfd>
80009ca8:	18 96       	mov	r6,r12
80009caa:	c1 50       	breq	80009cd4 <_vfprintf_r+0x8c0>
80009cac:	30 08       	mov	r8,0
80009cae:	30 09       	mov	r9,0
80009cb0:	40 5b       	lddsp	r11,sp[0x14]
80009cb2:	40 7a       	lddsp	r10,sp[0x1c]
80009cb4:	e0 a0 1f 8c 	rcall	8000dbcc <__avr32_f64_cmp_lt>
80009cb8:	c0 40       	breq	80009cc0 <_vfprintf_r+0x8ac>
80009cba:	32 d8       	mov	r8,45
80009cbc:	fb 68 06 bb 	st.b	sp[1723],r8
80009cc0:	4a f8       	lddpc	r8,80009d7c <_vfprintf_r+0x968>
80009cc2:	4b 06       	lddpc	r6,80009d80 <_vfprintf_r+0x96c>
80009cc4:	a7 d3       	cbr	r3,0x7
80009cc6:	e0 40 00 47 	cp.w	r0,71
80009cca:	f0 06 17 a0 	movle	r6,r8
80009cce:	30 32       	mov	r2,3
80009cd0:	e0 8f 06 d3 	bral	8000aa76 <_vfprintf_r+0x1662>
80009cd4:	40 5b       	lddsp	r11,sp[0x14]
80009cd6:	40 7a       	lddsp	r10,sp[0x1c]
80009cd8:	e0 a0 1d 05 	rcall	8000d6e2 <__isnand>
80009cdc:	c0 c0       	breq	80009cf4 <_vfprintf_r+0x8e0>
80009cde:	50 26       	stdsp	sp[0x8],r6
80009ce0:	4a 98       	lddpc	r8,80009d84 <_vfprintf_r+0x970>
80009ce2:	4a a6       	lddpc	r6,80009d88 <_vfprintf_r+0x974>
80009ce4:	a7 d3       	cbr	r3,0x7
80009ce6:	e0 40 00 47 	cp.w	r0,71
80009cea:	f0 06 17 a0 	movle	r6,r8
80009cee:	30 32       	mov	r2,3
80009cf0:	e0 8f 06 c9 	bral	8000aa82 <_vfprintf_r+0x166e>
80009cf4:	40 2a       	lddsp	r10,sp[0x8]
80009cf6:	5b fa       	cp.w	r10,-1
80009cf8:	c0 41       	brne	80009d00 <_vfprintf_r+0x8ec>
80009cfa:	30 69       	mov	r9,6
80009cfc:	50 29       	stdsp	sp[0x8],r9
80009cfe:	c1 18       	rjmp	80009d20 <_vfprintf_r+0x90c>
80009d00:	e0 40 00 47 	cp.w	r0,71
80009d04:	5f 09       	sreq	r9
80009d06:	e0 40 00 67 	cp.w	r0,103
80009d0a:	5f 08       	sreq	r8
80009d0c:	f3 e8 10 08 	or	r8,r9,r8
80009d10:	f8 08 18 00 	cp.b	r8,r12
80009d14:	c0 60       	breq	80009d20 <_vfprintf_r+0x90c>
80009d16:	40 28       	lddsp	r8,sp[0x8]
80009d18:	58 08       	cp.w	r8,0
80009d1a:	f9 b8 00 01 	moveq	r8,1
80009d1e:	50 28       	stdsp	sp[0x8],r8
80009d20:	40 78       	lddsp	r8,sp[0x1c]
80009d22:	40 59       	lddsp	r9,sp[0x14]
80009d24:	fa e9 06 94 	st.d	sp[1684],r8
80009d28:	a9 a3       	sbr	r3,0x8
80009d2a:	fa f8 06 94 	ld.w	r8,sp[1684]
80009d2e:	58 08       	cp.w	r8,0
80009d30:	c0 65       	brlt	80009d3c <_vfprintf_r+0x928>
80009d32:	40 5e       	lddsp	lr,sp[0x14]
80009d34:	30 0c       	mov	r12,0
80009d36:	50 6e       	stdsp	sp[0x18],lr
80009d38:	50 9c       	stdsp	sp[0x24],r12
80009d3a:	c0 78       	rjmp	80009d48 <_vfprintf_r+0x934>
80009d3c:	40 5b       	lddsp	r11,sp[0x14]
80009d3e:	32 da       	mov	r10,45
80009d40:	ee 1b 80 00 	eorh	r11,0x8000
80009d44:	50 9a       	stdsp	sp[0x24],r10
80009d46:	50 6b       	stdsp	sp[0x18],r11
80009d48:	e0 40 00 46 	cp.w	r0,70
80009d4c:	5f 09       	sreq	r9
80009d4e:	e0 40 00 66 	cp.w	r0,102
80009d52:	5f 08       	sreq	r8
80009d54:	f3 e8 10 08 	or	r8,r9,r8
80009d58:	50 48       	stdsp	sp[0x10],r8
80009d5a:	c0 40       	breq	80009d62 <_vfprintf_r+0x94e>
80009d5c:	40 22       	lddsp	r2,sp[0x8]
80009d5e:	30 39       	mov	r9,3
80009d60:	c1 a8       	rjmp	80009d94 <_vfprintf_r+0x980>
80009d62:	e0 40 00 45 	cp.w	r0,69
80009d66:	5f 09       	sreq	r9
80009d68:	e0 40 00 65 	cp.w	r0,101
80009d6c:	5f 08       	sreq	r8
80009d6e:	40 46       	lddsp	r6,sp[0x10]
80009d70:	10 49       	or	r9,r8
80009d72:	ec 09 18 00 	cp.b	r9,r6
80009d76:	c0 b1       	brne	80009d8c <_vfprintf_r+0x978>
80009d78:	40 22       	lddsp	r2,sp[0x8]
80009d7a:	c0 c8       	rjmp	80009d92 <_vfprintf_r+0x97e>
80009d7c:	80 00       	ld.sh	r0,r0[0x0]
80009d7e:	e8 d0 80 00 	satsub.w	r0,r4,-32768
80009d82:	e8 d4 80 00 	satsub.w	r4,r4,-32768
80009d86:	e8 d8 80 00 	satsub.w	r8,r4,-32768
80009d8a:	e8 dc 40 2e 	satsub.w	r12,r4,16430
80009d8e:	fc c2 ff ff 	sub	r2,lr,-1
80009d92:	30 29       	mov	r9,2
80009d94:	fa c8 f9 5c 	sub	r8,sp,-1700
80009d98:	1a d8       	st.w	--sp,r8
80009d9a:	fa c8 f9 54 	sub	r8,sp,-1708
80009d9e:	1a d8       	st.w	--sp,r8
80009da0:	fa c8 f9 4c 	sub	r8,sp,-1716
80009da4:	0a 9c       	mov	r12,r5
80009da6:	1a d8       	st.w	--sp,r8
80009da8:	04 98       	mov	r8,r2
80009daa:	40 9b       	lddsp	r11,sp[0x24]
80009dac:	40 aa       	lddsp	r10,sp[0x28]
80009dae:	e0 a0 0b bf 	rcall	8000b52c <_dtoa_r>
80009db2:	e0 40 00 47 	cp.w	r0,71
80009db6:	5f 19       	srne	r9
80009db8:	e0 40 00 67 	cp.w	r0,103
80009dbc:	5f 18       	srne	r8
80009dbe:	18 96       	mov	r6,r12
80009dc0:	2f dd       	sub	sp,-12
80009dc2:	f3 e8 00 08 	and	r8,r9,r8
80009dc6:	c0 41       	brne	80009dce <_vfprintf_r+0x9ba>
80009dc8:	ed b3 00 00 	bld	r3,0x0
80009dcc:	c3 01       	brne	80009e2c <_vfprintf_r+0xa18>
80009dce:	ec 02 00 0c 	add	r12,r6,r2
80009dd2:	50 3c       	stdsp	sp[0xc],r12
80009dd4:	40 4b       	lddsp	r11,sp[0x10]
80009dd6:	58 0b       	cp.w	r11,0
80009dd8:	c1 50       	breq	80009e02 <_vfprintf_r+0x9ee>
80009dda:	0d 89       	ld.ub	r9,r6[0x0]
80009ddc:	33 08       	mov	r8,48
80009dde:	f0 09 18 00 	cp.b	r9,r8
80009de2:	c0 b1       	brne	80009df8 <_vfprintf_r+0x9e4>
80009de4:	30 08       	mov	r8,0
80009de6:	30 09       	mov	r9,0
80009de8:	40 6b       	lddsp	r11,sp[0x18]
80009dea:	40 7a       	lddsp	r10,sp[0x1c]
80009dec:	e0 a0 1e dd 	rcall	8000dba6 <__avr32_f64_cmp_eq>
80009df0:	fb b2 00 01 	rsubeq	r2,1
80009df4:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80009df8:	40 3a       	lddsp	r10,sp[0xc]
80009dfa:	fa f8 06 ac 	ld.w	r8,sp[1708]
80009dfe:	10 0a       	add	r10,r8
80009e00:	50 3a       	stdsp	sp[0xc],r10
80009e02:	40 6b       	lddsp	r11,sp[0x18]
80009e04:	30 08       	mov	r8,0
80009e06:	30 09       	mov	r9,0
80009e08:	40 7a       	lddsp	r10,sp[0x1c]
80009e0a:	e0 a0 1e ce 	rcall	8000dba6 <__avr32_f64_cmp_eq>
80009e0e:	c0 90       	breq	80009e20 <_vfprintf_r+0xa0c>
80009e10:	40 39       	lddsp	r9,sp[0xc]
80009e12:	fb 49 06 a4 	st.w	sp[1700],r9
80009e16:	c0 58       	rjmp	80009e20 <_vfprintf_r+0xa0c>
80009e18:	10 c9       	st.b	r8++,r9
80009e1a:	fb 48 06 a4 	st.w	sp[1700],r8
80009e1e:	c0 28       	rjmp	80009e22 <_vfprintf_r+0xa0e>
80009e20:	33 09       	mov	r9,48
80009e22:	fa f8 06 a4 	ld.w	r8,sp[1700]
80009e26:	40 3e       	lddsp	lr,sp[0xc]
80009e28:	1c 38       	cp.w	r8,lr
80009e2a:	cf 73       	brcs	80009e18 <_vfprintf_r+0xa04>
80009e2c:	e0 40 00 47 	cp.w	r0,71
80009e30:	5f 09       	sreq	r9
80009e32:	e0 40 00 67 	cp.w	r0,103
80009e36:	5f 08       	sreq	r8
80009e38:	f3 e8 10 08 	or	r8,r9,r8
80009e3c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80009e40:	0c 19       	sub	r9,r6
80009e42:	50 69       	stdsp	sp[0x18],r9
80009e44:	58 08       	cp.w	r8,0
80009e46:	c0 b0       	breq	80009e5c <_vfprintf_r+0xa48>
80009e48:	fa f8 06 ac 	ld.w	r8,sp[1708]
80009e4c:	5b d8       	cp.w	r8,-3
80009e4e:	c0 55       	brlt	80009e58 <_vfprintf_r+0xa44>
80009e50:	40 2c       	lddsp	r12,sp[0x8]
80009e52:	18 38       	cp.w	r8,r12
80009e54:	e0 8a 00 6a 	brle	80009f28 <_vfprintf_r+0xb14>
80009e58:	20 20       	sub	r0,2
80009e5a:	c0 58       	rjmp	80009e64 <_vfprintf_r+0xa50>
80009e5c:	e0 40 00 65 	cp.w	r0,101
80009e60:	e0 89 00 46 	brgt	80009eec <_vfprintf_r+0xad8>
80009e64:	fa fb 06 ac 	ld.w	r11,sp[1708]
80009e68:	fb 60 06 9c 	st.b	sp[1692],r0
80009e6c:	20 1b       	sub	r11,1
80009e6e:	fb 4b 06 ac 	st.w	sp[1708],r11
80009e72:	c0 47       	brpl	80009e7a <_vfprintf_r+0xa66>
80009e74:	5c 3b       	neg	r11
80009e76:	32 d8       	mov	r8,45
80009e78:	c0 28       	rjmp	80009e7c <_vfprintf_r+0xa68>
80009e7a:	32 b8       	mov	r8,43
80009e7c:	fb 68 06 9d 	st.b	sp[1693],r8
80009e80:	58 9b       	cp.w	r11,9
80009e82:	e0 8a 00 1d 	brle	80009ebc <_vfprintf_r+0xaa8>
80009e86:	fa c9 fa 35 	sub	r9,sp,-1483
80009e8a:	30 aa       	mov	r10,10
80009e8c:	12 98       	mov	r8,r9
80009e8e:	0e 9c       	mov	r12,r7
80009e90:	0c 92       	mov	r2,r6
80009e92:	f6 0a 0c 06 	divs	r6,r11,r10
80009e96:	0e 9b       	mov	r11,r7
80009e98:	2d 0b       	sub	r11,-48
80009e9a:	10 fb       	st.b	--r8,r11
80009e9c:	0c 9b       	mov	r11,r6
80009e9e:	58 96       	cp.w	r6,9
80009ea0:	fe 99 ff f9 	brgt	80009e92 <_vfprintf_r+0xa7e>
80009ea4:	2d 0b       	sub	r11,-48
80009ea6:	18 97       	mov	r7,r12
80009ea8:	04 96       	mov	r6,r2
80009eaa:	10 fb       	st.b	--r8,r11
80009eac:	fa ca f9 62 	sub	r10,sp,-1694
80009eb0:	c0 38       	rjmp	80009eb6 <_vfprintf_r+0xaa2>
80009eb2:	11 3b       	ld.ub	r11,r8++
80009eb4:	14 cb       	st.b	r10++,r11
80009eb6:	12 38       	cp.w	r8,r9
80009eb8:	cf d3       	brcs	80009eb2 <_vfprintf_r+0xa9e>
80009eba:	c0 98       	rjmp	80009ecc <_vfprintf_r+0xab8>
80009ebc:	2d 0b       	sub	r11,-48
80009ebe:	33 08       	mov	r8,48
80009ec0:	fb 6b 06 9f 	st.b	sp[1695],r11
80009ec4:	fb 68 06 9e 	st.b	sp[1694],r8
80009ec8:	fa ca f9 60 	sub	r10,sp,-1696
80009ecc:	fa c8 f9 64 	sub	r8,sp,-1692
80009ed0:	f4 08 01 08 	sub	r8,r10,r8
80009ed4:	50 e8       	stdsp	sp[0x38],r8
80009ed6:	10 92       	mov	r2,r8
80009ed8:	40 6b       	lddsp	r11,sp[0x18]
80009eda:	16 02       	add	r2,r11
80009edc:	58 1b       	cp.w	r11,1
80009ede:	e0 89 00 05 	brgt	80009ee8 <_vfprintf_r+0xad4>
80009ee2:	ed b3 00 00 	bld	r3,0x0
80009ee6:	c3 51       	brne	80009f50 <_vfprintf_r+0xb3c>
80009ee8:	2f f2       	sub	r2,-1
80009eea:	c3 38       	rjmp	80009f50 <_vfprintf_r+0xb3c>
80009eec:	e0 40 00 66 	cp.w	r0,102
80009ef0:	c1 c1       	brne	80009f28 <_vfprintf_r+0xb14>
80009ef2:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009ef6:	58 02       	cp.w	r2,0
80009ef8:	e0 8a 00 0c 	brle	80009f10 <_vfprintf_r+0xafc>
80009efc:	40 2a       	lddsp	r10,sp[0x8]
80009efe:	58 0a       	cp.w	r10,0
80009f00:	c0 41       	brne	80009f08 <_vfprintf_r+0xaf4>
80009f02:	ed b3 00 00 	bld	r3,0x0
80009f06:	c2 51       	brne	80009f50 <_vfprintf_r+0xb3c>
80009f08:	2f f2       	sub	r2,-1
80009f0a:	40 29       	lddsp	r9,sp[0x8]
80009f0c:	12 02       	add	r2,r9
80009f0e:	c0 b8       	rjmp	80009f24 <_vfprintf_r+0xb10>
80009f10:	40 28       	lddsp	r8,sp[0x8]
80009f12:	58 08       	cp.w	r8,0
80009f14:	c0 61       	brne	80009f20 <_vfprintf_r+0xb0c>
80009f16:	ed b3 00 00 	bld	r3,0x0
80009f1a:	c0 30       	breq	80009f20 <_vfprintf_r+0xb0c>
80009f1c:	30 12       	mov	r2,1
80009f1e:	c1 98       	rjmp	80009f50 <_vfprintf_r+0xb3c>
80009f20:	40 22       	lddsp	r2,sp[0x8]
80009f22:	2f e2       	sub	r2,-2
80009f24:	36 60       	mov	r0,102
80009f26:	c1 58       	rjmp	80009f50 <_vfprintf_r+0xb3c>
80009f28:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009f2c:	40 6e       	lddsp	lr,sp[0x18]
80009f2e:	1c 32       	cp.w	r2,lr
80009f30:	c0 65       	brlt	80009f3c <_vfprintf_r+0xb28>
80009f32:	ed b3 00 00 	bld	r3,0x0
80009f36:	f7 b2 00 ff 	subeq	r2,-1
80009f3a:	c0 a8       	rjmp	80009f4e <_vfprintf_r+0xb3a>
80009f3c:	e4 08 11 02 	rsub	r8,r2,2
80009f40:	40 6c       	lddsp	r12,sp[0x18]
80009f42:	58 02       	cp.w	r2,0
80009f44:	f0 02 17 a0 	movle	r2,r8
80009f48:	f9 b2 09 01 	movgt	r2,1
80009f4c:	18 02       	add	r2,r12
80009f4e:	36 70       	mov	r0,103
80009f50:	40 9b       	lddsp	r11,sp[0x24]
80009f52:	58 0b       	cp.w	r11,0
80009f54:	e0 80 05 91 	breq	8000aa76 <_vfprintf_r+0x1662>
80009f58:	32 d8       	mov	r8,45
80009f5a:	fb 68 06 bb 	st.b	sp[1723],r8
80009f5e:	e0 8f 05 90 	bral	8000aa7e <_vfprintf_r+0x166a>
80009f62:	50 a7       	stdsp	sp[0x28],r7
80009f64:	04 95       	mov	r5,r2
80009f66:	0c 97       	mov	r7,r6
80009f68:	02 92       	mov	r2,r1
80009f6a:	08 96       	mov	r6,r4
80009f6c:	40 41       	lddsp	r1,sp[0x10]
80009f6e:	40 94       	lddsp	r4,sp[0x24]
80009f70:	0e 99       	mov	r9,r7
80009f72:	ed b3 00 05 	bld	r3,0x5
80009f76:	c4 81       	brne	8000a006 <_vfprintf_r+0xbf2>
80009f78:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009f7c:	40 3e       	lddsp	lr,sp[0xc]
80009f7e:	58 0e       	cp.w	lr,0
80009f80:	c1 d0       	breq	80009fba <_vfprintf_r+0xba6>
80009f82:	10 36       	cp.w	r6,r8
80009f84:	c0 64       	brge	80009f90 <_vfprintf_r+0xb7c>
80009f86:	fa cc f9 44 	sub	r12,sp,-1724
80009f8a:	f8 06 00 36 	add	r6,r12,r6<<0x3
80009f8e:	c1 d8       	rjmp	80009fc8 <_vfprintf_r+0xbb4>
80009f90:	fa c8 f9 50 	sub	r8,sp,-1712
80009f94:	1a d8       	st.w	--sp,r8
80009f96:	fa c8 fa b8 	sub	r8,sp,-1352
80009f9a:	04 9a       	mov	r10,r2
80009f9c:	1a d8       	st.w	--sp,r8
80009f9e:	fa c8 fb b4 	sub	r8,sp,-1100
80009fa2:	0c 9b       	mov	r11,r6
80009fa4:	1a d8       	st.w	--sp,r8
80009fa6:	0a 9c       	mov	r12,r5
80009fa8:	fa c8 f9 40 	sub	r8,sp,-1728
80009fac:	fa c9 ff b4 	sub	r9,sp,-76
80009fb0:	fe b0 f8 96 	rcall	800090dc <get_arg>
80009fb4:	2f dd       	sub	sp,-12
80009fb6:	78 0a       	ld.w	r10,r12[0x0]
80009fb8:	c2 08       	rjmp	80009ff8 <_vfprintf_r+0xbe4>
80009fba:	2f f7       	sub	r7,-1
80009fbc:	10 39       	cp.w	r9,r8
80009fbe:	c0 84       	brge	80009fce <_vfprintf_r+0xbba>
80009fc0:	fa cb f9 44 	sub	r11,sp,-1724
80009fc4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009fc8:	ec fa fd 88 	ld.w	r10,r6[-632]
80009fcc:	c1 68       	rjmp	80009ff8 <_vfprintf_r+0xbe4>
80009fce:	41 09       	lddsp	r9,sp[0x40]
80009fd0:	59 f8       	cp.w	r8,31
80009fd2:	e0 89 00 10 	brgt	80009ff2 <_vfprintf_r+0xbde>
80009fd6:	f2 ca ff fc 	sub	r10,r9,-4
80009fda:	51 0a       	stdsp	sp[0x40],r10
80009fdc:	fa c6 f9 44 	sub	r6,sp,-1724
80009fe0:	72 0a       	ld.w	r10,r9[0x0]
80009fe2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009fe6:	f3 4a fd 88 	st.w	r9[-632],r10
80009fea:	2f f8       	sub	r8,-1
80009fec:	fb 48 06 b4 	st.w	sp[1716],r8
80009ff0:	c0 48       	rjmp	80009ff8 <_vfprintf_r+0xbe4>
80009ff2:	72 0a       	ld.w	r10,r9[0x0]
80009ff4:	2f c9       	sub	r9,-4
80009ff6:	51 09       	stdsp	sp[0x40],r9
80009ff8:	40 be       	lddsp	lr,sp[0x2c]
80009ffa:	1c 98       	mov	r8,lr
80009ffc:	95 1e       	st.w	r10[0x4],lr
80009ffe:	bf 58       	asr	r8,0x1f
8000a000:	95 08       	st.w	r10[0x0],r8
8000a002:	fe 9f fa 93 	bral	80009528 <_vfprintf_r+0x114>
8000a006:	ed b3 00 04 	bld	r3,0x4
8000a00a:	c4 80       	breq	8000a09a <_vfprintf_r+0xc86>
8000a00c:	e2 13 00 40 	andl	r3,0x40,COH
8000a010:	c4 50       	breq	8000a09a <_vfprintf_r+0xc86>
8000a012:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a016:	40 3c       	lddsp	r12,sp[0xc]
8000a018:	58 0c       	cp.w	r12,0
8000a01a:	c1 d0       	breq	8000a054 <_vfprintf_r+0xc40>
8000a01c:	10 36       	cp.w	r6,r8
8000a01e:	c0 64       	brge	8000a02a <_vfprintf_r+0xc16>
8000a020:	fa cb f9 44 	sub	r11,sp,-1724
8000a024:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a028:	c1 d8       	rjmp	8000a062 <_vfprintf_r+0xc4e>
8000a02a:	fa c8 f9 50 	sub	r8,sp,-1712
8000a02e:	1a d8       	st.w	--sp,r8
8000a030:	fa c8 fa b8 	sub	r8,sp,-1352
8000a034:	04 9a       	mov	r10,r2
8000a036:	1a d8       	st.w	--sp,r8
8000a038:	fa c8 fb b4 	sub	r8,sp,-1100
8000a03c:	0c 9b       	mov	r11,r6
8000a03e:	1a d8       	st.w	--sp,r8
8000a040:	0a 9c       	mov	r12,r5
8000a042:	fa c8 f9 40 	sub	r8,sp,-1728
8000a046:	fa c9 ff b4 	sub	r9,sp,-76
8000a04a:	fe b0 f8 49 	rcall	800090dc <get_arg>
8000a04e:	2f dd       	sub	sp,-12
8000a050:	78 0a       	ld.w	r10,r12[0x0]
8000a052:	c2 08       	rjmp	8000a092 <_vfprintf_r+0xc7e>
8000a054:	2f f7       	sub	r7,-1
8000a056:	10 39       	cp.w	r9,r8
8000a058:	c0 84       	brge	8000a068 <_vfprintf_r+0xc54>
8000a05a:	fa ca f9 44 	sub	r10,sp,-1724
8000a05e:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000a062:	ec fa fd 88 	ld.w	r10,r6[-632]
8000a066:	c1 68       	rjmp	8000a092 <_vfprintf_r+0xc7e>
8000a068:	41 09       	lddsp	r9,sp[0x40]
8000a06a:	59 f8       	cp.w	r8,31
8000a06c:	e0 89 00 10 	brgt	8000a08c <_vfprintf_r+0xc78>
8000a070:	f2 ca ff fc 	sub	r10,r9,-4
8000a074:	51 0a       	stdsp	sp[0x40],r10
8000a076:	fa c6 f9 44 	sub	r6,sp,-1724
8000a07a:	72 0a       	ld.w	r10,r9[0x0]
8000a07c:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a080:	f3 4a fd 88 	st.w	r9[-632],r10
8000a084:	2f f8       	sub	r8,-1
8000a086:	fb 48 06 b4 	st.w	sp[1716],r8
8000a08a:	c0 48       	rjmp	8000a092 <_vfprintf_r+0xc7e>
8000a08c:	72 0a       	ld.w	r10,r9[0x0]
8000a08e:	2f c9       	sub	r9,-4
8000a090:	51 09       	stdsp	sp[0x40],r9
8000a092:	40 be       	lddsp	lr,sp[0x2c]
8000a094:	b4 0e       	st.h	r10[0x0],lr
8000a096:	fe 9f fa 49 	bral	80009528 <_vfprintf_r+0x114>
8000a09a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a09e:	40 3c       	lddsp	r12,sp[0xc]
8000a0a0:	58 0c       	cp.w	r12,0
8000a0a2:	c1 d0       	breq	8000a0dc <_vfprintf_r+0xcc8>
8000a0a4:	10 36       	cp.w	r6,r8
8000a0a6:	c0 64       	brge	8000a0b2 <_vfprintf_r+0xc9e>
8000a0a8:	fa cb f9 44 	sub	r11,sp,-1724
8000a0ac:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a0b0:	c1 d8       	rjmp	8000a0ea <_vfprintf_r+0xcd6>
8000a0b2:	fa c8 f9 50 	sub	r8,sp,-1712
8000a0b6:	1a d8       	st.w	--sp,r8
8000a0b8:	fa c8 fa b8 	sub	r8,sp,-1352
8000a0bc:	04 9a       	mov	r10,r2
8000a0be:	1a d8       	st.w	--sp,r8
8000a0c0:	fa c8 fb b4 	sub	r8,sp,-1100
8000a0c4:	0c 9b       	mov	r11,r6
8000a0c6:	1a d8       	st.w	--sp,r8
8000a0c8:	0a 9c       	mov	r12,r5
8000a0ca:	fa c8 f9 40 	sub	r8,sp,-1728
8000a0ce:	fa c9 ff b4 	sub	r9,sp,-76
8000a0d2:	fe b0 f8 05 	rcall	800090dc <get_arg>
8000a0d6:	2f dd       	sub	sp,-12
8000a0d8:	78 0a       	ld.w	r10,r12[0x0]
8000a0da:	c2 08       	rjmp	8000a11a <_vfprintf_r+0xd06>
8000a0dc:	2f f7       	sub	r7,-1
8000a0de:	10 39       	cp.w	r9,r8
8000a0e0:	c0 84       	brge	8000a0f0 <_vfprintf_r+0xcdc>
8000a0e2:	fa ca f9 44 	sub	r10,sp,-1724
8000a0e6:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000a0ea:	ec fa fd 88 	ld.w	r10,r6[-632]
8000a0ee:	c1 68       	rjmp	8000a11a <_vfprintf_r+0xd06>
8000a0f0:	41 09       	lddsp	r9,sp[0x40]
8000a0f2:	59 f8       	cp.w	r8,31
8000a0f4:	e0 89 00 10 	brgt	8000a114 <_vfprintf_r+0xd00>
8000a0f8:	f2 ca ff fc 	sub	r10,r9,-4
8000a0fc:	51 0a       	stdsp	sp[0x40],r10
8000a0fe:	fa c6 f9 44 	sub	r6,sp,-1724
8000a102:	72 0a       	ld.w	r10,r9[0x0]
8000a104:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a108:	f3 4a fd 88 	st.w	r9[-632],r10
8000a10c:	2f f8       	sub	r8,-1
8000a10e:	fb 48 06 b4 	st.w	sp[1716],r8
8000a112:	c0 48       	rjmp	8000a11a <_vfprintf_r+0xd06>
8000a114:	72 0a       	ld.w	r10,r9[0x0]
8000a116:	2f c9       	sub	r9,-4
8000a118:	51 09       	stdsp	sp[0x40],r9
8000a11a:	40 be       	lddsp	lr,sp[0x2c]
8000a11c:	95 0e       	st.w	r10[0x0],lr
8000a11e:	fe 9f fa 05 	bral	80009528 <_vfprintf_r+0x114>
8000a122:	50 a7       	stdsp	sp[0x28],r7
8000a124:	50 80       	stdsp	sp[0x20],r0
8000a126:	0c 97       	mov	r7,r6
8000a128:	04 95       	mov	r5,r2
8000a12a:	08 96       	mov	r6,r4
8000a12c:	02 92       	mov	r2,r1
8000a12e:	40 94       	lddsp	r4,sp[0x24]
8000a130:	10 90       	mov	r0,r8
8000a132:	40 41       	lddsp	r1,sp[0x10]
8000a134:	a5 a3       	sbr	r3,0x4
8000a136:	c0 a8       	rjmp	8000a14a <_vfprintf_r+0xd36>
8000a138:	50 a7       	stdsp	sp[0x28],r7
8000a13a:	50 80       	stdsp	sp[0x20],r0
8000a13c:	0c 97       	mov	r7,r6
8000a13e:	04 95       	mov	r5,r2
8000a140:	08 96       	mov	r6,r4
8000a142:	02 92       	mov	r2,r1
8000a144:	40 94       	lddsp	r4,sp[0x24]
8000a146:	10 90       	mov	r0,r8
8000a148:	40 41       	lddsp	r1,sp[0x10]
8000a14a:	ed b3 00 05 	bld	r3,0x5
8000a14e:	c5 d1       	brne	8000a208 <_vfprintf_r+0xdf4>
8000a150:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a154:	40 3c       	lddsp	r12,sp[0xc]
8000a156:	58 0c       	cp.w	r12,0
8000a158:	c2 60       	breq	8000a1a4 <_vfprintf_r+0xd90>
8000a15a:	10 36       	cp.w	r6,r8
8000a15c:	c0 a4       	brge	8000a170 <_vfprintf_r+0xd5c>
8000a15e:	fa cb f9 44 	sub	r11,sp,-1724
8000a162:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a166:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000a16a:	fa e9 00 00 	st.d	sp[0],r8
8000a16e:	c1 88       	rjmp	8000a19e <_vfprintf_r+0xd8a>
8000a170:	fa c8 f9 50 	sub	r8,sp,-1712
8000a174:	1a d8       	st.w	--sp,r8
8000a176:	fa c8 fa b8 	sub	r8,sp,-1352
8000a17a:	04 9a       	mov	r10,r2
8000a17c:	1a d8       	st.w	--sp,r8
8000a17e:	0c 9b       	mov	r11,r6
8000a180:	fa c8 fb b4 	sub	r8,sp,-1100
8000a184:	0a 9c       	mov	r12,r5
8000a186:	1a d8       	st.w	--sp,r8
8000a188:	fa c8 f9 40 	sub	r8,sp,-1728
8000a18c:	fa c9 ff b4 	sub	r9,sp,-76
8000a190:	fe b0 f7 a6 	rcall	800090dc <get_arg>
8000a194:	2f dd       	sub	sp,-12
8000a196:	f8 ea 00 00 	ld.d	r10,r12[0]
8000a19a:	fa eb 00 00 	st.d	sp[0],r10
8000a19e:	30 08       	mov	r8,0
8000a1a0:	e0 8f 03 db 	bral	8000a956 <_vfprintf_r+0x1542>
8000a1a4:	ee ca ff ff 	sub	r10,r7,-1
8000a1a8:	10 37       	cp.w	r7,r8
8000a1aa:	c0 b4       	brge	8000a1c0 <_vfprintf_r+0xdac>
8000a1ac:	fa c9 f9 44 	sub	r9,sp,-1724
8000a1b0:	14 97       	mov	r7,r10
8000a1b2:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a1b6:	ec ea fd 88 	ld.d	r10,r6[-632]
8000a1ba:	fa eb 00 00 	st.d	sp[0],r10
8000a1be:	c1 88       	rjmp	8000a1ee <_vfprintf_r+0xdda>
8000a1c0:	41 09       	lddsp	r9,sp[0x40]
8000a1c2:	59 f8       	cp.w	r8,31
8000a1c4:	e0 89 00 18 	brgt	8000a1f4 <_vfprintf_r+0xde0>
8000a1c8:	f2 e6 00 00 	ld.d	r6,r9[0]
8000a1cc:	f2 cb ff f8 	sub	r11,r9,-8
8000a1d0:	fa e7 00 00 	st.d	sp[0],r6
8000a1d4:	51 0b       	stdsp	sp[0x40],r11
8000a1d6:	fa c6 f9 44 	sub	r6,sp,-1724
8000a1da:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a1de:	fa e6 00 00 	ld.d	r6,sp[0]
8000a1e2:	f2 e7 fd 88 	st.d	r9[-632],r6
8000a1e6:	2f f8       	sub	r8,-1
8000a1e8:	14 97       	mov	r7,r10
8000a1ea:	fb 48 06 b4 	st.w	sp[1716],r8
8000a1ee:	40 38       	lddsp	r8,sp[0xc]
8000a1f0:	e0 8f 03 b3 	bral	8000a956 <_vfprintf_r+0x1542>
8000a1f4:	f2 e6 00 00 	ld.d	r6,r9[0]
8000a1f8:	40 38       	lddsp	r8,sp[0xc]
8000a1fa:	fa e7 00 00 	st.d	sp[0],r6
8000a1fe:	2f 89       	sub	r9,-8
8000a200:	14 97       	mov	r7,r10
8000a202:	51 09       	stdsp	sp[0x40],r9
8000a204:	e0 8f 03 a9 	bral	8000a956 <_vfprintf_r+0x1542>
8000a208:	ed b3 00 04 	bld	r3,0x4
8000a20c:	c1 61       	brne	8000a238 <_vfprintf_r+0xe24>
8000a20e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a212:	40 3e       	lddsp	lr,sp[0xc]
8000a214:	58 0e       	cp.w	lr,0
8000a216:	c0 80       	breq	8000a226 <_vfprintf_r+0xe12>
8000a218:	10 36       	cp.w	r6,r8
8000a21a:	c6 74       	brge	8000a2e8 <_vfprintf_r+0xed4>
8000a21c:	fa cc f9 44 	sub	r12,sp,-1724
8000a220:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000a224:	c8 08       	rjmp	8000a324 <_vfprintf_r+0xf10>
8000a226:	ee ca ff ff 	sub	r10,r7,-1
8000a22a:	10 37       	cp.w	r7,r8
8000a22c:	c7 f4       	brge	8000a32a <_vfprintf_r+0xf16>
8000a22e:	fa cb f9 44 	sub	r11,sp,-1724
8000a232:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a236:	c7 68       	rjmp	8000a322 <_vfprintf_r+0xf0e>
8000a238:	ed b3 00 06 	bld	r3,0x6
8000a23c:	c4 a1       	brne	8000a2d0 <_vfprintf_r+0xebc>
8000a23e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a242:	40 3c       	lddsp	r12,sp[0xc]
8000a244:	58 0c       	cp.w	r12,0
8000a246:	c1 d0       	breq	8000a280 <_vfprintf_r+0xe6c>
8000a248:	10 36       	cp.w	r6,r8
8000a24a:	c0 64       	brge	8000a256 <_vfprintf_r+0xe42>
8000a24c:	fa cb f9 44 	sub	r11,sp,-1724
8000a250:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a254:	c1 f8       	rjmp	8000a292 <_vfprintf_r+0xe7e>
8000a256:	fa c8 f9 50 	sub	r8,sp,-1712
8000a25a:	1a d8       	st.w	--sp,r8
8000a25c:	fa c8 fa b8 	sub	r8,sp,-1352
8000a260:	1a d8       	st.w	--sp,r8
8000a262:	fa c8 fb b4 	sub	r8,sp,-1100
8000a266:	1a d8       	st.w	--sp,r8
8000a268:	fa c8 f9 40 	sub	r8,sp,-1728
8000a26c:	fa c9 ff b4 	sub	r9,sp,-76
8000a270:	04 9a       	mov	r10,r2
8000a272:	0c 9b       	mov	r11,r6
8000a274:	0a 9c       	mov	r12,r5
8000a276:	fe b0 f7 33 	rcall	800090dc <get_arg>
8000a27a:	2f dd       	sub	sp,-12
8000a27c:	98 18       	ld.sh	r8,r12[0x2]
8000a27e:	c2 68       	rjmp	8000a2ca <_vfprintf_r+0xeb6>
8000a280:	ee ca ff ff 	sub	r10,r7,-1
8000a284:	10 37       	cp.w	r7,r8
8000a286:	c0 94       	brge	8000a298 <_vfprintf_r+0xe84>
8000a288:	fa c9 f9 44 	sub	r9,sp,-1724
8000a28c:	14 97       	mov	r7,r10
8000a28e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a292:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000a296:	c1 a8       	rjmp	8000a2ca <_vfprintf_r+0xeb6>
8000a298:	41 09       	lddsp	r9,sp[0x40]
8000a29a:	59 f8       	cp.w	r8,31
8000a29c:	e0 89 00 13 	brgt	8000a2c2 <_vfprintf_r+0xeae>
8000a2a0:	f2 cb ff fc 	sub	r11,r9,-4
8000a2a4:	51 0b       	stdsp	sp[0x40],r11
8000a2a6:	72 09       	ld.w	r9,r9[0x0]
8000a2a8:	fa c6 f9 44 	sub	r6,sp,-1724
8000a2ac:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000a2b0:	2f f8       	sub	r8,-1
8000a2b2:	f7 49 fd 88 	st.w	r11[-632],r9
8000a2b6:	fb 48 06 b4 	st.w	sp[1716],r8
8000a2ba:	14 97       	mov	r7,r10
8000a2bc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000a2c0:	c0 58       	rjmp	8000a2ca <_vfprintf_r+0xeb6>
8000a2c2:	92 18       	ld.sh	r8,r9[0x2]
8000a2c4:	14 97       	mov	r7,r10
8000a2c6:	2f c9       	sub	r9,-4
8000a2c8:	51 09       	stdsp	sp[0x40],r9
8000a2ca:	5c 78       	castu.h	r8
8000a2cc:	50 18       	stdsp	sp[0x4],r8
8000a2ce:	c4 68       	rjmp	8000a35a <_vfprintf_r+0xf46>
8000a2d0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a2d4:	40 3c       	lddsp	r12,sp[0xc]
8000a2d6:	58 0c       	cp.w	r12,0
8000a2d8:	c1 d0       	breq	8000a312 <_vfprintf_r+0xefe>
8000a2da:	10 36       	cp.w	r6,r8
8000a2dc:	c0 64       	brge	8000a2e8 <_vfprintf_r+0xed4>
8000a2de:	fa cb f9 44 	sub	r11,sp,-1724
8000a2e2:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a2e6:	c1 f8       	rjmp	8000a324 <_vfprintf_r+0xf10>
8000a2e8:	fa c8 f9 50 	sub	r8,sp,-1712
8000a2ec:	1a d8       	st.w	--sp,r8
8000a2ee:	fa c8 fa b8 	sub	r8,sp,-1352
8000a2f2:	0c 9b       	mov	r11,r6
8000a2f4:	1a d8       	st.w	--sp,r8
8000a2f6:	fa c8 fb b4 	sub	r8,sp,-1100
8000a2fa:	04 9a       	mov	r10,r2
8000a2fc:	1a d8       	st.w	--sp,r8
8000a2fe:	0a 9c       	mov	r12,r5
8000a300:	fa c8 f9 40 	sub	r8,sp,-1728
8000a304:	fa c9 ff b4 	sub	r9,sp,-76
8000a308:	fe b0 f6 ea 	rcall	800090dc <get_arg>
8000a30c:	2f dd       	sub	sp,-12
8000a30e:	78 0b       	ld.w	r11,r12[0x0]
8000a310:	c2 48       	rjmp	8000a358 <_vfprintf_r+0xf44>
8000a312:	ee ca ff ff 	sub	r10,r7,-1
8000a316:	10 37       	cp.w	r7,r8
8000a318:	c0 94       	brge	8000a32a <_vfprintf_r+0xf16>
8000a31a:	fa c9 f9 44 	sub	r9,sp,-1724
8000a31e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a322:	14 97       	mov	r7,r10
8000a324:	ec fb fd 88 	ld.w	r11,r6[-632]
8000a328:	c1 88       	rjmp	8000a358 <_vfprintf_r+0xf44>
8000a32a:	41 09       	lddsp	r9,sp[0x40]
8000a32c:	59 f8       	cp.w	r8,31
8000a32e:	e0 89 00 11 	brgt	8000a350 <_vfprintf_r+0xf3c>
8000a332:	f2 cb ff fc 	sub	r11,r9,-4
8000a336:	51 0b       	stdsp	sp[0x40],r11
8000a338:	fa c6 f9 44 	sub	r6,sp,-1724
8000a33c:	72 0b       	ld.w	r11,r9[0x0]
8000a33e:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a342:	f3 4b fd 88 	st.w	r9[-632],r11
8000a346:	2f f8       	sub	r8,-1
8000a348:	14 97       	mov	r7,r10
8000a34a:	fb 48 06 b4 	st.w	sp[1716],r8
8000a34e:	c0 58       	rjmp	8000a358 <_vfprintf_r+0xf44>
8000a350:	72 0b       	ld.w	r11,r9[0x0]
8000a352:	14 97       	mov	r7,r10
8000a354:	2f c9       	sub	r9,-4
8000a356:	51 09       	stdsp	sp[0x40],r9
8000a358:	50 1b       	stdsp	sp[0x4],r11
8000a35a:	30 0e       	mov	lr,0
8000a35c:	50 0e       	stdsp	sp[0x0],lr
8000a35e:	1c 98       	mov	r8,lr
8000a360:	e0 8f 02 fb 	bral	8000a956 <_vfprintf_r+0x1542>
8000a364:	50 a7       	stdsp	sp[0x28],r7
8000a366:	50 80       	stdsp	sp[0x20],r0
8000a368:	0c 97       	mov	r7,r6
8000a36a:	04 95       	mov	r5,r2
8000a36c:	08 96       	mov	r6,r4
8000a36e:	02 92       	mov	r2,r1
8000a370:	40 94       	lddsp	r4,sp[0x24]
8000a372:	40 41       	lddsp	r1,sp[0x10]
8000a374:	0e 99       	mov	r9,r7
8000a376:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a37a:	40 3c       	lddsp	r12,sp[0xc]
8000a37c:	58 0c       	cp.w	r12,0
8000a37e:	c1 d0       	breq	8000a3b8 <_vfprintf_r+0xfa4>
8000a380:	10 36       	cp.w	r6,r8
8000a382:	c0 64       	brge	8000a38e <_vfprintf_r+0xf7a>
8000a384:	fa cb f9 44 	sub	r11,sp,-1724
8000a388:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a38c:	c1 d8       	rjmp	8000a3c6 <_vfprintf_r+0xfb2>
8000a38e:	fa c8 f9 50 	sub	r8,sp,-1712
8000a392:	1a d8       	st.w	--sp,r8
8000a394:	fa c8 fa b8 	sub	r8,sp,-1352
8000a398:	1a d8       	st.w	--sp,r8
8000a39a:	fa c8 fb b4 	sub	r8,sp,-1100
8000a39e:	1a d8       	st.w	--sp,r8
8000a3a0:	fa c9 ff b4 	sub	r9,sp,-76
8000a3a4:	fa c8 f9 40 	sub	r8,sp,-1728
8000a3a8:	04 9a       	mov	r10,r2
8000a3aa:	0c 9b       	mov	r11,r6
8000a3ac:	0a 9c       	mov	r12,r5
8000a3ae:	fe b0 f6 97 	rcall	800090dc <get_arg>
8000a3b2:	2f dd       	sub	sp,-12
8000a3b4:	78 09       	ld.w	r9,r12[0x0]
8000a3b6:	c2 18       	rjmp	8000a3f8 <_vfprintf_r+0xfe4>
8000a3b8:	2f f7       	sub	r7,-1
8000a3ba:	10 39       	cp.w	r9,r8
8000a3bc:	c0 84       	brge	8000a3cc <_vfprintf_r+0xfb8>
8000a3be:	fa ca f9 44 	sub	r10,sp,-1724
8000a3c2:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000a3c6:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000a3ca:	c1 78       	rjmp	8000a3f8 <_vfprintf_r+0xfe4>
8000a3cc:	41 09       	lddsp	r9,sp[0x40]
8000a3ce:	59 f8       	cp.w	r8,31
8000a3d0:	e0 89 00 10 	brgt	8000a3f0 <_vfprintf_r+0xfdc>
8000a3d4:	f2 ca ff fc 	sub	r10,r9,-4
8000a3d8:	51 0a       	stdsp	sp[0x40],r10
8000a3da:	fa c6 f9 44 	sub	r6,sp,-1724
8000a3de:	72 09       	ld.w	r9,r9[0x0]
8000a3e0:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000a3e4:	f5 49 fd 88 	st.w	r10[-632],r9
8000a3e8:	2f f8       	sub	r8,-1
8000a3ea:	fb 48 06 b4 	st.w	sp[1716],r8
8000a3ee:	c0 58       	rjmp	8000a3f8 <_vfprintf_r+0xfe4>
8000a3f0:	f2 c8 ff fc 	sub	r8,r9,-4
8000a3f4:	51 08       	stdsp	sp[0x40],r8
8000a3f6:	72 09       	ld.w	r9,r9[0x0]
8000a3f8:	33 08       	mov	r8,48
8000a3fa:	fb 68 06 b8 	st.b	sp[1720],r8
8000a3fe:	37 88       	mov	r8,120
8000a400:	30 0e       	mov	lr,0
8000a402:	fb 68 06 b9 	st.b	sp[1721],r8
8000a406:	4c ac       	lddpc	r12,8000a52c <_vfprintf_r+0x1118>
8000a408:	50 19       	stdsp	sp[0x4],r9
8000a40a:	a1 b3       	sbr	r3,0x1
8000a40c:	50 0e       	stdsp	sp[0x0],lr
8000a40e:	50 dc       	stdsp	sp[0x34],r12
8000a410:	30 28       	mov	r8,2
8000a412:	37 80       	mov	r0,120
8000a414:	e0 8f 02 a1 	bral	8000a956 <_vfprintf_r+0x1542>
8000a418:	50 a7       	stdsp	sp[0x28],r7
8000a41a:	50 80       	stdsp	sp[0x20],r0
8000a41c:	10 90       	mov	r0,r8
8000a41e:	30 08       	mov	r8,0
8000a420:	fb 68 06 bb 	st.b	sp[1723],r8
8000a424:	0c 97       	mov	r7,r6
8000a426:	04 95       	mov	r5,r2
8000a428:	08 96       	mov	r6,r4
8000a42a:	02 92       	mov	r2,r1
8000a42c:	40 94       	lddsp	r4,sp[0x24]
8000a42e:	40 41       	lddsp	r1,sp[0x10]
8000a430:	0e 99       	mov	r9,r7
8000a432:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a436:	40 3b       	lddsp	r11,sp[0xc]
8000a438:	58 0b       	cp.w	r11,0
8000a43a:	c1 d0       	breq	8000a474 <_vfprintf_r+0x1060>
8000a43c:	10 36       	cp.w	r6,r8
8000a43e:	c0 64       	brge	8000a44a <_vfprintf_r+0x1036>
8000a440:	fa ca f9 44 	sub	r10,sp,-1724
8000a444:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000a448:	c1 d8       	rjmp	8000a482 <_vfprintf_r+0x106e>
8000a44a:	fa c8 f9 50 	sub	r8,sp,-1712
8000a44e:	1a d8       	st.w	--sp,r8
8000a450:	fa c8 fa b8 	sub	r8,sp,-1352
8000a454:	1a d8       	st.w	--sp,r8
8000a456:	fa c8 fb b4 	sub	r8,sp,-1100
8000a45a:	0c 9b       	mov	r11,r6
8000a45c:	1a d8       	st.w	--sp,r8
8000a45e:	04 9a       	mov	r10,r2
8000a460:	fa c8 f9 40 	sub	r8,sp,-1728
8000a464:	fa c9 ff b4 	sub	r9,sp,-76
8000a468:	0a 9c       	mov	r12,r5
8000a46a:	fe b0 f6 39 	rcall	800090dc <get_arg>
8000a46e:	2f dd       	sub	sp,-12
8000a470:	78 06       	ld.w	r6,r12[0x0]
8000a472:	c2 08       	rjmp	8000a4b2 <_vfprintf_r+0x109e>
8000a474:	2f f7       	sub	r7,-1
8000a476:	10 39       	cp.w	r9,r8
8000a478:	c0 84       	brge	8000a488 <_vfprintf_r+0x1074>
8000a47a:	fa c9 f9 44 	sub	r9,sp,-1724
8000a47e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a482:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000a486:	c1 68       	rjmp	8000a4b2 <_vfprintf_r+0x109e>
8000a488:	41 09       	lddsp	r9,sp[0x40]
8000a48a:	59 f8       	cp.w	r8,31
8000a48c:	e0 89 00 10 	brgt	8000a4ac <_vfprintf_r+0x1098>
8000a490:	f2 ca ff fc 	sub	r10,r9,-4
8000a494:	51 0a       	stdsp	sp[0x40],r10
8000a496:	72 06       	ld.w	r6,r9[0x0]
8000a498:	fa ce f9 44 	sub	lr,sp,-1724
8000a49c:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000a4a0:	f3 46 fd 88 	st.w	r9[-632],r6
8000a4a4:	2f f8       	sub	r8,-1
8000a4a6:	fb 48 06 b4 	st.w	sp[1716],r8
8000a4aa:	c0 48       	rjmp	8000a4b2 <_vfprintf_r+0x109e>
8000a4ac:	72 06       	ld.w	r6,r9[0x0]
8000a4ae:	2f c9       	sub	r9,-4
8000a4b0:	51 09       	stdsp	sp[0x40],r9
8000a4b2:	40 2c       	lddsp	r12,sp[0x8]
8000a4b4:	58 0c       	cp.w	r12,0
8000a4b6:	c1 05       	brlt	8000a4d6 <_vfprintf_r+0x10c2>
8000a4b8:	18 9a       	mov	r10,r12
8000a4ba:	30 0b       	mov	r11,0
8000a4bc:	0c 9c       	mov	r12,r6
8000a4be:	e0 a0 14 67 	rcall	8000cd8c <memchr>
8000a4c2:	e0 80 02 dd 	breq	8000aa7c <_vfprintf_r+0x1668>
8000a4c6:	f8 06 01 02 	sub	r2,r12,r6
8000a4ca:	40 2b       	lddsp	r11,sp[0x8]
8000a4cc:	16 32       	cp.w	r2,r11
8000a4ce:	e0 89 02 d7 	brgt	8000aa7c <_vfprintf_r+0x1668>
8000a4d2:	e0 8f 02 d2 	bral	8000aa76 <_vfprintf_r+0x1662>
8000a4d6:	30 0a       	mov	r10,0
8000a4d8:	0c 9c       	mov	r12,r6
8000a4da:	50 2a       	stdsp	sp[0x8],r10
8000a4dc:	e0 a0 19 4e 	rcall	8000d778 <strlen>
8000a4e0:	18 92       	mov	r2,r12
8000a4e2:	e0 8f 02 d0 	bral	8000aa82 <_vfprintf_r+0x166e>
8000a4e6:	50 a7       	stdsp	sp[0x28],r7
8000a4e8:	50 80       	stdsp	sp[0x20],r0
8000a4ea:	0c 97       	mov	r7,r6
8000a4ec:	04 95       	mov	r5,r2
8000a4ee:	08 96       	mov	r6,r4
8000a4f0:	02 92       	mov	r2,r1
8000a4f2:	40 94       	lddsp	r4,sp[0x24]
8000a4f4:	10 90       	mov	r0,r8
8000a4f6:	40 41       	lddsp	r1,sp[0x10]
8000a4f8:	a5 a3       	sbr	r3,0x4
8000a4fa:	c0 a8       	rjmp	8000a50e <_vfprintf_r+0x10fa>
8000a4fc:	50 a7       	stdsp	sp[0x28],r7
8000a4fe:	50 80       	stdsp	sp[0x20],r0
8000a500:	0c 97       	mov	r7,r6
8000a502:	04 95       	mov	r5,r2
8000a504:	08 96       	mov	r6,r4
8000a506:	02 92       	mov	r2,r1
8000a508:	40 94       	lddsp	r4,sp[0x24]
8000a50a:	10 90       	mov	r0,r8
8000a50c:	40 41       	lddsp	r1,sp[0x10]
8000a50e:	ed b3 00 05 	bld	r3,0x5
8000a512:	c5 71       	brne	8000a5c0 <_vfprintf_r+0x11ac>
8000a514:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a518:	40 39       	lddsp	r9,sp[0xc]
8000a51a:	58 09       	cp.w	r9,0
8000a51c:	c2 20       	breq	8000a560 <_vfprintf_r+0x114c>
8000a51e:	10 36       	cp.w	r6,r8
8000a520:	c0 84       	brge	8000a530 <_vfprintf_r+0x111c>
8000a522:	fa c8 f9 44 	sub	r8,sp,-1724
8000a526:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000a52a:	c2 48       	rjmp	8000a572 <_vfprintf_r+0x115e>
8000a52c:	80 00       	ld.sh	r0,r0[0x0]
8000a52e:	e8 e0 fa c8 	ld.d	r0,r4[-1336]
8000a532:	f9 50 1a d8 	st.h	r12[6872],r0
8000a536:	fa c8 fa b8 	sub	r8,sp,-1352
8000a53a:	1a d8       	st.w	--sp,r8
8000a53c:	fa c8 fb b4 	sub	r8,sp,-1100
8000a540:	1a d8       	st.w	--sp,r8
8000a542:	fa c8 f9 40 	sub	r8,sp,-1728
8000a546:	fa c9 ff b4 	sub	r9,sp,-76
8000a54a:	04 9a       	mov	r10,r2
8000a54c:	0c 9b       	mov	r11,r6
8000a54e:	0a 9c       	mov	r12,r5
8000a550:	fe b0 f5 c6 	rcall	800090dc <get_arg>
8000a554:	2f dd       	sub	sp,-12
8000a556:	f8 e8 00 00 	ld.d	r8,r12[0]
8000a55a:	fa e9 00 00 	st.d	sp[0],r8
8000a55e:	c2 e8       	rjmp	8000a5ba <_vfprintf_r+0x11a6>
8000a560:	ee ca ff ff 	sub	r10,r7,-1
8000a564:	10 37       	cp.w	r7,r8
8000a566:	c0 b4       	brge	8000a57c <_vfprintf_r+0x1168>
8000a568:	fa c8 f9 44 	sub	r8,sp,-1724
8000a56c:	14 97       	mov	r7,r10
8000a56e:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000a572:	ec ea fd 88 	ld.d	r10,r6[-632]
8000a576:	fa eb 00 00 	st.d	sp[0],r10
8000a57a:	c2 08       	rjmp	8000a5ba <_vfprintf_r+0x11a6>
8000a57c:	41 09       	lddsp	r9,sp[0x40]
8000a57e:	59 f8       	cp.w	r8,31
8000a580:	e0 89 00 16 	brgt	8000a5ac <_vfprintf_r+0x1198>
8000a584:	f2 e6 00 00 	ld.d	r6,r9[0]
8000a588:	f2 cb ff f8 	sub	r11,r9,-8
8000a58c:	fa e7 00 00 	st.d	sp[0],r6
8000a590:	51 0b       	stdsp	sp[0x40],r11
8000a592:	fa c6 f9 44 	sub	r6,sp,-1724
8000a596:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a59a:	fa e6 00 00 	ld.d	r6,sp[0]
8000a59e:	f2 e7 fd 88 	st.d	r9[-632],r6
8000a5a2:	2f f8       	sub	r8,-1
8000a5a4:	14 97       	mov	r7,r10
8000a5a6:	fb 48 06 b4 	st.w	sp[1716],r8
8000a5aa:	c0 88       	rjmp	8000a5ba <_vfprintf_r+0x11a6>
8000a5ac:	f2 e6 00 00 	ld.d	r6,r9[0]
8000a5b0:	2f 89       	sub	r9,-8
8000a5b2:	fa e7 00 00 	st.d	sp[0],r6
8000a5b6:	51 09       	stdsp	sp[0x40],r9
8000a5b8:	14 97       	mov	r7,r10
8000a5ba:	30 18       	mov	r8,1
8000a5bc:	e0 8f 01 cd 	bral	8000a956 <_vfprintf_r+0x1542>
8000a5c0:	ed b3 00 04 	bld	r3,0x4
8000a5c4:	c1 61       	brne	8000a5f0 <_vfprintf_r+0x11dc>
8000a5c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a5ca:	40 3e       	lddsp	lr,sp[0xc]
8000a5cc:	58 0e       	cp.w	lr,0
8000a5ce:	c0 80       	breq	8000a5de <_vfprintf_r+0x11ca>
8000a5d0:	10 36       	cp.w	r6,r8
8000a5d2:	c6 74       	brge	8000a6a0 <_vfprintf_r+0x128c>
8000a5d4:	fa cc f9 44 	sub	r12,sp,-1724
8000a5d8:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000a5dc:	c8 08       	rjmp	8000a6dc <_vfprintf_r+0x12c8>
8000a5de:	ee ca ff ff 	sub	r10,r7,-1
8000a5e2:	10 37       	cp.w	r7,r8
8000a5e4:	c7 f4       	brge	8000a6e2 <_vfprintf_r+0x12ce>
8000a5e6:	fa cb f9 44 	sub	r11,sp,-1724
8000a5ea:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a5ee:	c7 68       	rjmp	8000a6da <_vfprintf_r+0x12c6>
8000a5f0:	ed b3 00 06 	bld	r3,0x6
8000a5f4:	c4 a1       	brne	8000a688 <_vfprintf_r+0x1274>
8000a5f6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a5fa:	40 3c       	lddsp	r12,sp[0xc]
8000a5fc:	58 0c       	cp.w	r12,0
8000a5fe:	c1 d0       	breq	8000a638 <_vfprintf_r+0x1224>
8000a600:	10 36       	cp.w	r6,r8
8000a602:	c0 64       	brge	8000a60e <_vfprintf_r+0x11fa>
8000a604:	fa cb f9 44 	sub	r11,sp,-1724
8000a608:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a60c:	c1 f8       	rjmp	8000a64a <_vfprintf_r+0x1236>
8000a60e:	fa c8 f9 50 	sub	r8,sp,-1712
8000a612:	1a d8       	st.w	--sp,r8
8000a614:	fa c8 fa b8 	sub	r8,sp,-1352
8000a618:	1a d8       	st.w	--sp,r8
8000a61a:	fa c8 fb b4 	sub	r8,sp,-1100
8000a61e:	1a d8       	st.w	--sp,r8
8000a620:	fa c8 f9 40 	sub	r8,sp,-1728
8000a624:	fa c9 ff b4 	sub	r9,sp,-76
8000a628:	04 9a       	mov	r10,r2
8000a62a:	0c 9b       	mov	r11,r6
8000a62c:	0a 9c       	mov	r12,r5
8000a62e:	fe b0 f5 57 	rcall	800090dc <get_arg>
8000a632:	2f dd       	sub	sp,-12
8000a634:	98 18       	ld.sh	r8,r12[0x2]
8000a636:	c2 68       	rjmp	8000a682 <_vfprintf_r+0x126e>
8000a638:	ee ca ff ff 	sub	r10,r7,-1
8000a63c:	10 37       	cp.w	r7,r8
8000a63e:	c0 94       	brge	8000a650 <_vfprintf_r+0x123c>
8000a640:	fa c9 f9 44 	sub	r9,sp,-1724
8000a644:	14 97       	mov	r7,r10
8000a646:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a64a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000a64e:	c1 a8       	rjmp	8000a682 <_vfprintf_r+0x126e>
8000a650:	41 09       	lddsp	r9,sp[0x40]
8000a652:	59 f8       	cp.w	r8,31
8000a654:	e0 89 00 13 	brgt	8000a67a <_vfprintf_r+0x1266>
8000a658:	f2 cb ff fc 	sub	r11,r9,-4
8000a65c:	51 0b       	stdsp	sp[0x40],r11
8000a65e:	72 09       	ld.w	r9,r9[0x0]
8000a660:	fa c6 f9 44 	sub	r6,sp,-1724
8000a664:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000a668:	2f f8       	sub	r8,-1
8000a66a:	f7 49 fd 88 	st.w	r11[-632],r9
8000a66e:	fb 48 06 b4 	st.w	sp[1716],r8
8000a672:	14 97       	mov	r7,r10
8000a674:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000a678:	c0 58       	rjmp	8000a682 <_vfprintf_r+0x126e>
8000a67a:	92 18       	ld.sh	r8,r9[0x2]
8000a67c:	14 97       	mov	r7,r10
8000a67e:	2f c9       	sub	r9,-4
8000a680:	51 09       	stdsp	sp[0x40],r9
8000a682:	5c 78       	castu.h	r8
8000a684:	50 18       	stdsp	sp[0x4],r8
8000a686:	c4 68       	rjmp	8000a712 <_vfprintf_r+0x12fe>
8000a688:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a68c:	40 3c       	lddsp	r12,sp[0xc]
8000a68e:	58 0c       	cp.w	r12,0
8000a690:	c1 d0       	breq	8000a6ca <_vfprintf_r+0x12b6>
8000a692:	10 36       	cp.w	r6,r8
8000a694:	c0 64       	brge	8000a6a0 <_vfprintf_r+0x128c>
8000a696:	fa cb f9 44 	sub	r11,sp,-1724
8000a69a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a69e:	c1 f8       	rjmp	8000a6dc <_vfprintf_r+0x12c8>
8000a6a0:	fa c8 f9 50 	sub	r8,sp,-1712
8000a6a4:	1a d8       	st.w	--sp,r8
8000a6a6:	fa c8 fa b8 	sub	r8,sp,-1352
8000a6aa:	0c 9b       	mov	r11,r6
8000a6ac:	1a d8       	st.w	--sp,r8
8000a6ae:	fa c8 fb b4 	sub	r8,sp,-1100
8000a6b2:	04 9a       	mov	r10,r2
8000a6b4:	1a d8       	st.w	--sp,r8
8000a6b6:	0a 9c       	mov	r12,r5
8000a6b8:	fa c8 f9 40 	sub	r8,sp,-1728
8000a6bc:	fa c9 ff b4 	sub	r9,sp,-76
8000a6c0:	fe b0 f5 0e 	rcall	800090dc <get_arg>
8000a6c4:	2f dd       	sub	sp,-12
8000a6c6:	78 0b       	ld.w	r11,r12[0x0]
8000a6c8:	c2 48       	rjmp	8000a710 <_vfprintf_r+0x12fc>
8000a6ca:	ee ca ff ff 	sub	r10,r7,-1
8000a6ce:	10 37       	cp.w	r7,r8
8000a6d0:	c0 94       	brge	8000a6e2 <_vfprintf_r+0x12ce>
8000a6d2:	fa c9 f9 44 	sub	r9,sp,-1724
8000a6d6:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a6da:	14 97       	mov	r7,r10
8000a6dc:	ec fb fd 88 	ld.w	r11,r6[-632]
8000a6e0:	c1 88       	rjmp	8000a710 <_vfprintf_r+0x12fc>
8000a6e2:	41 09       	lddsp	r9,sp[0x40]
8000a6e4:	59 f8       	cp.w	r8,31
8000a6e6:	e0 89 00 11 	brgt	8000a708 <_vfprintf_r+0x12f4>
8000a6ea:	f2 cb ff fc 	sub	r11,r9,-4
8000a6ee:	51 0b       	stdsp	sp[0x40],r11
8000a6f0:	fa c6 f9 44 	sub	r6,sp,-1724
8000a6f4:	72 0b       	ld.w	r11,r9[0x0]
8000a6f6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a6fa:	f3 4b fd 88 	st.w	r9[-632],r11
8000a6fe:	2f f8       	sub	r8,-1
8000a700:	14 97       	mov	r7,r10
8000a702:	fb 48 06 b4 	st.w	sp[1716],r8
8000a706:	c0 58       	rjmp	8000a710 <_vfprintf_r+0x12fc>
8000a708:	72 0b       	ld.w	r11,r9[0x0]
8000a70a:	14 97       	mov	r7,r10
8000a70c:	2f c9       	sub	r9,-4
8000a70e:	51 09       	stdsp	sp[0x40],r9
8000a710:	50 1b       	stdsp	sp[0x4],r11
8000a712:	30 0e       	mov	lr,0
8000a714:	30 18       	mov	r8,1
8000a716:	50 0e       	stdsp	sp[0x0],lr
8000a718:	c1 f9       	rjmp	8000a956 <_vfprintf_r+0x1542>
8000a71a:	50 a7       	stdsp	sp[0x28],r7
8000a71c:	50 80       	stdsp	sp[0x20],r0
8000a71e:	0c 97       	mov	r7,r6
8000a720:	04 95       	mov	r5,r2
8000a722:	08 96       	mov	r6,r4
8000a724:	02 92       	mov	r2,r1
8000a726:	4d 3c       	lddpc	r12,8000a870 <_vfprintf_r+0x145c>
8000a728:	40 94       	lddsp	r4,sp[0x24]
8000a72a:	10 90       	mov	r0,r8
8000a72c:	40 41       	lddsp	r1,sp[0x10]
8000a72e:	50 dc       	stdsp	sp[0x34],r12
8000a730:	ed b3 00 05 	bld	r3,0x5
8000a734:	c5 51       	brne	8000a7de <_vfprintf_r+0x13ca>
8000a736:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a73a:	40 3b       	lddsp	r11,sp[0xc]
8000a73c:	58 0b       	cp.w	r11,0
8000a73e:	c2 20       	breq	8000a782 <_vfprintf_r+0x136e>
8000a740:	10 36       	cp.w	r6,r8
8000a742:	c0 a4       	brge	8000a756 <_vfprintf_r+0x1342>
8000a744:	fa ca f9 44 	sub	r10,sp,-1724
8000a748:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000a74c:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000a750:	fa e9 00 00 	st.d	sp[0],r8
8000a754:	cf 38       	rjmp	8000a93a <_vfprintf_r+0x1526>
8000a756:	fa c8 f9 50 	sub	r8,sp,-1712
8000a75a:	1a d8       	st.w	--sp,r8
8000a75c:	fa c8 fa b8 	sub	r8,sp,-1352
8000a760:	04 9a       	mov	r10,r2
8000a762:	1a d8       	st.w	--sp,r8
8000a764:	0c 9b       	mov	r11,r6
8000a766:	fa c8 fb b4 	sub	r8,sp,-1100
8000a76a:	0a 9c       	mov	r12,r5
8000a76c:	1a d8       	st.w	--sp,r8
8000a76e:	fa c8 f9 40 	sub	r8,sp,-1728
8000a772:	fa c9 ff b4 	sub	r9,sp,-76
8000a776:	fe b0 f4 b3 	rcall	800090dc <get_arg>
8000a77a:	2f dd       	sub	sp,-12
8000a77c:	f8 ea 00 00 	ld.d	r10,r12[0]
8000a780:	c0 c8       	rjmp	8000a798 <_vfprintf_r+0x1384>
8000a782:	ee ca ff ff 	sub	r10,r7,-1
8000a786:	10 37       	cp.w	r7,r8
8000a788:	c0 b4       	brge	8000a79e <_vfprintf_r+0x138a>
8000a78a:	fa c9 f9 44 	sub	r9,sp,-1724
8000a78e:	14 97       	mov	r7,r10
8000a790:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a794:	ec ea fd 88 	ld.d	r10,r6[-632]
8000a798:	fa eb 00 00 	st.d	sp[0],r10
8000a79c:	cc f8       	rjmp	8000a93a <_vfprintf_r+0x1526>
8000a79e:	41 09       	lddsp	r9,sp[0x40]
8000a7a0:	59 f8       	cp.w	r8,31
8000a7a2:	e0 89 00 16 	brgt	8000a7ce <_vfprintf_r+0x13ba>
8000a7a6:	f2 e6 00 00 	ld.d	r6,r9[0]
8000a7aa:	f2 cb ff f8 	sub	r11,r9,-8
8000a7ae:	fa e7 00 00 	st.d	sp[0],r6
8000a7b2:	51 0b       	stdsp	sp[0x40],r11
8000a7b4:	fa c6 f9 44 	sub	r6,sp,-1724
8000a7b8:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a7bc:	fa e6 00 00 	ld.d	r6,sp[0]
8000a7c0:	f2 e7 fd 88 	st.d	r9[-632],r6
8000a7c4:	2f f8       	sub	r8,-1
8000a7c6:	14 97       	mov	r7,r10
8000a7c8:	fb 48 06 b4 	st.w	sp[1716],r8
8000a7cc:	cb 78       	rjmp	8000a93a <_vfprintf_r+0x1526>
8000a7ce:	f2 e6 00 00 	ld.d	r6,r9[0]
8000a7d2:	2f 89       	sub	r9,-8
8000a7d4:	fa e7 00 00 	st.d	sp[0],r6
8000a7d8:	51 09       	stdsp	sp[0x40],r9
8000a7da:	14 97       	mov	r7,r10
8000a7dc:	ca f8       	rjmp	8000a93a <_vfprintf_r+0x1526>
8000a7de:	ed b3 00 04 	bld	r3,0x4
8000a7e2:	c1 71       	brne	8000a810 <_vfprintf_r+0x13fc>
8000a7e4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a7e8:	40 3e       	lddsp	lr,sp[0xc]
8000a7ea:	58 0e       	cp.w	lr,0
8000a7ec:	c0 80       	breq	8000a7fc <_vfprintf_r+0x13e8>
8000a7ee:	10 36       	cp.w	r6,r8
8000a7f0:	c6 a4       	brge	8000a8c4 <_vfprintf_r+0x14b0>
8000a7f2:	fa cc f9 44 	sub	r12,sp,-1724
8000a7f6:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000a7fa:	c8 38       	rjmp	8000a900 <_vfprintf_r+0x14ec>
8000a7fc:	ee ca ff ff 	sub	r10,r7,-1
8000a800:	10 37       	cp.w	r7,r8
8000a802:	e0 84 00 82 	brge	8000a906 <_vfprintf_r+0x14f2>
8000a806:	fa cb f9 44 	sub	r11,sp,-1724
8000a80a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a80e:	c7 88       	rjmp	8000a8fe <_vfprintf_r+0x14ea>
8000a810:	ed b3 00 06 	bld	r3,0x6
8000a814:	c4 c1       	brne	8000a8ac <_vfprintf_r+0x1498>
8000a816:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a81a:	40 3c       	lddsp	r12,sp[0xc]
8000a81c:	58 0c       	cp.w	r12,0
8000a81e:	c1 d0       	breq	8000a858 <_vfprintf_r+0x1444>
8000a820:	10 36       	cp.w	r6,r8
8000a822:	c0 64       	brge	8000a82e <_vfprintf_r+0x141a>
8000a824:	fa cb f9 44 	sub	r11,sp,-1724
8000a828:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a82c:	c1 f8       	rjmp	8000a86a <_vfprintf_r+0x1456>
8000a82e:	fa c8 f9 50 	sub	r8,sp,-1712
8000a832:	1a d8       	st.w	--sp,r8
8000a834:	fa c8 fa b8 	sub	r8,sp,-1352
8000a838:	1a d8       	st.w	--sp,r8
8000a83a:	fa c8 fb b4 	sub	r8,sp,-1100
8000a83e:	1a d8       	st.w	--sp,r8
8000a840:	fa c8 f9 40 	sub	r8,sp,-1728
8000a844:	fa c9 ff b4 	sub	r9,sp,-76
8000a848:	04 9a       	mov	r10,r2
8000a84a:	0c 9b       	mov	r11,r6
8000a84c:	0a 9c       	mov	r12,r5
8000a84e:	fe b0 f4 47 	rcall	800090dc <get_arg>
8000a852:	2f dd       	sub	sp,-12
8000a854:	98 18       	ld.sh	r8,r12[0x2]
8000a856:	c2 88       	rjmp	8000a8a6 <_vfprintf_r+0x1492>
8000a858:	ee ca ff ff 	sub	r10,r7,-1
8000a85c:	10 37       	cp.w	r7,r8
8000a85e:	c0 b4       	brge	8000a874 <_vfprintf_r+0x1460>
8000a860:	fa c9 f9 44 	sub	r9,sp,-1724
8000a864:	14 97       	mov	r7,r10
8000a866:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a86a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000a86e:	c1 c8       	rjmp	8000a8a6 <_vfprintf_r+0x1492>
8000a870:	80 00       	ld.sh	r0,r0[0x0]
8000a872:	e8 e0 41 09 	ld.d	r0,r4[16649]
8000a876:	59 f8       	cp.w	r8,31
8000a878:	e0 89 00 13 	brgt	8000a89e <_vfprintf_r+0x148a>
8000a87c:	f2 cb ff fc 	sub	r11,r9,-4
8000a880:	51 0b       	stdsp	sp[0x40],r11
8000a882:	72 09       	ld.w	r9,r9[0x0]
8000a884:	fa c6 f9 44 	sub	r6,sp,-1724
8000a888:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000a88c:	2f f8       	sub	r8,-1
8000a88e:	f7 49 fd 88 	st.w	r11[-632],r9
8000a892:	fb 48 06 b4 	st.w	sp[1716],r8
8000a896:	14 97       	mov	r7,r10
8000a898:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000a89c:	c0 58       	rjmp	8000a8a6 <_vfprintf_r+0x1492>
8000a89e:	92 18       	ld.sh	r8,r9[0x2]
8000a8a0:	14 97       	mov	r7,r10
8000a8a2:	2f c9       	sub	r9,-4
8000a8a4:	51 09       	stdsp	sp[0x40],r9
8000a8a6:	5c 78       	castu.h	r8
8000a8a8:	50 18       	stdsp	sp[0x4],r8
8000a8aa:	c4 68       	rjmp	8000a936 <_vfprintf_r+0x1522>
8000a8ac:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a8b0:	40 3c       	lddsp	r12,sp[0xc]
8000a8b2:	58 0c       	cp.w	r12,0
8000a8b4:	c1 d0       	breq	8000a8ee <_vfprintf_r+0x14da>
8000a8b6:	10 36       	cp.w	r6,r8
8000a8b8:	c0 64       	brge	8000a8c4 <_vfprintf_r+0x14b0>
8000a8ba:	fa cb f9 44 	sub	r11,sp,-1724
8000a8be:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a8c2:	c1 f8       	rjmp	8000a900 <_vfprintf_r+0x14ec>
8000a8c4:	fa c8 f9 50 	sub	r8,sp,-1712
8000a8c8:	1a d8       	st.w	--sp,r8
8000a8ca:	fa c8 fa b8 	sub	r8,sp,-1352
8000a8ce:	0c 9b       	mov	r11,r6
8000a8d0:	1a d8       	st.w	--sp,r8
8000a8d2:	fa c8 fb b4 	sub	r8,sp,-1100
8000a8d6:	04 9a       	mov	r10,r2
8000a8d8:	1a d8       	st.w	--sp,r8
8000a8da:	0a 9c       	mov	r12,r5
8000a8dc:	fa c8 f9 40 	sub	r8,sp,-1728
8000a8e0:	fa c9 ff b4 	sub	r9,sp,-76
8000a8e4:	fe b0 f3 fc 	rcall	800090dc <get_arg>
8000a8e8:	2f dd       	sub	sp,-12
8000a8ea:	78 0b       	ld.w	r11,r12[0x0]
8000a8ec:	c2 48       	rjmp	8000a934 <_vfprintf_r+0x1520>
8000a8ee:	ee ca ff ff 	sub	r10,r7,-1
8000a8f2:	10 37       	cp.w	r7,r8
8000a8f4:	c0 94       	brge	8000a906 <_vfprintf_r+0x14f2>
8000a8f6:	fa c9 f9 44 	sub	r9,sp,-1724
8000a8fa:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a8fe:	14 97       	mov	r7,r10
8000a900:	ec fb fd 88 	ld.w	r11,r6[-632]
8000a904:	c1 88       	rjmp	8000a934 <_vfprintf_r+0x1520>
8000a906:	41 09       	lddsp	r9,sp[0x40]
8000a908:	59 f8       	cp.w	r8,31
8000a90a:	e0 89 00 11 	brgt	8000a92c <_vfprintf_r+0x1518>
8000a90e:	f2 cb ff fc 	sub	r11,r9,-4
8000a912:	51 0b       	stdsp	sp[0x40],r11
8000a914:	fa c6 f9 44 	sub	r6,sp,-1724
8000a918:	72 0b       	ld.w	r11,r9[0x0]
8000a91a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a91e:	f3 4b fd 88 	st.w	r9[-632],r11
8000a922:	2f f8       	sub	r8,-1
8000a924:	14 97       	mov	r7,r10
8000a926:	fb 48 06 b4 	st.w	sp[1716],r8
8000a92a:	c0 58       	rjmp	8000a934 <_vfprintf_r+0x1520>
8000a92c:	72 0b       	ld.w	r11,r9[0x0]
8000a92e:	14 97       	mov	r7,r10
8000a930:	2f c9       	sub	r9,-4
8000a932:	51 09       	stdsp	sp[0x40],r9
8000a934:	50 1b       	stdsp	sp[0x4],r11
8000a936:	30 0e       	mov	lr,0
8000a938:	50 0e       	stdsp	sp[0x0],lr
8000a93a:	40 08       	lddsp	r8,sp[0x0]
8000a93c:	40 1c       	lddsp	r12,sp[0x4]
8000a93e:	18 48       	or	r8,r12
8000a940:	5f 18       	srne	r8
8000a942:	e7 e8 00 08 	and	r8,r3,r8
8000a946:	c0 70       	breq	8000a954 <_vfprintf_r+0x1540>
8000a948:	33 08       	mov	r8,48
8000a94a:	fb 60 06 b9 	st.b	sp[1721],r0
8000a94e:	a1 b3       	sbr	r3,0x1
8000a950:	fb 68 06 b8 	st.b	sp[1720],r8
8000a954:	30 28       	mov	r8,2
8000a956:	30 09       	mov	r9,0
8000a958:	fb 69 06 bb 	st.b	sp[1723],r9
8000a95c:	40 2b       	lddsp	r11,sp[0x8]
8000a95e:	58 0b       	cp.w	r11,0
8000a960:	c0 25       	brlt	8000a964 <_vfprintf_r+0x1550>
8000a962:	a7 d3       	cbr	r3,0x7
8000a964:	40 2a       	lddsp	r10,sp[0x8]
8000a966:	40 09       	lddsp	r9,sp[0x0]
8000a968:	58 0a       	cp.w	r10,0
8000a96a:	5f 1a       	srne	r10
8000a96c:	40 16       	lddsp	r6,sp[0x4]
8000a96e:	fa c2 f9 78 	sub	r2,sp,-1672
8000a972:	0c 49       	or	r9,r6
8000a974:	5f 19       	srne	r9
8000a976:	f5 e9 10 09 	or	r9,r10,r9
8000a97a:	c5 c0       	breq	8000aa32 <_vfprintf_r+0x161e>
8000a97c:	30 19       	mov	r9,1
8000a97e:	f2 08 18 00 	cp.b	r8,r9
8000a982:	c0 60       	breq	8000a98e <_vfprintf_r+0x157a>
8000a984:	30 29       	mov	r9,2
8000a986:	f2 08 18 00 	cp.b	r8,r9
8000a98a:	c0 41       	brne	8000a992 <_vfprintf_r+0x157e>
8000a98c:	c3 c8       	rjmp	8000aa04 <_vfprintf_r+0x15f0>
8000a98e:	04 96       	mov	r6,r2
8000a990:	c3 08       	rjmp	8000a9f0 <_vfprintf_r+0x15dc>
8000a992:	04 96       	mov	r6,r2
8000a994:	fa e8 00 00 	ld.d	r8,sp[0]
8000a998:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000a99c:	2d 0a       	sub	r10,-48
8000a99e:	0c fa       	st.b	--r6,r10
8000a9a0:	f0 0b 16 03 	lsr	r11,r8,0x3
8000a9a4:	f2 0c 16 03 	lsr	r12,r9,0x3
8000a9a8:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000a9ac:	18 99       	mov	r9,r12
8000a9ae:	16 98       	mov	r8,r11
8000a9b0:	58 08       	cp.w	r8,0
8000a9b2:	5c 29       	cpc	r9
8000a9b4:	cf 21       	brne	8000a998 <_vfprintf_r+0x1584>
8000a9b6:	fa e9 00 00 	st.d	sp[0],r8
8000a9ba:	ed b3 00 00 	bld	r3,0x0
8000a9be:	c4 51       	brne	8000aa48 <_vfprintf_r+0x1634>
8000a9c0:	33 09       	mov	r9,48
8000a9c2:	f2 0a 18 00 	cp.b	r10,r9
8000a9c6:	c4 10       	breq	8000aa48 <_vfprintf_r+0x1634>
8000a9c8:	0c f9       	st.b	--r6,r9
8000a9ca:	c3 f8       	rjmp	8000aa48 <_vfprintf_r+0x1634>
8000a9cc:	fa ea 00 00 	ld.d	r10,sp[0]
8000a9d0:	30 a8       	mov	r8,10
8000a9d2:	30 09       	mov	r9,0
8000a9d4:	e0 a0 19 30 	rcall	8000dc34 <__avr32_umod64>
8000a9d8:	30 a8       	mov	r8,10
8000a9da:	2d 0a       	sub	r10,-48
8000a9dc:	30 09       	mov	r9,0
8000a9de:	ac 8a       	st.b	r6[0x0],r10
8000a9e0:	fa ea 00 00 	ld.d	r10,sp[0]
8000a9e4:	fe b0 f1 1d 	rcall	80008c1e <__avr32_udiv64>
8000a9e8:	16 99       	mov	r9,r11
8000a9ea:	14 98       	mov	r8,r10
8000a9ec:	fa e9 00 00 	st.d	sp[0],r8
8000a9f0:	20 16       	sub	r6,1
8000a9f2:	fa ea 00 00 	ld.d	r10,sp[0]
8000a9f6:	58 9a       	cp.w	r10,9
8000a9f8:	5c 2b       	cpc	r11
8000a9fa:	fe 9b ff e9 	brhi	8000a9cc <_vfprintf_r+0x15b8>
8000a9fe:	1b f8       	ld.ub	r8,sp[0x7]
8000aa00:	2d 08       	sub	r8,-48
8000aa02:	c2 08       	rjmp	8000aa42 <_vfprintf_r+0x162e>
8000aa04:	04 96       	mov	r6,r2
8000aa06:	fa e8 00 00 	ld.d	r8,sp[0]
8000aa0a:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000aa0e:	40 de       	lddsp	lr,sp[0x34]
8000aa10:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000aa14:	0c fa       	st.b	--r6,r10
8000aa16:	f2 0b 16 04 	lsr	r11,r9,0x4
8000aa1a:	f0 0a 16 04 	lsr	r10,r8,0x4
8000aa1e:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000aa22:	16 99       	mov	r9,r11
8000aa24:	14 98       	mov	r8,r10
8000aa26:	58 08       	cp.w	r8,0
8000aa28:	5c 29       	cpc	r9
8000aa2a:	cf 01       	brne	8000aa0a <_vfprintf_r+0x15f6>
8000aa2c:	fa e9 00 00 	st.d	sp[0],r8
8000aa30:	c0 c8       	rjmp	8000aa48 <_vfprintf_r+0x1634>
8000aa32:	58 08       	cp.w	r8,0
8000aa34:	c0 91       	brne	8000aa46 <_vfprintf_r+0x1632>
8000aa36:	ed b3 00 00 	bld	r3,0x0
8000aa3a:	c0 61       	brne	8000aa46 <_vfprintf_r+0x1632>
8000aa3c:	fa c6 f9 79 	sub	r6,sp,-1671
8000aa40:	33 08       	mov	r8,48
8000aa42:	ac 88       	st.b	r6[0x0],r8
8000aa44:	c0 28       	rjmp	8000aa48 <_vfprintf_r+0x1634>
8000aa46:	04 96       	mov	r6,r2
8000aa48:	0c 12       	sub	r2,r6
8000aa4a:	c1 c8       	rjmp	8000aa82 <_vfprintf_r+0x166e>
8000aa4c:	50 a7       	stdsp	sp[0x28],r7
8000aa4e:	50 80       	stdsp	sp[0x20],r0
8000aa50:	40 94       	lddsp	r4,sp[0x24]
8000aa52:	0c 97       	mov	r7,r6
8000aa54:	10 90       	mov	r0,r8
8000aa56:	04 95       	mov	r5,r2
8000aa58:	40 41       	lddsp	r1,sp[0x10]
8000aa5a:	58 08       	cp.w	r8,0
8000aa5c:	e0 80 04 50 	breq	8000b2fc <_vfprintf_r+0x1ee8>
8000aa60:	fb 68 06 60 	st.b	sp[1632],r8
8000aa64:	30 0c       	mov	r12,0
8000aa66:	30 08       	mov	r8,0
8000aa68:	30 12       	mov	r2,1
8000aa6a:	fb 68 06 bb 	st.b	sp[1723],r8
8000aa6e:	50 2c       	stdsp	sp[0x8],r12
8000aa70:	fa c6 f9 a0 	sub	r6,sp,-1632
8000aa74:	c0 78       	rjmp	8000aa82 <_vfprintf_r+0x166e>
8000aa76:	30 0b       	mov	r11,0
8000aa78:	50 2b       	stdsp	sp[0x8],r11
8000aa7a:	c0 48       	rjmp	8000aa82 <_vfprintf_r+0x166e>
8000aa7c:	40 22       	lddsp	r2,sp[0x8]
8000aa7e:	30 0a       	mov	r10,0
8000aa80:	50 2a       	stdsp	sp[0x8],r10
8000aa82:	40 29       	lddsp	r9,sp[0x8]
8000aa84:	e4 09 0c 49 	max	r9,r2,r9
8000aa88:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000aa8c:	50 39       	stdsp	sp[0xc],r9
8000aa8e:	06 9e       	mov	lr,r3
8000aa90:	30 09       	mov	r9,0
8000aa92:	e2 1e 00 02 	andl	lr,0x2,COH
8000aa96:	f2 08 18 00 	cp.b	r8,r9
8000aa9a:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000aa9e:	f7 b8 01 ff 	subne	r8,-1
8000aaa2:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000aaa6:	06 9b       	mov	r11,r3
8000aaa8:	58 0e       	cp.w	lr,0
8000aaaa:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000aaae:	f7 bc 01 fe 	subne	r12,-2
8000aab2:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000aab6:	e2 1b 00 84 	andl	r11,0x84,COH
8000aaba:	50 fe       	stdsp	sp[0x3c],lr
8000aabc:	50 9b       	stdsp	sp[0x24],r11
8000aabe:	c4 51       	brne	8000ab48 <_vfprintf_r+0x1734>
8000aac0:	40 8a       	lddsp	r10,sp[0x20]
8000aac2:	40 39       	lddsp	r9,sp[0xc]
8000aac4:	12 1a       	sub	r10,r9
8000aac6:	50 4a       	stdsp	sp[0x10],r10
8000aac8:	58 0a       	cp.w	r10,0
8000aaca:	e0 89 00 1f 	brgt	8000ab08 <_vfprintf_r+0x16f4>
8000aace:	c3 d8       	rjmp	8000ab48 <_vfprintf_r+0x1734>
8000aad0:	2f 09       	sub	r9,-16
8000aad2:	2f f8       	sub	r8,-1
8000aad4:	4c de       	lddpc	lr,8000ac08 <_vfprintf_r+0x17f4>
8000aad6:	31 0c       	mov	r12,16
8000aad8:	fb 49 06 90 	st.w	sp[1680],r9
8000aadc:	89 0e       	st.w	r4[0x0],lr
8000aade:	89 1c       	st.w	r4[0x4],r12
8000aae0:	fb 48 06 8c 	st.w	sp[1676],r8
8000aae4:	58 78       	cp.w	r8,7
8000aae6:	e0 89 00 04 	brgt	8000aaee <_vfprintf_r+0x16da>
8000aaea:	2f 84       	sub	r4,-8
8000aaec:	c0 b8       	rjmp	8000ab02 <_vfprintf_r+0x16ee>
8000aaee:	fa ca f9 78 	sub	r10,sp,-1672
8000aaf2:	02 9b       	mov	r11,r1
8000aaf4:	0a 9c       	mov	r12,r5
8000aaf6:	fe b0 f4 81 	rcall	800093f8 <__sprint_r>
8000aafa:	e0 81 04 11 	brne	8000b31c <_vfprintf_r+0x1f08>
8000aafe:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ab02:	40 4b       	lddsp	r11,sp[0x10]
8000ab04:	21 0b       	sub	r11,16
8000ab06:	50 4b       	stdsp	sp[0x10],r11
8000ab08:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ab0c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ab10:	4b ea       	lddpc	r10,8000ac08 <_vfprintf_r+0x17f4>
8000ab12:	40 4e       	lddsp	lr,sp[0x10]
8000ab14:	59 0e       	cp.w	lr,16
8000ab16:	fe 99 ff dd 	brgt	8000aad0 <_vfprintf_r+0x16bc>
8000ab1a:	1c 09       	add	r9,lr
8000ab1c:	2f f8       	sub	r8,-1
8000ab1e:	89 0a       	st.w	r4[0x0],r10
8000ab20:	fb 49 06 90 	st.w	sp[1680],r9
8000ab24:	89 1e       	st.w	r4[0x4],lr
8000ab26:	fb 48 06 8c 	st.w	sp[1676],r8
8000ab2a:	58 78       	cp.w	r8,7
8000ab2c:	e0 89 00 04 	brgt	8000ab34 <_vfprintf_r+0x1720>
8000ab30:	2f 84       	sub	r4,-8
8000ab32:	c0 b8       	rjmp	8000ab48 <_vfprintf_r+0x1734>
8000ab34:	fa ca f9 78 	sub	r10,sp,-1672
8000ab38:	02 9b       	mov	r11,r1
8000ab3a:	0a 9c       	mov	r12,r5
8000ab3c:	fe b0 f4 5e 	rcall	800093f8 <__sprint_r>
8000ab40:	e0 81 03 ee 	brne	8000b31c <_vfprintf_r+0x1f08>
8000ab44:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ab48:	30 09       	mov	r9,0
8000ab4a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000ab4e:	f2 08 18 00 	cp.b	r8,r9
8000ab52:	c1 f0       	breq	8000ab90 <_vfprintf_r+0x177c>
8000ab54:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ab58:	fa c9 f9 45 	sub	r9,sp,-1723
8000ab5c:	2f f8       	sub	r8,-1
8000ab5e:	89 09       	st.w	r4[0x0],r9
8000ab60:	fb 48 06 90 	st.w	sp[1680],r8
8000ab64:	30 19       	mov	r9,1
8000ab66:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ab6a:	89 19       	st.w	r4[0x4],r9
8000ab6c:	2f f8       	sub	r8,-1
8000ab6e:	fb 48 06 8c 	st.w	sp[1676],r8
8000ab72:	58 78       	cp.w	r8,7
8000ab74:	e0 89 00 04 	brgt	8000ab7c <_vfprintf_r+0x1768>
8000ab78:	2f 84       	sub	r4,-8
8000ab7a:	c0 b8       	rjmp	8000ab90 <_vfprintf_r+0x177c>
8000ab7c:	fa ca f9 78 	sub	r10,sp,-1672
8000ab80:	02 9b       	mov	r11,r1
8000ab82:	0a 9c       	mov	r12,r5
8000ab84:	fe b0 f4 3a 	rcall	800093f8 <__sprint_r>
8000ab88:	e0 81 03 ca 	brne	8000b31c <_vfprintf_r+0x1f08>
8000ab8c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ab90:	40 fc       	lddsp	r12,sp[0x3c]
8000ab92:	58 0c       	cp.w	r12,0
8000ab94:	c1 f0       	breq	8000abd2 <_vfprintf_r+0x17be>
8000ab96:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ab9a:	fa c9 f9 48 	sub	r9,sp,-1720
8000ab9e:	2f e8       	sub	r8,-2
8000aba0:	89 09       	st.w	r4[0x0],r9
8000aba2:	fb 48 06 90 	st.w	sp[1680],r8
8000aba6:	30 29       	mov	r9,2
8000aba8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000abac:	89 19       	st.w	r4[0x4],r9
8000abae:	2f f8       	sub	r8,-1
8000abb0:	fb 48 06 8c 	st.w	sp[1676],r8
8000abb4:	58 78       	cp.w	r8,7
8000abb6:	e0 89 00 04 	brgt	8000abbe <_vfprintf_r+0x17aa>
8000abba:	2f 84       	sub	r4,-8
8000abbc:	c0 b8       	rjmp	8000abd2 <_vfprintf_r+0x17be>
8000abbe:	fa ca f9 78 	sub	r10,sp,-1672
8000abc2:	02 9b       	mov	r11,r1
8000abc4:	0a 9c       	mov	r12,r5
8000abc6:	fe b0 f4 19 	rcall	800093f8 <__sprint_r>
8000abca:	e0 81 03 a9 	brne	8000b31c <_vfprintf_r+0x1f08>
8000abce:	fa c4 f9 e0 	sub	r4,sp,-1568
8000abd2:	40 9b       	lddsp	r11,sp[0x24]
8000abd4:	e0 4b 00 80 	cp.w	r11,128
8000abd8:	c4 91       	brne	8000ac6a <_vfprintf_r+0x1856>
8000abda:	40 8a       	lddsp	r10,sp[0x20]
8000abdc:	40 39       	lddsp	r9,sp[0xc]
8000abde:	12 1a       	sub	r10,r9
8000abe0:	50 4a       	stdsp	sp[0x10],r10
8000abe2:	58 0a       	cp.w	r10,0
8000abe4:	e0 89 00 23 	brgt	8000ac2a <_vfprintf_r+0x1816>
8000abe8:	c4 18       	rjmp	8000ac6a <_vfprintf_r+0x1856>
8000abea:	2f 09       	sub	r9,-16
8000abec:	2f f8       	sub	r8,-1
8000abee:	48 8e       	lddpc	lr,8000ac0c <_vfprintf_r+0x17f8>
8000abf0:	31 0c       	mov	r12,16
8000abf2:	fb 49 06 90 	st.w	sp[1680],r9
8000abf6:	89 0e       	st.w	r4[0x0],lr
8000abf8:	89 1c       	st.w	r4[0x4],r12
8000abfa:	fb 48 06 8c 	st.w	sp[1676],r8
8000abfe:	58 78       	cp.w	r8,7
8000ac00:	e0 89 00 08 	brgt	8000ac10 <_vfprintf_r+0x17fc>
8000ac04:	2f 84       	sub	r4,-8
8000ac06:	c0 f8       	rjmp	8000ac24 <_vfprintf_r+0x1810>
8000ac08:	80 00       	ld.sh	r0,r0[0x0]
8000ac0a:	e8 f8 80 00 	ld.w	r8,r4[-32768]
8000ac0e:	e9 08 fa ca 	ld.sh	r8,r4[-1334]
8000ac12:	f9 78 02 9b 	stcond	r12[667],r8
8000ac16:	0a 9c       	mov	r12,r5
8000ac18:	fe b0 f3 f0 	rcall	800093f8 <__sprint_r>
8000ac1c:	e0 81 03 80 	brne	8000b31c <_vfprintf_r+0x1f08>
8000ac20:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ac24:	40 4b       	lddsp	r11,sp[0x10]
8000ac26:	21 0b       	sub	r11,16
8000ac28:	50 4b       	stdsp	sp[0x10],r11
8000ac2a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ac2e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ac32:	4c 6a       	lddpc	r10,8000ad48 <_vfprintf_r+0x1934>
8000ac34:	40 4e       	lddsp	lr,sp[0x10]
8000ac36:	59 0e       	cp.w	lr,16
8000ac38:	fe 99 ff d9 	brgt	8000abea <_vfprintf_r+0x17d6>
8000ac3c:	1c 09       	add	r9,lr
8000ac3e:	2f f8       	sub	r8,-1
8000ac40:	89 0a       	st.w	r4[0x0],r10
8000ac42:	fb 49 06 90 	st.w	sp[1680],r9
8000ac46:	89 1e       	st.w	r4[0x4],lr
8000ac48:	fb 48 06 8c 	st.w	sp[1676],r8
8000ac4c:	58 78       	cp.w	r8,7
8000ac4e:	e0 89 00 04 	brgt	8000ac56 <_vfprintf_r+0x1842>
8000ac52:	2f 84       	sub	r4,-8
8000ac54:	c0 b8       	rjmp	8000ac6a <_vfprintf_r+0x1856>
8000ac56:	fa ca f9 78 	sub	r10,sp,-1672
8000ac5a:	02 9b       	mov	r11,r1
8000ac5c:	0a 9c       	mov	r12,r5
8000ac5e:	fe b0 f3 cd 	rcall	800093f8 <__sprint_r>
8000ac62:	e0 81 03 5d 	brne	8000b31c <_vfprintf_r+0x1f08>
8000ac66:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ac6a:	40 2c       	lddsp	r12,sp[0x8]
8000ac6c:	04 1c       	sub	r12,r2
8000ac6e:	50 2c       	stdsp	sp[0x8],r12
8000ac70:	58 0c       	cp.w	r12,0
8000ac72:	e0 89 00 1f 	brgt	8000acb0 <_vfprintf_r+0x189c>
8000ac76:	c3 d8       	rjmp	8000acf0 <_vfprintf_r+0x18dc>
8000ac78:	2f 09       	sub	r9,-16
8000ac7a:	2f f8       	sub	r8,-1
8000ac7c:	4b 3b       	lddpc	r11,8000ad48 <_vfprintf_r+0x1934>
8000ac7e:	31 0a       	mov	r10,16
8000ac80:	fb 49 06 90 	st.w	sp[1680],r9
8000ac84:	89 0b       	st.w	r4[0x0],r11
8000ac86:	89 1a       	st.w	r4[0x4],r10
8000ac88:	fb 48 06 8c 	st.w	sp[1676],r8
8000ac8c:	58 78       	cp.w	r8,7
8000ac8e:	e0 89 00 04 	brgt	8000ac96 <_vfprintf_r+0x1882>
8000ac92:	2f 84       	sub	r4,-8
8000ac94:	c0 b8       	rjmp	8000acaa <_vfprintf_r+0x1896>
8000ac96:	fa ca f9 78 	sub	r10,sp,-1672
8000ac9a:	02 9b       	mov	r11,r1
8000ac9c:	0a 9c       	mov	r12,r5
8000ac9e:	fe b0 f3 ad 	rcall	800093f8 <__sprint_r>
8000aca2:	e0 81 03 3d 	brne	8000b31c <_vfprintf_r+0x1f08>
8000aca6:	fa c4 f9 e0 	sub	r4,sp,-1568
8000acaa:	40 29       	lddsp	r9,sp[0x8]
8000acac:	21 09       	sub	r9,16
8000acae:	50 29       	stdsp	sp[0x8],r9
8000acb0:	fa f9 06 90 	ld.w	r9,sp[1680]
8000acb4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000acb8:	4a 4a       	lddpc	r10,8000ad48 <_vfprintf_r+0x1934>
8000acba:	40 2e       	lddsp	lr,sp[0x8]
8000acbc:	59 0e       	cp.w	lr,16
8000acbe:	fe 99 ff dd 	brgt	8000ac78 <_vfprintf_r+0x1864>
8000acc2:	1c 09       	add	r9,lr
8000acc4:	2f f8       	sub	r8,-1
8000acc6:	89 0a       	st.w	r4[0x0],r10
8000acc8:	fb 49 06 90 	st.w	sp[1680],r9
8000accc:	89 1e       	st.w	r4[0x4],lr
8000acce:	fb 48 06 8c 	st.w	sp[1676],r8
8000acd2:	58 78       	cp.w	r8,7
8000acd4:	e0 89 00 04 	brgt	8000acdc <_vfprintf_r+0x18c8>
8000acd8:	2f 84       	sub	r4,-8
8000acda:	c0 b8       	rjmp	8000acf0 <_vfprintf_r+0x18dc>
8000acdc:	fa ca f9 78 	sub	r10,sp,-1672
8000ace0:	02 9b       	mov	r11,r1
8000ace2:	0a 9c       	mov	r12,r5
8000ace4:	fe b0 f3 8a 	rcall	800093f8 <__sprint_r>
8000ace8:	e0 81 03 1a 	brne	8000b31c <_vfprintf_r+0x1f08>
8000acec:	fa c4 f9 e0 	sub	r4,sp,-1568
8000acf0:	ed b3 00 08 	bld	r3,0x8
8000acf4:	c0 b0       	breq	8000ad0a <_vfprintf_r+0x18f6>
8000acf6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000acfa:	89 12       	st.w	r4[0x4],r2
8000acfc:	89 06       	st.w	r4[0x0],r6
8000acfe:	f0 02 00 02 	add	r2,r8,r2
8000ad02:	fb 42 06 90 	st.w	sp[1680],r2
8000ad06:	e0 8f 01 d5 	bral	8000b0b0 <_vfprintf_r+0x1c9c>
8000ad0a:	e0 40 00 65 	cp.w	r0,101
8000ad0e:	e0 8a 01 d7 	brle	8000b0bc <_vfprintf_r+0x1ca8>
8000ad12:	30 08       	mov	r8,0
8000ad14:	30 09       	mov	r9,0
8000ad16:	40 5b       	lddsp	r11,sp[0x14]
8000ad18:	40 7a       	lddsp	r10,sp[0x1c]
8000ad1a:	e0 a0 17 46 	rcall	8000dba6 <__avr32_f64_cmp_eq>
8000ad1e:	c7 a0       	breq	8000ae12 <_vfprintf_r+0x19fe>
8000ad20:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ad24:	48 a9       	lddpc	r9,8000ad4c <_vfprintf_r+0x1938>
8000ad26:	2f f8       	sub	r8,-1
8000ad28:	89 09       	st.w	r4[0x0],r9
8000ad2a:	fb 48 06 90 	st.w	sp[1680],r8
8000ad2e:	30 19       	mov	r9,1
8000ad30:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ad34:	89 19       	st.w	r4[0x4],r9
8000ad36:	2f f8       	sub	r8,-1
8000ad38:	fb 48 06 8c 	st.w	sp[1676],r8
8000ad3c:	58 78       	cp.w	r8,7
8000ad3e:	e0 89 00 09 	brgt	8000ad50 <_vfprintf_r+0x193c>
8000ad42:	2f 84       	sub	r4,-8
8000ad44:	c1 08       	rjmp	8000ad64 <_vfprintf_r+0x1950>
8000ad46:	d7 03       	nop
8000ad48:	80 00       	ld.sh	r0,r0[0x0]
8000ad4a:	e9 08 80 00 	ld.sh	r8,r4[-32768]
8000ad4e:	e8 f4 fa ca 	ld.w	r4,r4[-1334]
8000ad52:	f9 78 02 9b 	stcond	r12[667],r8
8000ad56:	0a 9c       	mov	r12,r5
8000ad58:	fe b0 f3 50 	rcall	800093f8 <__sprint_r>
8000ad5c:	e0 81 02 e0 	brne	8000b31c <_vfprintf_r+0x1f08>
8000ad60:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ad64:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000ad68:	40 6c       	lddsp	r12,sp[0x18]
8000ad6a:	18 38       	cp.w	r8,r12
8000ad6c:	c0 55       	brlt	8000ad76 <_vfprintf_r+0x1962>
8000ad6e:	ed b3 00 00 	bld	r3,0x0
8000ad72:	e0 81 02 69 	brne	8000b244 <_vfprintf_r+0x1e30>
8000ad76:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ad7a:	2f f8       	sub	r8,-1
8000ad7c:	40 cb       	lddsp	r11,sp[0x30]
8000ad7e:	fb 48 06 90 	st.w	sp[1680],r8
8000ad82:	30 19       	mov	r9,1
8000ad84:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ad88:	89 0b       	st.w	r4[0x0],r11
8000ad8a:	2f f8       	sub	r8,-1
8000ad8c:	89 19       	st.w	r4[0x4],r9
8000ad8e:	fb 48 06 8c 	st.w	sp[1676],r8
8000ad92:	58 78       	cp.w	r8,7
8000ad94:	e0 89 00 04 	brgt	8000ad9c <_vfprintf_r+0x1988>
8000ad98:	2f 84       	sub	r4,-8
8000ad9a:	c0 b8       	rjmp	8000adb0 <_vfprintf_r+0x199c>
8000ad9c:	fa ca f9 78 	sub	r10,sp,-1672
8000ada0:	02 9b       	mov	r11,r1
8000ada2:	0a 9c       	mov	r12,r5
8000ada4:	fe b0 f3 2a 	rcall	800093f8 <__sprint_r>
8000ada8:	e0 81 02 ba 	brne	8000b31c <_vfprintf_r+0x1f08>
8000adac:	fa c4 f9 e0 	sub	r4,sp,-1568
8000adb0:	40 66       	lddsp	r6,sp[0x18]
8000adb2:	20 16       	sub	r6,1
8000adb4:	58 06       	cp.w	r6,0
8000adb6:	e0 89 00 1d 	brgt	8000adf0 <_vfprintf_r+0x19dc>
8000adba:	e0 8f 02 45 	bral	8000b244 <_vfprintf_r+0x1e30>
8000adbe:	2f 09       	sub	r9,-16
8000adc0:	2f f8       	sub	r8,-1
8000adc2:	fb 49 06 90 	st.w	sp[1680],r9
8000adc6:	89 02       	st.w	r4[0x0],r2
8000adc8:	89 10       	st.w	r4[0x4],r0
8000adca:	fb 48 06 8c 	st.w	sp[1676],r8
8000adce:	58 78       	cp.w	r8,7
8000add0:	e0 89 00 04 	brgt	8000add8 <_vfprintf_r+0x19c4>
8000add4:	2f 84       	sub	r4,-8
8000add6:	c0 b8       	rjmp	8000adec <_vfprintf_r+0x19d8>
8000add8:	fa ca f9 78 	sub	r10,sp,-1672
8000addc:	02 9b       	mov	r11,r1
8000adde:	0a 9c       	mov	r12,r5
8000ade0:	fe b0 f3 0c 	rcall	800093f8 <__sprint_r>
8000ade4:	e0 81 02 9c 	brne	8000b31c <_vfprintf_r+0x1f08>
8000ade8:	fa c4 f9 e0 	sub	r4,sp,-1568
8000adec:	21 06       	sub	r6,16
8000adee:	c0 38       	rjmp	8000adf4 <_vfprintf_r+0x19e0>
8000adf0:	4d 22       	lddpc	r2,8000af38 <_vfprintf_r+0x1b24>
8000adf2:	31 00       	mov	r0,16
8000adf4:	fa f9 06 90 	ld.w	r9,sp[1680]
8000adf8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000adfc:	4c fa       	lddpc	r10,8000af38 <_vfprintf_r+0x1b24>
8000adfe:	59 06       	cp.w	r6,16
8000ae00:	fe 99 ff df 	brgt	8000adbe <_vfprintf_r+0x19aa>
8000ae04:	0c 09       	add	r9,r6
8000ae06:	89 0a       	st.w	r4[0x0],r10
8000ae08:	fb 49 06 90 	st.w	sp[1680],r9
8000ae0c:	2f f8       	sub	r8,-1
8000ae0e:	89 16       	st.w	r4[0x4],r6
8000ae10:	c5 39       	rjmp	8000b0b6 <_vfprintf_r+0x1ca2>
8000ae12:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000ae16:	58 0a       	cp.w	r10,0
8000ae18:	e0 89 00 94 	brgt	8000af40 <_vfprintf_r+0x1b2c>
8000ae1c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ae20:	4c 79       	lddpc	r9,8000af3c <_vfprintf_r+0x1b28>
8000ae22:	2f f8       	sub	r8,-1
8000ae24:	89 09       	st.w	r4[0x0],r9
8000ae26:	fb 48 06 90 	st.w	sp[1680],r8
8000ae2a:	30 19       	mov	r9,1
8000ae2c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ae30:	89 19       	st.w	r4[0x4],r9
8000ae32:	2f f8       	sub	r8,-1
8000ae34:	fb 48 06 8c 	st.w	sp[1676],r8
8000ae38:	58 78       	cp.w	r8,7
8000ae3a:	e0 89 00 04 	brgt	8000ae42 <_vfprintf_r+0x1a2e>
8000ae3e:	2f 84       	sub	r4,-8
8000ae40:	c0 b8       	rjmp	8000ae56 <_vfprintf_r+0x1a42>
8000ae42:	fa ca f9 78 	sub	r10,sp,-1672
8000ae46:	02 9b       	mov	r11,r1
8000ae48:	0a 9c       	mov	r12,r5
8000ae4a:	fe b0 f2 d7 	rcall	800093f8 <__sprint_r>
8000ae4e:	e0 81 02 67 	brne	8000b31c <_vfprintf_r+0x1f08>
8000ae52:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ae56:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000ae5a:	58 08       	cp.w	r8,0
8000ae5c:	c0 81       	brne	8000ae6c <_vfprintf_r+0x1a58>
8000ae5e:	40 6a       	lddsp	r10,sp[0x18]
8000ae60:	58 0a       	cp.w	r10,0
8000ae62:	c0 51       	brne	8000ae6c <_vfprintf_r+0x1a58>
8000ae64:	ed b3 00 00 	bld	r3,0x0
8000ae68:	e0 81 01 ee 	brne	8000b244 <_vfprintf_r+0x1e30>
8000ae6c:	40 c9       	lddsp	r9,sp[0x30]
8000ae6e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ae72:	2f f8       	sub	r8,-1
8000ae74:	89 09       	st.w	r4[0x0],r9
8000ae76:	fb 48 06 90 	st.w	sp[1680],r8
8000ae7a:	30 19       	mov	r9,1
8000ae7c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ae80:	89 19       	st.w	r4[0x4],r9
8000ae82:	2f f8       	sub	r8,-1
8000ae84:	fb 48 06 8c 	st.w	sp[1676],r8
8000ae88:	58 78       	cp.w	r8,7
8000ae8a:	e0 89 00 04 	brgt	8000ae92 <_vfprintf_r+0x1a7e>
8000ae8e:	2f 84       	sub	r4,-8
8000ae90:	c0 b8       	rjmp	8000aea6 <_vfprintf_r+0x1a92>
8000ae92:	fa ca f9 78 	sub	r10,sp,-1672
8000ae96:	02 9b       	mov	r11,r1
8000ae98:	0a 9c       	mov	r12,r5
8000ae9a:	fe b0 f2 af 	rcall	800093f8 <__sprint_r>
8000ae9e:	e0 81 02 3f 	brne	8000b31c <_vfprintf_r+0x1f08>
8000aea2:	fa c4 f9 e0 	sub	r4,sp,-1568
8000aea6:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000aeaa:	5c 32       	neg	r2
8000aeac:	58 02       	cp.w	r2,0
8000aeae:	e0 89 00 1d 	brgt	8000aee8 <_vfprintf_r+0x1ad4>
8000aeb2:	c3 b8       	rjmp	8000af28 <_vfprintf_r+0x1b14>
8000aeb4:	2f 09       	sub	r9,-16
8000aeb6:	2f f8       	sub	r8,-1
8000aeb8:	31 0e       	mov	lr,16
8000aeba:	fb 49 06 90 	st.w	sp[1680],r9
8000aebe:	89 00       	st.w	r4[0x0],r0
8000aec0:	89 1e       	st.w	r4[0x4],lr
8000aec2:	fb 48 06 8c 	st.w	sp[1676],r8
8000aec6:	58 78       	cp.w	r8,7
8000aec8:	e0 89 00 04 	brgt	8000aed0 <_vfprintf_r+0x1abc>
8000aecc:	2f 84       	sub	r4,-8
8000aece:	c0 b8       	rjmp	8000aee4 <_vfprintf_r+0x1ad0>
8000aed0:	fa ca f9 78 	sub	r10,sp,-1672
8000aed4:	02 9b       	mov	r11,r1
8000aed6:	0a 9c       	mov	r12,r5
8000aed8:	fe b0 f2 90 	rcall	800093f8 <__sprint_r>
8000aedc:	e0 81 02 20 	brne	8000b31c <_vfprintf_r+0x1f08>
8000aee0:	fa c4 f9 e0 	sub	r4,sp,-1568
8000aee4:	21 02       	sub	r2,16
8000aee6:	c0 28       	rjmp	8000aeea <_vfprintf_r+0x1ad6>
8000aee8:	49 40       	lddpc	r0,8000af38 <_vfprintf_r+0x1b24>
8000aeea:	fa f9 06 90 	ld.w	r9,sp[1680]
8000aeee:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000aef2:	49 2a       	lddpc	r10,8000af38 <_vfprintf_r+0x1b24>
8000aef4:	59 02       	cp.w	r2,16
8000aef6:	fe 99 ff df 	brgt	8000aeb4 <_vfprintf_r+0x1aa0>
8000aefa:	04 09       	add	r9,r2
8000aefc:	2f f8       	sub	r8,-1
8000aefe:	89 0a       	st.w	r4[0x0],r10
8000af00:	fb 49 06 90 	st.w	sp[1680],r9
8000af04:	89 12       	st.w	r4[0x4],r2
8000af06:	fb 48 06 8c 	st.w	sp[1676],r8
8000af0a:	58 78       	cp.w	r8,7
8000af0c:	e0 89 00 04 	brgt	8000af14 <_vfprintf_r+0x1b00>
8000af10:	2f 84       	sub	r4,-8
8000af12:	c0 b8       	rjmp	8000af28 <_vfprintf_r+0x1b14>
8000af14:	fa ca f9 78 	sub	r10,sp,-1672
8000af18:	02 9b       	mov	r11,r1
8000af1a:	0a 9c       	mov	r12,r5
8000af1c:	fe b0 f2 6e 	rcall	800093f8 <__sprint_r>
8000af20:	e0 81 01 fe 	brne	8000b31c <_vfprintf_r+0x1f08>
8000af24:	fa c4 f9 e0 	sub	r4,sp,-1568
8000af28:	40 6c       	lddsp	r12,sp[0x18]
8000af2a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000af2e:	89 06       	st.w	r4[0x0],r6
8000af30:	89 1c       	st.w	r4[0x4],r12
8000af32:	18 08       	add	r8,r12
8000af34:	cb c8       	rjmp	8000b0ac <_vfprintf_r+0x1c98>
8000af36:	d7 03       	nop
8000af38:	80 00       	ld.sh	r0,r0[0x0]
8000af3a:	e9 08 80 00 	ld.sh	r8,r4[-32768]
8000af3e:	e8 f4 fa f9 	ld.w	r4,r4[-1287]
8000af42:	06 90       	mov	r0,r3
8000af44:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000af48:	40 6b       	lddsp	r11,sp[0x18]
8000af4a:	16 3a       	cp.w	r10,r11
8000af4c:	c6 d5       	brlt	8000b026 <_vfprintf_r+0x1c12>
8000af4e:	16 09       	add	r9,r11
8000af50:	2f f8       	sub	r8,-1
8000af52:	89 06       	st.w	r4[0x0],r6
8000af54:	fb 49 06 90 	st.w	sp[1680],r9
8000af58:	89 1b       	st.w	r4[0x4],r11
8000af5a:	fb 48 06 8c 	st.w	sp[1676],r8
8000af5e:	58 78       	cp.w	r8,7
8000af60:	e0 89 00 04 	brgt	8000af68 <_vfprintf_r+0x1b54>
8000af64:	2f 84       	sub	r4,-8
8000af66:	c0 b8       	rjmp	8000af7c <_vfprintf_r+0x1b68>
8000af68:	fa ca f9 78 	sub	r10,sp,-1672
8000af6c:	02 9b       	mov	r11,r1
8000af6e:	0a 9c       	mov	r12,r5
8000af70:	fe b0 f2 44 	rcall	800093f8 <__sprint_r>
8000af74:	e0 81 01 d4 	brne	8000b31c <_vfprintf_r+0x1f08>
8000af78:	fa c4 f9 e0 	sub	r4,sp,-1568
8000af7c:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000af80:	40 6a       	lddsp	r10,sp[0x18]
8000af82:	14 16       	sub	r6,r10
8000af84:	58 06       	cp.w	r6,0
8000af86:	e0 89 00 1c 	brgt	8000afbe <_vfprintf_r+0x1baa>
8000af8a:	c3 b8       	rjmp	8000b000 <_vfprintf_r+0x1bec>
8000af8c:	2f 09       	sub	r9,-16
8000af8e:	2f f8       	sub	r8,-1
8000af90:	fb 49 06 90 	st.w	sp[1680],r9
8000af94:	89 02       	st.w	r4[0x0],r2
8000af96:	89 10       	st.w	r4[0x4],r0
8000af98:	fb 48 06 8c 	st.w	sp[1676],r8
8000af9c:	58 78       	cp.w	r8,7
8000af9e:	e0 89 00 04 	brgt	8000afa6 <_vfprintf_r+0x1b92>
8000afa2:	2f 84       	sub	r4,-8
8000afa4:	c0 b8       	rjmp	8000afba <_vfprintf_r+0x1ba6>
8000afa6:	fa ca f9 78 	sub	r10,sp,-1672
8000afaa:	02 9b       	mov	r11,r1
8000afac:	0a 9c       	mov	r12,r5
8000afae:	fe b0 f2 25 	rcall	800093f8 <__sprint_r>
8000afb2:	e0 81 01 b5 	brne	8000b31c <_vfprintf_r+0x1f08>
8000afb6:	fa c4 f9 e0 	sub	r4,sp,-1568
8000afba:	21 06       	sub	r6,16
8000afbc:	c0 38       	rjmp	8000afc2 <_vfprintf_r+0x1bae>
8000afbe:	4d c2       	lddpc	r2,8000b12c <_vfprintf_r+0x1d18>
8000afc0:	31 00       	mov	r0,16
8000afc2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000afc6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000afca:	4d 9a       	lddpc	r10,8000b12c <_vfprintf_r+0x1d18>
8000afcc:	59 06       	cp.w	r6,16
8000afce:	fe 99 ff df 	brgt	8000af8c <_vfprintf_r+0x1b78>
8000afd2:	0c 09       	add	r9,r6
8000afd4:	2f f8       	sub	r8,-1
8000afd6:	89 0a       	st.w	r4[0x0],r10
8000afd8:	fb 49 06 90 	st.w	sp[1680],r9
8000afdc:	89 16       	st.w	r4[0x4],r6
8000afde:	fb 48 06 8c 	st.w	sp[1676],r8
8000afe2:	58 78       	cp.w	r8,7
8000afe4:	e0 89 00 04 	brgt	8000afec <_vfprintf_r+0x1bd8>
8000afe8:	2f 84       	sub	r4,-8
8000afea:	c0 b8       	rjmp	8000b000 <_vfprintf_r+0x1bec>
8000afec:	fa ca f9 78 	sub	r10,sp,-1672
8000aff0:	02 9b       	mov	r11,r1
8000aff2:	0a 9c       	mov	r12,r5
8000aff4:	fe b0 f2 02 	rcall	800093f8 <__sprint_r>
8000aff8:	e0 81 01 92 	brne	8000b31c <_vfprintf_r+0x1f08>
8000affc:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b000:	ed b3 00 00 	bld	r3,0x0
8000b004:	e0 81 01 20 	brne	8000b244 <_vfprintf_r+0x1e30>
8000b008:	40 c9       	lddsp	r9,sp[0x30]
8000b00a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b00e:	2f f8       	sub	r8,-1
8000b010:	89 09       	st.w	r4[0x0],r9
8000b012:	fb 48 06 90 	st.w	sp[1680],r8
8000b016:	30 19       	mov	r9,1
8000b018:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b01c:	89 19       	st.w	r4[0x4],r9
8000b01e:	2f f8       	sub	r8,-1
8000b020:	fb 48 06 8c 	st.w	sp[1676],r8
8000b024:	c0 29       	rjmp	8000b228 <_vfprintf_r+0x1e14>
8000b026:	14 09       	add	r9,r10
8000b028:	2f f8       	sub	r8,-1
8000b02a:	fb 49 06 90 	st.w	sp[1680],r9
8000b02e:	89 06       	st.w	r4[0x0],r6
8000b030:	89 1a       	st.w	r4[0x4],r10
8000b032:	fb 48 06 8c 	st.w	sp[1676],r8
8000b036:	58 78       	cp.w	r8,7
8000b038:	e0 89 00 04 	brgt	8000b040 <_vfprintf_r+0x1c2c>
8000b03c:	2f 84       	sub	r4,-8
8000b03e:	c0 b8       	rjmp	8000b054 <_vfprintf_r+0x1c40>
8000b040:	fa ca f9 78 	sub	r10,sp,-1672
8000b044:	02 9b       	mov	r11,r1
8000b046:	0a 9c       	mov	r12,r5
8000b048:	fe b0 f1 d8 	rcall	800093f8 <__sprint_r>
8000b04c:	e0 81 01 68 	brne	8000b31c <_vfprintf_r+0x1f08>
8000b050:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b054:	40 c8       	lddsp	r8,sp[0x30]
8000b056:	89 08       	st.w	r4[0x0],r8
8000b058:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b05c:	2f f8       	sub	r8,-1
8000b05e:	30 19       	mov	r9,1
8000b060:	fb 48 06 90 	st.w	sp[1680],r8
8000b064:	89 19       	st.w	r4[0x4],r9
8000b066:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b06a:	2f f8       	sub	r8,-1
8000b06c:	fb 48 06 8c 	st.w	sp[1676],r8
8000b070:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000b074:	58 78       	cp.w	r8,7
8000b076:	e0 89 00 04 	brgt	8000b07e <_vfprintf_r+0x1c6a>
8000b07a:	2f 84       	sub	r4,-8
8000b07c:	c0 b8       	rjmp	8000b092 <_vfprintf_r+0x1c7e>
8000b07e:	fa ca f9 78 	sub	r10,sp,-1672
8000b082:	02 9b       	mov	r11,r1
8000b084:	0a 9c       	mov	r12,r5
8000b086:	fe b0 f1 b9 	rcall	800093f8 <__sprint_r>
8000b08a:	e0 81 01 49 	brne	8000b31c <_vfprintf_r+0x1f08>
8000b08e:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b092:	04 06       	add	r6,r2
8000b094:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000b098:	89 06       	st.w	r4[0x0],r6
8000b09a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b09e:	40 66       	lddsp	r6,sp[0x18]
8000b0a0:	40 6e       	lddsp	lr,sp[0x18]
8000b0a2:	10 16       	sub	r6,r8
8000b0a4:	f2 08 01 08 	sub	r8,r9,r8
8000b0a8:	89 16       	st.w	r4[0x4],r6
8000b0aa:	1c 08       	add	r8,lr
8000b0ac:	fb 48 06 90 	st.w	sp[1680],r8
8000b0b0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b0b4:	2f f8       	sub	r8,-1
8000b0b6:	fb 48 06 8c 	st.w	sp[1676],r8
8000b0ba:	cb 78       	rjmp	8000b228 <_vfprintf_r+0x1e14>
8000b0bc:	40 6c       	lddsp	r12,sp[0x18]
8000b0be:	58 1c       	cp.w	r12,1
8000b0c0:	e0 89 00 06 	brgt	8000b0cc <_vfprintf_r+0x1cb8>
8000b0c4:	ed b3 00 00 	bld	r3,0x0
8000b0c8:	e0 81 00 85 	brne	8000b1d2 <_vfprintf_r+0x1dbe>
8000b0cc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b0d0:	2f f8       	sub	r8,-1
8000b0d2:	30 19       	mov	r9,1
8000b0d4:	fb 48 06 90 	st.w	sp[1680],r8
8000b0d8:	89 06       	st.w	r4[0x0],r6
8000b0da:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b0de:	89 19       	st.w	r4[0x4],r9
8000b0e0:	2f f8       	sub	r8,-1
8000b0e2:	fb 48 06 8c 	st.w	sp[1676],r8
8000b0e6:	58 78       	cp.w	r8,7
8000b0e8:	e0 89 00 04 	brgt	8000b0f0 <_vfprintf_r+0x1cdc>
8000b0ec:	2f 84       	sub	r4,-8
8000b0ee:	c0 b8       	rjmp	8000b104 <_vfprintf_r+0x1cf0>
8000b0f0:	fa ca f9 78 	sub	r10,sp,-1672
8000b0f4:	02 9b       	mov	r11,r1
8000b0f6:	0a 9c       	mov	r12,r5
8000b0f8:	fe b0 f1 80 	rcall	800093f8 <__sprint_r>
8000b0fc:	e0 81 01 10 	brne	8000b31c <_vfprintf_r+0x1f08>
8000b100:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b104:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b108:	2f f8       	sub	r8,-1
8000b10a:	40 cb       	lddsp	r11,sp[0x30]
8000b10c:	fb 48 06 90 	st.w	sp[1680],r8
8000b110:	30 19       	mov	r9,1
8000b112:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b116:	89 0b       	st.w	r4[0x0],r11
8000b118:	2f f8       	sub	r8,-1
8000b11a:	89 19       	st.w	r4[0x4],r9
8000b11c:	fb 48 06 8c 	st.w	sp[1676],r8
8000b120:	58 78       	cp.w	r8,7
8000b122:	e0 89 00 07 	brgt	8000b130 <_vfprintf_r+0x1d1c>
8000b126:	2f 84       	sub	r4,-8
8000b128:	c0 e8       	rjmp	8000b144 <_vfprintf_r+0x1d30>
8000b12a:	d7 03       	nop
8000b12c:	80 00       	ld.sh	r0,r0[0x0]
8000b12e:	e9 08 fa ca 	ld.sh	r8,r4[-1334]
8000b132:	f9 78 02 9b 	stcond	r12[667],r8
8000b136:	0a 9c       	mov	r12,r5
8000b138:	fe b0 f1 60 	rcall	800093f8 <__sprint_r>
8000b13c:	e0 81 00 f0 	brne	8000b31c <_vfprintf_r+0x1f08>
8000b140:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b144:	30 08       	mov	r8,0
8000b146:	30 09       	mov	r9,0
8000b148:	40 5b       	lddsp	r11,sp[0x14]
8000b14a:	40 7a       	lddsp	r10,sp[0x1c]
8000b14c:	e0 a0 15 2d 	rcall	8000dba6 <__avr32_f64_cmp_eq>
8000b150:	40 68       	lddsp	r8,sp[0x18]
8000b152:	20 18       	sub	r8,1
8000b154:	58 0c       	cp.w	r12,0
8000b156:	c0 d1       	brne	8000b170 <_vfprintf_r+0x1d5c>
8000b158:	2f f6       	sub	r6,-1
8000b15a:	89 18       	st.w	r4[0x4],r8
8000b15c:	89 06       	st.w	r4[0x0],r6
8000b15e:	fa f6 06 90 	ld.w	r6,sp[1680]
8000b162:	10 06       	add	r6,r8
8000b164:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b168:	fb 46 06 90 	st.w	sp[1680],r6
8000b16c:	2f f8       	sub	r8,-1
8000b16e:	c2 f8       	rjmp	8000b1cc <_vfprintf_r+0x1db8>
8000b170:	10 96       	mov	r6,r8
8000b172:	58 08       	cp.w	r8,0
8000b174:	e0 89 00 1c 	brgt	8000b1ac <_vfprintf_r+0x1d98>
8000b178:	c4 98       	rjmp	8000b20a <_vfprintf_r+0x1df6>
8000b17a:	2f 09       	sub	r9,-16
8000b17c:	2f f8       	sub	r8,-1
8000b17e:	fb 49 06 90 	st.w	sp[1680],r9
8000b182:	89 02       	st.w	r4[0x0],r2
8000b184:	89 10       	st.w	r4[0x4],r0
8000b186:	fb 48 06 8c 	st.w	sp[1676],r8
8000b18a:	58 78       	cp.w	r8,7
8000b18c:	e0 89 00 04 	brgt	8000b194 <_vfprintf_r+0x1d80>
8000b190:	2f 84       	sub	r4,-8
8000b192:	c0 b8       	rjmp	8000b1a8 <_vfprintf_r+0x1d94>
8000b194:	fa ca f9 78 	sub	r10,sp,-1672
8000b198:	02 9b       	mov	r11,r1
8000b19a:	0a 9c       	mov	r12,r5
8000b19c:	fe b0 f1 2e 	rcall	800093f8 <__sprint_r>
8000b1a0:	e0 81 00 be 	brne	8000b31c <_vfprintf_r+0x1f08>
8000b1a4:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b1a8:	21 06       	sub	r6,16
8000b1aa:	c0 38       	rjmp	8000b1b0 <_vfprintf_r+0x1d9c>
8000b1ac:	4d 22       	lddpc	r2,8000b2f4 <_vfprintf_r+0x1ee0>
8000b1ae:	31 00       	mov	r0,16
8000b1b0:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b1b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b1b8:	4c fa       	lddpc	r10,8000b2f4 <_vfprintf_r+0x1ee0>
8000b1ba:	59 06       	cp.w	r6,16
8000b1bc:	fe 99 ff df 	brgt	8000b17a <_vfprintf_r+0x1d66>
8000b1c0:	0c 09       	add	r9,r6
8000b1c2:	89 0a       	st.w	r4[0x0],r10
8000b1c4:	fb 49 06 90 	st.w	sp[1680],r9
8000b1c8:	2f f8       	sub	r8,-1
8000b1ca:	89 16       	st.w	r4[0x4],r6
8000b1cc:	fb 48 06 8c 	st.w	sp[1676],r8
8000b1d0:	c0 e8       	rjmp	8000b1ec <_vfprintf_r+0x1dd8>
8000b1d2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b1d6:	2f f8       	sub	r8,-1
8000b1d8:	30 19       	mov	r9,1
8000b1da:	fb 48 06 90 	st.w	sp[1680],r8
8000b1de:	89 06       	st.w	r4[0x0],r6
8000b1e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b1e4:	89 19       	st.w	r4[0x4],r9
8000b1e6:	2f f8       	sub	r8,-1
8000b1e8:	fb 48 06 8c 	st.w	sp[1676],r8
8000b1ec:	58 78       	cp.w	r8,7
8000b1ee:	e0 89 00 04 	brgt	8000b1f6 <_vfprintf_r+0x1de2>
8000b1f2:	2f 84       	sub	r4,-8
8000b1f4:	c0 b8       	rjmp	8000b20a <_vfprintf_r+0x1df6>
8000b1f6:	fa ca f9 78 	sub	r10,sp,-1672
8000b1fa:	02 9b       	mov	r11,r1
8000b1fc:	0a 9c       	mov	r12,r5
8000b1fe:	fe b0 f0 fd 	rcall	800093f8 <__sprint_r>
8000b202:	e0 81 00 8d 	brne	8000b31c <_vfprintf_r+0x1f08>
8000b206:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b20a:	40 ea       	lddsp	r10,sp[0x38]
8000b20c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b210:	14 08       	add	r8,r10
8000b212:	fa c9 f9 64 	sub	r9,sp,-1692
8000b216:	fb 48 06 90 	st.w	sp[1680],r8
8000b21a:	89 1a       	st.w	r4[0x4],r10
8000b21c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b220:	89 09       	st.w	r4[0x0],r9
8000b222:	2f f8       	sub	r8,-1
8000b224:	fb 48 06 8c 	st.w	sp[1676],r8
8000b228:	58 78       	cp.w	r8,7
8000b22a:	e0 89 00 04 	brgt	8000b232 <_vfprintf_r+0x1e1e>
8000b22e:	2f 84       	sub	r4,-8
8000b230:	c0 a8       	rjmp	8000b244 <_vfprintf_r+0x1e30>
8000b232:	fa ca f9 78 	sub	r10,sp,-1672
8000b236:	02 9b       	mov	r11,r1
8000b238:	0a 9c       	mov	r12,r5
8000b23a:	fe b0 f0 df 	rcall	800093f8 <__sprint_r>
8000b23e:	c6 f1       	brne	8000b31c <_vfprintf_r+0x1f08>
8000b240:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b244:	e2 13 00 04 	andl	r3,0x4,COH
8000b248:	c3 d0       	breq	8000b2c2 <_vfprintf_r+0x1eae>
8000b24a:	40 86       	lddsp	r6,sp[0x20]
8000b24c:	40 39       	lddsp	r9,sp[0xc]
8000b24e:	12 16       	sub	r6,r9
8000b250:	58 06       	cp.w	r6,0
8000b252:	e0 89 00 1a 	brgt	8000b286 <_vfprintf_r+0x1e72>
8000b256:	c3 68       	rjmp	8000b2c2 <_vfprintf_r+0x1eae>
8000b258:	2f 09       	sub	r9,-16
8000b25a:	2f f8       	sub	r8,-1
8000b25c:	fb 49 06 90 	st.w	sp[1680],r9
8000b260:	89 03       	st.w	r4[0x0],r3
8000b262:	89 12       	st.w	r4[0x4],r2
8000b264:	fb 48 06 8c 	st.w	sp[1676],r8
8000b268:	58 78       	cp.w	r8,7
8000b26a:	e0 89 00 04 	brgt	8000b272 <_vfprintf_r+0x1e5e>
8000b26e:	2f 84       	sub	r4,-8
8000b270:	c0 98       	rjmp	8000b282 <_vfprintf_r+0x1e6e>
8000b272:	00 9a       	mov	r10,r0
8000b274:	02 9b       	mov	r11,r1
8000b276:	0a 9c       	mov	r12,r5
8000b278:	fe b0 f0 c0 	rcall	800093f8 <__sprint_r>
8000b27c:	c5 01       	brne	8000b31c <_vfprintf_r+0x1f08>
8000b27e:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b282:	21 06       	sub	r6,16
8000b284:	c0 58       	rjmp	8000b28e <_vfprintf_r+0x1e7a>
8000b286:	49 d3       	lddpc	r3,8000b2f8 <_vfprintf_r+0x1ee4>
8000b288:	31 02       	mov	r2,16
8000b28a:	fa c0 f9 78 	sub	r0,sp,-1672
8000b28e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b292:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b296:	49 9a       	lddpc	r10,8000b2f8 <_vfprintf_r+0x1ee4>
8000b298:	59 06       	cp.w	r6,16
8000b29a:	fe 99 ff df 	brgt	8000b258 <_vfprintf_r+0x1e44>
8000b29e:	0c 09       	add	r9,r6
8000b2a0:	2f f8       	sub	r8,-1
8000b2a2:	89 0a       	st.w	r4[0x0],r10
8000b2a4:	89 16       	st.w	r4[0x4],r6
8000b2a6:	fb 49 06 90 	st.w	sp[1680],r9
8000b2aa:	fb 48 06 8c 	st.w	sp[1676],r8
8000b2ae:	58 78       	cp.w	r8,7
8000b2b0:	e0 8a 00 09 	brle	8000b2c2 <_vfprintf_r+0x1eae>
8000b2b4:	fa ca f9 78 	sub	r10,sp,-1672
8000b2b8:	02 9b       	mov	r11,r1
8000b2ba:	0a 9c       	mov	r12,r5
8000b2bc:	fe b0 f0 9e 	rcall	800093f8 <__sprint_r>
8000b2c0:	c2 e1       	brne	8000b31c <_vfprintf_r+0x1f08>
8000b2c2:	40 bc       	lddsp	r12,sp[0x2c]
8000b2c4:	40 36       	lddsp	r6,sp[0xc]
8000b2c6:	40 8e       	lddsp	lr,sp[0x20]
8000b2c8:	ec 0e 0c 48 	max	r8,r6,lr
8000b2cc:	10 0c       	add	r12,r8
8000b2ce:	50 bc       	stdsp	sp[0x2c],r12
8000b2d0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b2d4:	58 08       	cp.w	r8,0
8000b2d6:	c0 80       	breq	8000b2e6 <_vfprintf_r+0x1ed2>
8000b2d8:	fa ca f9 78 	sub	r10,sp,-1672
8000b2dc:	02 9b       	mov	r11,r1
8000b2de:	0a 9c       	mov	r12,r5
8000b2e0:	fe b0 f0 8c 	rcall	800093f8 <__sprint_r>
8000b2e4:	c1 c1       	brne	8000b31c <_vfprintf_r+0x1f08>
8000b2e6:	30 0b       	mov	r11,0
8000b2e8:	fa c4 f9 e0 	sub	r4,sp,-1568
8000b2ec:	fb 4b 06 8c 	st.w	sp[1676],r11
8000b2f0:	fe 9f f1 1c 	bral	80009528 <_vfprintf_r+0x114>
8000b2f4:	80 00       	ld.sh	r0,r0[0x0]
8000b2f6:	e9 08 80 00 	ld.sh	r8,r4[-32768]
8000b2fa:	e8 f8 fa f8 	ld.w	r8,r4[-1288]
8000b2fe:	06 90       	mov	r0,r3
8000b300:	58 08       	cp.w	r8,0
8000b302:	c0 80       	breq	8000b312 <_vfprintf_r+0x1efe>
8000b304:	0a 9c       	mov	r12,r5
8000b306:	fa ca f9 78 	sub	r10,sp,-1672
8000b30a:	02 9b       	mov	r11,r1
8000b30c:	fe b0 f0 76 	rcall	800093f8 <__sprint_r>
8000b310:	c0 61       	brne	8000b31c <_vfprintf_r+0x1f08>
8000b312:	30 08       	mov	r8,0
8000b314:	fb 48 06 8c 	st.w	sp[1676],r8
8000b318:	c0 28       	rjmp	8000b31c <_vfprintf_r+0x1f08>
8000b31a:	40 41       	lddsp	r1,sp[0x10]
8000b31c:	82 68       	ld.sh	r8,r1[0xc]
8000b31e:	ed b8 00 06 	bld	r8,0x6
8000b322:	c0 31       	brne	8000b328 <_vfprintf_r+0x1f14>
8000b324:	3f fa       	mov	r10,-1
8000b326:	50 ba       	stdsp	sp[0x2c],r10
8000b328:	40 bc       	lddsp	r12,sp[0x2c]
8000b32a:	fe 3d f9 44 	sub	sp,-1724
8000b32e:	d8 32       	popm	r0-r7,pc

8000b330 <__swsetup_r>:
8000b330:	d4 21       	pushm	r4-r7,lr
8000b332:	4b 38       	lddpc	r8,8000b3fc <__swsetup_r+0xcc>
8000b334:	18 96       	mov	r6,r12
8000b336:	16 97       	mov	r7,r11
8000b338:	70 0c       	ld.w	r12,r8[0x0]
8000b33a:	58 0c       	cp.w	r12,0
8000b33c:	c0 60       	breq	8000b348 <__swsetup_r+0x18>
8000b33e:	78 68       	ld.w	r8,r12[0x18]
8000b340:	58 08       	cp.w	r8,0
8000b342:	c0 31       	brne	8000b348 <__swsetup_r+0x18>
8000b344:	e0 a0 07 c0 	rcall	8000c2c4 <__sinit>
8000b348:	4a e8       	lddpc	r8,8000b400 <__swsetup_r+0xd0>
8000b34a:	10 37       	cp.w	r7,r8
8000b34c:	c0 51       	brne	8000b356 <__swsetup_r+0x26>
8000b34e:	4a c8       	lddpc	r8,8000b3fc <__swsetup_r+0xcc>
8000b350:	70 08       	ld.w	r8,r8[0x0]
8000b352:	70 07       	ld.w	r7,r8[0x0]
8000b354:	c0 e8       	rjmp	8000b370 <__swsetup_r+0x40>
8000b356:	4a c8       	lddpc	r8,8000b404 <__swsetup_r+0xd4>
8000b358:	10 37       	cp.w	r7,r8
8000b35a:	c0 51       	brne	8000b364 <__swsetup_r+0x34>
8000b35c:	4a 88       	lddpc	r8,8000b3fc <__swsetup_r+0xcc>
8000b35e:	70 08       	ld.w	r8,r8[0x0]
8000b360:	70 17       	ld.w	r7,r8[0x4]
8000b362:	c0 78       	rjmp	8000b370 <__swsetup_r+0x40>
8000b364:	4a 98       	lddpc	r8,8000b408 <__swsetup_r+0xd8>
8000b366:	10 37       	cp.w	r7,r8
8000b368:	c0 41       	brne	8000b370 <__swsetup_r+0x40>
8000b36a:	4a 58       	lddpc	r8,8000b3fc <__swsetup_r+0xcc>
8000b36c:	70 08       	ld.w	r8,r8[0x0]
8000b36e:	70 27       	ld.w	r7,r8[0x8]
8000b370:	8e 68       	ld.sh	r8,r7[0xc]
8000b372:	ed b8 00 03 	bld	r8,0x3
8000b376:	c1 e0       	breq	8000b3b2 <__swsetup_r+0x82>
8000b378:	ed b8 00 04 	bld	r8,0x4
8000b37c:	c3 e1       	brne	8000b3f8 <__swsetup_r+0xc8>
8000b37e:	ed b8 00 02 	bld	r8,0x2
8000b382:	c1 51       	brne	8000b3ac <__swsetup_r+0x7c>
8000b384:	6e db       	ld.w	r11,r7[0x34]
8000b386:	58 0b       	cp.w	r11,0
8000b388:	c0 a0       	breq	8000b39c <__swsetup_r+0x6c>
8000b38a:	ee c8 ff bc 	sub	r8,r7,-68
8000b38e:	10 3b       	cp.w	r11,r8
8000b390:	c0 40       	breq	8000b398 <__swsetup_r+0x68>
8000b392:	0c 9c       	mov	r12,r6
8000b394:	e0 a0 08 34 	rcall	8000c3fc <_free_r>
8000b398:	30 08       	mov	r8,0
8000b39a:	8f d8       	st.w	r7[0x34],r8
8000b39c:	8e 68       	ld.sh	r8,r7[0xc]
8000b39e:	e0 18 ff db 	andl	r8,0xffdb
8000b3a2:	ae 68       	st.h	r7[0xc],r8
8000b3a4:	30 08       	mov	r8,0
8000b3a6:	8f 18       	st.w	r7[0x4],r8
8000b3a8:	6e 48       	ld.w	r8,r7[0x10]
8000b3aa:	8f 08       	st.w	r7[0x0],r8
8000b3ac:	8e 68       	ld.sh	r8,r7[0xc]
8000b3ae:	a3 b8       	sbr	r8,0x3
8000b3b0:	ae 68       	st.h	r7[0xc],r8
8000b3b2:	6e 48       	ld.w	r8,r7[0x10]
8000b3b4:	58 08       	cp.w	r8,0
8000b3b6:	c0 b1       	brne	8000b3cc <__swsetup_r+0x9c>
8000b3b8:	8e 68       	ld.sh	r8,r7[0xc]
8000b3ba:	e2 18 02 80 	andl	r8,0x280,COH
8000b3be:	e0 48 02 00 	cp.w	r8,512
8000b3c2:	c0 50       	breq	8000b3cc <__swsetup_r+0x9c>
8000b3c4:	0c 9c       	mov	r12,r6
8000b3c6:	0e 9b       	mov	r11,r7
8000b3c8:	e0 a0 0a 5e 	rcall	8000c884 <__smakebuf_r>
8000b3cc:	8e 69       	ld.sh	r9,r7[0xc]
8000b3ce:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000b3d2:	c0 70       	breq	8000b3e0 <__swsetup_r+0xb0>
8000b3d4:	30 08       	mov	r8,0
8000b3d6:	8f 28       	st.w	r7[0x8],r8
8000b3d8:	6e 58       	ld.w	r8,r7[0x14]
8000b3da:	5c 38       	neg	r8
8000b3dc:	8f 68       	st.w	r7[0x18],r8
8000b3de:	c0 68       	rjmp	8000b3ea <__swsetup_r+0xba>
8000b3e0:	ed b9 00 01 	bld	r9,0x1
8000b3e4:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000b3e8:	8f 28       	st.w	r7[0x8],r8
8000b3ea:	6e 48       	ld.w	r8,r7[0x10]
8000b3ec:	58 08       	cp.w	r8,0
8000b3ee:	c0 61       	brne	8000b3fa <__swsetup_r+0xca>
8000b3f0:	8e 68       	ld.sh	r8,r7[0xc]
8000b3f2:	ed b8 00 07 	bld	r8,0x7
8000b3f6:	c0 21       	brne	8000b3fa <__swsetup_r+0xca>
8000b3f8:	dc 2a       	popm	r4-r7,pc,r12=-1
8000b3fa:	d8 2a       	popm	r4-r7,pc,r12=0
8000b3fc:	00 00       	add	r0,r0
8000b3fe:	02 f8       	st.b	--r1,r8
8000b400:	80 00       	ld.sh	r0,r0[0x0]
8000b402:	ea 28 80 00 	sub	r8,688128
8000b406:	ea 48 80 00 	cp.w	r8,688128
8000b40a:	ea 68 d4 31 	mov	r8,709681

8000b40c <quorem>:
8000b40c:	d4 31       	pushm	r0-r7,lr
8000b40e:	20 2d       	sub	sp,8
8000b410:	18 97       	mov	r7,r12
8000b412:	78 48       	ld.w	r8,r12[0x10]
8000b414:	76 46       	ld.w	r6,r11[0x10]
8000b416:	0c 38       	cp.w	r8,r6
8000b418:	c0 34       	brge	8000b41e <quorem+0x12>
8000b41a:	30 0c       	mov	r12,0
8000b41c:	c8 58       	rjmp	8000b526 <quorem+0x11a>
8000b41e:	ec c2 ff fc 	sub	r2,r6,-4
8000b422:	f6 c3 ff ec 	sub	r3,r11,-20
8000b426:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000b42a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000b42e:	2f f9       	sub	r9,-1
8000b430:	20 16       	sub	r6,1
8000b432:	f8 09 0d 08 	divu	r8,r12,r9
8000b436:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000b43a:	ee c4 ff ec 	sub	r4,r7,-20
8000b43e:	10 95       	mov	r5,r8
8000b440:	58 08       	cp.w	r8,0
8000b442:	c4 10       	breq	8000b4c4 <quorem+0xb8>
8000b444:	30 09       	mov	r9,0
8000b446:	06 9a       	mov	r10,r3
8000b448:	08 98       	mov	r8,r4
8000b44a:	12 91       	mov	r1,r9
8000b44c:	50 0b       	stdsp	sp[0x0],r11
8000b44e:	70 0e       	ld.w	lr,r8[0x0]
8000b450:	b1 8e       	lsr	lr,0x10
8000b452:	50 1e       	stdsp	sp[0x4],lr
8000b454:	15 0e       	ld.w	lr,r10++
8000b456:	fc 00 16 10 	lsr	r0,lr,0x10
8000b45a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000b45e:	ea 0e 03 41 	mac	r1,r5,lr
8000b462:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000b466:	b1 81       	lsr	r1,0x10
8000b468:	40 1b       	lddsp	r11,sp[0x4]
8000b46a:	ea 00 02 40 	mul	r0,r5,r0
8000b46e:	e2 00 00 00 	add	r0,r1,r0
8000b472:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000b476:	02 1b       	sub	r11,r1
8000b478:	50 1b       	stdsp	sp[0x4],r11
8000b47a:	70 0b       	ld.w	r11,r8[0x0]
8000b47c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000b480:	02 09       	add	r9,r1
8000b482:	f2 0e 01 0e 	sub	lr,r9,lr
8000b486:	b0 1e       	st.h	r8[0x2],lr
8000b488:	fc 09 14 10 	asr	r9,lr,0x10
8000b48c:	40 1e       	lddsp	lr,sp[0x4]
8000b48e:	fc 09 00 09 	add	r9,lr,r9
8000b492:	b0 09       	st.h	r8[0x0],r9
8000b494:	e0 01 16 10 	lsr	r1,r0,0x10
8000b498:	2f c8       	sub	r8,-4
8000b49a:	b1 49       	asr	r9,0x10
8000b49c:	04 3a       	cp.w	r10,r2
8000b49e:	fe 98 ff d8 	brls	8000b44e <quorem+0x42>
8000b4a2:	40 0b       	lddsp	r11,sp[0x0]
8000b4a4:	58 0c       	cp.w	r12,0
8000b4a6:	c0 f1       	brne	8000b4c4 <quorem+0xb8>
8000b4a8:	ec c8 ff fb 	sub	r8,r6,-5
8000b4ac:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000b4b0:	c0 28       	rjmp	8000b4b4 <quorem+0xa8>
8000b4b2:	20 16       	sub	r6,1
8000b4b4:	20 48       	sub	r8,4
8000b4b6:	08 38       	cp.w	r8,r4
8000b4b8:	e0 88 00 05 	brls	8000b4c2 <quorem+0xb6>
8000b4bc:	70 09       	ld.w	r9,r8[0x0]
8000b4be:	58 09       	cp.w	r9,0
8000b4c0:	cf 90       	breq	8000b4b2 <quorem+0xa6>
8000b4c2:	8f 46       	st.w	r7[0x10],r6
8000b4c4:	0e 9c       	mov	r12,r7
8000b4c6:	e0 a0 0d 0d 	rcall	8000cee0 <__mcmp>
8000b4ca:	c2 d5       	brlt	8000b524 <quorem+0x118>
8000b4cc:	2f f5       	sub	r5,-1
8000b4ce:	08 98       	mov	r8,r4
8000b4d0:	30 09       	mov	r9,0
8000b4d2:	07 0b       	ld.w	r11,r3++
8000b4d4:	f6 0a 16 10 	lsr	r10,r11,0x10
8000b4d8:	70 0c       	ld.w	r12,r8[0x0]
8000b4da:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000b4de:	f8 0e 16 10 	lsr	lr,r12,0x10
8000b4e2:	14 1e       	sub	lr,r10
8000b4e4:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000b4e8:	16 1a       	sub	r10,r11
8000b4ea:	12 0a       	add	r10,r9
8000b4ec:	b0 1a       	st.h	r8[0x2],r10
8000b4ee:	b1 4a       	asr	r10,0x10
8000b4f0:	fc 0a 00 09 	add	r9,lr,r10
8000b4f4:	b0 09       	st.h	r8[0x0],r9
8000b4f6:	2f c8       	sub	r8,-4
8000b4f8:	b1 49       	asr	r9,0x10
8000b4fa:	04 33       	cp.w	r3,r2
8000b4fc:	fe 98 ff eb 	brls	8000b4d2 <quorem+0xc6>
8000b500:	ec c8 ff fb 	sub	r8,r6,-5
8000b504:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000b508:	58 09       	cp.w	r9,0
8000b50a:	c0 d1       	brne	8000b524 <quorem+0x118>
8000b50c:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000b510:	c0 28       	rjmp	8000b514 <quorem+0x108>
8000b512:	20 16       	sub	r6,1
8000b514:	20 48       	sub	r8,4
8000b516:	08 38       	cp.w	r8,r4
8000b518:	e0 88 00 05 	brls	8000b522 <quorem+0x116>
8000b51c:	70 09       	ld.w	r9,r8[0x0]
8000b51e:	58 09       	cp.w	r9,0
8000b520:	cf 90       	breq	8000b512 <quorem+0x106>
8000b522:	8f 46       	st.w	r7[0x10],r6
8000b524:	0a 9c       	mov	r12,r5
8000b526:	2f ed       	sub	sp,-8
8000b528:	d8 32       	popm	r0-r7,pc
8000b52a:	d7 03       	nop

8000b52c <_dtoa_r>:
8000b52c:	d4 31       	pushm	r0-r7,lr
8000b52e:	21 ad       	sub	sp,104
8000b530:	fa c4 ff 74 	sub	r4,sp,-140
8000b534:	18 97       	mov	r7,r12
8000b536:	16 95       	mov	r5,r11
8000b538:	68 2c       	ld.w	r12,r4[0x8]
8000b53a:	50 c9       	stdsp	sp[0x30],r9
8000b53c:	68 16       	ld.w	r6,r4[0x4]
8000b53e:	68 09       	ld.w	r9,r4[0x0]
8000b540:	50 e8       	stdsp	sp[0x38],r8
8000b542:	14 94       	mov	r4,r10
8000b544:	51 2c       	stdsp	sp[0x48],r12
8000b546:	fa e5 00 08 	st.d	sp[8],r4
8000b54a:	51 59       	stdsp	sp[0x54],r9
8000b54c:	6e 95       	ld.w	r5,r7[0x24]
8000b54e:	58 05       	cp.w	r5,0
8000b550:	c0 91       	brne	8000b562 <_dtoa_r+0x36>
8000b552:	31 0c       	mov	r12,16
8000b554:	e0 a0 09 fa 	rcall	8000c948 <malloc>
8000b558:	99 35       	st.w	r12[0xc],r5
8000b55a:	8f 9c       	st.w	r7[0x24],r12
8000b55c:	99 15       	st.w	r12[0x4],r5
8000b55e:	99 25       	st.w	r12[0x8],r5
8000b560:	99 05       	st.w	r12[0x0],r5
8000b562:	6e 99       	ld.w	r9,r7[0x24]
8000b564:	72 08       	ld.w	r8,r9[0x0]
8000b566:	58 08       	cp.w	r8,0
8000b568:	c0 f0       	breq	8000b586 <_dtoa_r+0x5a>
8000b56a:	72 1a       	ld.w	r10,r9[0x4]
8000b56c:	91 1a       	st.w	r8[0x4],r10
8000b56e:	30 1a       	mov	r10,1
8000b570:	72 19       	ld.w	r9,r9[0x4]
8000b572:	f4 09 09 49 	lsl	r9,r10,r9
8000b576:	10 9b       	mov	r11,r8
8000b578:	91 29       	st.w	r8[0x8],r9
8000b57a:	0e 9c       	mov	r12,r7
8000b57c:	e0 a0 0c cc 	rcall	8000cf14 <_Bfree>
8000b580:	6e 98       	ld.w	r8,r7[0x24]
8000b582:	30 09       	mov	r9,0
8000b584:	91 09       	st.w	r8[0x0],r9
8000b586:	40 28       	lddsp	r8,sp[0x8]
8000b588:	10 94       	mov	r4,r8
8000b58a:	58 08       	cp.w	r8,0
8000b58c:	c0 64       	brge	8000b598 <_dtoa_r+0x6c>
8000b58e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000b592:	50 28       	stdsp	sp[0x8],r8
8000b594:	30 18       	mov	r8,1
8000b596:	c0 28       	rjmp	8000b59a <_dtoa_r+0x6e>
8000b598:	30 08       	mov	r8,0
8000b59a:	8d 08       	st.w	r6[0x0],r8
8000b59c:	fc 1c 7f f0 	movh	r12,0x7ff0
8000b5a0:	40 26       	lddsp	r6,sp[0x8]
8000b5a2:	0c 98       	mov	r8,r6
8000b5a4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b5a8:	18 38       	cp.w	r8,r12
8000b5aa:	c1 c1       	brne	8000b5e2 <_dtoa_r+0xb6>
8000b5ac:	e0 68 27 0f 	mov	r8,9999
8000b5b0:	41 5b       	lddsp	r11,sp[0x54]
8000b5b2:	97 08       	st.w	r11[0x0],r8
8000b5b4:	40 3a       	lddsp	r10,sp[0xc]
8000b5b6:	58 0a       	cp.w	r10,0
8000b5b8:	c0 61       	brne	8000b5c4 <_dtoa_r+0x98>
8000b5ba:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000b5be:	c0 31       	brne	8000b5c4 <_dtoa_r+0x98>
8000b5c0:	4a cc       	lddpc	r12,8000b670 <_dtoa_r+0x144>
8000b5c2:	c0 28       	rjmp	8000b5c6 <_dtoa_r+0x9a>
8000b5c4:	4a cc       	lddpc	r12,8000b674 <_dtoa_r+0x148>
8000b5c6:	41 29       	lddsp	r9,sp[0x48]
8000b5c8:	58 09       	cp.w	r9,0
8000b5ca:	e0 80 05 9e 	breq	8000c106 <_dtoa_r+0xbda>
8000b5ce:	f8 c8 ff fd 	sub	r8,r12,-3
8000b5d2:	30 09       	mov	r9,0
8000b5d4:	11 8a       	ld.ub	r10,r8[0x0]
8000b5d6:	f2 0a 18 00 	cp.b	r10,r9
8000b5da:	c1 90       	breq	8000b60c <_dtoa_r+0xe0>
8000b5dc:	f8 c8 ff f8 	sub	r8,r12,-8
8000b5e0:	c1 68       	rjmp	8000b60c <_dtoa_r+0xe0>
8000b5e2:	fa ea 00 08 	ld.d	r10,sp[8]
8000b5e6:	30 08       	mov	r8,0
8000b5e8:	fa eb 00 3c 	st.d	sp[60],r10
8000b5ec:	30 09       	mov	r9,0
8000b5ee:	e0 a0 12 dc 	rcall	8000dba6 <__avr32_f64_cmp_eq>
8000b5f2:	c1 10       	breq	8000b614 <_dtoa_r+0xe8>
8000b5f4:	30 18       	mov	r8,1
8000b5f6:	41 5a       	lddsp	r10,sp[0x54]
8000b5f8:	95 08       	st.w	r10[0x0],r8
8000b5fa:	41 29       	lddsp	r9,sp[0x48]
8000b5fc:	49 f8       	lddpc	r8,8000b678 <_dtoa_r+0x14c>
8000b5fe:	58 09       	cp.w	r9,0
8000b600:	c0 41       	brne	8000b608 <_dtoa_r+0xdc>
8000b602:	10 9c       	mov	r12,r8
8000b604:	e0 8f 05 81 	bral	8000c106 <_dtoa_r+0xbda>
8000b608:	10 9c       	mov	r12,r8
8000b60a:	2f f8       	sub	r8,-1
8000b60c:	41 25       	lddsp	r5,sp[0x48]
8000b60e:	8b 08       	st.w	r5[0x0],r8
8000b610:	e0 8f 05 7b 	bral	8000c106 <_dtoa_r+0xbda>
8000b614:	fa c8 ff 9c 	sub	r8,sp,-100
8000b618:	fa c9 ff a0 	sub	r9,sp,-96
8000b61c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000b620:	0e 9c       	mov	r12,r7
8000b622:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000b626:	e0 a0 0c c9 	rcall	8000cfb8 <__d2b>
8000b62a:	18 93       	mov	r3,r12
8000b62c:	58 05       	cp.w	r5,0
8000b62e:	c0 d0       	breq	8000b648 <_dtoa_r+0x11c>
8000b630:	fa ea 00 3c 	ld.d	r10,sp[60]
8000b634:	30 04       	mov	r4,0
8000b636:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000b63a:	ea c5 03 ff 	sub	r5,r5,1023
8000b63e:	10 9b       	mov	r11,r8
8000b640:	51 74       	stdsp	sp[0x5c],r4
8000b642:	ea 1b 3f f0 	orh	r11,0x3ff0
8000b646:	c2 a8       	rjmp	8000b69a <_dtoa_r+0x16e>
8000b648:	41 88       	lddsp	r8,sp[0x60]
8000b64a:	41 9c       	lddsp	r12,sp[0x64]
8000b64c:	10 0c       	add	r12,r8
8000b64e:	f8 c5 fb ce 	sub	r5,r12,-1074
8000b652:	e0 45 00 20 	cp.w	r5,32
8000b656:	e0 8a 00 13 	brle	8000b67c <_dtoa_r+0x150>
8000b65a:	f8 cc fb ee 	sub	r12,r12,-1042
8000b65e:	40 3b       	lddsp	r11,sp[0xc]
8000b660:	ea 08 11 40 	rsub	r8,r5,64
8000b664:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000b668:	ec 08 09 46 	lsl	r6,r6,r8
8000b66c:	0c 4c       	or	r12,r6
8000b66e:	c0 c8       	rjmp	8000b686 <_dtoa_r+0x15a>
8000b670:	80 00       	ld.sh	r0,r0[0x0]
8000b672:	ea 18 80 00 	orh	r8,0x8000
8000b676:	ea 24 80 00 	sub	r4,688128
8000b67a:	e8 f4 ea 0c 	ld.w	r4,r4[-5620]
8000b67e:	11 20       	ld.uh	r0,r8++
8000b680:	40 3a       	lddsp	r10,sp[0xc]
8000b682:	f4 0c 09 4c 	lsl	r12,r10,r12
8000b686:	e0 a0 12 1c 	rcall	8000dabe <__avr32_u32_to_f64>
8000b68a:	fc 18 fe 10 	movh	r8,0xfe10
8000b68e:	30 19       	mov	r9,1
8000b690:	ea c5 04 33 	sub	r5,r5,1075
8000b694:	f0 0b 00 0b 	add	r11,r8,r11
8000b698:	51 79       	stdsp	sp[0x5c],r9
8000b69a:	30 08       	mov	r8,0
8000b69c:	fc 19 3f f8 	movh	r9,0x3ff8
8000b6a0:	fe b0 e5 ae 	rcall	800081fc <__avr32_f64_sub>
8000b6a4:	e0 68 43 61 	mov	r8,17249
8000b6a8:	ea 18 63 6f 	orh	r8,0x636f
8000b6ac:	e0 69 87 a7 	mov	r9,34727
8000b6b0:	ea 19 3f d2 	orh	r9,0x3fd2
8000b6b4:	fe b0 e4 b8 	rcall	80008024 <__avr32_f64_mul>
8000b6b8:	e0 68 c8 b3 	mov	r8,51379
8000b6bc:	ea 18 8b 60 	orh	r8,0x8b60
8000b6c0:	e0 69 8a 28 	mov	r9,35368
8000b6c4:	ea 19 3f c6 	orh	r9,0x3fc6
8000b6c8:	fe b0 e6 68 	rcall	80008398 <__avr32_f64_add>
8000b6cc:	0a 9c       	mov	r12,r5
8000b6ce:	14 90       	mov	r0,r10
8000b6d0:	16 91       	mov	r1,r11
8000b6d2:	e0 a0 11 fa 	rcall	8000dac6 <__avr32_s32_to_f64>
8000b6d6:	e0 68 79 fb 	mov	r8,31227
8000b6da:	ea 18 50 9f 	orh	r8,0x509f
8000b6de:	e0 69 44 13 	mov	r9,17427
8000b6e2:	ea 19 3f d3 	orh	r9,0x3fd3
8000b6e6:	fe b0 e4 9f 	rcall	80008024 <__avr32_f64_mul>
8000b6ea:	14 98       	mov	r8,r10
8000b6ec:	16 99       	mov	r9,r11
8000b6ee:	00 9a       	mov	r10,r0
8000b6f0:	02 9b       	mov	r11,r1
8000b6f2:	fe b0 e6 53 	rcall	80008398 <__avr32_f64_add>
8000b6f6:	14 90       	mov	r0,r10
8000b6f8:	16 91       	mov	r1,r11
8000b6fa:	e0 a0 11 cf 	rcall	8000da98 <__avr32_f64_to_s32>
8000b6fe:	30 08       	mov	r8,0
8000b700:	18 96       	mov	r6,r12
8000b702:	30 09       	mov	r9,0
8000b704:	00 9a       	mov	r10,r0
8000b706:	02 9b       	mov	r11,r1
8000b708:	e0 a0 12 62 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000b70c:	c0 c0       	breq	8000b724 <_dtoa_r+0x1f8>
8000b70e:	0c 9c       	mov	r12,r6
8000b710:	e0 a0 11 db 	rcall	8000dac6 <__avr32_s32_to_f64>
8000b714:	14 98       	mov	r8,r10
8000b716:	16 99       	mov	r9,r11
8000b718:	00 9a       	mov	r10,r0
8000b71a:	02 9b       	mov	r11,r1
8000b71c:	e0 a0 12 45 	rcall	8000dba6 <__avr32_f64_cmp_eq>
8000b720:	f7 b6 00 01 	subeq	r6,1
8000b724:	59 66       	cp.w	r6,22
8000b726:	e0 88 00 05 	brls	8000b730 <_dtoa_r+0x204>
8000b72a:	30 18       	mov	r8,1
8000b72c:	51 48       	stdsp	sp[0x50],r8
8000b72e:	c1 28       	rjmp	8000b752 <_dtoa_r+0x226>
8000b730:	4c 08       	lddpc	r8,8000b830 <_dtoa_r+0x304>
8000b732:	fa ea 00 3c 	ld.d	r10,sp[60]
8000b736:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000b73a:	e0 a0 12 49 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000b73e:	f9 b4 00 00 	moveq	r4,0
8000b742:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000b746:	f7 b6 01 01 	subne	r6,1
8000b74a:	f9 bc 01 00 	movne	r12,0
8000b74e:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000b752:	41 90       	lddsp	r0,sp[0x64]
8000b754:	20 10       	sub	r0,1
8000b756:	0a 10       	sub	r0,r5
8000b758:	c0 46       	brmi	8000b760 <_dtoa_r+0x234>
8000b75a:	50 40       	stdsp	sp[0x10],r0
8000b75c:	30 00       	mov	r0,0
8000b75e:	c0 48       	rjmp	8000b766 <_dtoa_r+0x23a>
8000b760:	30 0b       	mov	r11,0
8000b762:	5c 30       	neg	r0
8000b764:	50 4b       	stdsp	sp[0x10],r11
8000b766:	ec 02 11 00 	rsub	r2,r6,0
8000b76a:	58 06       	cp.w	r6,0
8000b76c:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000b770:	f5 d6 e4 0a 	addge	r10,r10,r6
8000b774:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000b778:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000b77c:	f9 b2 04 00 	movge	r2,0
8000b780:	e1 d6 e5 10 	sublt	r0,r0,r6
8000b784:	f9 b9 05 00 	movlt	r9,0
8000b788:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000b78c:	40 c8       	lddsp	r8,sp[0x30]
8000b78e:	58 98       	cp.w	r8,9
8000b790:	e0 8b 00 20 	brhi	8000b7d0 <_dtoa_r+0x2a4>
8000b794:	58 58       	cp.w	r8,5
8000b796:	f9 b4 0a 01 	movle	r4,1
8000b79a:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000b79e:	f7 b5 09 04 	subgt	r5,4
8000b7a2:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000b7a6:	f9 b4 09 00 	movgt	r4,0
8000b7aa:	40 cc       	lddsp	r12,sp[0x30]
8000b7ac:	58 3c       	cp.w	r12,3
8000b7ae:	c2 d0       	breq	8000b808 <_dtoa_r+0x2dc>
8000b7b0:	e0 89 00 05 	brgt	8000b7ba <_dtoa_r+0x28e>
8000b7b4:	58 2c       	cp.w	r12,2
8000b7b6:	c1 01       	brne	8000b7d6 <_dtoa_r+0x2aa>
8000b7b8:	c1 88       	rjmp	8000b7e8 <_dtoa_r+0x2bc>
8000b7ba:	40 cb       	lddsp	r11,sp[0x30]
8000b7bc:	58 4b       	cp.w	r11,4
8000b7be:	c0 60       	breq	8000b7ca <_dtoa_r+0x29e>
8000b7c0:	58 5b       	cp.w	r11,5
8000b7c2:	c0 a1       	brne	8000b7d6 <_dtoa_r+0x2aa>
8000b7c4:	30 1a       	mov	r10,1
8000b7c6:	50 da       	stdsp	sp[0x34],r10
8000b7c8:	c2 28       	rjmp	8000b80c <_dtoa_r+0x2e0>
8000b7ca:	30 19       	mov	r9,1
8000b7cc:	50 d9       	stdsp	sp[0x34],r9
8000b7ce:	c0 f8       	rjmp	8000b7ec <_dtoa_r+0x2c0>
8000b7d0:	30 08       	mov	r8,0
8000b7d2:	30 14       	mov	r4,1
8000b7d4:	50 c8       	stdsp	sp[0x30],r8
8000b7d6:	3f f5       	mov	r5,-1
8000b7d8:	30 1c       	mov	r12,1
8000b7da:	30 0b       	mov	r11,0
8000b7dc:	50 95       	stdsp	sp[0x24],r5
8000b7de:	50 dc       	stdsp	sp[0x34],r12
8000b7e0:	0a 91       	mov	r1,r5
8000b7e2:	31 28       	mov	r8,18
8000b7e4:	50 eb       	stdsp	sp[0x38],r11
8000b7e6:	c2 08       	rjmp	8000b826 <_dtoa_r+0x2fa>
8000b7e8:	30 0a       	mov	r10,0
8000b7ea:	50 da       	stdsp	sp[0x34],r10
8000b7ec:	40 e9       	lddsp	r9,sp[0x38]
8000b7ee:	58 09       	cp.w	r9,0
8000b7f0:	e0 89 00 07 	brgt	8000b7fe <_dtoa_r+0x2d2>
8000b7f4:	30 18       	mov	r8,1
8000b7f6:	50 98       	stdsp	sp[0x24],r8
8000b7f8:	10 91       	mov	r1,r8
8000b7fa:	50 e8       	stdsp	sp[0x38],r8
8000b7fc:	c1 58       	rjmp	8000b826 <_dtoa_r+0x2fa>
8000b7fe:	40 e5       	lddsp	r5,sp[0x38]
8000b800:	50 95       	stdsp	sp[0x24],r5
8000b802:	0a 91       	mov	r1,r5
8000b804:	0a 98       	mov	r8,r5
8000b806:	c1 08       	rjmp	8000b826 <_dtoa_r+0x2fa>
8000b808:	30 0c       	mov	r12,0
8000b80a:	50 dc       	stdsp	sp[0x34],r12
8000b80c:	40 eb       	lddsp	r11,sp[0x38]
8000b80e:	ec 0b 00 0b 	add	r11,r6,r11
8000b812:	50 9b       	stdsp	sp[0x24],r11
8000b814:	16 98       	mov	r8,r11
8000b816:	2f f8       	sub	r8,-1
8000b818:	58 08       	cp.w	r8,0
8000b81a:	e0 89 00 05 	brgt	8000b824 <_dtoa_r+0x2f8>
8000b81e:	10 91       	mov	r1,r8
8000b820:	30 18       	mov	r8,1
8000b822:	c0 28       	rjmp	8000b826 <_dtoa_r+0x2fa>
8000b824:	10 91       	mov	r1,r8
8000b826:	30 09       	mov	r9,0
8000b828:	6e 9a       	ld.w	r10,r7[0x24]
8000b82a:	95 19       	st.w	r10[0x4],r9
8000b82c:	30 49       	mov	r9,4
8000b82e:	c0 78       	rjmp	8000b83c <_dtoa_r+0x310>
8000b830:	80 00       	ld.sh	r0,r0[0x0]
8000b832:	ea dc 6a 1a 	satsub.w	r12,r5,27162
8000b836:	a1 79       	lsl	r9,0x1
8000b838:	2f fa       	sub	r10,-1
8000b83a:	8b 1a       	st.w	r5[0x4],r10
8000b83c:	6e 95       	ld.w	r5,r7[0x24]
8000b83e:	f2 ca ff ec 	sub	r10,r9,-20
8000b842:	10 3a       	cp.w	r10,r8
8000b844:	fe 98 ff f8 	brls	8000b834 <_dtoa_r+0x308>
8000b848:	6a 1b       	ld.w	r11,r5[0x4]
8000b84a:	0e 9c       	mov	r12,r7
8000b84c:	e0 a0 0b 7e 	rcall	8000cf48 <_Balloc>
8000b850:	58 e1       	cp.w	r1,14
8000b852:	5f 88       	srls	r8
8000b854:	8b 0c       	st.w	r5[0x0],r12
8000b856:	f1 e4 00 04 	and	r4,r8,r4
8000b85a:	6e 98       	ld.w	r8,r7[0x24]
8000b85c:	70 08       	ld.w	r8,r8[0x0]
8000b85e:	50 88       	stdsp	sp[0x20],r8
8000b860:	e0 80 01 82 	breq	8000bb64 <_dtoa_r+0x638>
8000b864:	58 06       	cp.w	r6,0
8000b866:	e0 8a 00 40 	brle	8000b8e6 <_dtoa_r+0x3ba>
8000b86a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000b86e:	4c b8       	lddpc	r8,8000b998 <_dtoa_r+0x46c>
8000b870:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000b874:	fa e5 00 18 	st.d	sp[24],r4
8000b878:	ec 04 14 04 	asr	r4,r6,0x4
8000b87c:	ed b4 00 04 	bld	r4,0x4
8000b880:	c0 30       	breq	8000b886 <_dtoa_r+0x35a>
8000b882:	30 25       	mov	r5,2
8000b884:	c0 f8       	rjmp	8000b8a2 <_dtoa_r+0x376>
8000b886:	4c 68       	lddpc	r8,8000b99c <_dtoa_r+0x470>
8000b888:	f0 e8 00 20 	ld.d	r8,r8[32]
8000b88c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000b890:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000b894:	fe b0 e6 54 	rcall	8000853c <__avr32_f64_div>
8000b898:	30 35       	mov	r5,3
8000b89a:	14 98       	mov	r8,r10
8000b89c:	16 99       	mov	r9,r11
8000b89e:	fa e9 00 08 	st.d	sp[8],r8
8000b8a2:	4b fc       	lddpc	r12,8000b99c <_dtoa_r+0x470>
8000b8a4:	50 a3       	stdsp	sp[0x28],r3
8000b8a6:	0c 93       	mov	r3,r6
8000b8a8:	18 96       	mov	r6,r12
8000b8aa:	c0 f8       	rjmp	8000b8c8 <_dtoa_r+0x39c>
8000b8ac:	fa ea 00 18 	ld.d	r10,sp[24]
8000b8b0:	ed b4 00 00 	bld	r4,0x0
8000b8b4:	c0 81       	brne	8000b8c4 <_dtoa_r+0x398>
8000b8b6:	ec e8 00 00 	ld.d	r8,r6[0]
8000b8ba:	2f f5       	sub	r5,-1
8000b8bc:	fe b0 e3 b4 	rcall	80008024 <__avr32_f64_mul>
8000b8c0:	fa eb 00 18 	st.d	sp[24],r10
8000b8c4:	a1 54       	asr	r4,0x1
8000b8c6:	2f 86       	sub	r6,-8
8000b8c8:	58 04       	cp.w	r4,0
8000b8ca:	cf 11       	brne	8000b8ac <_dtoa_r+0x380>
8000b8cc:	fa e8 00 18 	ld.d	r8,sp[24]
8000b8d0:	fa ea 00 08 	ld.d	r10,sp[8]
8000b8d4:	06 96       	mov	r6,r3
8000b8d6:	fe b0 e6 33 	rcall	8000853c <__avr32_f64_div>
8000b8da:	40 a3       	lddsp	r3,sp[0x28]
8000b8dc:	14 98       	mov	r8,r10
8000b8de:	16 99       	mov	r9,r11
8000b8e0:	fa e9 00 08 	st.d	sp[8],r8
8000b8e4:	c2 d8       	rjmp	8000b93e <_dtoa_r+0x412>
8000b8e6:	ec 08 11 00 	rsub	r8,r6,0
8000b8ea:	c0 31       	brne	8000b8f0 <_dtoa_r+0x3c4>
8000b8ec:	30 25       	mov	r5,2
8000b8ee:	c2 88       	rjmp	8000b93e <_dtoa_r+0x412>
8000b8f0:	4a bc       	lddpc	r12,8000b99c <_dtoa_r+0x470>
8000b8f2:	f0 04 14 04 	asr	r4,r8,0x4
8000b8f6:	50 1c       	stdsp	sp[0x4],r12
8000b8f8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000b8fc:	4a 79       	lddpc	r9,8000b998 <_dtoa_r+0x46c>
8000b8fe:	fa ea 00 3c 	ld.d	r10,sp[60]
8000b902:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000b906:	fe b0 e3 8f 	rcall	80008024 <__avr32_f64_mul>
8000b90a:	40 1c       	lddsp	r12,sp[0x4]
8000b90c:	50 63       	stdsp	sp[0x18],r3
8000b90e:	30 25       	mov	r5,2
8000b910:	0c 93       	mov	r3,r6
8000b912:	fa eb 00 08 	st.d	sp[8],r10
8000b916:	18 96       	mov	r6,r12
8000b918:	c0 f8       	rjmp	8000b936 <_dtoa_r+0x40a>
8000b91a:	fa ea 00 08 	ld.d	r10,sp[8]
8000b91e:	ed b4 00 00 	bld	r4,0x0
8000b922:	c0 81       	brne	8000b932 <_dtoa_r+0x406>
8000b924:	ec e8 00 00 	ld.d	r8,r6[0]
8000b928:	2f f5       	sub	r5,-1
8000b92a:	fe b0 e3 7d 	rcall	80008024 <__avr32_f64_mul>
8000b92e:	fa eb 00 08 	st.d	sp[8],r10
8000b932:	a1 54       	asr	r4,0x1
8000b934:	2f 86       	sub	r6,-8
8000b936:	58 04       	cp.w	r4,0
8000b938:	cf 11       	brne	8000b91a <_dtoa_r+0x3ee>
8000b93a:	06 96       	mov	r6,r3
8000b93c:	40 63       	lddsp	r3,sp[0x18]
8000b93e:	41 4a       	lddsp	r10,sp[0x50]
8000b940:	58 0a       	cp.w	r10,0
8000b942:	c2 f0       	breq	8000b9a0 <_dtoa_r+0x474>
8000b944:	fa e8 00 08 	ld.d	r8,sp[8]
8000b948:	58 01       	cp.w	r1,0
8000b94a:	5f 94       	srgt	r4
8000b94c:	fa e9 00 18 	st.d	sp[24],r8
8000b950:	30 08       	mov	r8,0
8000b952:	fc 19 3f f0 	movh	r9,0x3ff0
8000b956:	fa ea 00 18 	ld.d	r10,sp[24]
8000b95a:	e0 a0 11 39 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000b95e:	f9 bc 00 00 	moveq	r12,0
8000b962:	f9 bc 01 01 	movne	r12,1
8000b966:	e9 ec 00 0c 	and	r12,r4,r12
8000b96a:	c1 b0       	breq	8000b9a0 <_dtoa_r+0x474>
8000b96c:	40 98       	lddsp	r8,sp[0x24]
8000b96e:	58 08       	cp.w	r8,0
8000b970:	e0 8a 00 f6 	brle	8000bb5c <_dtoa_r+0x630>
8000b974:	30 08       	mov	r8,0
8000b976:	fc 19 40 24 	movh	r9,0x4024
8000b97a:	ec c4 00 01 	sub	r4,r6,1
8000b97e:	fa ea 00 18 	ld.d	r10,sp[24]
8000b982:	2f f5       	sub	r5,-1
8000b984:	50 64       	stdsp	sp[0x18],r4
8000b986:	fe b0 e3 4f 	rcall	80008024 <__avr32_f64_mul>
8000b98a:	40 94       	lddsp	r4,sp[0x24]
8000b98c:	14 98       	mov	r8,r10
8000b98e:	16 99       	mov	r9,r11
8000b990:	fa e9 00 08 	st.d	sp[8],r8
8000b994:	c0 88       	rjmp	8000b9a4 <_dtoa_r+0x478>
8000b996:	d7 03       	nop
8000b998:	80 00       	ld.sh	r0,r0[0x0]
8000b99a:	ea dc 80 00 	satsub.w	r12,r5,-32768
8000b99e:	eb a4 50 66 	stc.d	cp2,r4[0x198],cr0
8000b9a2:	02 94       	mov	r4,r1
8000b9a4:	0a 9c       	mov	r12,r5
8000b9a6:	e0 a0 10 90 	rcall	8000dac6 <__avr32_s32_to_f64>
8000b9aa:	fa e8 00 08 	ld.d	r8,sp[8]
8000b9ae:	fe b0 e3 3b 	rcall	80008024 <__avr32_f64_mul>
8000b9b2:	30 08       	mov	r8,0
8000b9b4:	fc 19 40 1c 	movh	r9,0x401c
8000b9b8:	fe b0 e4 f0 	rcall	80008398 <__avr32_f64_add>
8000b9bc:	14 98       	mov	r8,r10
8000b9be:	16 99       	mov	r9,r11
8000b9c0:	fa e9 00 28 	st.d	sp[40],r8
8000b9c4:	fc 18 fc c0 	movh	r8,0xfcc0
8000b9c8:	40 a5       	lddsp	r5,sp[0x28]
8000b9ca:	10 05       	add	r5,r8
8000b9cc:	50 a5       	stdsp	sp[0x28],r5
8000b9ce:	58 04       	cp.w	r4,0
8000b9d0:	c2 11       	brne	8000ba12 <_dtoa_r+0x4e6>
8000b9d2:	fa ea 00 08 	ld.d	r10,sp[8]
8000b9d6:	30 08       	mov	r8,0
8000b9d8:	fc 19 40 14 	movh	r9,0x4014
8000b9dc:	fe b0 e4 10 	rcall	800081fc <__avr32_f64_sub>
8000b9e0:	40 bc       	lddsp	r12,sp[0x2c]
8000b9e2:	fa eb 00 08 	st.d	sp[8],r10
8000b9e6:	14 98       	mov	r8,r10
8000b9e8:	16 99       	mov	r9,r11
8000b9ea:	18 9a       	mov	r10,r12
8000b9ec:	0a 9b       	mov	r11,r5
8000b9ee:	e0 a0 10 ef 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000b9f2:	e0 81 02 54 	brne	8000be9a <_dtoa_r+0x96e>
8000b9f6:	0a 98       	mov	r8,r5
8000b9f8:	40 b9       	lddsp	r9,sp[0x2c]
8000b9fa:	ee 18 80 00 	eorh	r8,0x8000
8000b9fe:	fa ea 00 08 	ld.d	r10,sp[8]
8000ba02:	10 95       	mov	r5,r8
8000ba04:	12 98       	mov	r8,r9
8000ba06:	0a 99       	mov	r9,r5
8000ba08:	e0 a0 10 e2 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000ba0c:	e0 81 02 3e 	brne	8000be88 <_dtoa_r+0x95c>
8000ba10:	ca 68       	rjmp	8000bb5c <_dtoa_r+0x630>
8000ba12:	4c e9       	lddpc	r9,8000bb48 <_dtoa_r+0x61c>
8000ba14:	e8 c8 00 01 	sub	r8,r4,1
8000ba18:	40 d5       	lddsp	r5,sp[0x34]
8000ba1a:	58 05       	cp.w	r5,0
8000ba1c:	c4 f0       	breq	8000baba <_dtoa_r+0x58e>
8000ba1e:	30 0c       	mov	r12,0
8000ba20:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000ba24:	51 3c       	stdsp	sp[0x4c],r12
8000ba26:	30 0a       	mov	r10,0
8000ba28:	fc 1b 3f e0 	movh	r11,0x3fe0
8000ba2c:	fe b0 e5 88 	rcall	8000853c <__avr32_f64_div>
8000ba30:	fa e8 00 28 	ld.d	r8,sp[40]
8000ba34:	40 85       	lddsp	r5,sp[0x20]
8000ba36:	fe b0 e3 e3 	rcall	800081fc <__avr32_f64_sub>
8000ba3a:	fa eb 00 28 	st.d	sp[40],r10
8000ba3e:	fa ea 00 08 	ld.d	r10,sp[8]
8000ba42:	e0 a0 10 2b 	rcall	8000da98 <__avr32_f64_to_s32>
8000ba46:	51 6c       	stdsp	sp[0x58],r12
8000ba48:	e0 a0 10 3f 	rcall	8000dac6 <__avr32_s32_to_f64>
8000ba4c:	14 98       	mov	r8,r10
8000ba4e:	16 99       	mov	r9,r11
8000ba50:	fa ea 00 08 	ld.d	r10,sp[8]
8000ba54:	fe b0 e3 d4 	rcall	800081fc <__avr32_f64_sub>
8000ba58:	fa eb 00 08 	st.d	sp[8],r10
8000ba5c:	41 68       	lddsp	r8,sp[0x58]
8000ba5e:	2d 08       	sub	r8,-48
8000ba60:	0a c8       	st.b	r5++,r8
8000ba62:	41 39       	lddsp	r9,sp[0x4c]
8000ba64:	2f f9       	sub	r9,-1
8000ba66:	51 39       	stdsp	sp[0x4c],r9
8000ba68:	fa e8 00 28 	ld.d	r8,sp[40]
8000ba6c:	e0 a0 10 b0 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000ba70:	e0 81 03 3a 	brne	8000c0e4 <_dtoa_r+0xbb8>
8000ba74:	fa e8 00 08 	ld.d	r8,sp[8]
8000ba78:	30 0a       	mov	r10,0
8000ba7a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000ba7e:	fe b0 e3 bf 	rcall	800081fc <__avr32_f64_sub>
8000ba82:	fa e8 00 28 	ld.d	r8,sp[40]
8000ba86:	e0 a0 10 a3 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000ba8a:	fa ea 00 28 	ld.d	r10,sp[40]
8000ba8e:	30 08       	mov	r8,0
8000ba90:	fc 19 40 24 	movh	r9,0x4024
8000ba94:	e0 81 00 da 	brne	8000bc48 <_dtoa_r+0x71c>
8000ba98:	41 3c       	lddsp	r12,sp[0x4c]
8000ba9a:	08 3c       	cp.w	r12,r4
8000ba9c:	c6 04       	brge	8000bb5c <_dtoa_r+0x630>
8000ba9e:	fe b0 e2 c3 	rcall	80008024 <__avr32_f64_mul>
8000baa2:	30 08       	mov	r8,0
8000baa4:	fa eb 00 28 	st.d	sp[40],r10
8000baa8:	fc 19 40 24 	movh	r9,0x4024
8000baac:	fa ea 00 08 	ld.d	r10,sp[8]
8000bab0:	fe b0 e2 ba 	rcall	80008024 <__avr32_f64_mul>
8000bab4:	fa eb 00 08 	st.d	sp[8],r10
8000bab8:	cc 3b       	rjmp	8000ba3e <_dtoa_r+0x512>
8000baba:	40 85       	lddsp	r5,sp[0x20]
8000babc:	08 05       	add	r5,r4
8000babe:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000bac2:	51 35       	stdsp	sp[0x4c],r5
8000bac4:	fa e8 00 28 	ld.d	r8,sp[40]
8000bac8:	40 85       	lddsp	r5,sp[0x20]
8000baca:	fe b0 e2 ad 	rcall	80008024 <__avr32_f64_mul>
8000bace:	fa eb 00 28 	st.d	sp[40],r10
8000bad2:	fa ea 00 08 	ld.d	r10,sp[8]
8000bad6:	e0 a0 0f e1 	rcall	8000da98 <__avr32_f64_to_s32>
8000bada:	51 6c       	stdsp	sp[0x58],r12
8000badc:	e0 a0 0f f5 	rcall	8000dac6 <__avr32_s32_to_f64>
8000bae0:	14 98       	mov	r8,r10
8000bae2:	16 99       	mov	r9,r11
8000bae4:	fa ea 00 08 	ld.d	r10,sp[8]
8000bae8:	fe b0 e3 8a 	rcall	800081fc <__avr32_f64_sub>
8000baec:	fa eb 00 08 	st.d	sp[8],r10
8000baf0:	41 68       	lddsp	r8,sp[0x58]
8000baf2:	2d 08       	sub	r8,-48
8000baf4:	0a c8       	st.b	r5++,r8
8000baf6:	41 3c       	lddsp	r12,sp[0x4c]
8000baf8:	18 35       	cp.w	r5,r12
8000bafa:	c2 91       	brne	8000bb4c <_dtoa_r+0x620>
8000bafc:	30 08       	mov	r8,0
8000bafe:	fc 19 3f e0 	movh	r9,0x3fe0
8000bb02:	fa ea 00 28 	ld.d	r10,sp[40]
8000bb06:	fe b0 e4 49 	rcall	80008398 <__avr32_f64_add>
8000bb0a:	40 85       	lddsp	r5,sp[0x20]
8000bb0c:	fa e8 00 08 	ld.d	r8,sp[8]
8000bb10:	08 05       	add	r5,r4
8000bb12:	e0 a0 10 5d 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000bb16:	e0 81 00 99 	brne	8000bc48 <_dtoa_r+0x71c>
8000bb1a:	fa e8 00 28 	ld.d	r8,sp[40]
8000bb1e:	30 0a       	mov	r10,0
8000bb20:	fc 1b 3f e0 	movh	r11,0x3fe0
8000bb24:	fe b0 e3 6c 	rcall	800081fc <__avr32_f64_sub>
8000bb28:	14 98       	mov	r8,r10
8000bb2a:	16 99       	mov	r9,r11
8000bb2c:	fa ea 00 08 	ld.d	r10,sp[8]
8000bb30:	e0 a0 10 4e 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000bb34:	c1 40       	breq	8000bb5c <_dtoa_r+0x630>
8000bb36:	33 09       	mov	r9,48
8000bb38:	0a 98       	mov	r8,r5
8000bb3a:	11 7a       	ld.ub	r10,--r8
8000bb3c:	f2 0a 18 00 	cp.b	r10,r9
8000bb40:	e0 81 02 d2 	brne	8000c0e4 <_dtoa_r+0xbb8>
8000bb44:	10 95       	mov	r5,r8
8000bb46:	cf 9b       	rjmp	8000bb38 <_dtoa_r+0x60c>
8000bb48:	80 00       	ld.sh	r0,r0[0x0]
8000bb4a:	ea dc 30 08 	satsub.w	r12,r5,12296
8000bb4e:	fc 19 40 24 	movh	r9,0x4024
8000bb52:	fe b0 e2 69 	rcall	80008024 <__avr32_f64_mul>
8000bb56:	fa eb 00 08 	st.d	sp[8],r10
8000bb5a:	cb cb       	rjmp	8000bad2 <_dtoa_r+0x5a6>
8000bb5c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000bb60:	fa eb 00 08 	st.d	sp[8],r10
8000bb64:	58 e6       	cp.w	r6,14
8000bb66:	5f ab       	srle	r11
8000bb68:	41 8a       	lddsp	r10,sp[0x60]
8000bb6a:	30 08       	mov	r8,0
8000bb6c:	f4 09 11 ff 	rsub	r9,r10,-1
8000bb70:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000bb74:	f0 09 18 00 	cp.b	r9,r8
8000bb78:	e0 80 00 81 	breq	8000bc7a <_dtoa_r+0x74e>
8000bb7c:	40 ea       	lddsp	r10,sp[0x38]
8000bb7e:	58 01       	cp.w	r1,0
8000bb80:	5f a9       	srle	r9
8000bb82:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000bb86:	4c 9a       	lddpc	r10,8000bca8 <_dtoa_r+0x77c>
8000bb88:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000bb8c:	fa e5 00 10 	st.d	sp[16],r4
8000bb90:	f0 09 18 00 	cp.b	r9,r8
8000bb94:	c1 40       	breq	8000bbbc <_dtoa_r+0x690>
8000bb96:	58 01       	cp.w	r1,0
8000bb98:	e0 81 01 78 	brne	8000be88 <_dtoa_r+0x95c>
8000bb9c:	30 08       	mov	r8,0
8000bb9e:	fc 19 40 14 	movh	r9,0x4014
8000bba2:	08 9a       	mov	r10,r4
8000bba4:	0a 9b       	mov	r11,r5
8000bba6:	fe b0 e2 3f 	rcall	80008024 <__avr32_f64_mul>
8000bbaa:	fa e8 00 08 	ld.d	r8,sp[8]
8000bbae:	fe b0 e4 79 	rcall	800084a0 <__avr32_f64_cmp_ge>
8000bbb2:	e0 81 01 6b 	brne	8000be88 <_dtoa_r+0x95c>
8000bbb6:	02 92       	mov	r2,r1
8000bbb8:	e0 8f 01 73 	bral	8000be9e <_dtoa_r+0x972>
8000bbbc:	40 85       	lddsp	r5,sp[0x20]
8000bbbe:	30 14       	mov	r4,1
8000bbc0:	fa e8 00 10 	ld.d	r8,sp[16]
8000bbc4:	fa ea 00 08 	ld.d	r10,sp[8]
8000bbc8:	fe b0 e4 ba 	rcall	8000853c <__avr32_f64_div>
8000bbcc:	e0 a0 0f 66 	rcall	8000da98 <__avr32_f64_to_s32>
8000bbd0:	18 92       	mov	r2,r12
8000bbd2:	e0 a0 0f 7a 	rcall	8000dac6 <__avr32_s32_to_f64>
8000bbd6:	fa e8 00 10 	ld.d	r8,sp[16]
8000bbda:	fe b0 e2 25 	rcall	80008024 <__avr32_f64_mul>
8000bbde:	14 98       	mov	r8,r10
8000bbe0:	16 99       	mov	r9,r11
8000bbe2:	fa ea 00 08 	ld.d	r10,sp[8]
8000bbe6:	fe b0 e3 0b 	rcall	800081fc <__avr32_f64_sub>
8000bbea:	fa eb 00 08 	st.d	sp[8],r10
8000bbee:	e4 c8 ff d0 	sub	r8,r2,-48
8000bbf2:	0a c8       	st.b	r5++,r8
8000bbf4:	fc 19 40 24 	movh	r9,0x4024
8000bbf8:	30 08       	mov	r8,0
8000bbfa:	02 34       	cp.w	r4,r1
8000bbfc:	c3 31       	brne	8000bc62 <_dtoa_r+0x736>
8000bbfe:	fa e8 00 08 	ld.d	r8,sp[8]
8000bc02:	fe b0 e3 cb 	rcall	80008398 <__avr32_f64_add>
8000bc06:	16 91       	mov	r1,r11
8000bc08:	14 90       	mov	r0,r10
8000bc0a:	14 98       	mov	r8,r10
8000bc0c:	02 99       	mov	r9,r1
8000bc0e:	fa ea 00 10 	ld.d	r10,sp[16]
8000bc12:	e0 a0 0f dd 	rcall	8000dbcc <__avr32_f64_cmp_lt>
8000bc16:	c1 a1       	brne	8000bc4a <_dtoa_r+0x71e>
8000bc18:	fa e8 00 10 	ld.d	r8,sp[16]
8000bc1c:	00 9a       	mov	r10,r0
8000bc1e:	02 9b       	mov	r11,r1
8000bc20:	e0 a0 0f c3 	rcall	8000dba6 <__avr32_f64_cmp_eq>
8000bc24:	e0 80 02 5f 	breq	8000c0e2 <_dtoa_r+0xbb6>
8000bc28:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000bc2c:	c0 f1       	brne	8000bc4a <_dtoa_r+0x71e>
8000bc2e:	e0 8f 02 5a 	bral	8000c0e2 <_dtoa_r+0xbb6>
8000bc32:	40 8a       	lddsp	r10,sp[0x20]
8000bc34:	14 38       	cp.w	r8,r10
8000bc36:	c0 30       	breq	8000bc3c <_dtoa_r+0x710>
8000bc38:	10 95       	mov	r5,r8
8000bc3a:	c0 98       	rjmp	8000bc4c <_dtoa_r+0x720>
8000bc3c:	33 08       	mov	r8,48
8000bc3e:	40 89       	lddsp	r9,sp[0x20]
8000bc40:	2f f6       	sub	r6,-1
8000bc42:	b2 88       	st.b	r9[0x0],r8
8000bc44:	40 88       	lddsp	r8,sp[0x20]
8000bc46:	c0 88       	rjmp	8000bc56 <_dtoa_r+0x72a>
8000bc48:	40 66       	lddsp	r6,sp[0x18]
8000bc4a:	33 99       	mov	r9,57
8000bc4c:	0a 98       	mov	r8,r5
8000bc4e:	11 7a       	ld.ub	r10,--r8
8000bc50:	f2 0a 18 00 	cp.b	r10,r9
8000bc54:	ce f0       	breq	8000bc32 <_dtoa_r+0x706>
8000bc56:	50 66       	stdsp	sp[0x18],r6
8000bc58:	11 89       	ld.ub	r9,r8[0x0]
8000bc5a:	2f f9       	sub	r9,-1
8000bc5c:	b0 89       	st.b	r8[0x0],r9
8000bc5e:	e0 8f 02 43 	bral	8000c0e4 <_dtoa_r+0xbb8>
8000bc62:	fe b0 e1 e1 	rcall	80008024 <__avr32_f64_mul>
8000bc66:	2f f4       	sub	r4,-1
8000bc68:	fa eb 00 08 	st.d	sp[8],r10
8000bc6c:	30 08       	mov	r8,0
8000bc6e:	30 09       	mov	r9,0
8000bc70:	e0 a0 0f 9b 	rcall	8000dba6 <__avr32_f64_cmp_eq>
8000bc74:	ca 60       	breq	8000bbc0 <_dtoa_r+0x694>
8000bc76:	e0 8f 02 36 	bral	8000c0e2 <_dtoa_r+0xbb6>
8000bc7a:	40 d8       	lddsp	r8,sp[0x34]
8000bc7c:	58 08       	cp.w	r8,0
8000bc7e:	c0 51       	brne	8000bc88 <_dtoa_r+0x75c>
8000bc80:	04 98       	mov	r8,r2
8000bc82:	00 95       	mov	r5,r0
8000bc84:	40 d4       	lddsp	r4,sp[0x34]
8000bc86:	c3 88       	rjmp	8000bcf6 <_dtoa_r+0x7ca>
8000bc88:	40 c5       	lddsp	r5,sp[0x30]
8000bc8a:	58 15       	cp.w	r5,1
8000bc8c:	e0 89 00 10 	brgt	8000bcac <_dtoa_r+0x780>
8000bc90:	41 74       	lddsp	r4,sp[0x5c]
8000bc92:	58 04       	cp.w	r4,0
8000bc94:	c0 40       	breq	8000bc9c <_dtoa_r+0x770>
8000bc96:	f4 c9 fb cd 	sub	r9,r10,-1075
8000bc9a:	c0 48       	rjmp	8000bca2 <_dtoa_r+0x776>
8000bc9c:	41 99       	lddsp	r9,sp[0x64]
8000bc9e:	f2 09 11 36 	rsub	r9,r9,54
8000bca2:	04 98       	mov	r8,r2
8000bca4:	00 95       	mov	r5,r0
8000bca6:	c1 d8       	rjmp	8000bce0 <_dtoa_r+0x7b4>
8000bca8:	80 00       	ld.sh	r0,r0[0x0]
8000bcaa:	ea dc e2 c8 	satsub.w	r12,r5,-7480
8000bcae:	00 01       	add	r1,r0
8000bcb0:	58 01       	cp.w	r1,0
8000bcb2:	e0 05 17 40 	movge	r5,r0
8000bcb6:	e2 09 17 40 	movge	r9,r1
8000bcba:	e1 d1 e5 15 	sublt	r5,r0,r1
8000bcbe:	f9 b9 05 00 	movlt	r9,0
8000bcc2:	10 32       	cp.w	r2,r8
8000bcc4:	e5 d8 e4 18 	subge	r8,r2,r8
8000bcc8:	f1 d2 e5 18 	sublt	r8,r8,r2
8000bccc:	e5 d8 e5 02 	addlt	r2,r2,r8
8000bcd0:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000bcd4:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000bcd8:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000bcdc:	f9 b8 05 00 	movlt	r8,0
8000bce0:	40 4b       	lddsp	r11,sp[0x10]
8000bce2:	12 0b       	add	r11,r9
8000bce4:	50 08       	stdsp	sp[0x0],r8
8000bce6:	50 4b       	stdsp	sp[0x10],r11
8000bce8:	12 00       	add	r0,r9
8000bcea:	30 1b       	mov	r11,1
8000bcec:	0e 9c       	mov	r12,r7
8000bcee:	e0 a0 0a e5 	rcall	8000d2b8 <__i2b>
8000bcf2:	40 08       	lddsp	r8,sp[0x0]
8000bcf4:	18 94       	mov	r4,r12
8000bcf6:	40 4a       	lddsp	r10,sp[0x10]
8000bcf8:	58 05       	cp.w	r5,0
8000bcfa:	5f 99       	srgt	r9
8000bcfc:	58 0a       	cp.w	r10,0
8000bcfe:	5f 9a       	srgt	r10
8000bd00:	f5 e9 00 09 	and	r9,r10,r9
8000bd04:	c0 80       	breq	8000bd14 <_dtoa_r+0x7e8>
8000bd06:	40 4c       	lddsp	r12,sp[0x10]
8000bd08:	f8 05 0d 49 	min	r9,r12,r5
8000bd0c:	12 1c       	sub	r12,r9
8000bd0e:	12 10       	sub	r0,r9
8000bd10:	50 4c       	stdsp	sp[0x10],r12
8000bd12:	12 15       	sub	r5,r9
8000bd14:	58 02       	cp.w	r2,0
8000bd16:	e0 8a 00 27 	brle	8000bd64 <_dtoa_r+0x838>
8000bd1a:	40 db       	lddsp	r11,sp[0x34]
8000bd1c:	58 0b       	cp.w	r11,0
8000bd1e:	c1 d0       	breq	8000bd58 <_dtoa_r+0x82c>
8000bd20:	58 08       	cp.w	r8,0
8000bd22:	e0 8a 00 17 	brle	8000bd50 <_dtoa_r+0x824>
8000bd26:	10 9a       	mov	r10,r8
8000bd28:	50 08       	stdsp	sp[0x0],r8
8000bd2a:	08 9b       	mov	r11,r4
8000bd2c:	0e 9c       	mov	r12,r7
8000bd2e:	e0 a0 0b 0b 	rcall	8000d344 <__pow5mult>
8000bd32:	06 9a       	mov	r10,r3
8000bd34:	18 9b       	mov	r11,r12
8000bd36:	18 94       	mov	r4,r12
8000bd38:	0e 9c       	mov	r12,r7
8000bd3a:	e0 a0 0a 3f 	rcall	8000d1b8 <__multiply>
8000bd3e:	18 99       	mov	r9,r12
8000bd40:	06 9b       	mov	r11,r3
8000bd42:	50 19       	stdsp	sp[0x4],r9
8000bd44:	0e 9c       	mov	r12,r7
8000bd46:	e0 a0 08 e7 	rcall	8000cf14 <_Bfree>
8000bd4a:	40 19       	lddsp	r9,sp[0x4]
8000bd4c:	40 08       	lddsp	r8,sp[0x0]
8000bd4e:	12 93       	mov	r3,r9
8000bd50:	e4 08 01 0a 	sub	r10,r2,r8
8000bd54:	c0 80       	breq	8000bd64 <_dtoa_r+0x838>
8000bd56:	c0 28       	rjmp	8000bd5a <_dtoa_r+0x82e>
8000bd58:	04 9a       	mov	r10,r2
8000bd5a:	06 9b       	mov	r11,r3
8000bd5c:	0e 9c       	mov	r12,r7
8000bd5e:	e0 a0 0a f3 	rcall	8000d344 <__pow5mult>
8000bd62:	18 93       	mov	r3,r12
8000bd64:	30 1b       	mov	r11,1
8000bd66:	0e 9c       	mov	r12,r7
8000bd68:	e0 a0 0a a8 	rcall	8000d2b8 <__i2b>
8000bd6c:	41 1a       	lddsp	r10,sp[0x44]
8000bd6e:	18 92       	mov	r2,r12
8000bd70:	58 0a       	cp.w	r10,0
8000bd72:	e0 8a 00 07 	brle	8000bd80 <_dtoa_r+0x854>
8000bd76:	18 9b       	mov	r11,r12
8000bd78:	0e 9c       	mov	r12,r7
8000bd7a:	e0 a0 0a e5 	rcall	8000d344 <__pow5mult>
8000bd7e:	18 92       	mov	r2,r12
8000bd80:	40 c9       	lddsp	r9,sp[0x30]
8000bd82:	58 19       	cp.w	r9,1
8000bd84:	e0 89 00 14 	brgt	8000bdac <_dtoa_r+0x880>
8000bd88:	40 38       	lddsp	r8,sp[0xc]
8000bd8a:	58 08       	cp.w	r8,0
8000bd8c:	c1 01       	brne	8000bdac <_dtoa_r+0x880>
8000bd8e:	40 29       	lddsp	r9,sp[0x8]
8000bd90:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000bd94:	c0 c1       	brne	8000bdac <_dtoa_r+0x880>
8000bd96:	12 98       	mov	r8,r9
8000bd98:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000bd9c:	c0 80       	breq	8000bdac <_dtoa_r+0x880>
8000bd9e:	40 4c       	lddsp	r12,sp[0x10]
8000bda0:	30 1b       	mov	r11,1
8000bda2:	2f fc       	sub	r12,-1
8000bda4:	2f f0       	sub	r0,-1
8000bda6:	50 4c       	stdsp	sp[0x10],r12
8000bda8:	50 6b       	stdsp	sp[0x18],r11
8000bdaa:	c0 38       	rjmp	8000bdb0 <_dtoa_r+0x884>
8000bdac:	30 0a       	mov	r10,0
8000bdae:	50 6a       	stdsp	sp[0x18],r10
8000bdb0:	41 19       	lddsp	r9,sp[0x44]
8000bdb2:	58 09       	cp.w	r9,0
8000bdb4:	c0 31       	brne	8000bdba <_dtoa_r+0x88e>
8000bdb6:	30 1c       	mov	r12,1
8000bdb8:	c0 98       	rjmp	8000bdca <_dtoa_r+0x89e>
8000bdba:	64 48       	ld.w	r8,r2[0x10]
8000bdbc:	2f c8       	sub	r8,-4
8000bdbe:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000bdc2:	e0 a0 08 18 	rcall	8000cdf2 <__hi0bits>
8000bdc6:	f8 0c 11 20 	rsub	r12,r12,32
8000bdca:	40 4b       	lddsp	r11,sp[0x10]
8000bdcc:	f8 0b 00 08 	add	r8,r12,r11
8000bdd0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000bdd4:	c0 c0       	breq	8000bdec <_dtoa_r+0x8c0>
8000bdd6:	f0 08 11 20 	rsub	r8,r8,32
8000bdda:	58 48       	cp.w	r8,4
8000bddc:	e0 8a 00 06 	brle	8000bde8 <_dtoa_r+0x8bc>
8000bde0:	20 48       	sub	r8,4
8000bde2:	10 0b       	add	r11,r8
8000bde4:	50 4b       	stdsp	sp[0x10],r11
8000bde6:	c0 78       	rjmp	8000bdf4 <_dtoa_r+0x8c8>
8000bde8:	58 48       	cp.w	r8,4
8000bdea:	c0 70       	breq	8000bdf8 <_dtoa_r+0x8cc>
8000bdec:	40 4a       	lddsp	r10,sp[0x10]
8000bdee:	2e 48       	sub	r8,-28
8000bdf0:	10 0a       	add	r10,r8
8000bdf2:	50 4a       	stdsp	sp[0x10],r10
8000bdf4:	10 00       	add	r0,r8
8000bdf6:	10 05       	add	r5,r8
8000bdf8:	58 00       	cp.w	r0,0
8000bdfa:	e0 8a 00 08 	brle	8000be0a <_dtoa_r+0x8de>
8000bdfe:	06 9b       	mov	r11,r3
8000be00:	00 9a       	mov	r10,r0
8000be02:	0e 9c       	mov	r12,r7
8000be04:	e0 a0 09 96 	rcall	8000d130 <__lshift>
8000be08:	18 93       	mov	r3,r12
8000be0a:	40 49       	lddsp	r9,sp[0x10]
8000be0c:	58 09       	cp.w	r9,0
8000be0e:	e0 8a 00 08 	brle	8000be1e <_dtoa_r+0x8f2>
8000be12:	04 9b       	mov	r11,r2
8000be14:	12 9a       	mov	r10,r9
8000be16:	0e 9c       	mov	r12,r7
8000be18:	e0 a0 09 8c 	rcall	8000d130 <__lshift>
8000be1c:	18 92       	mov	r2,r12
8000be1e:	41 48       	lddsp	r8,sp[0x50]
8000be20:	58 08       	cp.w	r8,0
8000be22:	c1 b0       	breq	8000be58 <_dtoa_r+0x92c>
8000be24:	04 9b       	mov	r11,r2
8000be26:	06 9c       	mov	r12,r3
8000be28:	e0 a0 08 5c 	rcall	8000cee0 <__mcmp>
8000be2c:	c1 64       	brge	8000be58 <_dtoa_r+0x92c>
8000be2e:	06 9b       	mov	r11,r3
8000be30:	30 09       	mov	r9,0
8000be32:	30 aa       	mov	r10,10
8000be34:	0e 9c       	mov	r12,r7
8000be36:	e0 a0 0a 49 	rcall	8000d2c8 <__multadd>
8000be3a:	20 16       	sub	r6,1
8000be3c:	18 93       	mov	r3,r12
8000be3e:	40 dc       	lddsp	r12,sp[0x34]
8000be40:	58 0c       	cp.w	r12,0
8000be42:	c0 31       	brne	8000be48 <_dtoa_r+0x91c>
8000be44:	40 91       	lddsp	r1,sp[0x24]
8000be46:	c0 98       	rjmp	8000be58 <_dtoa_r+0x92c>
8000be48:	08 9b       	mov	r11,r4
8000be4a:	40 91       	lddsp	r1,sp[0x24]
8000be4c:	30 09       	mov	r9,0
8000be4e:	30 aa       	mov	r10,10
8000be50:	0e 9c       	mov	r12,r7
8000be52:	e0 a0 0a 3b 	rcall	8000d2c8 <__multadd>
8000be56:	18 94       	mov	r4,r12
8000be58:	58 01       	cp.w	r1,0
8000be5a:	5f a9       	srle	r9
8000be5c:	40 cb       	lddsp	r11,sp[0x30]
8000be5e:	58 2b       	cp.w	r11,2
8000be60:	5f 98       	srgt	r8
8000be62:	f3 e8 00 08 	and	r8,r9,r8
8000be66:	c2 50       	breq	8000beb0 <_dtoa_r+0x984>
8000be68:	58 01       	cp.w	r1,0
8000be6a:	c1 11       	brne	8000be8c <_dtoa_r+0x960>
8000be6c:	04 9b       	mov	r11,r2
8000be6e:	02 99       	mov	r9,r1
8000be70:	30 5a       	mov	r10,5
8000be72:	0e 9c       	mov	r12,r7
8000be74:	e0 a0 0a 2a 	rcall	8000d2c8 <__multadd>
8000be78:	18 92       	mov	r2,r12
8000be7a:	18 9b       	mov	r11,r12
8000be7c:	06 9c       	mov	r12,r3
8000be7e:	e0 a0 08 31 	rcall	8000cee0 <__mcmp>
8000be82:	e0 89 00 0f 	brgt	8000bea0 <_dtoa_r+0x974>
8000be86:	c0 38       	rjmp	8000be8c <_dtoa_r+0x960>
8000be88:	30 02       	mov	r2,0
8000be8a:	04 94       	mov	r4,r2
8000be8c:	40 ea       	lddsp	r10,sp[0x38]
8000be8e:	30 09       	mov	r9,0
8000be90:	5c da       	com	r10
8000be92:	40 85       	lddsp	r5,sp[0x20]
8000be94:	50 6a       	stdsp	sp[0x18],r10
8000be96:	50 49       	stdsp	sp[0x10],r9
8000be98:	c0 f9       	rjmp	8000c0b6 <_dtoa_r+0xb8a>
8000be9a:	08 92       	mov	r2,r4
8000be9c:	40 66       	lddsp	r6,sp[0x18]
8000be9e:	04 94       	mov	r4,r2
8000bea0:	2f f6       	sub	r6,-1
8000bea2:	50 66       	stdsp	sp[0x18],r6
8000bea4:	33 18       	mov	r8,49
8000bea6:	40 85       	lddsp	r5,sp[0x20]
8000bea8:	0a c8       	st.b	r5++,r8
8000beaa:	30 08       	mov	r8,0
8000beac:	50 48       	stdsp	sp[0x10],r8
8000beae:	c0 49       	rjmp	8000c0b6 <_dtoa_r+0xb8a>
8000beb0:	40 dc       	lddsp	r12,sp[0x34]
8000beb2:	58 0c       	cp.w	r12,0
8000beb4:	e0 80 00 b5 	breq	8000c01e <_dtoa_r+0xaf2>
8000beb8:	58 05       	cp.w	r5,0
8000beba:	e0 8a 00 08 	brle	8000beca <_dtoa_r+0x99e>
8000bebe:	08 9b       	mov	r11,r4
8000bec0:	0a 9a       	mov	r10,r5
8000bec2:	0e 9c       	mov	r12,r7
8000bec4:	e0 a0 09 36 	rcall	8000d130 <__lshift>
8000bec8:	18 94       	mov	r4,r12
8000beca:	40 6b       	lddsp	r11,sp[0x18]
8000becc:	58 0b       	cp.w	r11,0
8000bece:	c0 31       	brne	8000bed4 <_dtoa_r+0x9a8>
8000bed0:	08 9c       	mov	r12,r4
8000bed2:	c1 38       	rjmp	8000bef8 <_dtoa_r+0x9cc>
8000bed4:	68 1b       	ld.w	r11,r4[0x4]
8000bed6:	0e 9c       	mov	r12,r7
8000bed8:	e0 a0 08 38 	rcall	8000cf48 <_Balloc>
8000bedc:	68 4a       	ld.w	r10,r4[0x10]
8000bede:	18 95       	mov	r5,r12
8000bee0:	e8 cb ff f4 	sub	r11,r4,-12
8000bee4:	2f ea       	sub	r10,-2
8000bee6:	2f 4c       	sub	r12,-12
8000bee8:	a3 6a       	lsl	r10,0x2
8000beea:	fe b0 e7 e3 	rcall	80008eb0 <memcpy>
8000beee:	0a 9b       	mov	r11,r5
8000bef0:	30 1a       	mov	r10,1
8000bef2:	0e 9c       	mov	r12,r7
8000bef4:	e0 a0 09 1e 	rcall	8000d130 <__lshift>
8000bef8:	50 44       	stdsp	sp[0x10],r4
8000befa:	40 3a       	lddsp	r10,sp[0xc]
8000befc:	30 19       	mov	r9,1
8000befe:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000bf02:	18 94       	mov	r4,r12
8000bf04:	50 da       	stdsp	sp[0x34],r10
8000bf06:	40 85       	lddsp	r5,sp[0x20]
8000bf08:	50 99       	stdsp	sp[0x24],r9
8000bf0a:	50 26       	stdsp	sp[0x8],r6
8000bf0c:	50 e1       	stdsp	sp[0x38],r1
8000bf0e:	04 9b       	mov	r11,r2
8000bf10:	06 9c       	mov	r12,r3
8000bf12:	fe b0 fa 7d 	rcall	8000b40c <quorem>
8000bf16:	40 4b       	lddsp	r11,sp[0x10]
8000bf18:	f8 c0 ff d0 	sub	r0,r12,-48
8000bf1c:	06 9c       	mov	r12,r3
8000bf1e:	e0 a0 07 e1 	rcall	8000cee0 <__mcmp>
8000bf22:	08 9a       	mov	r10,r4
8000bf24:	50 6c       	stdsp	sp[0x18],r12
8000bf26:	04 9b       	mov	r11,r2
8000bf28:	0e 9c       	mov	r12,r7
8000bf2a:	e0 a0 08 9b 	rcall	8000d060 <__mdiff>
8000bf2e:	18 91       	mov	r1,r12
8000bf30:	78 38       	ld.w	r8,r12[0xc]
8000bf32:	58 08       	cp.w	r8,0
8000bf34:	c0 30       	breq	8000bf3a <_dtoa_r+0xa0e>
8000bf36:	30 16       	mov	r6,1
8000bf38:	c0 68       	rjmp	8000bf44 <_dtoa_r+0xa18>
8000bf3a:	18 9b       	mov	r11,r12
8000bf3c:	06 9c       	mov	r12,r3
8000bf3e:	e0 a0 07 d1 	rcall	8000cee0 <__mcmp>
8000bf42:	18 96       	mov	r6,r12
8000bf44:	0e 9c       	mov	r12,r7
8000bf46:	02 9b       	mov	r11,r1
8000bf48:	e0 a0 07 e6 	rcall	8000cf14 <_Bfree>
8000bf4c:	40 cc       	lddsp	r12,sp[0x30]
8000bf4e:	ed ec 10 08 	or	r8,r6,r12
8000bf52:	c0 d1       	brne	8000bf6c <_dtoa_r+0xa40>
8000bf54:	40 db       	lddsp	r11,sp[0x34]
8000bf56:	58 0b       	cp.w	r11,0
8000bf58:	c0 a1       	brne	8000bf6c <_dtoa_r+0xa40>
8000bf5a:	40 26       	lddsp	r6,sp[0x8]
8000bf5c:	e0 40 00 39 	cp.w	r0,57
8000bf60:	c3 00       	breq	8000bfc0 <_dtoa_r+0xa94>
8000bf62:	40 6a       	lddsp	r10,sp[0x18]
8000bf64:	58 0a       	cp.w	r10,0
8000bf66:	e0 89 00 24 	brgt	8000bfae <_dtoa_r+0xa82>
8000bf6a:	c2 f8       	rjmp	8000bfc8 <_dtoa_r+0xa9c>
8000bf6c:	40 69       	lddsp	r9,sp[0x18]
8000bf6e:	58 09       	cp.w	r9,0
8000bf70:	c0 85       	brlt	8000bf80 <_dtoa_r+0xa54>
8000bf72:	12 98       	mov	r8,r9
8000bf74:	40 cc       	lddsp	r12,sp[0x30]
8000bf76:	18 48       	or	r8,r12
8000bf78:	c1 d1       	brne	8000bfb2 <_dtoa_r+0xa86>
8000bf7a:	40 db       	lddsp	r11,sp[0x34]
8000bf7c:	58 0b       	cp.w	r11,0
8000bf7e:	c1 a1       	brne	8000bfb2 <_dtoa_r+0xa86>
8000bf80:	0c 99       	mov	r9,r6
8000bf82:	40 26       	lddsp	r6,sp[0x8]
8000bf84:	58 09       	cp.w	r9,0
8000bf86:	e0 8a 00 21 	brle	8000bfc8 <_dtoa_r+0xa9c>
8000bf8a:	06 9b       	mov	r11,r3
8000bf8c:	30 1a       	mov	r10,1
8000bf8e:	0e 9c       	mov	r12,r7
8000bf90:	e0 a0 08 d0 	rcall	8000d130 <__lshift>
8000bf94:	04 9b       	mov	r11,r2
8000bf96:	18 93       	mov	r3,r12
8000bf98:	e0 a0 07 a4 	rcall	8000cee0 <__mcmp>
8000bf9c:	e0 89 00 06 	brgt	8000bfa8 <_dtoa_r+0xa7c>
8000bfa0:	c1 41       	brne	8000bfc8 <_dtoa_r+0xa9c>
8000bfa2:	ed b0 00 00 	bld	r0,0x0
8000bfa6:	c1 11       	brne	8000bfc8 <_dtoa_r+0xa9c>
8000bfa8:	e0 40 00 39 	cp.w	r0,57
8000bfac:	c0 a0       	breq	8000bfc0 <_dtoa_r+0xa94>
8000bfae:	2f f0       	sub	r0,-1
8000bfb0:	c0 c8       	rjmp	8000bfc8 <_dtoa_r+0xa9c>
8000bfb2:	58 06       	cp.w	r6,0
8000bfb4:	e0 8a 00 0c 	brle	8000bfcc <_dtoa_r+0xaa0>
8000bfb8:	40 26       	lddsp	r6,sp[0x8]
8000bfba:	e0 40 00 39 	cp.w	r0,57
8000bfbe:	c0 41       	brne	8000bfc6 <_dtoa_r+0xa9a>
8000bfc0:	33 98       	mov	r8,57
8000bfc2:	0a c8       	st.b	r5++,r8
8000bfc4:	c6 78       	rjmp	8000c092 <_dtoa_r+0xb66>
8000bfc6:	2f f0       	sub	r0,-1
8000bfc8:	0a c0       	st.b	r5++,r0
8000bfca:	c7 58       	rjmp	8000c0b4 <_dtoa_r+0xb88>
8000bfcc:	0a c0       	st.b	r5++,r0
8000bfce:	40 9a       	lddsp	r10,sp[0x24]
8000bfd0:	40 e9       	lddsp	r9,sp[0x38]
8000bfd2:	12 3a       	cp.w	r10,r9
8000bfd4:	c4 30       	breq	8000c05a <_dtoa_r+0xb2e>
8000bfd6:	06 9b       	mov	r11,r3
8000bfd8:	30 09       	mov	r9,0
8000bfda:	30 aa       	mov	r10,10
8000bfdc:	0e 9c       	mov	r12,r7
8000bfde:	e0 a0 09 75 	rcall	8000d2c8 <__multadd>
8000bfe2:	40 48       	lddsp	r8,sp[0x10]
8000bfe4:	18 93       	mov	r3,r12
8000bfe6:	08 38       	cp.w	r8,r4
8000bfe8:	c0 91       	brne	8000bffa <_dtoa_r+0xace>
8000bfea:	10 9b       	mov	r11,r8
8000bfec:	30 09       	mov	r9,0
8000bfee:	30 aa       	mov	r10,10
8000bff0:	0e 9c       	mov	r12,r7
8000bff2:	e0 a0 09 6b 	rcall	8000d2c8 <__multadd>
8000bff6:	50 4c       	stdsp	sp[0x10],r12
8000bff8:	c0 e8       	rjmp	8000c014 <_dtoa_r+0xae8>
8000bffa:	40 4b       	lddsp	r11,sp[0x10]
8000bffc:	30 09       	mov	r9,0
8000bffe:	30 aa       	mov	r10,10
8000c000:	0e 9c       	mov	r12,r7
8000c002:	e0 a0 09 63 	rcall	8000d2c8 <__multadd>
8000c006:	08 9b       	mov	r11,r4
8000c008:	50 4c       	stdsp	sp[0x10],r12
8000c00a:	30 09       	mov	r9,0
8000c00c:	30 aa       	mov	r10,10
8000c00e:	0e 9c       	mov	r12,r7
8000c010:	e0 a0 09 5c 	rcall	8000d2c8 <__multadd>
8000c014:	18 94       	mov	r4,r12
8000c016:	40 9c       	lddsp	r12,sp[0x24]
8000c018:	2f fc       	sub	r12,-1
8000c01a:	50 9c       	stdsp	sp[0x24],r12
8000c01c:	c7 9b       	rjmp	8000bf0e <_dtoa_r+0x9e2>
8000c01e:	30 18       	mov	r8,1
8000c020:	06 90       	mov	r0,r3
8000c022:	40 85       	lddsp	r5,sp[0x20]
8000c024:	08 93       	mov	r3,r4
8000c026:	0c 94       	mov	r4,r6
8000c028:	10 96       	mov	r6,r8
8000c02a:	04 9b       	mov	r11,r2
8000c02c:	00 9c       	mov	r12,r0
8000c02e:	fe b0 f9 ef 	rcall	8000b40c <quorem>
8000c032:	2d 0c       	sub	r12,-48
8000c034:	0a cc       	st.b	r5++,r12
8000c036:	02 36       	cp.w	r6,r1
8000c038:	c0 a4       	brge	8000c04c <_dtoa_r+0xb20>
8000c03a:	00 9b       	mov	r11,r0
8000c03c:	30 09       	mov	r9,0
8000c03e:	30 aa       	mov	r10,10
8000c040:	0e 9c       	mov	r12,r7
8000c042:	2f f6       	sub	r6,-1
8000c044:	e0 a0 09 42 	rcall	8000d2c8 <__multadd>
8000c048:	18 90       	mov	r0,r12
8000c04a:	cf 0b       	rjmp	8000c02a <_dtoa_r+0xafe>
8000c04c:	08 96       	mov	r6,r4
8000c04e:	30 0b       	mov	r11,0
8000c050:	06 94       	mov	r4,r3
8000c052:	50 4b       	stdsp	sp[0x10],r11
8000c054:	00 93       	mov	r3,r0
8000c056:	18 90       	mov	r0,r12
8000c058:	c0 28       	rjmp	8000c05c <_dtoa_r+0xb30>
8000c05a:	40 26       	lddsp	r6,sp[0x8]
8000c05c:	06 9b       	mov	r11,r3
8000c05e:	30 1a       	mov	r10,1
8000c060:	0e 9c       	mov	r12,r7
8000c062:	e0 a0 08 67 	rcall	8000d130 <__lshift>
8000c066:	04 9b       	mov	r11,r2
8000c068:	18 93       	mov	r3,r12
8000c06a:	e0 a0 07 3b 	rcall	8000cee0 <__mcmp>
8000c06e:	e0 89 00 12 	brgt	8000c092 <_dtoa_r+0xb66>
8000c072:	c1 b1       	brne	8000c0a8 <_dtoa_r+0xb7c>
8000c074:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000c078:	c0 d1       	brne	8000c092 <_dtoa_r+0xb66>
8000c07a:	c1 78       	rjmp	8000c0a8 <_dtoa_r+0xb7c>
8000c07c:	40 89       	lddsp	r9,sp[0x20]
8000c07e:	12 38       	cp.w	r8,r9
8000c080:	c0 30       	breq	8000c086 <_dtoa_r+0xb5a>
8000c082:	10 95       	mov	r5,r8
8000c084:	c0 88       	rjmp	8000c094 <_dtoa_r+0xb68>
8000c086:	2f f6       	sub	r6,-1
8000c088:	50 66       	stdsp	sp[0x18],r6
8000c08a:	33 18       	mov	r8,49
8000c08c:	40 8c       	lddsp	r12,sp[0x20]
8000c08e:	b8 88       	st.b	r12[0x0],r8
8000c090:	c1 38       	rjmp	8000c0b6 <_dtoa_r+0xb8a>
8000c092:	33 9a       	mov	r10,57
8000c094:	0a 98       	mov	r8,r5
8000c096:	11 79       	ld.ub	r9,--r8
8000c098:	f4 09 18 00 	cp.b	r9,r10
8000c09c:	cf 00       	breq	8000c07c <_dtoa_r+0xb50>
8000c09e:	2f f9       	sub	r9,-1
8000c0a0:	b0 89       	st.b	r8[0x0],r9
8000c0a2:	c0 98       	rjmp	8000c0b4 <_dtoa_r+0xb88>
8000c0a4:	10 95       	mov	r5,r8
8000c0a6:	c0 28       	rjmp	8000c0aa <_dtoa_r+0xb7e>
8000c0a8:	33 09       	mov	r9,48
8000c0aa:	0a 98       	mov	r8,r5
8000c0ac:	11 7a       	ld.ub	r10,--r8
8000c0ae:	f2 0a 18 00 	cp.b	r10,r9
8000c0b2:	cf 90       	breq	8000c0a4 <_dtoa_r+0xb78>
8000c0b4:	50 66       	stdsp	sp[0x18],r6
8000c0b6:	04 9b       	mov	r11,r2
8000c0b8:	0e 9c       	mov	r12,r7
8000c0ba:	e0 a0 07 2d 	rcall	8000cf14 <_Bfree>
8000c0be:	58 04       	cp.w	r4,0
8000c0c0:	c1 20       	breq	8000c0e4 <_dtoa_r+0xbb8>
8000c0c2:	40 4b       	lddsp	r11,sp[0x10]
8000c0c4:	08 3b       	cp.w	r11,r4
8000c0c6:	5f 19       	srne	r9
8000c0c8:	58 0b       	cp.w	r11,0
8000c0ca:	5f 18       	srne	r8
8000c0cc:	f3 e8 00 08 	and	r8,r9,r8
8000c0d0:	c0 40       	breq	8000c0d8 <_dtoa_r+0xbac>
8000c0d2:	0e 9c       	mov	r12,r7
8000c0d4:	e0 a0 07 20 	rcall	8000cf14 <_Bfree>
8000c0d8:	08 9b       	mov	r11,r4
8000c0da:	0e 9c       	mov	r12,r7
8000c0dc:	e0 a0 07 1c 	rcall	8000cf14 <_Bfree>
8000c0e0:	c0 28       	rjmp	8000c0e4 <_dtoa_r+0xbb8>
8000c0e2:	50 66       	stdsp	sp[0x18],r6
8000c0e4:	0e 9c       	mov	r12,r7
8000c0e6:	06 9b       	mov	r11,r3
8000c0e8:	e0 a0 07 16 	rcall	8000cf14 <_Bfree>
8000c0ec:	30 08       	mov	r8,0
8000c0ee:	aa 88       	st.b	r5[0x0],r8
8000c0f0:	40 68       	lddsp	r8,sp[0x18]
8000c0f2:	41 5a       	lddsp	r10,sp[0x54]
8000c0f4:	2f f8       	sub	r8,-1
8000c0f6:	41 29       	lddsp	r9,sp[0x48]
8000c0f8:	95 08       	st.w	r10[0x0],r8
8000c0fa:	40 8c       	lddsp	r12,sp[0x20]
8000c0fc:	58 09       	cp.w	r9,0
8000c0fe:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000c102:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000c106:	2e 6d       	sub	sp,-104
8000c108:	d8 32       	popm	r0-r7,pc
8000c10a:	d7 03       	nop

8000c10c <_fflush_r>:
8000c10c:	d4 21       	pushm	r4-r7,lr
8000c10e:	16 97       	mov	r7,r11
8000c110:	18 96       	mov	r6,r12
8000c112:	76 48       	ld.w	r8,r11[0x10]
8000c114:	58 08       	cp.w	r8,0
8000c116:	c7 c0       	breq	8000c20e <_fflush_r+0x102>
8000c118:	58 0c       	cp.w	r12,0
8000c11a:	c0 50       	breq	8000c124 <_fflush_r+0x18>
8000c11c:	78 68       	ld.w	r8,r12[0x18]
8000c11e:	58 08       	cp.w	r8,0
8000c120:	c0 21       	brne	8000c124 <_fflush_r+0x18>
8000c122:	cd 1c       	rcall	8000c2c4 <__sinit>
8000c124:	4b b8       	lddpc	r8,8000c210 <_fflush_r+0x104>
8000c126:	10 37       	cp.w	r7,r8
8000c128:	c0 31       	brne	8000c12e <_fflush_r+0x22>
8000c12a:	6c 07       	ld.w	r7,r6[0x0]
8000c12c:	c0 a8       	rjmp	8000c140 <_fflush_r+0x34>
8000c12e:	4b a8       	lddpc	r8,8000c214 <_fflush_r+0x108>
8000c130:	10 37       	cp.w	r7,r8
8000c132:	c0 31       	brne	8000c138 <_fflush_r+0x2c>
8000c134:	6c 17       	ld.w	r7,r6[0x4]
8000c136:	c0 58       	rjmp	8000c140 <_fflush_r+0x34>
8000c138:	4b 88       	lddpc	r8,8000c218 <_fflush_r+0x10c>
8000c13a:	10 37       	cp.w	r7,r8
8000c13c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000c140:	8e 6a       	ld.sh	r10,r7[0xc]
8000c142:	14 98       	mov	r8,r10
8000c144:	ed ba 00 03 	bld	r10,0x3
8000c148:	c4 20       	breq	8000c1cc <_fflush_r+0xc0>
8000c14a:	ab ba       	sbr	r10,0xb
8000c14c:	ae 6a       	st.h	r7[0xc],r10
8000c14e:	6e 18       	ld.w	r8,r7[0x4]
8000c150:	58 08       	cp.w	r8,0
8000c152:	e0 89 00 06 	brgt	8000c15e <_fflush_r+0x52>
8000c156:	6f 08       	ld.w	r8,r7[0x40]
8000c158:	58 08       	cp.w	r8,0
8000c15a:	e0 8a 00 5a 	brle	8000c20e <_fflush_r+0x102>
8000c15e:	6e b8       	ld.w	r8,r7[0x2c]
8000c160:	58 08       	cp.w	r8,0
8000c162:	c5 60       	breq	8000c20e <_fflush_r+0x102>
8000c164:	e2 1a 10 00 	andl	r10,0x1000,COH
8000c168:	c0 30       	breq	8000c16e <_fflush_r+0x62>
8000c16a:	6f 55       	ld.w	r5,r7[0x54]
8000c16c:	c0 f8       	rjmp	8000c18a <_fflush_r+0x7e>
8000c16e:	30 19       	mov	r9,1
8000c170:	6e 8b       	ld.w	r11,r7[0x20]
8000c172:	0c 9c       	mov	r12,r6
8000c174:	5d 18       	icall	r8
8000c176:	18 95       	mov	r5,r12
8000c178:	5b fc       	cp.w	r12,-1
8000c17a:	c0 81       	brne	8000c18a <_fflush_r+0x7e>
8000c17c:	6c 38       	ld.w	r8,r6[0xc]
8000c17e:	59 d8       	cp.w	r8,29
8000c180:	c4 70       	breq	8000c20e <_fflush_r+0x102>
8000c182:	8e 68       	ld.sh	r8,r7[0xc]
8000c184:	a7 a8       	sbr	r8,0x6
8000c186:	ae 68       	st.h	r7[0xc],r8
8000c188:	d8 22       	popm	r4-r7,pc
8000c18a:	8e 68       	ld.sh	r8,r7[0xc]
8000c18c:	ed b8 00 02 	bld	r8,0x2
8000c190:	c0 91       	brne	8000c1a2 <_fflush_r+0x96>
8000c192:	6e 18       	ld.w	r8,r7[0x4]
8000c194:	10 15       	sub	r5,r8
8000c196:	6e d8       	ld.w	r8,r7[0x34]
8000c198:	58 08       	cp.w	r8,0
8000c19a:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000c19e:	eb d8 e1 15 	subne	r5,r5,r8
8000c1a2:	6e b8       	ld.w	r8,r7[0x2c]
8000c1a4:	0c 9c       	mov	r12,r6
8000c1a6:	30 09       	mov	r9,0
8000c1a8:	0a 9a       	mov	r10,r5
8000c1aa:	6e 8b       	ld.w	r11,r7[0x20]
8000c1ac:	5d 18       	icall	r8
8000c1ae:	8e 68       	ld.sh	r8,r7[0xc]
8000c1b0:	0a 3c       	cp.w	r12,r5
8000c1b2:	c2 61       	brne	8000c1fe <_fflush_r+0xf2>
8000c1b4:	ab d8       	cbr	r8,0xb
8000c1b6:	30 0c       	mov	r12,0
8000c1b8:	6e 49       	ld.w	r9,r7[0x10]
8000c1ba:	ae 68       	st.h	r7[0xc],r8
8000c1bc:	8f 1c       	st.w	r7[0x4],r12
8000c1be:	8f 09       	st.w	r7[0x0],r9
8000c1c0:	ed b8 00 0c 	bld	r8,0xc
8000c1c4:	c2 51       	brne	8000c20e <_fflush_r+0x102>
8000c1c6:	ef 45 00 54 	st.w	r7[84],r5
8000c1ca:	d8 22       	popm	r4-r7,pc
8000c1cc:	6e 45       	ld.w	r5,r7[0x10]
8000c1ce:	58 05       	cp.w	r5,0
8000c1d0:	c1 f0       	breq	8000c20e <_fflush_r+0x102>
8000c1d2:	6e 04       	ld.w	r4,r7[0x0]
8000c1d4:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000c1d8:	8f 05       	st.w	r7[0x0],r5
8000c1da:	f9 b8 01 00 	movne	r8,0
8000c1de:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000c1e2:	0a 14       	sub	r4,r5
8000c1e4:	8f 28       	st.w	r7[0x8],r8
8000c1e6:	c1 18       	rjmp	8000c208 <_fflush_r+0xfc>
8000c1e8:	08 99       	mov	r9,r4
8000c1ea:	0a 9a       	mov	r10,r5
8000c1ec:	6e a8       	ld.w	r8,r7[0x28]
8000c1ee:	6e 8b       	ld.w	r11,r7[0x20]
8000c1f0:	0c 9c       	mov	r12,r6
8000c1f2:	5d 18       	icall	r8
8000c1f4:	18 14       	sub	r4,r12
8000c1f6:	58 0c       	cp.w	r12,0
8000c1f8:	e0 89 00 07 	brgt	8000c206 <_fflush_r+0xfa>
8000c1fc:	8e 68       	ld.sh	r8,r7[0xc]
8000c1fe:	a7 a8       	sbr	r8,0x6
8000c200:	3f fc       	mov	r12,-1
8000c202:	ae 68       	st.h	r7[0xc],r8
8000c204:	d8 22       	popm	r4-r7,pc
8000c206:	18 05       	add	r5,r12
8000c208:	58 04       	cp.w	r4,0
8000c20a:	fe 99 ff ef 	brgt	8000c1e8 <_fflush_r+0xdc>
8000c20e:	d8 2a       	popm	r4-r7,pc,r12=0
8000c210:	80 00       	ld.sh	r0,r0[0x0]
8000c212:	ea 28 80 00 	sub	r8,688128
8000c216:	ea 48 80 00 	cp.w	r8,688128
8000c21a:	ea 68 5e fc 	mov	r8,679676

8000c21c <__sfp_lock_acquire>:
8000c21c:	5e fc       	retal	r12

8000c21e <__sfp_lock_release>:
8000c21e:	5e fc       	retal	r12

8000c220 <_cleanup_r>:
8000c220:	d4 01       	pushm	lr
8000c222:	fe cb e8 12 	sub	r11,pc,-6126
8000c226:	e0 a0 03 05 	rcall	8000c830 <_fwalk>
8000c22a:	d8 02       	popm	pc

8000c22c <__sfmoreglue>:
8000c22c:	d4 21       	pushm	r4-r7,lr
8000c22e:	16 95       	mov	r5,r11
8000c230:	f6 06 10 5c 	mul	r6,r11,92
8000c234:	ec cb ff f4 	sub	r11,r6,-12
8000c238:	e0 a0 03 90 	rcall	8000c958 <_malloc_r>
8000c23c:	18 97       	mov	r7,r12
8000c23e:	c0 90       	breq	8000c250 <__sfmoreglue+0x24>
8000c240:	99 15       	st.w	r12[0x4],r5
8000c242:	30 0b       	mov	r11,0
8000c244:	2f 4c       	sub	r12,-12
8000c246:	0c 9a       	mov	r10,r6
8000c248:	8f 2c       	st.w	r7[0x8],r12
8000c24a:	8f 0b       	st.w	r7[0x0],r11
8000c24c:	e0 a0 05 ca 	rcall	8000cde0 <memset>
8000c250:	0e 9c       	mov	r12,r7
8000c252:	d8 22       	popm	r4-r7,pc

8000c254 <__sfp>:
8000c254:	d4 21       	pushm	r4-r7,lr
8000c256:	49 b8       	lddpc	r8,8000c2c0 <__sfp+0x6c>
8000c258:	18 96       	mov	r6,r12
8000c25a:	70 07       	ld.w	r7,r8[0x0]
8000c25c:	6e 68       	ld.w	r8,r7[0x18]
8000c25e:	58 08       	cp.w	r8,0
8000c260:	c0 31       	brne	8000c266 <__sfp+0x12>
8000c262:	0e 9c       	mov	r12,r7
8000c264:	c3 0c       	rcall	8000c2c4 <__sinit>
8000c266:	ee c7 ff 28 	sub	r7,r7,-216
8000c26a:	30 05       	mov	r5,0
8000c26c:	6e 2c       	ld.w	r12,r7[0x8]
8000c26e:	6e 18       	ld.w	r8,r7[0x4]
8000c270:	c0 68       	rjmp	8000c27c <__sfp+0x28>
8000c272:	98 69       	ld.sh	r9,r12[0xc]
8000c274:	ea 09 19 00 	cp.h	r9,r5
8000c278:	c1 10       	breq	8000c29a <__sfp+0x46>
8000c27a:	2a 4c       	sub	r12,-92
8000c27c:	20 18       	sub	r8,1
8000c27e:	cf a7       	brpl	8000c272 <__sfp+0x1e>
8000c280:	6e 08       	ld.w	r8,r7[0x0]
8000c282:	58 08       	cp.w	r8,0
8000c284:	c0 61       	brne	8000c290 <__sfp+0x3c>
8000c286:	30 4b       	mov	r11,4
8000c288:	0c 9c       	mov	r12,r6
8000c28a:	cd 1f       	rcall	8000c22c <__sfmoreglue>
8000c28c:	8f 0c       	st.w	r7[0x0],r12
8000c28e:	c0 30       	breq	8000c294 <__sfp+0x40>
8000c290:	6e 07       	ld.w	r7,r7[0x0]
8000c292:	ce db       	rjmp	8000c26c <__sfp+0x18>
8000c294:	30 c8       	mov	r8,12
8000c296:	8d 38       	st.w	r6[0xc],r8
8000c298:	d8 22       	popm	r4-r7,pc
8000c29a:	30 08       	mov	r8,0
8000c29c:	f9 48 00 4c 	st.w	r12[76],r8
8000c2a0:	99 08       	st.w	r12[0x0],r8
8000c2a2:	99 28       	st.w	r12[0x8],r8
8000c2a4:	99 18       	st.w	r12[0x4],r8
8000c2a6:	99 48       	st.w	r12[0x10],r8
8000c2a8:	99 58       	st.w	r12[0x14],r8
8000c2aa:	99 68       	st.w	r12[0x18],r8
8000c2ac:	99 d8       	st.w	r12[0x34],r8
8000c2ae:	99 e8       	st.w	r12[0x38],r8
8000c2b0:	f9 48 00 48 	st.w	r12[72],r8
8000c2b4:	3f f8       	mov	r8,-1
8000c2b6:	b8 78       	st.h	r12[0xe],r8
8000c2b8:	30 18       	mov	r8,1
8000c2ba:	b8 68       	st.h	r12[0xc],r8
8000c2bc:	d8 22       	popm	r4-r7,pc
8000c2be:	d7 03       	nop
8000c2c0:	80 00       	ld.sh	r0,r0[0x0]
8000c2c2:	ea 8c d4 21 	brvs	80166b04 <_data_lma+0x157f34>

8000c2c4 <__sinit>:
8000c2c4:	d4 21       	pushm	r4-r7,lr
8000c2c6:	18 96       	mov	r6,r12
8000c2c8:	78 67       	ld.w	r7,r12[0x18]
8000c2ca:	58 07       	cp.w	r7,0
8000c2cc:	c4 91       	brne	8000c35e <__sinit+0x9a>
8000c2ce:	fe c8 00 ae 	sub	r8,pc,174
8000c2d2:	30 15       	mov	r5,1
8000c2d4:	99 a8       	st.w	r12[0x28],r8
8000c2d6:	f9 47 00 d8 	st.w	r12[216],r7
8000c2da:	f9 47 00 dc 	st.w	r12[220],r7
8000c2de:	f9 47 00 e0 	st.w	r12[224],r7
8000c2e2:	99 65       	st.w	r12[0x18],r5
8000c2e4:	cb 8f       	rcall	8000c254 <__sfp>
8000c2e6:	8d 0c       	st.w	r6[0x0],r12
8000c2e8:	0c 9c       	mov	r12,r6
8000c2ea:	cb 5f       	rcall	8000c254 <__sfp>
8000c2ec:	8d 1c       	st.w	r6[0x4],r12
8000c2ee:	0c 9c       	mov	r12,r6
8000c2f0:	cb 2f       	rcall	8000c254 <__sfp>
8000c2f2:	6c 09       	ld.w	r9,r6[0x0]
8000c2f4:	30 48       	mov	r8,4
8000c2f6:	93 07       	st.w	r9[0x0],r7
8000c2f8:	b2 68       	st.h	r9[0xc],r8
8000c2fa:	93 17       	st.w	r9[0x4],r7
8000c2fc:	93 27       	st.w	r9[0x8],r7
8000c2fe:	6c 18       	ld.w	r8,r6[0x4]
8000c300:	b2 77       	st.h	r9[0xe],r7
8000c302:	93 47       	st.w	r9[0x10],r7
8000c304:	93 57       	st.w	r9[0x14],r7
8000c306:	93 67       	st.w	r9[0x18],r7
8000c308:	93 89       	st.w	r9[0x20],r9
8000c30a:	91 07       	st.w	r8[0x0],r7
8000c30c:	91 17       	st.w	r8[0x4],r7
8000c30e:	91 27       	st.w	r8[0x8],r7
8000c310:	fe ce eb b4 	sub	lr,pc,-5196
8000c314:	fe cb eb e4 	sub	r11,pc,-5148
8000c318:	93 9e       	st.w	r9[0x24],lr
8000c31a:	93 ab       	st.w	r9[0x28],r11
8000c31c:	fe ca ec 14 	sub	r10,pc,-5100
8000c320:	fe c4 ec 20 	sub	r4,pc,-5088
8000c324:	93 ba       	st.w	r9[0x2c],r10
8000c326:	93 c4       	st.w	r9[0x30],r4
8000c328:	30 99       	mov	r9,9
8000c32a:	b0 69       	st.h	r8[0xc],r9
8000c32c:	b0 75       	st.h	r8[0xe],r5
8000c32e:	91 c4       	st.w	r8[0x30],r4
8000c330:	91 47       	st.w	r8[0x10],r7
8000c332:	91 57       	st.w	r8[0x14],r7
8000c334:	91 67       	st.w	r8[0x18],r7
8000c336:	91 88       	st.w	r8[0x20],r8
8000c338:	91 9e       	st.w	r8[0x24],lr
8000c33a:	91 ab       	st.w	r8[0x28],r11
8000c33c:	91 ba       	st.w	r8[0x2c],r10
8000c33e:	8d 2c       	st.w	r6[0x8],r12
8000c340:	31 28       	mov	r8,18
8000c342:	99 07       	st.w	r12[0x0],r7
8000c344:	b8 68       	st.h	r12[0xc],r8
8000c346:	99 17       	st.w	r12[0x4],r7
8000c348:	99 27       	st.w	r12[0x8],r7
8000c34a:	30 28       	mov	r8,2
8000c34c:	b8 78       	st.h	r12[0xe],r8
8000c34e:	99 c4       	st.w	r12[0x30],r4
8000c350:	99 67       	st.w	r12[0x18],r7
8000c352:	99 9e       	st.w	r12[0x24],lr
8000c354:	99 ab       	st.w	r12[0x28],r11
8000c356:	99 ba       	st.w	r12[0x2c],r10
8000c358:	99 47       	st.w	r12[0x10],r7
8000c35a:	99 57       	st.w	r12[0x14],r7
8000c35c:	99 8c       	st.w	r12[0x20],r12
8000c35e:	d8 22       	popm	r4-r7,pc

8000c360 <_malloc_trim_r>:
8000c360:	d4 21       	pushm	r4-r7,lr
8000c362:	16 95       	mov	r5,r11
8000c364:	18 97       	mov	r7,r12
8000c366:	e0 a0 05 44 	rcall	8000cdee <__malloc_lock>
8000c36a:	4a 24       	lddpc	r4,8000c3f0 <_malloc_trim_r+0x90>
8000c36c:	68 28       	ld.w	r8,r4[0x8]
8000c36e:	70 16       	ld.w	r6,r8[0x4]
8000c370:	e0 16 ff fc 	andl	r6,0xfffc
8000c374:	ec c8 ff 91 	sub	r8,r6,-111
8000c378:	f0 05 01 05 	sub	r5,r8,r5
8000c37c:	e0 15 ff 80 	andl	r5,0xff80
8000c380:	ea c5 00 80 	sub	r5,r5,128
8000c384:	e0 45 00 7f 	cp.w	r5,127
8000c388:	e0 8a 00 23 	brle	8000c3ce <_malloc_trim_r+0x6e>
8000c38c:	30 0b       	mov	r11,0
8000c38e:	0e 9c       	mov	r12,r7
8000c390:	e0 a0 09 84 	rcall	8000d698 <_sbrk_r>
8000c394:	68 28       	ld.w	r8,r4[0x8]
8000c396:	0c 08       	add	r8,r6
8000c398:	10 3c       	cp.w	r12,r8
8000c39a:	c1 a1       	brne	8000c3ce <_malloc_trim_r+0x6e>
8000c39c:	ea 0b 11 00 	rsub	r11,r5,0
8000c3a0:	0e 9c       	mov	r12,r7
8000c3a2:	e0 a0 09 7b 	rcall	8000d698 <_sbrk_r>
8000c3a6:	5b fc       	cp.w	r12,-1
8000c3a8:	c1 71       	brne	8000c3d6 <_malloc_trim_r+0x76>
8000c3aa:	30 0b       	mov	r11,0
8000c3ac:	0e 9c       	mov	r12,r7
8000c3ae:	e0 a0 09 75 	rcall	8000d698 <_sbrk_r>
8000c3b2:	68 28       	ld.w	r8,r4[0x8]
8000c3b4:	f8 08 01 09 	sub	r9,r12,r8
8000c3b8:	58 f9       	cp.w	r9,15
8000c3ba:	e0 8a 00 0a 	brle	8000c3ce <_malloc_trim_r+0x6e>
8000c3be:	a1 a9       	sbr	r9,0x0
8000c3c0:	91 19       	st.w	r8[0x4],r9
8000c3c2:	48 d8       	lddpc	r8,8000c3f4 <_malloc_trim_r+0x94>
8000c3c4:	70 09       	ld.w	r9,r8[0x0]
8000c3c6:	48 d8       	lddpc	r8,8000c3f8 <_malloc_trim_r+0x98>
8000c3c8:	f8 09 01 09 	sub	r9,r12,r9
8000c3cc:	91 09       	st.w	r8[0x0],r9
8000c3ce:	0e 9c       	mov	r12,r7
8000c3d0:	e0 a0 05 10 	rcall	8000cdf0 <__malloc_unlock>
8000c3d4:	d8 2a       	popm	r4-r7,pc,r12=0
8000c3d6:	68 28       	ld.w	r8,r4[0x8]
8000c3d8:	0a 16       	sub	r6,r5
8000c3da:	a1 a6       	sbr	r6,0x0
8000c3dc:	91 16       	st.w	r8[0x4],r6
8000c3de:	48 78       	lddpc	r8,8000c3f8 <_malloc_trim_r+0x98>
8000c3e0:	70 09       	ld.w	r9,r8[0x0]
8000c3e2:	0a 19       	sub	r9,r5
8000c3e4:	0e 9c       	mov	r12,r7
8000c3e6:	91 09       	st.w	r8[0x0],r9
8000c3e8:	e0 a0 05 04 	rcall	8000cdf0 <__malloc_unlock>
8000c3ec:	da 2a       	popm	r4-r7,pc,r12=1
8000c3ee:	d7 03       	nop
8000c3f0:	00 00       	add	r0,r0
8000c3f2:	02 fc       	st.b	--r1,r12
8000c3f4:	00 00       	add	r0,r0
8000c3f6:	07 08       	ld.w	r8,r3++
8000c3f8:	00 00       	add	r0,r0
8000c3fa:	09 0c       	ld.w	r12,r4++

8000c3fc <_free_r>:
8000c3fc:	d4 21       	pushm	r4-r7,lr
8000c3fe:	16 96       	mov	r6,r11
8000c400:	18 97       	mov	r7,r12
8000c402:	58 0b       	cp.w	r11,0
8000c404:	e0 80 00 c2 	breq	8000c588 <_free_r+0x18c>
8000c408:	e0 a0 04 f3 	rcall	8000cdee <__malloc_lock>
8000c40c:	20 86       	sub	r6,8
8000c40e:	4c ca       	lddpc	r10,8000c53c <_free_r+0x140>
8000c410:	6c 18       	ld.w	r8,r6[0x4]
8000c412:	74 2e       	ld.w	lr,r10[0x8]
8000c414:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000c418:	a1 c8       	cbr	r8,0x0
8000c41a:	ec 08 00 09 	add	r9,r6,r8
8000c41e:	72 1b       	ld.w	r11,r9[0x4]
8000c420:	e0 1b ff fc 	andl	r11,0xfffc
8000c424:	1c 39       	cp.w	r9,lr
8000c426:	c1 c1       	brne	8000c45e <_free_r+0x62>
8000c428:	f6 08 00 08 	add	r8,r11,r8
8000c42c:	58 0c       	cp.w	r12,0
8000c42e:	c0 81       	brne	8000c43e <_free_r+0x42>
8000c430:	6c 09       	ld.w	r9,r6[0x0]
8000c432:	12 16       	sub	r6,r9
8000c434:	12 08       	add	r8,r9
8000c436:	6c 3b       	ld.w	r11,r6[0xc]
8000c438:	6c 29       	ld.w	r9,r6[0x8]
8000c43a:	97 29       	st.w	r11[0x8],r9
8000c43c:	93 3b       	st.w	r9[0xc],r11
8000c43e:	10 99       	mov	r9,r8
8000c440:	95 26       	st.w	r10[0x8],r6
8000c442:	a1 a9       	sbr	r9,0x0
8000c444:	8d 19       	st.w	r6[0x4],r9
8000c446:	4b f9       	lddpc	r9,8000c540 <_free_r+0x144>
8000c448:	72 09       	ld.w	r9,r9[0x0]
8000c44a:	12 38       	cp.w	r8,r9
8000c44c:	c0 53       	brcs	8000c456 <_free_r+0x5a>
8000c44e:	4b e8       	lddpc	r8,8000c544 <_free_r+0x148>
8000c450:	0e 9c       	mov	r12,r7
8000c452:	70 0b       	ld.w	r11,r8[0x0]
8000c454:	c8 6f       	rcall	8000c360 <_malloc_trim_r>
8000c456:	0e 9c       	mov	r12,r7
8000c458:	e0 a0 04 cc 	rcall	8000cdf0 <__malloc_unlock>
8000c45c:	d8 22       	popm	r4-r7,pc
8000c45e:	93 1b       	st.w	r9[0x4],r11
8000c460:	58 0c       	cp.w	r12,0
8000c462:	c0 30       	breq	8000c468 <_free_r+0x6c>
8000c464:	30 0c       	mov	r12,0
8000c466:	c1 08       	rjmp	8000c486 <_free_r+0x8a>
8000c468:	6c 0e       	ld.w	lr,r6[0x0]
8000c46a:	f4 c5 ff f8 	sub	r5,r10,-8
8000c46e:	1c 16       	sub	r6,lr
8000c470:	1c 08       	add	r8,lr
8000c472:	6c 2e       	ld.w	lr,r6[0x8]
8000c474:	0a 3e       	cp.w	lr,r5
8000c476:	f9 bc 00 01 	moveq	r12,1
8000c47a:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000c47e:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000c482:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000c486:	f2 0b 00 0e 	add	lr,r9,r11
8000c48a:	7c 1e       	ld.w	lr,lr[0x4]
8000c48c:	ed be 00 00 	bld	lr,0x0
8000c490:	c1 30       	breq	8000c4b6 <_free_r+0xba>
8000c492:	16 08       	add	r8,r11
8000c494:	58 0c       	cp.w	r12,0
8000c496:	c0 c1       	brne	8000c4ae <_free_r+0xb2>
8000c498:	4a 9e       	lddpc	lr,8000c53c <_free_r+0x140>
8000c49a:	72 2b       	ld.w	r11,r9[0x8]
8000c49c:	2f 8e       	sub	lr,-8
8000c49e:	1c 3b       	cp.w	r11,lr
8000c4a0:	c0 71       	brne	8000c4ae <_free_r+0xb2>
8000c4a2:	97 36       	st.w	r11[0xc],r6
8000c4a4:	97 26       	st.w	r11[0x8],r6
8000c4a6:	8d 2b       	st.w	r6[0x8],r11
8000c4a8:	8d 3b       	st.w	r6[0xc],r11
8000c4aa:	30 1c       	mov	r12,1
8000c4ac:	c0 58       	rjmp	8000c4b6 <_free_r+0xba>
8000c4ae:	72 2b       	ld.w	r11,r9[0x8]
8000c4b0:	72 39       	ld.w	r9,r9[0xc]
8000c4b2:	93 2b       	st.w	r9[0x8],r11
8000c4b4:	97 39       	st.w	r11[0xc],r9
8000c4b6:	10 99       	mov	r9,r8
8000c4b8:	ec 08 09 08 	st.w	r6[r8],r8
8000c4bc:	a1 a9       	sbr	r9,0x0
8000c4be:	8d 19       	st.w	r6[0x4],r9
8000c4c0:	58 0c       	cp.w	r12,0
8000c4c2:	c6 01       	brne	8000c582 <_free_r+0x186>
8000c4c4:	e0 48 01 ff 	cp.w	r8,511
8000c4c8:	e0 8b 00 13 	brhi	8000c4ee <_free_r+0xf2>
8000c4cc:	a3 98       	lsr	r8,0x3
8000c4ce:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000c4d2:	72 2b       	ld.w	r11,r9[0x8]
8000c4d4:	8d 39       	st.w	r6[0xc],r9
8000c4d6:	8d 2b       	st.w	r6[0x8],r11
8000c4d8:	97 36       	st.w	r11[0xc],r6
8000c4da:	93 26       	st.w	r9[0x8],r6
8000c4dc:	a3 48       	asr	r8,0x2
8000c4de:	74 19       	ld.w	r9,r10[0x4]
8000c4e0:	30 1b       	mov	r11,1
8000c4e2:	f6 08 09 48 	lsl	r8,r11,r8
8000c4e6:	f3 e8 10 08 	or	r8,r9,r8
8000c4ea:	95 18       	st.w	r10[0x4],r8
8000c4ec:	c4 b8       	rjmp	8000c582 <_free_r+0x186>
8000c4ee:	f0 09 16 09 	lsr	r9,r8,0x9
8000c4f2:	58 49       	cp.w	r9,4
8000c4f4:	e0 8b 00 06 	brhi	8000c500 <_free_r+0x104>
8000c4f8:	f0 0b 16 06 	lsr	r11,r8,0x6
8000c4fc:	2c 8b       	sub	r11,-56
8000c4fe:	c2 68       	rjmp	8000c54a <_free_r+0x14e>
8000c500:	59 49       	cp.w	r9,20
8000c502:	e0 8b 00 05 	brhi	8000c50c <_free_r+0x110>
8000c506:	f2 cb ff a5 	sub	r11,r9,-91
8000c50a:	c2 08       	rjmp	8000c54a <_free_r+0x14e>
8000c50c:	e0 49 00 54 	cp.w	r9,84
8000c510:	e0 8b 00 06 	brhi	8000c51c <_free_r+0x120>
8000c514:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000c518:	29 2b       	sub	r11,-110
8000c51a:	c1 88       	rjmp	8000c54a <_free_r+0x14e>
8000c51c:	e0 49 01 54 	cp.w	r9,340
8000c520:	e0 8b 00 06 	brhi	8000c52c <_free_r+0x130>
8000c524:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000c528:	28 9b       	sub	r11,-119
8000c52a:	c1 08       	rjmp	8000c54a <_free_r+0x14e>
8000c52c:	f0 0b 16 12 	lsr	r11,r8,0x12
8000c530:	e0 49 05 54 	cp.w	r9,1364
8000c534:	e0 88 00 0a 	brls	8000c548 <_free_r+0x14c>
8000c538:	37 eb       	mov	r11,126
8000c53a:	c0 88       	rjmp	8000c54a <_free_r+0x14e>
8000c53c:	00 00       	add	r0,r0
8000c53e:	02 fc       	st.b	--r1,r12
8000c540:	00 00       	add	r0,r0
8000c542:	07 04       	ld.w	r4,r3++
8000c544:	00 00       	add	r0,r0
8000c546:	09 08       	ld.w	r8,r4++
8000c548:	28 4b       	sub	r11,-124
8000c54a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000c54e:	78 29       	ld.w	r9,r12[0x8]
8000c550:	18 39       	cp.w	r9,r12
8000c552:	c0 e1       	brne	8000c56e <_free_r+0x172>
8000c554:	74 18       	ld.w	r8,r10[0x4]
8000c556:	a3 4b       	asr	r11,0x2
8000c558:	30 1c       	mov	r12,1
8000c55a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000c55e:	f1 eb 10 0b 	or	r11,r8,r11
8000c562:	12 98       	mov	r8,r9
8000c564:	95 1b       	st.w	r10[0x4],r11
8000c566:	c0 a8       	rjmp	8000c57a <_free_r+0x17e>
8000c568:	72 29       	ld.w	r9,r9[0x8]
8000c56a:	18 39       	cp.w	r9,r12
8000c56c:	c0 60       	breq	8000c578 <_free_r+0x17c>
8000c56e:	72 1a       	ld.w	r10,r9[0x4]
8000c570:	e0 1a ff fc 	andl	r10,0xfffc
8000c574:	14 38       	cp.w	r8,r10
8000c576:	cf 93       	brcs	8000c568 <_free_r+0x16c>
8000c578:	72 38       	ld.w	r8,r9[0xc]
8000c57a:	8d 38       	st.w	r6[0xc],r8
8000c57c:	8d 29       	st.w	r6[0x8],r9
8000c57e:	93 36       	st.w	r9[0xc],r6
8000c580:	91 26       	st.w	r8[0x8],r6
8000c582:	0e 9c       	mov	r12,r7
8000c584:	e0 a0 04 36 	rcall	8000cdf0 <__malloc_unlock>
8000c588:	d8 22       	popm	r4-r7,pc
8000c58a:	d7 03       	nop

8000c58c <__sfvwrite_r>:
8000c58c:	d4 31       	pushm	r0-r7,lr
8000c58e:	20 3d       	sub	sp,12
8000c590:	14 94       	mov	r4,r10
8000c592:	18 95       	mov	r5,r12
8000c594:	16 97       	mov	r7,r11
8000c596:	74 28       	ld.w	r8,r10[0x8]
8000c598:	58 08       	cp.w	r8,0
8000c59a:	e0 80 01 48 	breq	8000c82a <__sfvwrite_r+0x29e>
8000c59e:	96 68       	ld.sh	r8,r11[0xc]
8000c5a0:	ed b8 00 03 	bld	r8,0x3
8000c5a4:	c0 41       	brne	8000c5ac <__sfvwrite_r+0x20>
8000c5a6:	76 48       	ld.w	r8,r11[0x10]
8000c5a8:	58 08       	cp.w	r8,0
8000c5aa:	c0 c1       	brne	8000c5c2 <__sfvwrite_r+0x36>
8000c5ac:	0e 9b       	mov	r11,r7
8000c5ae:	0a 9c       	mov	r12,r5
8000c5b0:	fe b0 f6 c0 	rcall	8000b330 <__swsetup_r>
8000c5b4:	c0 70       	breq	8000c5c2 <__sfvwrite_r+0x36>
8000c5b6:	8e 68       	ld.sh	r8,r7[0xc]
8000c5b8:	a7 a8       	sbr	r8,0x6
8000c5ba:	ae 68       	st.h	r7[0xc],r8
8000c5bc:	30 98       	mov	r8,9
8000c5be:	8b 38       	st.w	r5[0xc],r8
8000c5c0:	c3 39       	rjmp	8000c826 <__sfvwrite_r+0x29a>
8000c5c2:	8e 63       	ld.sh	r3,r7[0xc]
8000c5c4:	68 00       	ld.w	r0,r4[0x0]
8000c5c6:	06 96       	mov	r6,r3
8000c5c8:	e2 16 00 02 	andl	r6,0x2,COH
8000c5cc:	c2 10       	breq	8000c60e <__sfvwrite_r+0x82>
8000c5ce:	30 03       	mov	r3,0
8000c5d0:	e0 62 04 00 	mov	r2,1024
8000c5d4:	06 96       	mov	r6,r3
8000c5d6:	c0 48       	rjmp	8000c5de <__sfvwrite_r+0x52>
8000c5d8:	60 03       	ld.w	r3,r0[0x0]
8000c5da:	60 16       	ld.w	r6,r0[0x4]
8000c5dc:	2f 80       	sub	r0,-8
8000c5de:	58 06       	cp.w	r6,0
8000c5e0:	cf c0       	breq	8000c5d8 <__sfvwrite_r+0x4c>
8000c5e2:	e0 46 04 00 	cp.w	r6,1024
8000c5e6:	ec 09 17 80 	movls	r9,r6
8000c5ea:	e4 09 17 b0 	movhi	r9,r2
8000c5ee:	06 9a       	mov	r10,r3
8000c5f0:	6e a8       	ld.w	r8,r7[0x28]
8000c5f2:	6e 8b       	ld.w	r11,r7[0x20]
8000c5f4:	0a 9c       	mov	r12,r5
8000c5f6:	5d 18       	icall	r8
8000c5f8:	18 16       	sub	r6,r12
8000c5fa:	58 0c       	cp.w	r12,0
8000c5fc:	e0 8a 01 12 	brle	8000c820 <__sfvwrite_r+0x294>
8000c600:	68 28       	ld.w	r8,r4[0x8]
8000c602:	18 18       	sub	r8,r12
8000c604:	89 28       	st.w	r4[0x8],r8
8000c606:	e0 80 01 12 	breq	8000c82a <__sfvwrite_r+0x29e>
8000c60a:	18 03       	add	r3,r12
8000c60c:	ce 9b       	rjmp	8000c5de <__sfvwrite_r+0x52>
8000c60e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000c612:	c0 70       	breq	8000c620 <__sfvwrite_r+0x94>
8000c614:	50 06       	stdsp	sp[0x0],r6
8000c616:	0c 93       	mov	r3,r6
8000c618:	0c 91       	mov	r1,r6
8000c61a:	50 15       	stdsp	sp[0x4],r5
8000c61c:	08 92       	mov	r2,r4
8000c61e:	c9 e8       	rjmp	8000c75a <__sfvwrite_r+0x1ce>
8000c620:	06 96       	mov	r6,r3
8000c622:	08 91       	mov	r1,r4
8000c624:	c0 48       	rjmp	8000c62c <__sfvwrite_r+0xa0>
8000c626:	60 03       	ld.w	r3,r0[0x0]
8000c628:	60 16       	ld.w	r6,r0[0x4]
8000c62a:	2f 80       	sub	r0,-8
8000c62c:	58 06       	cp.w	r6,0
8000c62e:	cf c0       	breq	8000c626 <__sfvwrite_r+0x9a>
8000c630:	8e 68       	ld.sh	r8,r7[0xc]
8000c632:	6e 24       	ld.w	r4,r7[0x8]
8000c634:	10 99       	mov	r9,r8
8000c636:	e2 19 02 00 	andl	r9,0x200,COH
8000c63a:	c5 50       	breq	8000c6e4 <__sfvwrite_r+0x158>
8000c63c:	08 36       	cp.w	r6,r4
8000c63e:	c4 33       	brcs	8000c6c4 <__sfvwrite_r+0x138>
8000c640:	10 99       	mov	r9,r8
8000c642:	e2 19 04 80 	andl	r9,0x480,COH
8000c646:	c3 f0       	breq	8000c6c4 <__sfvwrite_r+0x138>
8000c648:	6e 4b       	ld.w	r11,r7[0x10]
8000c64a:	6e 09       	ld.w	r9,r7[0x0]
8000c64c:	16 19       	sub	r9,r11
8000c64e:	50 09       	stdsp	sp[0x0],r9
8000c650:	6e 59       	ld.w	r9,r7[0x14]
8000c652:	10 9c       	mov	r12,r8
8000c654:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000c658:	30 28       	mov	r8,2
8000c65a:	f4 08 0c 08 	divs	r8,r10,r8
8000c65e:	fa e9 00 04 	st.d	sp[4],r8
8000c662:	10 94       	mov	r4,r8
8000c664:	40 09       	lddsp	r9,sp[0x0]
8000c666:	e2 1c 04 00 	andl	r12,0x400,COH
8000c66a:	2f f9       	sub	r9,-1
8000c66c:	0c 09       	add	r9,r6
8000c66e:	12 38       	cp.w	r8,r9
8000c670:	f2 04 17 30 	movlo	r4,r9
8000c674:	58 0c       	cp.w	r12,0
8000c676:	c1 00       	breq	8000c696 <__sfvwrite_r+0x10a>
8000c678:	08 9b       	mov	r11,r4
8000c67a:	0a 9c       	mov	r12,r5
8000c67c:	c6 ed       	rcall	8000c958 <_malloc_r>
8000c67e:	18 92       	mov	r2,r12
8000c680:	c1 40       	breq	8000c6a8 <__sfvwrite_r+0x11c>
8000c682:	40 0a       	lddsp	r10,sp[0x0]
8000c684:	6e 4b       	ld.w	r11,r7[0x10]
8000c686:	fe b0 e4 15 	rcall	80008eb0 <memcpy>
8000c68a:	8e 68       	ld.sh	r8,r7[0xc]
8000c68c:	e0 18 fb 7f 	andl	r8,0xfb7f
8000c690:	a7 b8       	sbr	r8,0x7
8000c692:	ae 68       	st.h	r7[0xc],r8
8000c694:	c0 d8       	rjmp	8000c6ae <__sfvwrite_r+0x122>
8000c696:	08 9a       	mov	r10,r4
8000c698:	0a 9c       	mov	r12,r5
8000c69a:	e0 a0 06 9d 	rcall	8000d3d4 <_realloc_r>
8000c69e:	18 92       	mov	r2,r12
8000c6a0:	c0 71       	brne	8000c6ae <__sfvwrite_r+0x122>
8000c6a2:	6e 4b       	ld.w	r11,r7[0x10]
8000c6a4:	0a 9c       	mov	r12,r5
8000c6a6:	ca be       	rcall	8000c3fc <_free_r>
8000c6a8:	30 c8       	mov	r8,12
8000c6aa:	8b 38       	st.w	r5[0xc],r8
8000c6ac:	cb a8       	rjmp	8000c820 <__sfvwrite_r+0x294>
8000c6ae:	40 0a       	lddsp	r10,sp[0x0]
8000c6b0:	40 09       	lddsp	r9,sp[0x0]
8000c6b2:	e8 0a 01 0a 	sub	r10,r4,r10
8000c6b6:	e4 09 00 08 	add	r8,r2,r9
8000c6ba:	8f 54       	st.w	r7[0x14],r4
8000c6bc:	8f 2a       	st.w	r7[0x8],r10
8000c6be:	8f 08       	st.w	r7[0x0],r8
8000c6c0:	8f 42       	st.w	r7[0x10],r2
8000c6c2:	0c 94       	mov	r4,r6
8000c6c4:	08 36       	cp.w	r6,r4
8000c6c6:	ec 04 17 30 	movlo	r4,r6
8000c6ca:	06 9b       	mov	r11,r3
8000c6cc:	08 9a       	mov	r10,r4
8000c6ce:	6e 0c       	ld.w	r12,r7[0x0]
8000c6d0:	e0 a0 03 69 	rcall	8000cda2 <memmove>
8000c6d4:	6e 08       	ld.w	r8,r7[0x0]
8000c6d6:	08 08       	add	r8,r4
8000c6d8:	8f 08       	st.w	r7[0x0],r8
8000c6da:	6e 28       	ld.w	r8,r7[0x8]
8000c6dc:	08 18       	sub	r8,r4
8000c6de:	0c 94       	mov	r4,r6
8000c6e0:	8f 28       	st.w	r7[0x8],r8
8000c6e2:	c3 08       	rjmp	8000c742 <__sfvwrite_r+0x1b6>
8000c6e4:	08 36       	cp.w	r6,r4
8000c6e6:	5f ba       	srhi	r10
8000c6e8:	6e 0c       	ld.w	r12,r7[0x0]
8000c6ea:	6e 48       	ld.w	r8,r7[0x10]
8000c6ec:	10 3c       	cp.w	r12,r8
8000c6ee:	5f b8       	srhi	r8
8000c6f0:	f5 e8 00 08 	and	r8,r10,r8
8000c6f4:	f2 08 18 00 	cp.b	r8,r9
8000c6f8:	c0 e0       	breq	8000c714 <__sfvwrite_r+0x188>
8000c6fa:	06 9b       	mov	r11,r3
8000c6fc:	08 9a       	mov	r10,r4
8000c6fe:	e0 a0 03 52 	rcall	8000cda2 <memmove>
8000c702:	6e 08       	ld.w	r8,r7[0x0]
8000c704:	08 08       	add	r8,r4
8000c706:	0e 9b       	mov	r11,r7
8000c708:	8f 08       	st.w	r7[0x0],r8
8000c70a:	0a 9c       	mov	r12,r5
8000c70c:	fe b0 fd 00 	rcall	8000c10c <_fflush_r>
8000c710:	c1 90       	breq	8000c742 <__sfvwrite_r+0x1b6>
8000c712:	c8 78       	rjmp	8000c820 <__sfvwrite_r+0x294>
8000c714:	6e 59       	ld.w	r9,r7[0x14]
8000c716:	12 36       	cp.w	r6,r9
8000c718:	c0 a3       	brcs	8000c72c <__sfvwrite_r+0x1a0>
8000c71a:	6e a8       	ld.w	r8,r7[0x28]
8000c71c:	06 9a       	mov	r10,r3
8000c71e:	6e 8b       	ld.w	r11,r7[0x20]
8000c720:	0a 9c       	mov	r12,r5
8000c722:	5d 18       	icall	r8
8000c724:	18 94       	mov	r4,r12
8000c726:	e0 89 00 0e 	brgt	8000c742 <__sfvwrite_r+0x1b6>
8000c72a:	c7 b8       	rjmp	8000c820 <__sfvwrite_r+0x294>
8000c72c:	0c 9a       	mov	r10,r6
8000c72e:	06 9b       	mov	r11,r3
8000c730:	e0 a0 03 39 	rcall	8000cda2 <memmove>
8000c734:	6e 08       	ld.w	r8,r7[0x0]
8000c736:	0c 08       	add	r8,r6
8000c738:	0c 94       	mov	r4,r6
8000c73a:	8f 08       	st.w	r7[0x0],r8
8000c73c:	6e 28       	ld.w	r8,r7[0x8]
8000c73e:	0c 18       	sub	r8,r6
8000c740:	8f 28       	st.w	r7[0x8],r8
8000c742:	62 28       	ld.w	r8,r1[0x8]
8000c744:	08 18       	sub	r8,r4
8000c746:	83 28       	st.w	r1[0x8],r8
8000c748:	c7 10       	breq	8000c82a <__sfvwrite_r+0x29e>
8000c74a:	08 16       	sub	r6,r4
8000c74c:	08 03       	add	r3,r4
8000c74e:	c6 fb       	rjmp	8000c62c <__sfvwrite_r+0xa0>
8000c750:	60 03       	ld.w	r3,r0[0x0]
8000c752:	60 11       	ld.w	r1,r0[0x4]
8000c754:	30 08       	mov	r8,0
8000c756:	2f 80       	sub	r0,-8
8000c758:	50 08       	stdsp	sp[0x0],r8
8000c75a:	58 01       	cp.w	r1,0
8000c75c:	cf a0       	breq	8000c750 <__sfvwrite_r+0x1c4>
8000c75e:	40 0a       	lddsp	r10,sp[0x0]
8000c760:	58 0a       	cp.w	r10,0
8000c762:	c1 81       	brne	8000c792 <__sfvwrite_r+0x206>
8000c764:	02 9a       	mov	r10,r1
8000c766:	30 ab       	mov	r11,10
8000c768:	06 9c       	mov	r12,r3
8000c76a:	e0 a0 03 11 	rcall	8000cd8c <memchr>
8000c76e:	f9 b8 01 01 	movne	r8,1
8000c772:	f9 d8 e1 06 	addne	r6,r12,r8
8000c776:	ed d3 e1 16 	subne	r6,r6,r3
8000c77a:	f9 b9 01 01 	movne	r9,1
8000c77e:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000c782:	f9 b8 00 01 	moveq	r8,1
8000c786:	e3 d8 e0 06 	addeq	r6,r1,r8
8000c78a:	f9 b8 00 01 	moveq	r8,1
8000c78e:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000c792:	02 36       	cp.w	r6,r1
8000c794:	ec 04 17 80 	movls	r4,r6
8000c798:	e2 04 17 b0 	movhi	r4,r1
8000c79c:	6e 59       	ld.w	r9,r7[0x14]
8000c79e:	6e 25       	ld.w	r5,r7[0x8]
8000c7a0:	f2 05 00 05 	add	r5,r9,r5
8000c7a4:	0a 34       	cp.w	r4,r5
8000c7a6:	5f 9a       	srgt	r10
8000c7a8:	6e 0c       	ld.w	r12,r7[0x0]
8000c7aa:	6e 48       	ld.w	r8,r7[0x10]
8000c7ac:	10 3c       	cp.w	r12,r8
8000c7ae:	5f b8       	srhi	r8
8000c7b0:	f5 e8 00 08 	and	r8,r10,r8
8000c7b4:	30 0a       	mov	r10,0
8000c7b6:	f4 08 18 00 	cp.b	r8,r10
8000c7ba:	c0 e0       	breq	8000c7d6 <__sfvwrite_r+0x24a>
8000c7bc:	06 9b       	mov	r11,r3
8000c7be:	0a 9a       	mov	r10,r5
8000c7c0:	e0 a0 02 f1 	rcall	8000cda2 <memmove>
8000c7c4:	6e 08       	ld.w	r8,r7[0x0]
8000c7c6:	0a 08       	add	r8,r5
8000c7c8:	0e 9b       	mov	r11,r7
8000c7ca:	8f 08       	st.w	r7[0x0],r8
8000c7cc:	40 1c       	lddsp	r12,sp[0x4]
8000c7ce:	fe b0 fc 9f 	rcall	8000c10c <_fflush_r>
8000c7d2:	c1 80       	breq	8000c802 <__sfvwrite_r+0x276>
8000c7d4:	c2 68       	rjmp	8000c820 <__sfvwrite_r+0x294>
8000c7d6:	12 34       	cp.w	r4,r9
8000c7d8:	c0 a5       	brlt	8000c7ec <__sfvwrite_r+0x260>
8000c7da:	6e a8       	ld.w	r8,r7[0x28]
8000c7dc:	06 9a       	mov	r10,r3
8000c7de:	6e 8b       	ld.w	r11,r7[0x20]
8000c7e0:	40 1c       	lddsp	r12,sp[0x4]
8000c7e2:	5d 18       	icall	r8
8000c7e4:	18 95       	mov	r5,r12
8000c7e6:	e0 89 00 0e 	brgt	8000c802 <__sfvwrite_r+0x276>
8000c7ea:	c1 b8       	rjmp	8000c820 <__sfvwrite_r+0x294>
8000c7ec:	08 9a       	mov	r10,r4
8000c7ee:	06 9b       	mov	r11,r3
8000c7f0:	e0 a0 02 d9 	rcall	8000cda2 <memmove>
8000c7f4:	6e 08       	ld.w	r8,r7[0x0]
8000c7f6:	08 08       	add	r8,r4
8000c7f8:	08 95       	mov	r5,r4
8000c7fa:	8f 08       	st.w	r7[0x0],r8
8000c7fc:	6e 28       	ld.w	r8,r7[0x8]
8000c7fe:	08 18       	sub	r8,r4
8000c800:	8f 28       	st.w	r7[0x8],r8
8000c802:	0a 16       	sub	r6,r5
8000c804:	c0 71       	brne	8000c812 <__sfvwrite_r+0x286>
8000c806:	0e 9b       	mov	r11,r7
8000c808:	40 1c       	lddsp	r12,sp[0x4]
8000c80a:	fe b0 fc 81 	rcall	8000c10c <_fflush_r>
8000c80e:	c0 91       	brne	8000c820 <__sfvwrite_r+0x294>
8000c810:	50 06       	stdsp	sp[0x0],r6
8000c812:	64 28       	ld.w	r8,r2[0x8]
8000c814:	0a 18       	sub	r8,r5
8000c816:	85 28       	st.w	r2[0x8],r8
8000c818:	c0 90       	breq	8000c82a <__sfvwrite_r+0x29e>
8000c81a:	0a 11       	sub	r1,r5
8000c81c:	0a 03       	add	r3,r5
8000c81e:	c9 eb       	rjmp	8000c75a <__sfvwrite_r+0x1ce>
8000c820:	8e 68       	ld.sh	r8,r7[0xc]
8000c822:	a7 a8       	sbr	r8,0x6
8000c824:	ae 68       	st.h	r7[0xc],r8
8000c826:	3f fc       	mov	r12,-1
8000c828:	c0 28       	rjmp	8000c82c <__sfvwrite_r+0x2a0>
8000c82a:	30 0c       	mov	r12,0
8000c82c:	2f dd       	sub	sp,-12
8000c82e:	d8 32       	popm	r0-r7,pc

8000c830 <_fwalk>:
8000c830:	d4 31       	pushm	r0-r7,lr
8000c832:	30 05       	mov	r5,0
8000c834:	16 91       	mov	r1,r11
8000c836:	f8 c7 ff 28 	sub	r7,r12,-216
8000c83a:	0a 92       	mov	r2,r5
8000c83c:	fe b0 fc f0 	rcall	8000c21c <__sfp_lock_acquire>
8000c840:	3f f3       	mov	r3,-1
8000c842:	c1 68       	rjmp	8000c86e <_fwalk+0x3e>
8000c844:	6e 26       	ld.w	r6,r7[0x8]
8000c846:	6e 14       	ld.w	r4,r7[0x4]
8000c848:	2f 46       	sub	r6,-12
8000c84a:	c0 c8       	rjmp	8000c862 <_fwalk+0x32>
8000c84c:	8c 08       	ld.sh	r8,r6[0x0]
8000c84e:	e4 08 19 00 	cp.h	r8,r2
8000c852:	c0 70       	breq	8000c860 <_fwalk+0x30>
8000c854:	8c 18       	ld.sh	r8,r6[0x2]
8000c856:	e6 08 19 00 	cp.h	r8,r3
8000c85a:	c0 30       	breq	8000c860 <_fwalk+0x30>
8000c85c:	5d 11       	icall	r1
8000c85e:	18 45       	or	r5,r12
8000c860:	2a 46       	sub	r6,-92
8000c862:	20 14       	sub	r4,1
8000c864:	ec cc 00 0c 	sub	r12,r6,12
8000c868:	58 04       	cp.w	r4,0
8000c86a:	cf 14       	brge	8000c84c <_fwalk+0x1c>
8000c86c:	6e 07       	ld.w	r7,r7[0x0]
8000c86e:	58 07       	cp.w	r7,0
8000c870:	ce a1       	brne	8000c844 <_fwalk+0x14>
8000c872:	fe b0 fc d6 	rcall	8000c21e <__sfp_lock_release>
8000c876:	0a 9c       	mov	r12,r5
8000c878:	d8 32       	popm	r0-r7,pc
8000c87a:	d7 03       	nop

8000c87c <_localeconv_r>:
8000c87c:	48 1c       	lddpc	r12,8000c880 <_localeconv_r+0x4>
8000c87e:	5e fc       	retal	r12
8000c880:	80 00       	ld.sh	r0,r0[0x0]
8000c882:	ea 90 d4 21 	breq	801870c4 <_data_lma+0x1784f4>

8000c884 <__smakebuf_r>:
8000c884:	d4 21       	pushm	r4-r7,lr
8000c886:	20 fd       	sub	sp,60
8000c888:	96 68       	ld.sh	r8,r11[0xc]
8000c88a:	16 97       	mov	r7,r11
8000c88c:	18 96       	mov	r6,r12
8000c88e:	e2 18 00 02 	andl	r8,0x2,COH
8000c892:	c3 c1       	brne	8000c90a <__smakebuf_r+0x86>
8000c894:	96 7b       	ld.sh	r11,r11[0xe]
8000c896:	f0 0b 19 00 	cp.h	r11,r8
8000c89a:	c0 55       	brlt	8000c8a4 <__smakebuf_r+0x20>
8000c89c:	1a 9a       	mov	r10,sp
8000c89e:	e0 a0 08 c1 	rcall	8000da20 <_fstat_r>
8000c8a2:	c0 f4       	brge	8000c8c0 <__smakebuf_r+0x3c>
8000c8a4:	8e 65       	ld.sh	r5,r7[0xc]
8000c8a6:	0a 98       	mov	r8,r5
8000c8a8:	ab b8       	sbr	r8,0xb
8000c8aa:	e2 15 00 80 	andl	r5,0x80,COH
8000c8ae:	ae 68       	st.h	r7[0xc],r8
8000c8b0:	30 04       	mov	r4,0
8000c8b2:	e0 68 04 00 	mov	r8,1024
8000c8b6:	f9 b5 01 40 	movne	r5,64
8000c8ba:	f0 05 17 00 	moveq	r5,r8
8000c8be:	c1 c8       	rjmp	8000c8f6 <__smakebuf_r+0x72>
8000c8c0:	40 18       	lddsp	r8,sp[0x4]
8000c8c2:	e2 18 f0 00 	andl	r8,0xf000,COH
8000c8c6:	e0 48 20 00 	cp.w	r8,8192
8000c8ca:	5f 04       	sreq	r4
8000c8cc:	e0 48 80 00 	cp.w	r8,32768
8000c8d0:	c0 e1       	brne	8000c8ec <__smakebuf_r+0x68>
8000c8d2:	6e b9       	ld.w	r9,r7[0x2c]
8000c8d4:	fe c8 f1 cc 	sub	r8,pc,-3636
8000c8d8:	10 39       	cp.w	r9,r8
8000c8da:	c0 91       	brne	8000c8ec <__smakebuf_r+0x68>
8000c8dc:	8e 68       	ld.sh	r8,r7[0xc]
8000c8de:	e0 65 04 00 	mov	r5,1024
8000c8e2:	ab a8       	sbr	r8,0xa
8000c8e4:	ef 45 00 50 	st.w	r7[80],r5
8000c8e8:	ae 68       	st.h	r7[0xc],r8
8000c8ea:	c0 68       	rjmp	8000c8f6 <__smakebuf_r+0x72>
8000c8ec:	8e 68       	ld.sh	r8,r7[0xc]
8000c8ee:	e0 65 04 00 	mov	r5,1024
8000c8f2:	ab b8       	sbr	r8,0xb
8000c8f4:	ae 68       	st.h	r7[0xc],r8
8000c8f6:	0a 9b       	mov	r11,r5
8000c8f8:	0c 9c       	mov	r12,r6
8000c8fa:	c2 fc       	rcall	8000c958 <_malloc_r>
8000c8fc:	8e 68       	ld.sh	r8,r7[0xc]
8000c8fe:	c0 d1       	brne	8000c918 <__smakebuf_r+0x94>
8000c900:	ed b8 00 09 	bld	r8,0x9
8000c904:	c1 f0       	breq	8000c942 <__smakebuf_r+0xbe>
8000c906:	a1 b8       	sbr	r8,0x1
8000c908:	ae 68       	st.h	r7[0xc],r8
8000c90a:	ee c8 ff b9 	sub	r8,r7,-71
8000c90e:	8f 48       	st.w	r7[0x10],r8
8000c910:	8f 08       	st.w	r7[0x0],r8
8000c912:	30 18       	mov	r8,1
8000c914:	8f 58       	st.w	r7[0x14],r8
8000c916:	c1 68       	rjmp	8000c942 <__smakebuf_r+0xbe>
8000c918:	a7 b8       	sbr	r8,0x7
8000c91a:	8f 4c       	st.w	r7[0x10],r12
8000c91c:	ae 68       	st.h	r7[0xc],r8
8000c91e:	8f 55       	st.w	r7[0x14],r5
8000c920:	fe c8 07 00 	sub	r8,pc,1792
8000c924:	8f 0c       	st.w	r7[0x0],r12
8000c926:	8d a8       	st.w	r6[0x28],r8
8000c928:	58 04       	cp.w	r4,0
8000c92a:	c0 c0       	breq	8000c942 <__smakebuf_r+0xbe>
8000c92c:	8e 7c       	ld.sh	r12,r7[0xe]
8000c92e:	e0 a0 07 61 	rcall	8000d7f0 <isatty>
8000c932:	ef f8 12 06 	ld.shne	r8,r7[0xc]
8000c936:	f9 b9 01 01 	movne	r9,1
8000c93a:	f1 d9 e1 38 	orne	r8,r8,r9
8000c93e:	ef f8 1c 06 	st.hne	r7[0xc],r8
8000c942:	2f 1d       	sub	sp,-60
8000c944:	d8 22       	popm	r4-r7,pc
8000c946:	d7 03       	nop

8000c948 <malloc>:
8000c948:	d4 01       	pushm	lr
8000c94a:	48 38       	lddpc	r8,8000c954 <malloc+0xc>
8000c94c:	18 9b       	mov	r11,r12
8000c94e:	70 0c       	ld.w	r12,r8[0x0]
8000c950:	c0 4c       	rcall	8000c958 <_malloc_r>
8000c952:	d8 02       	popm	pc
8000c954:	00 00       	add	r0,r0
8000c956:	02 f8       	st.b	--r1,r8

8000c958 <_malloc_r>:
8000c958:	d4 31       	pushm	r0-r7,lr
8000c95a:	f6 c7 ff f5 	sub	r7,r11,-11
8000c95e:	18 95       	mov	r5,r12
8000c960:	59 67       	cp.w	r7,22
8000c962:	f9 b7 08 10 	movls	r7,16
8000c966:	f9 b8 0b f8 	movhi	r8,-8
8000c96a:	ef d8 eb 27 	andhi	r7,r7,r8
8000c96e:	16 37       	cp.w	r7,r11
8000c970:	5f 38       	srlo	r8
8000c972:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000c976:	c0 50       	breq	8000c980 <_malloc_r+0x28>
8000c978:	30 c8       	mov	r8,12
8000c97a:	99 38       	st.w	r12[0xc],r8
8000c97c:	e0 8f 01 ef 	bral	8000cd5a <_malloc_r+0x402>
8000c980:	e0 a0 02 37 	rcall	8000cdee <__malloc_lock>
8000c984:	e0 47 01 f7 	cp.w	r7,503
8000c988:	e0 8b 00 1c 	brhi	8000c9c0 <_malloc_r+0x68>
8000c98c:	ee 03 16 03 	lsr	r3,r7,0x3
8000c990:	4c c8       	lddpc	r8,8000cac0 <_malloc_r+0x168>
8000c992:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000c996:	70 36       	ld.w	r6,r8[0xc]
8000c998:	10 36       	cp.w	r6,r8
8000c99a:	c0 61       	brne	8000c9a6 <_malloc_r+0x4e>
8000c99c:	ec c8 ff f8 	sub	r8,r6,-8
8000c9a0:	70 36       	ld.w	r6,r8[0xc]
8000c9a2:	10 36       	cp.w	r6,r8
8000c9a4:	c0 c0       	breq	8000c9bc <_malloc_r+0x64>
8000c9a6:	6c 18       	ld.w	r8,r6[0x4]
8000c9a8:	e0 18 ff fc 	andl	r8,0xfffc
8000c9ac:	6c 3a       	ld.w	r10,r6[0xc]
8000c9ae:	ec 08 00 09 	add	r9,r6,r8
8000c9b2:	0a 9c       	mov	r12,r5
8000c9b4:	6c 28       	ld.w	r8,r6[0x8]
8000c9b6:	95 28       	st.w	r10[0x8],r8
8000c9b8:	91 3a       	st.w	r8[0xc],r10
8000c9ba:	c4 78       	rjmp	8000ca48 <_malloc_r+0xf0>
8000c9bc:	2f e3       	sub	r3,-2
8000c9be:	c4 d8       	rjmp	8000ca58 <_malloc_r+0x100>
8000c9c0:	ee 08 16 09 	lsr	r8,r7,0x9
8000c9c4:	c0 41       	brne	8000c9cc <_malloc_r+0x74>
8000c9c6:	ee 03 16 03 	lsr	r3,r7,0x3
8000c9ca:	c2 78       	rjmp	8000ca18 <_malloc_r+0xc0>
8000c9cc:	58 48       	cp.w	r8,4
8000c9ce:	e0 8b 00 06 	brhi	8000c9da <_malloc_r+0x82>
8000c9d2:	ee 03 16 06 	lsr	r3,r7,0x6
8000c9d6:	2c 83       	sub	r3,-56
8000c9d8:	c2 08       	rjmp	8000ca18 <_malloc_r+0xc0>
8000c9da:	59 48       	cp.w	r8,20
8000c9dc:	e0 8b 00 05 	brhi	8000c9e6 <_malloc_r+0x8e>
8000c9e0:	f0 c3 ff a5 	sub	r3,r8,-91
8000c9e4:	c1 a8       	rjmp	8000ca18 <_malloc_r+0xc0>
8000c9e6:	e0 48 00 54 	cp.w	r8,84
8000c9ea:	e0 8b 00 06 	brhi	8000c9f6 <_malloc_r+0x9e>
8000c9ee:	ee 03 16 0c 	lsr	r3,r7,0xc
8000c9f2:	29 23       	sub	r3,-110
8000c9f4:	c1 28       	rjmp	8000ca18 <_malloc_r+0xc0>
8000c9f6:	e0 48 01 54 	cp.w	r8,340
8000c9fa:	e0 8b 00 06 	brhi	8000ca06 <_malloc_r+0xae>
8000c9fe:	ee 03 16 0f 	lsr	r3,r7,0xf
8000ca02:	28 93       	sub	r3,-119
8000ca04:	c0 a8       	rjmp	8000ca18 <_malloc_r+0xc0>
8000ca06:	ee 03 16 12 	lsr	r3,r7,0x12
8000ca0a:	e0 48 05 54 	cp.w	r8,1364
8000ca0e:	e0 88 00 04 	brls	8000ca16 <_malloc_r+0xbe>
8000ca12:	37 e3       	mov	r3,126
8000ca14:	c0 28       	rjmp	8000ca18 <_malloc_r+0xc0>
8000ca16:	28 43       	sub	r3,-124
8000ca18:	4a aa       	lddpc	r10,8000cac0 <_malloc_r+0x168>
8000ca1a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000ca1e:	74 36       	ld.w	r6,r10[0xc]
8000ca20:	c1 98       	rjmp	8000ca52 <_malloc_r+0xfa>
8000ca22:	6c 19       	ld.w	r9,r6[0x4]
8000ca24:	e0 19 ff fc 	andl	r9,0xfffc
8000ca28:	f2 07 01 0b 	sub	r11,r9,r7
8000ca2c:	58 fb       	cp.w	r11,15
8000ca2e:	e0 8a 00 04 	brle	8000ca36 <_malloc_r+0xde>
8000ca32:	20 13       	sub	r3,1
8000ca34:	c1 18       	rjmp	8000ca56 <_malloc_r+0xfe>
8000ca36:	6c 38       	ld.w	r8,r6[0xc]
8000ca38:	58 0b       	cp.w	r11,0
8000ca3a:	c0 b5       	brlt	8000ca50 <_malloc_r+0xf8>
8000ca3c:	6c 2a       	ld.w	r10,r6[0x8]
8000ca3e:	ec 09 00 09 	add	r9,r6,r9
8000ca42:	0a 9c       	mov	r12,r5
8000ca44:	91 2a       	st.w	r8[0x8],r10
8000ca46:	95 38       	st.w	r10[0xc],r8
8000ca48:	72 18       	ld.w	r8,r9[0x4]
8000ca4a:	a1 a8       	sbr	r8,0x0
8000ca4c:	93 18       	st.w	r9[0x4],r8
8000ca4e:	cb b8       	rjmp	8000cbc4 <_malloc_r+0x26c>
8000ca50:	10 96       	mov	r6,r8
8000ca52:	14 36       	cp.w	r6,r10
8000ca54:	ce 71       	brne	8000ca22 <_malloc_r+0xca>
8000ca56:	2f f3       	sub	r3,-1
8000ca58:	49 aa       	lddpc	r10,8000cac0 <_malloc_r+0x168>
8000ca5a:	f4 cc ff f8 	sub	r12,r10,-8
8000ca5e:	78 26       	ld.w	r6,r12[0x8]
8000ca60:	18 36       	cp.w	r6,r12
8000ca62:	c6 d0       	breq	8000cb3c <_malloc_r+0x1e4>
8000ca64:	6c 19       	ld.w	r9,r6[0x4]
8000ca66:	e0 19 ff fc 	andl	r9,0xfffc
8000ca6a:	f2 07 01 08 	sub	r8,r9,r7
8000ca6e:	58 f8       	cp.w	r8,15
8000ca70:	e0 89 00 8f 	brgt	8000cb8e <_malloc_r+0x236>
8000ca74:	99 3c       	st.w	r12[0xc],r12
8000ca76:	99 2c       	st.w	r12[0x8],r12
8000ca78:	58 08       	cp.w	r8,0
8000ca7a:	c0 55       	brlt	8000ca84 <_malloc_r+0x12c>
8000ca7c:	ec 09 00 09 	add	r9,r6,r9
8000ca80:	0a 9c       	mov	r12,r5
8000ca82:	ce 3b       	rjmp	8000ca48 <_malloc_r+0xf0>
8000ca84:	e0 49 01 ff 	cp.w	r9,511
8000ca88:	e0 8b 00 13 	brhi	8000caae <_malloc_r+0x156>
8000ca8c:	a3 99       	lsr	r9,0x3
8000ca8e:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000ca92:	70 2b       	ld.w	r11,r8[0x8]
8000ca94:	8d 38       	st.w	r6[0xc],r8
8000ca96:	8d 2b       	st.w	r6[0x8],r11
8000ca98:	97 36       	st.w	r11[0xc],r6
8000ca9a:	91 26       	st.w	r8[0x8],r6
8000ca9c:	a3 49       	asr	r9,0x2
8000ca9e:	74 18       	ld.w	r8,r10[0x4]
8000caa0:	30 1b       	mov	r11,1
8000caa2:	f6 09 09 49 	lsl	r9,r11,r9
8000caa6:	f1 e9 10 09 	or	r9,r8,r9
8000caaa:	95 19       	st.w	r10[0x4],r9
8000caac:	c4 88       	rjmp	8000cb3c <_malloc_r+0x1e4>
8000caae:	f2 08 16 09 	lsr	r8,r9,0x9
8000cab2:	58 48       	cp.w	r8,4
8000cab4:	e0 8b 00 08 	brhi	8000cac4 <_malloc_r+0x16c>
8000cab8:	f2 0a 16 06 	lsr	r10,r9,0x6
8000cabc:	2c 8a       	sub	r10,-56
8000cabe:	c2 28       	rjmp	8000cb02 <_malloc_r+0x1aa>
8000cac0:	00 00       	add	r0,r0
8000cac2:	02 fc       	st.b	--r1,r12
8000cac4:	59 48       	cp.w	r8,20
8000cac6:	e0 8b 00 05 	brhi	8000cad0 <_malloc_r+0x178>
8000caca:	f0 ca ff a5 	sub	r10,r8,-91
8000cace:	c1 a8       	rjmp	8000cb02 <_malloc_r+0x1aa>
8000cad0:	e0 48 00 54 	cp.w	r8,84
8000cad4:	e0 8b 00 06 	brhi	8000cae0 <_malloc_r+0x188>
8000cad8:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000cadc:	29 2a       	sub	r10,-110
8000cade:	c1 28       	rjmp	8000cb02 <_malloc_r+0x1aa>
8000cae0:	e0 48 01 54 	cp.w	r8,340
8000cae4:	e0 8b 00 06 	brhi	8000caf0 <_malloc_r+0x198>
8000cae8:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000caec:	28 9a       	sub	r10,-119
8000caee:	c0 a8       	rjmp	8000cb02 <_malloc_r+0x1aa>
8000caf0:	f2 0a 16 12 	lsr	r10,r9,0x12
8000caf4:	e0 48 05 54 	cp.w	r8,1364
8000caf8:	e0 88 00 04 	brls	8000cb00 <_malloc_r+0x1a8>
8000cafc:	37 ea       	mov	r10,126
8000cafe:	c0 28       	rjmp	8000cb02 <_malloc_r+0x1aa>
8000cb00:	28 4a       	sub	r10,-124
8000cb02:	4c 8b       	lddpc	r11,8000cc20 <_malloc_r+0x2c8>
8000cb04:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000cb08:	68 28       	ld.w	r8,r4[0x8]
8000cb0a:	08 38       	cp.w	r8,r4
8000cb0c:	c0 e1       	brne	8000cb28 <_malloc_r+0x1d0>
8000cb0e:	76 19       	ld.w	r9,r11[0x4]
8000cb10:	a3 4a       	asr	r10,0x2
8000cb12:	30 1e       	mov	lr,1
8000cb14:	fc 0a 09 4a 	lsl	r10,lr,r10
8000cb18:	f3 ea 10 0a 	or	r10,r9,r10
8000cb1c:	10 99       	mov	r9,r8
8000cb1e:	97 1a       	st.w	r11[0x4],r10
8000cb20:	c0 a8       	rjmp	8000cb34 <_malloc_r+0x1dc>
8000cb22:	70 28       	ld.w	r8,r8[0x8]
8000cb24:	08 38       	cp.w	r8,r4
8000cb26:	c0 60       	breq	8000cb32 <_malloc_r+0x1da>
8000cb28:	70 1a       	ld.w	r10,r8[0x4]
8000cb2a:	e0 1a ff fc 	andl	r10,0xfffc
8000cb2e:	14 39       	cp.w	r9,r10
8000cb30:	cf 93       	brcs	8000cb22 <_malloc_r+0x1ca>
8000cb32:	70 39       	ld.w	r9,r8[0xc]
8000cb34:	8d 39       	st.w	r6[0xc],r9
8000cb36:	8d 28       	st.w	r6[0x8],r8
8000cb38:	91 36       	st.w	r8[0xc],r6
8000cb3a:	93 26       	st.w	r9[0x8],r6
8000cb3c:	e6 08 14 02 	asr	r8,r3,0x2
8000cb40:	30 1b       	mov	r11,1
8000cb42:	4b 84       	lddpc	r4,8000cc20 <_malloc_r+0x2c8>
8000cb44:	f6 08 09 4b 	lsl	r11,r11,r8
8000cb48:	68 18       	ld.w	r8,r4[0x4]
8000cb4a:	10 3b       	cp.w	r11,r8
8000cb4c:	e0 8b 00 6c 	brhi	8000cc24 <_malloc_r+0x2cc>
8000cb50:	f7 e8 00 09 	and	r9,r11,r8
8000cb54:	c0 b1       	brne	8000cb6a <_malloc_r+0x212>
8000cb56:	e0 13 ff fc 	andl	r3,0xfffc
8000cb5a:	a1 7b       	lsl	r11,0x1
8000cb5c:	2f c3       	sub	r3,-4
8000cb5e:	c0 38       	rjmp	8000cb64 <_malloc_r+0x20c>
8000cb60:	2f c3       	sub	r3,-4
8000cb62:	a1 7b       	lsl	r11,0x1
8000cb64:	f7 e8 00 09 	and	r9,r11,r8
8000cb68:	cf c0       	breq	8000cb60 <_malloc_r+0x208>
8000cb6a:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000cb6e:	06 92       	mov	r2,r3
8000cb70:	1c 91       	mov	r1,lr
8000cb72:	62 36       	ld.w	r6,r1[0xc]
8000cb74:	c2 d8       	rjmp	8000cbce <_malloc_r+0x276>
8000cb76:	6c 1a       	ld.w	r10,r6[0x4]
8000cb78:	e0 1a ff fc 	andl	r10,0xfffc
8000cb7c:	f4 07 01 08 	sub	r8,r10,r7
8000cb80:	58 f8       	cp.w	r8,15
8000cb82:	e0 8a 00 15 	brle	8000cbac <_malloc_r+0x254>
8000cb86:	6c 3a       	ld.w	r10,r6[0xc]
8000cb88:	6c 29       	ld.w	r9,r6[0x8]
8000cb8a:	95 29       	st.w	r10[0x8],r9
8000cb8c:	93 3a       	st.w	r9[0xc],r10
8000cb8e:	0e 99       	mov	r9,r7
8000cb90:	ec 07 00 07 	add	r7,r6,r7
8000cb94:	a1 a9       	sbr	r9,0x0
8000cb96:	99 37       	st.w	r12[0xc],r7
8000cb98:	99 27       	st.w	r12[0x8],r7
8000cb9a:	8d 19       	st.w	r6[0x4],r9
8000cb9c:	ee 08 09 08 	st.w	r7[r8],r8
8000cba0:	8f 2c       	st.w	r7[0x8],r12
8000cba2:	8f 3c       	st.w	r7[0xc],r12
8000cba4:	a1 a8       	sbr	r8,0x0
8000cba6:	0a 9c       	mov	r12,r5
8000cba8:	8f 18       	st.w	r7[0x4],r8
8000cbaa:	c0 d8       	rjmp	8000cbc4 <_malloc_r+0x26c>
8000cbac:	6c 39       	ld.w	r9,r6[0xc]
8000cbae:	58 08       	cp.w	r8,0
8000cbb0:	c0 e5       	brlt	8000cbcc <_malloc_r+0x274>
8000cbb2:	ec 0a 00 0a 	add	r10,r6,r10
8000cbb6:	74 18       	ld.w	r8,r10[0x4]
8000cbb8:	a1 a8       	sbr	r8,0x0
8000cbba:	0a 9c       	mov	r12,r5
8000cbbc:	95 18       	st.w	r10[0x4],r8
8000cbbe:	6c 28       	ld.w	r8,r6[0x8]
8000cbc0:	93 28       	st.w	r9[0x8],r8
8000cbc2:	91 39       	st.w	r8[0xc],r9
8000cbc4:	c1 6d       	rcall	8000cdf0 <__malloc_unlock>
8000cbc6:	ec cc ff f8 	sub	r12,r6,-8
8000cbca:	d8 32       	popm	r0-r7,pc
8000cbcc:	12 96       	mov	r6,r9
8000cbce:	02 36       	cp.w	r6,r1
8000cbd0:	cd 31       	brne	8000cb76 <_malloc_r+0x21e>
8000cbd2:	2f f2       	sub	r2,-1
8000cbd4:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000cbd8:	c0 30       	breq	8000cbde <_malloc_r+0x286>
8000cbda:	2f 81       	sub	r1,-8
8000cbdc:	cc bb       	rjmp	8000cb72 <_malloc_r+0x21a>
8000cbde:	1c 98       	mov	r8,lr
8000cbe0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000cbe4:	c0 81       	brne	8000cbf4 <_malloc_r+0x29c>
8000cbe6:	68 19       	ld.w	r9,r4[0x4]
8000cbe8:	f6 08 11 ff 	rsub	r8,r11,-1
8000cbec:	f3 e8 00 08 	and	r8,r9,r8
8000cbf0:	89 18       	st.w	r4[0x4],r8
8000cbf2:	c0 78       	rjmp	8000cc00 <_malloc_r+0x2a8>
8000cbf4:	f0 c9 00 08 	sub	r9,r8,8
8000cbf8:	20 13       	sub	r3,1
8000cbfa:	70 08       	ld.w	r8,r8[0x0]
8000cbfc:	12 38       	cp.w	r8,r9
8000cbfe:	cf 10       	breq	8000cbe0 <_malloc_r+0x288>
8000cc00:	a1 7b       	lsl	r11,0x1
8000cc02:	68 18       	ld.w	r8,r4[0x4]
8000cc04:	10 3b       	cp.w	r11,r8
8000cc06:	e0 8b 00 0f 	brhi	8000cc24 <_malloc_r+0x2cc>
8000cc0a:	58 0b       	cp.w	r11,0
8000cc0c:	c0 c0       	breq	8000cc24 <_malloc_r+0x2cc>
8000cc0e:	04 93       	mov	r3,r2
8000cc10:	c0 38       	rjmp	8000cc16 <_malloc_r+0x2be>
8000cc12:	2f c3       	sub	r3,-4
8000cc14:	a1 7b       	lsl	r11,0x1
8000cc16:	f7 e8 00 09 	and	r9,r11,r8
8000cc1a:	ca 81       	brne	8000cb6a <_malloc_r+0x212>
8000cc1c:	cf bb       	rjmp	8000cc12 <_malloc_r+0x2ba>
8000cc1e:	d7 03       	nop
8000cc20:	00 00       	add	r0,r0
8000cc22:	02 fc       	st.b	--r1,r12
8000cc24:	68 23       	ld.w	r3,r4[0x8]
8000cc26:	66 12       	ld.w	r2,r3[0x4]
8000cc28:	e0 12 ff fc 	andl	r2,0xfffc
8000cc2c:	0e 32       	cp.w	r2,r7
8000cc2e:	5f 39       	srlo	r9
8000cc30:	e4 07 01 08 	sub	r8,r2,r7
8000cc34:	58 f8       	cp.w	r8,15
8000cc36:	5f aa       	srle	r10
8000cc38:	f5 e9 10 09 	or	r9,r10,r9
8000cc3c:	e0 80 00 9a 	breq	8000cd70 <_malloc_r+0x418>
8000cc40:	4c 78       	lddpc	r8,8000cd5c <_malloc_r+0x404>
8000cc42:	70 01       	ld.w	r1,r8[0x0]
8000cc44:	4c 78       	lddpc	r8,8000cd60 <_malloc_r+0x408>
8000cc46:	2f 01       	sub	r1,-16
8000cc48:	70 08       	ld.w	r8,r8[0x0]
8000cc4a:	0e 01       	add	r1,r7
8000cc4c:	5b f8       	cp.w	r8,-1
8000cc4e:	c0 40       	breq	8000cc56 <_malloc_r+0x2fe>
8000cc50:	28 11       	sub	r1,-127
8000cc52:	e0 11 ff 80 	andl	r1,0xff80
8000cc56:	02 9b       	mov	r11,r1
8000cc58:	0a 9c       	mov	r12,r5
8000cc5a:	e0 a0 05 1f 	rcall	8000d698 <_sbrk_r>
8000cc5e:	18 96       	mov	r6,r12
8000cc60:	5b fc       	cp.w	r12,-1
8000cc62:	c6 e0       	breq	8000cd3e <_malloc_r+0x3e6>
8000cc64:	e6 02 00 08 	add	r8,r3,r2
8000cc68:	10 3c       	cp.w	r12,r8
8000cc6a:	c0 32       	brcc	8000cc70 <_malloc_r+0x318>
8000cc6c:	08 33       	cp.w	r3,r4
8000cc6e:	c6 81       	brne	8000cd3e <_malloc_r+0x3e6>
8000cc70:	4b da       	lddpc	r10,8000cd64 <_malloc_r+0x40c>
8000cc72:	74 09       	ld.w	r9,r10[0x0]
8000cc74:	e2 09 00 09 	add	r9,r1,r9
8000cc78:	95 09       	st.w	r10[0x0],r9
8000cc7a:	10 36       	cp.w	r6,r8
8000cc7c:	c0 a1       	brne	8000cc90 <_malloc_r+0x338>
8000cc7e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000cc82:	c0 71       	brne	8000cc90 <_malloc_r+0x338>
8000cc84:	e2 02 00 02 	add	r2,r1,r2
8000cc88:	68 28       	ld.w	r8,r4[0x8]
8000cc8a:	a1 a2       	sbr	r2,0x0
8000cc8c:	91 12       	st.w	r8[0x4],r2
8000cc8e:	c4 c8       	rjmp	8000cd26 <_malloc_r+0x3ce>
8000cc90:	4b 4a       	lddpc	r10,8000cd60 <_malloc_r+0x408>
8000cc92:	74 0b       	ld.w	r11,r10[0x0]
8000cc94:	5b fb       	cp.w	r11,-1
8000cc96:	c0 31       	brne	8000cc9c <_malloc_r+0x344>
8000cc98:	95 06       	st.w	r10[0x0],r6
8000cc9a:	c0 68       	rjmp	8000cca6 <_malloc_r+0x34e>
8000cc9c:	ec 09 00 09 	add	r9,r6,r9
8000cca0:	4b 1a       	lddpc	r10,8000cd64 <_malloc_r+0x40c>
8000cca2:	10 19       	sub	r9,r8
8000cca4:	95 09       	st.w	r10[0x0],r9
8000cca6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000ccaa:	f0 09 11 08 	rsub	r9,r8,8
8000ccae:	58 08       	cp.w	r8,0
8000ccb0:	f2 08 17 10 	movne	r8,r9
8000ccb4:	ed d8 e1 06 	addne	r6,r6,r8
8000ccb8:	28 08       	sub	r8,-128
8000ccba:	ec 01 00 01 	add	r1,r6,r1
8000ccbe:	0a 9c       	mov	r12,r5
8000ccc0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000ccc4:	f0 01 01 01 	sub	r1,r8,r1
8000ccc8:	02 9b       	mov	r11,r1
8000ccca:	e0 a0 04 e7 	rcall	8000d698 <_sbrk_r>
8000ccce:	4a 68       	lddpc	r8,8000cd64 <_malloc_r+0x40c>
8000ccd0:	5b fc       	cp.w	r12,-1
8000ccd2:	ec 0c 17 00 	moveq	r12,r6
8000ccd6:	f9 b1 00 00 	moveq	r1,0
8000ccda:	70 09       	ld.w	r9,r8[0x0]
8000ccdc:	0c 1c       	sub	r12,r6
8000ccde:	89 26       	st.w	r4[0x8],r6
8000cce0:	02 0c       	add	r12,r1
8000cce2:	12 01       	add	r1,r9
8000cce4:	a1 ac       	sbr	r12,0x0
8000cce6:	91 01       	st.w	r8[0x0],r1
8000cce8:	8d 1c       	st.w	r6[0x4],r12
8000ccea:	08 33       	cp.w	r3,r4
8000ccec:	c1 d0       	breq	8000cd26 <_malloc_r+0x3ce>
8000ccee:	58 f2       	cp.w	r2,15
8000ccf0:	e0 8b 00 05 	brhi	8000ccfa <_malloc_r+0x3a2>
8000ccf4:	30 18       	mov	r8,1
8000ccf6:	8d 18       	st.w	r6[0x4],r8
8000ccf8:	c2 38       	rjmp	8000cd3e <_malloc_r+0x3e6>
8000ccfa:	30 59       	mov	r9,5
8000ccfc:	20 c2       	sub	r2,12
8000ccfe:	e0 12 ff f8 	andl	r2,0xfff8
8000cd02:	e6 02 00 08 	add	r8,r3,r2
8000cd06:	91 29       	st.w	r8[0x8],r9
8000cd08:	91 19       	st.w	r8[0x4],r9
8000cd0a:	66 18       	ld.w	r8,r3[0x4]
8000cd0c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000cd10:	e5 e8 10 08 	or	r8,r2,r8
8000cd14:	87 18       	st.w	r3[0x4],r8
8000cd16:	58 f2       	cp.w	r2,15
8000cd18:	e0 88 00 07 	brls	8000cd26 <_malloc_r+0x3ce>
8000cd1c:	e6 cb ff f8 	sub	r11,r3,-8
8000cd20:	0a 9c       	mov	r12,r5
8000cd22:	fe b0 fb 6d 	rcall	8000c3fc <_free_r>
8000cd26:	49 19       	lddpc	r9,8000cd68 <_malloc_r+0x410>
8000cd28:	72 0a       	ld.w	r10,r9[0x0]
8000cd2a:	48 f8       	lddpc	r8,8000cd64 <_malloc_r+0x40c>
8000cd2c:	70 08       	ld.w	r8,r8[0x0]
8000cd2e:	14 38       	cp.w	r8,r10
8000cd30:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000cd34:	48 e9       	lddpc	r9,8000cd6c <_malloc_r+0x414>
8000cd36:	72 0a       	ld.w	r10,r9[0x0]
8000cd38:	14 38       	cp.w	r8,r10
8000cd3a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000cd3e:	68 28       	ld.w	r8,r4[0x8]
8000cd40:	70 18       	ld.w	r8,r8[0x4]
8000cd42:	e0 18 ff fc 	andl	r8,0xfffc
8000cd46:	0e 38       	cp.w	r8,r7
8000cd48:	5f 39       	srlo	r9
8000cd4a:	0e 18       	sub	r8,r7
8000cd4c:	58 f8       	cp.w	r8,15
8000cd4e:	5f aa       	srle	r10
8000cd50:	f5 e9 10 09 	or	r9,r10,r9
8000cd54:	c0 e0       	breq	8000cd70 <_malloc_r+0x418>
8000cd56:	0a 9c       	mov	r12,r5
8000cd58:	c4 cc       	rcall	8000cdf0 <__malloc_unlock>
8000cd5a:	d8 3a       	popm	r0-r7,pc,r12=0
8000cd5c:	00 00       	add	r0,r0
8000cd5e:	09 08       	ld.w	r8,r4++
8000cd60:	00 00       	add	r0,r0
8000cd62:	07 08       	ld.w	r8,r3++
8000cd64:	00 00       	add	r0,r0
8000cd66:	09 0c       	ld.w	r12,r4++
8000cd68:	00 00       	add	r0,r0
8000cd6a:	09 04       	ld.w	r4,r4++
8000cd6c:	00 00       	add	r0,r0
8000cd6e:	09 00       	ld.w	r0,r4++
8000cd70:	68 26       	ld.w	r6,r4[0x8]
8000cd72:	a1 a8       	sbr	r8,0x0
8000cd74:	0e 99       	mov	r9,r7
8000cd76:	a1 a9       	sbr	r9,0x0
8000cd78:	8d 19       	st.w	r6[0x4],r9
8000cd7a:	ec 07 00 07 	add	r7,r6,r7
8000cd7e:	0a 9c       	mov	r12,r5
8000cd80:	89 27       	st.w	r4[0x8],r7
8000cd82:	8f 18       	st.w	r7[0x4],r8
8000cd84:	c3 6c       	rcall	8000cdf0 <__malloc_unlock>
8000cd86:	ec cc ff f8 	sub	r12,r6,-8
8000cd8a:	d8 32       	popm	r0-r7,pc

8000cd8c <memchr>:
8000cd8c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000cd90:	c0 68       	rjmp	8000cd9c <memchr+0x10>
8000cd92:	20 1a       	sub	r10,1
8000cd94:	19 88       	ld.ub	r8,r12[0x0]
8000cd96:	16 38       	cp.w	r8,r11
8000cd98:	5e 0c       	reteq	r12
8000cd9a:	2f fc       	sub	r12,-1
8000cd9c:	58 0a       	cp.w	r10,0
8000cd9e:	cf a1       	brne	8000cd92 <memchr+0x6>
8000cda0:	5e fa       	retal	r10

8000cda2 <memmove>:
8000cda2:	d4 01       	pushm	lr
8000cda4:	18 3b       	cp.w	r11,r12
8000cda6:	c1 92       	brcc	8000cdd8 <memmove+0x36>
8000cda8:	f6 0a 00 09 	add	r9,r11,r10
8000cdac:	12 3c       	cp.w	r12,r9
8000cdae:	c1 52       	brcc	8000cdd8 <memmove+0x36>
8000cdb0:	f8 0a 00 0b 	add	r11,r12,r10
8000cdb4:	30 08       	mov	r8,0
8000cdb6:	c0 68       	rjmp	8000cdc2 <memmove+0x20>
8000cdb8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000cdbc:	20 1a       	sub	r10,1
8000cdbe:	f6 08 0b 0e 	st.b	r11[r8],lr
8000cdc2:	20 18       	sub	r8,1
8000cdc4:	58 0a       	cp.w	r10,0
8000cdc6:	cf 91       	brne	8000cdb8 <memmove+0x16>
8000cdc8:	d8 02       	popm	pc
8000cdca:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000cdce:	20 1a       	sub	r10,1
8000cdd0:	f8 08 0b 09 	st.b	r12[r8],r9
8000cdd4:	2f f8       	sub	r8,-1
8000cdd6:	c0 28       	rjmp	8000cdda <memmove+0x38>
8000cdd8:	30 08       	mov	r8,0
8000cdda:	58 0a       	cp.w	r10,0
8000cddc:	cf 71       	brne	8000cdca <memmove+0x28>
8000cdde:	d8 02       	popm	pc

8000cde0 <memset>:
8000cde0:	18 98       	mov	r8,r12
8000cde2:	c0 38       	rjmp	8000cde8 <memset+0x8>
8000cde4:	10 cb       	st.b	r8++,r11
8000cde6:	20 1a       	sub	r10,1
8000cde8:	58 0a       	cp.w	r10,0
8000cdea:	cf d1       	brne	8000cde4 <memset+0x4>
8000cdec:	5e fc       	retal	r12

8000cdee <__malloc_lock>:
8000cdee:	5e fc       	retal	r12

8000cdf0 <__malloc_unlock>:
8000cdf0:	5e fc       	retal	r12

8000cdf2 <__hi0bits>:
8000cdf2:	18 98       	mov	r8,r12
8000cdf4:	e0 1c 00 00 	andl	r12,0x0
8000cdf8:	f0 09 15 10 	lsl	r9,r8,0x10
8000cdfc:	58 0c       	cp.w	r12,0
8000cdfe:	f2 08 17 00 	moveq	r8,r9
8000ce02:	f9 bc 00 10 	moveq	r12,16
8000ce06:	f9 bc 01 00 	movne	r12,0
8000ce0a:	10 9a       	mov	r10,r8
8000ce0c:	f0 09 15 08 	lsl	r9,r8,0x8
8000ce10:	e6 1a ff 00 	andh	r10,0xff00,COH
8000ce14:	f7 bc 00 f8 	subeq	r12,-8
8000ce18:	f2 08 17 00 	moveq	r8,r9
8000ce1c:	10 9a       	mov	r10,r8
8000ce1e:	f0 09 15 04 	lsl	r9,r8,0x4
8000ce22:	e6 1a f0 00 	andh	r10,0xf000,COH
8000ce26:	f7 bc 00 fc 	subeq	r12,-4
8000ce2a:	f2 08 17 00 	moveq	r8,r9
8000ce2e:	10 9a       	mov	r10,r8
8000ce30:	f0 09 15 02 	lsl	r9,r8,0x2
8000ce34:	e6 1a c0 00 	andh	r10,0xc000,COH
8000ce38:	f7 bc 00 fe 	subeq	r12,-2
8000ce3c:	f2 08 17 00 	moveq	r8,r9
8000ce40:	58 08       	cp.w	r8,0
8000ce42:	5e 5c       	retlt	r12
8000ce44:	ed b8 00 1e 	bld	r8,0x1e
8000ce48:	f9 bc 01 20 	movne	r12,32
8000ce4c:	f7 bc 00 ff 	subeq	r12,-1
8000ce50:	5e fc       	retal	r12

8000ce52 <__lo0bits>:
8000ce52:	18 99       	mov	r9,r12
8000ce54:	78 08       	ld.w	r8,r12[0x0]
8000ce56:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000ce5a:	c1 50       	breq	8000ce84 <__lo0bits+0x32>
8000ce5c:	ed b8 00 00 	bld	r8,0x0
8000ce60:	c0 21       	brne	8000ce64 <__lo0bits+0x12>
8000ce62:	5e fd       	retal	0
8000ce64:	10 9b       	mov	r11,r8
8000ce66:	f0 0a 16 01 	lsr	r10,r8,0x1
8000ce6a:	e2 1b 00 02 	andl	r11,0x2,COH
8000ce6e:	a3 88       	lsr	r8,0x2
8000ce70:	58 0b       	cp.w	r11,0
8000ce72:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000ce76:	f9 bc 01 01 	movne	r12,1
8000ce7a:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000ce7e:	f9 bc 00 02 	moveq	r12,2
8000ce82:	5e fc       	retal	r12
8000ce84:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000ce88:	f0 0b 16 10 	lsr	r11,r8,0x10
8000ce8c:	58 0a       	cp.w	r10,0
8000ce8e:	f6 08 17 00 	moveq	r8,r11
8000ce92:	f9 bc 00 10 	moveq	r12,16
8000ce96:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000ce9a:	f0 0a 16 08 	lsr	r10,r8,0x8
8000ce9e:	58 0b       	cp.w	r11,0
8000cea0:	f7 bc 00 f8 	subeq	r12,-8
8000cea4:	f4 08 17 00 	moveq	r8,r10
8000cea8:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000ceac:	f0 0a 16 04 	lsr	r10,r8,0x4
8000ceb0:	58 0b       	cp.w	r11,0
8000ceb2:	f7 bc 00 fc 	subeq	r12,-4
8000ceb6:	f4 08 17 00 	moveq	r8,r10
8000ceba:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000cebe:	f0 0a 16 02 	lsr	r10,r8,0x2
8000cec2:	58 0b       	cp.w	r11,0
8000cec4:	f7 bc 00 fe 	subeq	r12,-2
8000cec8:	f4 08 17 00 	moveq	r8,r10
8000cecc:	ed b8 00 00 	bld	r8,0x0
8000ced0:	c0 60       	breq	8000cedc <__lo0bits+0x8a>
8000ced2:	a1 98       	lsr	r8,0x1
8000ced4:	c0 31       	brne	8000ceda <__lo0bits+0x88>
8000ced6:	32 0c       	mov	r12,32
8000ced8:	5e fc       	retal	r12
8000ceda:	2f fc       	sub	r12,-1
8000cedc:	93 08       	st.w	r9[0x0],r8
8000cede:	5e fc       	retal	r12

8000cee0 <__mcmp>:
8000cee0:	d4 01       	pushm	lr
8000cee2:	18 98       	mov	r8,r12
8000cee4:	76 49       	ld.w	r9,r11[0x10]
8000cee6:	78 4c       	ld.w	r12,r12[0x10]
8000cee8:	12 1c       	sub	r12,r9
8000ceea:	c1 31       	brne	8000cf10 <__mcmp+0x30>
8000ceec:	2f b9       	sub	r9,-5
8000ceee:	a3 69       	lsl	r9,0x2
8000cef0:	12 0b       	add	r11,r9
8000cef2:	f0 09 00 09 	add	r9,r8,r9
8000cef6:	2e c8       	sub	r8,-20
8000cef8:	13 4e       	ld.w	lr,--r9
8000cefa:	17 4a       	ld.w	r10,--r11
8000cefc:	14 3e       	cp.w	lr,r10
8000cefe:	c0 60       	breq	8000cf0a <__mcmp+0x2a>
8000cf00:	f9 bc 03 ff 	movlo	r12,-1
8000cf04:	f9 bc 02 01 	movhs	r12,1
8000cf08:	d8 02       	popm	pc
8000cf0a:	10 39       	cp.w	r9,r8
8000cf0c:	fe 9b ff f6 	brhi	8000cef8 <__mcmp+0x18>
8000cf10:	d8 02       	popm	pc
8000cf12:	d7 03       	nop

8000cf14 <_Bfree>:
8000cf14:	d4 21       	pushm	r4-r7,lr
8000cf16:	18 97       	mov	r7,r12
8000cf18:	16 95       	mov	r5,r11
8000cf1a:	78 96       	ld.w	r6,r12[0x24]
8000cf1c:	58 06       	cp.w	r6,0
8000cf1e:	c0 91       	brne	8000cf30 <_Bfree+0x1c>
8000cf20:	31 0c       	mov	r12,16
8000cf22:	fe b0 fd 13 	rcall	8000c948 <malloc>
8000cf26:	99 36       	st.w	r12[0xc],r6
8000cf28:	8f 9c       	st.w	r7[0x24],r12
8000cf2a:	99 16       	st.w	r12[0x4],r6
8000cf2c:	99 26       	st.w	r12[0x8],r6
8000cf2e:	99 06       	st.w	r12[0x0],r6
8000cf30:	58 05       	cp.w	r5,0
8000cf32:	c0 90       	breq	8000cf44 <_Bfree+0x30>
8000cf34:	6a 19       	ld.w	r9,r5[0x4]
8000cf36:	6e 98       	ld.w	r8,r7[0x24]
8000cf38:	70 38       	ld.w	r8,r8[0xc]
8000cf3a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000cf3e:	8b 0a       	st.w	r5[0x0],r10
8000cf40:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000cf44:	d8 22       	popm	r4-r7,pc
8000cf46:	d7 03       	nop

8000cf48 <_Balloc>:
8000cf48:	d4 21       	pushm	r4-r7,lr
8000cf4a:	18 97       	mov	r7,r12
8000cf4c:	16 96       	mov	r6,r11
8000cf4e:	78 95       	ld.w	r5,r12[0x24]
8000cf50:	58 05       	cp.w	r5,0
8000cf52:	c0 91       	brne	8000cf64 <_Balloc+0x1c>
8000cf54:	31 0c       	mov	r12,16
8000cf56:	fe b0 fc f9 	rcall	8000c948 <malloc>
8000cf5a:	99 35       	st.w	r12[0xc],r5
8000cf5c:	8f 9c       	st.w	r7[0x24],r12
8000cf5e:	99 15       	st.w	r12[0x4],r5
8000cf60:	99 25       	st.w	r12[0x8],r5
8000cf62:	99 05       	st.w	r12[0x0],r5
8000cf64:	6e 95       	ld.w	r5,r7[0x24]
8000cf66:	6a 38       	ld.w	r8,r5[0xc]
8000cf68:	58 08       	cp.w	r8,0
8000cf6a:	c0 b1       	brne	8000cf80 <_Balloc+0x38>
8000cf6c:	31 0a       	mov	r10,16
8000cf6e:	30 4b       	mov	r11,4
8000cf70:	0e 9c       	mov	r12,r7
8000cf72:	e0 a0 04 af 	rcall	8000d8d0 <_calloc_r>
8000cf76:	8b 3c       	st.w	r5[0xc],r12
8000cf78:	6e 98       	ld.w	r8,r7[0x24]
8000cf7a:	70 3c       	ld.w	r12,r8[0xc]
8000cf7c:	58 0c       	cp.w	r12,0
8000cf7e:	c1 b0       	breq	8000cfb4 <_Balloc+0x6c>
8000cf80:	6e 98       	ld.w	r8,r7[0x24]
8000cf82:	70 38       	ld.w	r8,r8[0xc]
8000cf84:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000cf88:	70 0c       	ld.w	r12,r8[0x0]
8000cf8a:	58 0c       	cp.w	r12,0
8000cf8c:	c0 40       	breq	8000cf94 <_Balloc+0x4c>
8000cf8e:	78 09       	ld.w	r9,r12[0x0]
8000cf90:	91 09       	st.w	r8[0x0],r9
8000cf92:	c0 e8       	rjmp	8000cfae <_Balloc+0x66>
8000cf94:	0e 9c       	mov	r12,r7
8000cf96:	30 17       	mov	r7,1
8000cf98:	0e 9b       	mov	r11,r7
8000cf9a:	ee 06 09 47 	lsl	r7,r7,r6
8000cf9e:	ee ca ff fb 	sub	r10,r7,-5
8000cfa2:	a3 6a       	lsl	r10,0x2
8000cfa4:	e0 a0 04 96 	rcall	8000d8d0 <_calloc_r>
8000cfa8:	c0 60       	breq	8000cfb4 <_Balloc+0x6c>
8000cfaa:	99 16       	st.w	r12[0x4],r6
8000cfac:	99 27       	st.w	r12[0x8],r7
8000cfae:	30 08       	mov	r8,0
8000cfb0:	99 38       	st.w	r12[0xc],r8
8000cfb2:	99 48       	st.w	r12[0x10],r8
8000cfb4:	d8 22       	popm	r4-r7,pc
8000cfb6:	d7 03       	nop

8000cfb8 <__d2b>:
8000cfb8:	d4 31       	pushm	r0-r7,lr
8000cfba:	20 2d       	sub	sp,8
8000cfbc:	16 93       	mov	r3,r11
8000cfbe:	12 96       	mov	r6,r9
8000cfc0:	10 95       	mov	r5,r8
8000cfc2:	14 92       	mov	r2,r10
8000cfc4:	30 1b       	mov	r11,1
8000cfc6:	cc 1f       	rcall	8000cf48 <_Balloc>
8000cfc8:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000cfcc:	50 09       	stdsp	sp[0x0],r9
8000cfce:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000cfd2:	f0 01 16 14 	lsr	r1,r8,0x14
8000cfd6:	fc 1a 00 10 	movh	r10,0x10
8000cfda:	f3 da e1 39 	orne	r9,r9,r10
8000cfde:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000cfe2:	18 94       	mov	r4,r12
8000cfe4:	58 02       	cp.w	r2,0
8000cfe6:	c1 d0       	breq	8000d020 <__d2b+0x68>
8000cfe8:	fa cc ff f8 	sub	r12,sp,-8
8000cfec:	18 d2       	st.w	--r12,r2
8000cfee:	c3 2f       	rcall	8000ce52 <__lo0bits>
8000cff0:	40 18       	lddsp	r8,sp[0x4]
8000cff2:	c0 d0       	breq	8000d00c <__d2b+0x54>
8000cff4:	40 09       	lddsp	r9,sp[0x0]
8000cff6:	f8 0a 11 20 	rsub	r10,r12,32
8000cffa:	f2 0a 09 4a 	lsl	r10,r9,r10
8000cffe:	f5 e8 10 08 	or	r8,r10,r8
8000d002:	89 58       	st.w	r4[0x14],r8
8000d004:	f2 0c 0a 49 	lsr	r9,r9,r12
8000d008:	50 09       	stdsp	sp[0x0],r9
8000d00a:	c0 28       	rjmp	8000d00e <__d2b+0x56>
8000d00c:	89 58       	st.w	r4[0x14],r8
8000d00e:	40 08       	lddsp	r8,sp[0x0]
8000d010:	58 08       	cp.w	r8,0
8000d012:	f9 b3 01 02 	movne	r3,2
8000d016:	f9 b3 00 01 	moveq	r3,1
8000d01a:	89 68       	st.w	r4[0x18],r8
8000d01c:	89 43       	st.w	r4[0x10],r3
8000d01e:	c0 88       	rjmp	8000d02e <__d2b+0x76>
8000d020:	1a 9c       	mov	r12,sp
8000d022:	c1 8f       	rcall	8000ce52 <__lo0bits>
8000d024:	30 13       	mov	r3,1
8000d026:	40 08       	lddsp	r8,sp[0x0]
8000d028:	2e 0c       	sub	r12,-32
8000d02a:	89 43       	st.w	r4[0x10],r3
8000d02c:	89 58       	st.w	r4[0x14],r8
8000d02e:	58 01       	cp.w	r1,0
8000d030:	c0 90       	breq	8000d042 <__d2b+0x8a>
8000d032:	e2 c1 04 33 	sub	r1,r1,1075
8000d036:	18 01       	add	r1,r12
8000d038:	8d 01       	st.w	r6[0x0],r1
8000d03a:	f8 0c 11 35 	rsub	r12,r12,53
8000d03e:	8b 0c       	st.w	r5[0x0],r12
8000d040:	c0 c8       	rjmp	8000d058 <__d2b+0xa0>
8000d042:	e6 c8 ff fc 	sub	r8,r3,-4
8000d046:	f8 cc 04 32 	sub	r12,r12,1074
8000d04a:	a5 73       	lsl	r3,0x5
8000d04c:	8d 0c       	st.w	r6[0x0],r12
8000d04e:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000d052:	cd 0e       	rcall	8000cdf2 <__hi0bits>
8000d054:	18 13       	sub	r3,r12
8000d056:	8b 03       	st.w	r5[0x0],r3
8000d058:	08 9c       	mov	r12,r4
8000d05a:	2f ed       	sub	sp,-8
8000d05c:	d8 32       	popm	r0-r7,pc
8000d05e:	d7 03       	nop

8000d060 <__mdiff>:
8000d060:	d4 31       	pushm	r0-r7,lr
8000d062:	74 48       	ld.w	r8,r10[0x10]
8000d064:	76 45       	ld.w	r5,r11[0x10]
8000d066:	16 97       	mov	r7,r11
8000d068:	14 96       	mov	r6,r10
8000d06a:	10 15       	sub	r5,r8
8000d06c:	c1 31       	brne	8000d092 <__mdiff+0x32>
8000d06e:	2f b8       	sub	r8,-5
8000d070:	ee ce ff ec 	sub	lr,r7,-20
8000d074:	a3 68       	lsl	r8,0x2
8000d076:	f4 08 00 0b 	add	r11,r10,r8
8000d07a:	ee 08 00 08 	add	r8,r7,r8
8000d07e:	11 4a       	ld.w	r10,--r8
8000d080:	17 49       	ld.w	r9,--r11
8000d082:	12 3a       	cp.w	r10,r9
8000d084:	c0 30       	breq	8000d08a <__mdiff+0x2a>
8000d086:	c0 e2       	brcc	8000d0a2 <__mdiff+0x42>
8000d088:	c0 78       	rjmp	8000d096 <__mdiff+0x36>
8000d08a:	1c 38       	cp.w	r8,lr
8000d08c:	fe 9b ff f9 	brhi	8000d07e <__mdiff+0x1e>
8000d090:	c4 98       	rjmp	8000d122 <__mdiff+0xc2>
8000d092:	58 05       	cp.w	r5,0
8000d094:	c0 64       	brge	8000d0a0 <__mdiff+0x40>
8000d096:	0e 98       	mov	r8,r7
8000d098:	30 15       	mov	r5,1
8000d09a:	0c 97       	mov	r7,r6
8000d09c:	10 96       	mov	r6,r8
8000d09e:	c0 28       	rjmp	8000d0a2 <__mdiff+0x42>
8000d0a0:	30 05       	mov	r5,0
8000d0a2:	6e 1b       	ld.w	r11,r7[0x4]
8000d0a4:	c5 2f       	rcall	8000cf48 <_Balloc>
8000d0a6:	6e 49       	ld.w	r9,r7[0x10]
8000d0a8:	6c 44       	ld.w	r4,r6[0x10]
8000d0aa:	99 35       	st.w	r12[0xc],r5
8000d0ac:	2f b4       	sub	r4,-5
8000d0ae:	f2 c5 ff fb 	sub	r5,r9,-5
8000d0b2:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000d0b6:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000d0ba:	2e c6       	sub	r6,-20
8000d0bc:	2e c7       	sub	r7,-20
8000d0be:	f8 c8 ff ec 	sub	r8,r12,-20
8000d0c2:	30 0a       	mov	r10,0
8000d0c4:	0f 0e       	ld.w	lr,r7++
8000d0c6:	0d 0b       	ld.w	r11,r6++
8000d0c8:	fc 02 16 10 	lsr	r2,lr,0x10
8000d0cc:	f6 03 16 10 	lsr	r3,r11,0x10
8000d0d0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000d0d4:	e4 03 01 03 	sub	r3,r2,r3
8000d0d8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000d0dc:	fc 0b 01 0b 	sub	r11,lr,r11
8000d0e0:	f6 0a 00 0a 	add	r10,r11,r10
8000d0e4:	b0 1a       	st.h	r8[0x2],r10
8000d0e6:	b1 4a       	asr	r10,0x10
8000d0e8:	e6 0a 00 0a 	add	r10,r3,r10
8000d0ec:	b0 0a       	st.h	r8[0x0],r10
8000d0ee:	2f c8       	sub	r8,-4
8000d0f0:	b1 4a       	asr	r10,0x10
8000d0f2:	08 36       	cp.w	r6,r4
8000d0f4:	ce 83       	brcs	8000d0c4 <__mdiff+0x64>
8000d0f6:	c0 d8       	rjmp	8000d110 <__mdiff+0xb0>
8000d0f8:	0f 0b       	ld.w	r11,r7++
8000d0fa:	f6 0e 16 10 	lsr	lr,r11,0x10
8000d0fe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000d102:	16 0a       	add	r10,r11
8000d104:	b0 1a       	st.h	r8[0x2],r10
8000d106:	b1 4a       	asr	r10,0x10
8000d108:	1c 0a       	add	r10,lr
8000d10a:	b0 0a       	st.h	r8[0x0],r10
8000d10c:	2f c8       	sub	r8,-4
8000d10e:	b1 4a       	asr	r10,0x10
8000d110:	0a 37       	cp.w	r7,r5
8000d112:	cf 33       	brcs	8000d0f8 <__mdiff+0x98>
8000d114:	c0 28       	rjmp	8000d118 <__mdiff+0xb8>
8000d116:	20 19       	sub	r9,1
8000d118:	11 4a       	ld.w	r10,--r8
8000d11a:	58 0a       	cp.w	r10,0
8000d11c:	cf d0       	breq	8000d116 <__mdiff+0xb6>
8000d11e:	99 49       	st.w	r12[0x10],r9
8000d120:	d8 32       	popm	r0-r7,pc
8000d122:	30 0b       	mov	r11,0
8000d124:	c1 2f       	rcall	8000cf48 <_Balloc>
8000d126:	30 18       	mov	r8,1
8000d128:	99 48       	st.w	r12[0x10],r8
8000d12a:	30 08       	mov	r8,0
8000d12c:	99 58       	st.w	r12[0x14],r8
8000d12e:	d8 32       	popm	r0-r7,pc

8000d130 <__lshift>:
8000d130:	d4 31       	pushm	r0-r7,lr
8000d132:	16 97       	mov	r7,r11
8000d134:	76 46       	ld.w	r6,r11[0x10]
8000d136:	f4 02 14 05 	asr	r2,r10,0x5
8000d13a:	2f f6       	sub	r6,-1
8000d13c:	14 93       	mov	r3,r10
8000d13e:	18 94       	mov	r4,r12
8000d140:	04 06       	add	r6,r2
8000d142:	76 1b       	ld.w	r11,r11[0x4]
8000d144:	6e 28       	ld.w	r8,r7[0x8]
8000d146:	c0 38       	rjmp	8000d14c <__lshift+0x1c>
8000d148:	2f fb       	sub	r11,-1
8000d14a:	a1 78       	lsl	r8,0x1
8000d14c:	10 36       	cp.w	r6,r8
8000d14e:	fe 99 ff fd 	brgt	8000d148 <__lshift+0x18>
8000d152:	08 9c       	mov	r12,r4
8000d154:	cf ae       	rcall	8000cf48 <_Balloc>
8000d156:	30 09       	mov	r9,0
8000d158:	18 95       	mov	r5,r12
8000d15a:	f8 c8 ff ec 	sub	r8,r12,-20
8000d15e:	12 9a       	mov	r10,r9
8000d160:	c0 38       	rjmp	8000d166 <__lshift+0x36>
8000d162:	10 aa       	st.w	r8++,r10
8000d164:	2f f9       	sub	r9,-1
8000d166:	04 39       	cp.w	r9,r2
8000d168:	cf d5       	brlt	8000d162 <__lshift+0x32>
8000d16a:	6e 4b       	ld.w	r11,r7[0x10]
8000d16c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000d170:	2f bb       	sub	r11,-5
8000d172:	ee c9 ff ec 	sub	r9,r7,-20
8000d176:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000d17a:	58 03       	cp.w	r3,0
8000d17c:	c1 30       	breq	8000d1a2 <__lshift+0x72>
8000d17e:	e6 0c 11 20 	rsub	r12,r3,32
8000d182:	30 0a       	mov	r10,0
8000d184:	72 02       	ld.w	r2,r9[0x0]
8000d186:	e4 03 09 42 	lsl	r2,r2,r3
8000d18a:	04 4a       	or	r10,r2
8000d18c:	10 aa       	st.w	r8++,r10
8000d18e:	13 0a       	ld.w	r10,r9++
8000d190:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000d194:	16 39       	cp.w	r9,r11
8000d196:	cf 73       	brcs	8000d184 <__lshift+0x54>
8000d198:	91 0a       	st.w	r8[0x0],r10
8000d19a:	58 0a       	cp.w	r10,0
8000d19c:	c0 70       	breq	8000d1aa <__lshift+0x7a>
8000d19e:	2f f6       	sub	r6,-1
8000d1a0:	c0 58       	rjmp	8000d1aa <__lshift+0x7a>
8000d1a2:	13 0a       	ld.w	r10,r9++
8000d1a4:	10 aa       	st.w	r8++,r10
8000d1a6:	16 39       	cp.w	r9,r11
8000d1a8:	cf d3       	brcs	8000d1a2 <__lshift+0x72>
8000d1aa:	08 9c       	mov	r12,r4
8000d1ac:	20 16       	sub	r6,1
8000d1ae:	0e 9b       	mov	r11,r7
8000d1b0:	8b 46       	st.w	r5[0x10],r6
8000d1b2:	cb 1e       	rcall	8000cf14 <_Bfree>
8000d1b4:	0a 9c       	mov	r12,r5
8000d1b6:	d8 32       	popm	r0-r7,pc

8000d1b8 <__multiply>:
8000d1b8:	d4 31       	pushm	r0-r7,lr
8000d1ba:	20 2d       	sub	sp,8
8000d1bc:	76 49       	ld.w	r9,r11[0x10]
8000d1be:	74 48       	ld.w	r8,r10[0x10]
8000d1c0:	16 96       	mov	r6,r11
8000d1c2:	14 95       	mov	r5,r10
8000d1c4:	10 39       	cp.w	r9,r8
8000d1c6:	ec 08 17 50 	movlt	r8,r6
8000d1ca:	ea 06 17 50 	movlt	r6,r5
8000d1ce:	f0 05 17 50 	movlt	r5,r8
8000d1d2:	6c 28       	ld.w	r8,r6[0x8]
8000d1d4:	76 43       	ld.w	r3,r11[0x10]
8000d1d6:	74 42       	ld.w	r2,r10[0x10]
8000d1d8:	76 1b       	ld.w	r11,r11[0x4]
8000d1da:	e4 03 00 07 	add	r7,r2,r3
8000d1de:	10 37       	cp.w	r7,r8
8000d1e0:	f7 bb 09 ff 	subgt	r11,-1
8000d1e4:	cb 2e       	rcall	8000cf48 <_Balloc>
8000d1e6:	ee c4 ff fb 	sub	r4,r7,-5
8000d1ea:	f8 c9 ff ec 	sub	r9,r12,-20
8000d1ee:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000d1f2:	30 0a       	mov	r10,0
8000d1f4:	12 98       	mov	r8,r9
8000d1f6:	c0 28       	rjmp	8000d1fa <__multiply+0x42>
8000d1f8:	10 aa       	st.w	r8++,r10
8000d1fa:	08 38       	cp.w	r8,r4
8000d1fc:	cf e3       	brcs	8000d1f8 <__multiply+0x40>
8000d1fe:	2f b3       	sub	r3,-5
8000d200:	2f b2       	sub	r2,-5
8000d202:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000d206:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000d20a:	ec cb ff ec 	sub	r11,r6,-20
8000d20e:	50 12       	stdsp	sp[0x4],r2
8000d210:	ea ca ff ec 	sub	r10,r5,-20
8000d214:	c4 48       	rjmp	8000d29c <__multiply+0xe4>
8000d216:	94 95       	ld.uh	r5,r10[0x2]
8000d218:	58 05       	cp.w	r5,0
8000d21a:	c2 00       	breq	8000d25a <__multiply+0xa2>
8000d21c:	12 98       	mov	r8,r9
8000d21e:	16 96       	mov	r6,r11
8000d220:	30 0e       	mov	lr,0
8000d222:	50 09       	stdsp	sp[0x0],r9
8000d224:	0d 02       	ld.w	r2,r6++
8000d226:	e4 00 16 10 	lsr	r0,r2,0x10
8000d22a:	70 01       	ld.w	r1,r8[0x0]
8000d22c:	70 09       	ld.w	r9,r8[0x0]
8000d22e:	b1 81       	lsr	r1,0x10
8000d230:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000d234:	e0 05 03 41 	mac	r1,r0,r5
8000d238:	ab 32       	mul	r2,r5
8000d23a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000d23e:	00 02       	add	r2,r0
8000d240:	e4 0e 00 0e 	add	lr,r2,lr
8000d244:	b0 1e       	st.h	r8[0x2],lr
8000d246:	b1 8e       	lsr	lr,0x10
8000d248:	1c 01       	add	r1,lr
8000d24a:	b0 01       	st.h	r8[0x0],r1
8000d24c:	e2 0e 16 10 	lsr	lr,r1,0x10
8000d250:	2f c8       	sub	r8,-4
8000d252:	06 36       	cp.w	r6,r3
8000d254:	ce 83       	brcs	8000d224 <__multiply+0x6c>
8000d256:	40 09       	lddsp	r9,sp[0x0]
8000d258:	91 0e       	st.w	r8[0x0],lr
8000d25a:	94 86       	ld.uh	r6,r10[0x0]
8000d25c:	58 06       	cp.w	r6,0
8000d25e:	c1 d0       	breq	8000d298 <__multiply+0xe0>
8000d260:	72 02       	ld.w	r2,r9[0x0]
8000d262:	12 98       	mov	r8,r9
8000d264:	16 9e       	mov	lr,r11
8000d266:	30 05       	mov	r5,0
8000d268:	b0 12       	st.h	r8[0x2],r2
8000d26a:	1d 01       	ld.w	r1,lr++
8000d26c:	90 82       	ld.uh	r2,r8[0x0]
8000d26e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000d272:	ad 30       	mul	r0,r6
8000d274:	e0 02 00 02 	add	r2,r0,r2
8000d278:	e4 05 00 05 	add	r5,r2,r5
8000d27c:	b0 05       	st.h	r8[0x0],r5
8000d27e:	b1 85       	lsr	r5,0x10
8000d280:	b1 81       	lsr	r1,0x10
8000d282:	2f c8       	sub	r8,-4
8000d284:	ad 31       	mul	r1,r6
8000d286:	90 92       	ld.uh	r2,r8[0x2]
8000d288:	e2 02 00 02 	add	r2,r1,r2
8000d28c:	0a 02       	add	r2,r5
8000d28e:	e4 05 16 10 	lsr	r5,r2,0x10
8000d292:	06 3e       	cp.w	lr,r3
8000d294:	ce a3       	brcs	8000d268 <__multiply+0xb0>
8000d296:	91 02       	st.w	r8[0x0],r2
8000d298:	2f ca       	sub	r10,-4
8000d29a:	2f c9       	sub	r9,-4
8000d29c:	40 18       	lddsp	r8,sp[0x4]
8000d29e:	10 3a       	cp.w	r10,r8
8000d2a0:	cb b3       	brcs	8000d216 <__multiply+0x5e>
8000d2a2:	c0 28       	rjmp	8000d2a6 <__multiply+0xee>
8000d2a4:	20 17       	sub	r7,1
8000d2a6:	58 07       	cp.w	r7,0
8000d2a8:	e0 8a 00 05 	brle	8000d2b2 <__multiply+0xfa>
8000d2ac:	09 48       	ld.w	r8,--r4
8000d2ae:	58 08       	cp.w	r8,0
8000d2b0:	cf a0       	breq	8000d2a4 <__multiply+0xec>
8000d2b2:	99 47       	st.w	r12[0x10],r7
8000d2b4:	2f ed       	sub	sp,-8
8000d2b6:	d8 32       	popm	r0-r7,pc

8000d2b8 <__i2b>:
8000d2b8:	d4 21       	pushm	r4-r7,lr
8000d2ba:	16 97       	mov	r7,r11
8000d2bc:	30 1b       	mov	r11,1
8000d2be:	c4 5e       	rcall	8000cf48 <_Balloc>
8000d2c0:	30 19       	mov	r9,1
8000d2c2:	99 57       	st.w	r12[0x14],r7
8000d2c4:	99 49       	st.w	r12[0x10],r9
8000d2c6:	d8 22       	popm	r4-r7,pc

8000d2c8 <__multadd>:
8000d2c8:	d4 31       	pushm	r0-r7,lr
8000d2ca:	30 08       	mov	r8,0
8000d2cc:	12 95       	mov	r5,r9
8000d2ce:	16 97       	mov	r7,r11
8000d2d0:	18 96       	mov	r6,r12
8000d2d2:	76 44       	ld.w	r4,r11[0x10]
8000d2d4:	f6 c9 ff ec 	sub	r9,r11,-20
8000d2d8:	72 0b       	ld.w	r11,r9[0x0]
8000d2da:	f6 0c 16 10 	lsr	r12,r11,0x10
8000d2de:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000d2e2:	f4 0c 02 4c 	mul	r12,r10,r12
8000d2e6:	f4 0b 03 45 	mac	r5,r10,r11
8000d2ea:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000d2ee:	b1 85       	lsr	r5,0x10
8000d2f0:	18 05       	add	r5,r12
8000d2f2:	ea 0c 15 10 	lsl	r12,r5,0x10
8000d2f6:	f8 0b 00 0b 	add	r11,r12,r11
8000d2fa:	12 ab       	st.w	r9++,r11
8000d2fc:	2f f8       	sub	r8,-1
8000d2fe:	b1 85       	lsr	r5,0x10
8000d300:	08 38       	cp.w	r8,r4
8000d302:	ce b5       	brlt	8000d2d8 <__multadd+0x10>
8000d304:	58 05       	cp.w	r5,0
8000d306:	c1 c0       	breq	8000d33e <__multadd+0x76>
8000d308:	6e 28       	ld.w	r8,r7[0x8]
8000d30a:	10 34       	cp.w	r4,r8
8000d30c:	c1 35       	brlt	8000d332 <__multadd+0x6a>
8000d30e:	6e 1b       	ld.w	r11,r7[0x4]
8000d310:	0c 9c       	mov	r12,r6
8000d312:	2f fb       	sub	r11,-1
8000d314:	c1 ae       	rcall	8000cf48 <_Balloc>
8000d316:	6e 4a       	ld.w	r10,r7[0x10]
8000d318:	ee cb ff f4 	sub	r11,r7,-12
8000d31c:	18 93       	mov	r3,r12
8000d31e:	2f ea       	sub	r10,-2
8000d320:	2f 4c       	sub	r12,-12
8000d322:	a3 6a       	lsl	r10,0x2
8000d324:	fe b0 dd c6 	rcall	80008eb0 <memcpy>
8000d328:	0e 9b       	mov	r11,r7
8000d32a:	0c 9c       	mov	r12,r6
8000d32c:	fe b0 fd f4 	rcall	8000cf14 <_Bfree>
8000d330:	06 97       	mov	r7,r3
8000d332:	e8 c8 ff ff 	sub	r8,r4,-1
8000d336:	2f b4       	sub	r4,-5
8000d338:	8f 48       	st.w	r7[0x10],r8
8000d33a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000d33e:	0e 9c       	mov	r12,r7
8000d340:	d8 32       	popm	r0-r7,pc
8000d342:	d7 03       	nop

8000d344 <__pow5mult>:
8000d344:	d4 31       	pushm	r0-r7,lr
8000d346:	14 96       	mov	r6,r10
8000d348:	18 97       	mov	r7,r12
8000d34a:	16 94       	mov	r4,r11
8000d34c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000d350:	c0 80       	breq	8000d360 <__pow5mult+0x1c>
8000d352:	20 18       	sub	r8,1
8000d354:	49 f9       	lddpc	r9,8000d3d0 <__pow5mult+0x8c>
8000d356:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000d35a:	30 09       	mov	r9,0
8000d35c:	cb 6f       	rcall	8000d2c8 <__multadd>
8000d35e:	18 94       	mov	r4,r12
8000d360:	a3 46       	asr	r6,0x2
8000d362:	c3 40       	breq	8000d3ca <__pow5mult+0x86>
8000d364:	6e 95       	ld.w	r5,r7[0x24]
8000d366:	58 05       	cp.w	r5,0
8000d368:	c0 91       	brne	8000d37a <__pow5mult+0x36>
8000d36a:	31 0c       	mov	r12,16
8000d36c:	fe b0 fa ee 	rcall	8000c948 <malloc>
8000d370:	99 35       	st.w	r12[0xc],r5
8000d372:	8f 9c       	st.w	r7[0x24],r12
8000d374:	99 15       	st.w	r12[0x4],r5
8000d376:	99 25       	st.w	r12[0x8],r5
8000d378:	99 05       	st.w	r12[0x0],r5
8000d37a:	6e 93       	ld.w	r3,r7[0x24]
8000d37c:	66 25       	ld.w	r5,r3[0x8]
8000d37e:	58 05       	cp.w	r5,0
8000d380:	c0 c1       	brne	8000d398 <__pow5mult+0x54>
8000d382:	e0 6b 02 71 	mov	r11,625
8000d386:	0e 9c       	mov	r12,r7
8000d388:	c9 8f       	rcall	8000d2b8 <__i2b>
8000d38a:	87 2c       	st.w	r3[0x8],r12
8000d38c:	30 08       	mov	r8,0
8000d38e:	18 95       	mov	r5,r12
8000d390:	99 08       	st.w	r12[0x0],r8
8000d392:	c0 38       	rjmp	8000d398 <__pow5mult+0x54>
8000d394:	06 9c       	mov	r12,r3
8000d396:	18 95       	mov	r5,r12
8000d398:	ed b6 00 00 	bld	r6,0x0
8000d39c:	c0 b1       	brne	8000d3b2 <__pow5mult+0x6e>
8000d39e:	08 9b       	mov	r11,r4
8000d3a0:	0a 9a       	mov	r10,r5
8000d3a2:	0e 9c       	mov	r12,r7
8000d3a4:	c0 af       	rcall	8000d1b8 <__multiply>
8000d3a6:	08 9b       	mov	r11,r4
8000d3a8:	18 93       	mov	r3,r12
8000d3aa:	0e 9c       	mov	r12,r7
8000d3ac:	06 94       	mov	r4,r3
8000d3ae:	fe b0 fd b3 	rcall	8000cf14 <_Bfree>
8000d3b2:	a1 56       	asr	r6,0x1
8000d3b4:	c0 b0       	breq	8000d3ca <__pow5mult+0x86>
8000d3b6:	6a 03       	ld.w	r3,r5[0x0]
8000d3b8:	58 03       	cp.w	r3,0
8000d3ba:	ce d1       	brne	8000d394 <__pow5mult+0x50>
8000d3bc:	0a 9a       	mov	r10,r5
8000d3be:	0a 9b       	mov	r11,r5
8000d3c0:	0e 9c       	mov	r12,r7
8000d3c2:	cf be       	rcall	8000d1b8 <__multiply>
8000d3c4:	8b 0c       	st.w	r5[0x0],r12
8000d3c6:	99 03       	st.w	r12[0x0],r3
8000d3c8:	ce 7b       	rjmp	8000d396 <__pow5mult+0x52>
8000d3ca:	08 9c       	mov	r12,r4
8000d3cc:	d8 32       	popm	r0-r7,pc
8000d3ce:	d7 03       	nop
8000d3d0:	80 00       	ld.sh	r0,r0[0x0]
8000d3d2:	ea d0 d4 31 	satsub.w	r0,r5,-11215

8000d3d4 <_realloc_r>:
8000d3d4:	d4 31       	pushm	r0-r7,lr
8000d3d6:	20 1d       	sub	sp,4
8000d3d8:	16 94       	mov	r4,r11
8000d3da:	18 92       	mov	r2,r12
8000d3dc:	14 9b       	mov	r11,r10
8000d3de:	58 04       	cp.w	r4,0
8000d3e0:	c0 51       	brne	8000d3ea <_realloc_r+0x16>
8000d3e2:	fe b0 fa bb 	rcall	8000c958 <_malloc_r>
8000d3e6:	18 95       	mov	r5,r12
8000d3e8:	c5 59       	rjmp	8000d692 <_realloc_r+0x2be>
8000d3ea:	50 0a       	stdsp	sp[0x0],r10
8000d3ec:	fe b0 fd 01 	rcall	8000cdee <__malloc_lock>
8000d3f0:	40 0b       	lddsp	r11,sp[0x0]
8000d3f2:	e8 c1 00 08 	sub	r1,r4,8
8000d3f6:	f6 c6 ff f5 	sub	r6,r11,-11
8000d3fa:	62 1c       	ld.w	r12,r1[0x4]
8000d3fc:	59 66       	cp.w	r6,22
8000d3fe:	f9 b6 08 10 	movls	r6,16
8000d402:	f9 b8 0b f8 	movhi	r8,-8
8000d406:	ed d8 eb 26 	andhi	r6,r6,r8
8000d40a:	16 36       	cp.w	r6,r11
8000d40c:	5f 38       	srlo	r8
8000d40e:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000d412:	c0 50       	breq	8000d41c <_realloc_r+0x48>
8000d414:	30 c8       	mov	r8,12
8000d416:	30 05       	mov	r5,0
8000d418:	85 38       	st.w	r2[0xc],r8
8000d41a:	c3 c9       	rjmp	8000d692 <_realloc_r+0x2be>
8000d41c:	18 90       	mov	r0,r12
8000d41e:	e0 10 ff fc 	andl	r0,0xfffc
8000d422:	0c 30       	cp.w	r0,r6
8000d424:	e0 84 01 0c 	brge	8000d63c <_realloc_r+0x268>
8000d428:	4c 98       	lddpc	r8,8000d54c <_realloc_r+0x178>
8000d42a:	e2 00 00 09 	add	r9,r1,r0
8000d42e:	70 25       	ld.w	r5,r8[0x8]
8000d430:	0a 39       	cp.w	r9,r5
8000d432:	c0 90       	breq	8000d444 <_realloc_r+0x70>
8000d434:	72 1a       	ld.w	r10,r9[0x4]
8000d436:	a1 ca       	cbr	r10,0x0
8000d438:	f2 0a 00 0a 	add	r10,r9,r10
8000d43c:	74 1a       	ld.w	r10,r10[0x4]
8000d43e:	ed ba 00 00 	bld	r10,0x0
8000d442:	c2 20       	breq	8000d486 <_realloc_r+0xb2>
8000d444:	72 1a       	ld.w	r10,r9[0x4]
8000d446:	e0 1a ff fc 	andl	r10,0xfffc
8000d44a:	f4 00 00 03 	add	r3,r10,r0
8000d44e:	0a 39       	cp.w	r9,r5
8000d450:	c1 31       	brne	8000d476 <_realloc_r+0xa2>
8000d452:	ec c7 ff f0 	sub	r7,r6,-16
8000d456:	0e 33       	cp.w	r3,r7
8000d458:	c1 95       	brlt	8000d48a <_realloc_r+0xb6>
8000d45a:	e2 06 00 09 	add	r9,r1,r6
8000d45e:	0c 13       	sub	r3,r6
8000d460:	a1 a3       	sbr	r3,0x0
8000d462:	93 13       	st.w	r9[0x4],r3
8000d464:	91 29       	st.w	r8[0x8],r9
8000d466:	04 9c       	mov	r12,r2
8000d468:	62 18       	ld.w	r8,r1[0x4]
8000d46a:	08 95       	mov	r5,r4
8000d46c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000d470:	10 46       	or	r6,r8
8000d472:	83 16       	st.w	r1[0x4],r6
8000d474:	c0 d9       	rjmp	8000d68e <_realloc_r+0x2ba>
8000d476:	0c 33       	cp.w	r3,r6
8000d478:	c0 95       	brlt	8000d48a <_realloc_r+0xb6>
8000d47a:	72 28       	ld.w	r8,r9[0x8]
8000d47c:	02 97       	mov	r7,r1
8000d47e:	72 39       	ld.w	r9,r9[0xc]
8000d480:	93 28       	st.w	r9[0x8],r8
8000d482:	91 39       	st.w	r8[0xc],r9
8000d484:	cd e8       	rjmp	8000d640 <_realloc_r+0x26c>
8000d486:	30 0a       	mov	r10,0
8000d488:	14 99       	mov	r9,r10
8000d48a:	ed bc 00 00 	bld	r12,0x0
8000d48e:	e0 80 00 97 	breq	8000d5bc <_realloc_r+0x1e8>
8000d492:	62 07       	ld.w	r7,r1[0x0]
8000d494:	e2 07 01 07 	sub	r7,r1,r7
8000d498:	6e 1c       	ld.w	r12,r7[0x4]
8000d49a:	e0 1c ff fc 	andl	r12,0xfffc
8000d49e:	58 09       	cp.w	r9,0
8000d4a0:	c5 80       	breq	8000d550 <_realloc_r+0x17c>
8000d4a2:	f8 00 00 03 	add	r3,r12,r0
8000d4a6:	0a 39       	cp.w	r9,r5
8000d4a8:	c4 81       	brne	8000d538 <_realloc_r+0x164>
8000d4aa:	14 03       	add	r3,r10
8000d4ac:	ec c9 ff f0 	sub	r9,r6,-16
8000d4b0:	12 33       	cp.w	r3,r9
8000d4b2:	c4 f5       	brlt	8000d550 <_realloc_r+0x17c>
8000d4b4:	6e 3a       	ld.w	r10,r7[0xc]
8000d4b6:	6e 29       	ld.w	r9,r7[0x8]
8000d4b8:	95 29       	st.w	r10[0x8],r9
8000d4ba:	93 3a       	st.w	r9[0xc],r10
8000d4bc:	ee c5 ff f8 	sub	r5,r7,-8
8000d4c0:	e0 ca 00 04 	sub	r10,r0,4
8000d4c4:	e0 4a 00 24 	cp.w	r10,36
8000d4c8:	e0 8b 00 25 	brhi	8000d512 <_realloc_r+0x13e>
8000d4cc:	0a 99       	mov	r9,r5
8000d4ce:	59 3a       	cp.w	r10,19
8000d4d0:	e0 88 00 1a 	brls	8000d504 <_realloc_r+0x130>
8000d4d4:	09 09       	ld.w	r9,r4++
8000d4d6:	8b 09       	st.w	r5[0x0],r9
8000d4d8:	09 09       	ld.w	r9,r4++
8000d4da:	8f 39       	st.w	r7[0xc],r9
8000d4dc:	ee c9 ff f0 	sub	r9,r7,-16
8000d4e0:	59 ba       	cp.w	r10,27
8000d4e2:	e0 88 00 11 	brls	8000d504 <_realloc_r+0x130>
8000d4e6:	09 0b       	ld.w	r11,r4++
8000d4e8:	93 0b       	st.w	r9[0x0],r11
8000d4ea:	09 09       	ld.w	r9,r4++
8000d4ec:	8f 59       	st.w	r7[0x14],r9
8000d4ee:	ee c9 ff e8 	sub	r9,r7,-24
8000d4f2:	e0 4a 00 24 	cp.w	r10,36
8000d4f6:	c0 71       	brne	8000d504 <_realloc_r+0x130>
8000d4f8:	09 0a       	ld.w	r10,r4++
8000d4fa:	93 0a       	st.w	r9[0x0],r10
8000d4fc:	ee c9 ff e0 	sub	r9,r7,-32
8000d500:	09 0a       	ld.w	r10,r4++
8000d502:	8f 7a       	st.w	r7[0x1c],r10
8000d504:	09 0a       	ld.w	r10,r4++
8000d506:	12 aa       	st.w	r9++,r10
8000d508:	68 0a       	ld.w	r10,r4[0x0]
8000d50a:	93 0a       	st.w	r9[0x0],r10
8000d50c:	68 1a       	ld.w	r10,r4[0x4]
8000d50e:	93 1a       	st.w	r9[0x4],r10
8000d510:	c0 78       	rjmp	8000d51e <_realloc_r+0x14a>
8000d512:	50 08       	stdsp	sp[0x0],r8
8000d514:	08 9b       	mov	r11,r4
8000d516:	0a 9c       	mov	r12,r5
8000d518:	fe b0 fc 45 	rcall	8000cda2 <memmove>
8000d51c:	40 08       	lddsp	r8,sp[0x0]
8000d51e:	ee 06 00 09 	add	r9,r7,r6
8000d522:	0c 13       	sub	r3,r6
8000d524:	a1 a3       	sbr	r3,0x0
8000d526:	93 13       	st.w	r9[0x4],r3
8000d528:	91 29       	st.w	r8[0x8],r9
8000d52a:	04 9c       	mov	r12,r2
8000d52c:	6e 18       	ld.w	r8,r7[0x4]
8000d52e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000d532:	10 46       	or	r6,r8
8000d534:	8f 16       	st.w	r7[0x4],r6
8000d536:	ca c8       	rjmp	8000d68e <_realloc_r+0x2ba>
8000d538:	14 03       	add	r3,r10
8000d53a:	0c 33       	cp.w	r3,r6
8000d53c:	c0 a5       	brlt	8000d550 <_realloc_r+0x17c>
8000d53e:	72 28       	ld.w	r8,r9[0x8]
8000d540:	72 39       	ld.w	r9,r9[0xc]
8000d542:	93 28       	st.w	r9[0x8],r8
8000d544:	91 39       	st.w	r8[0xc],r9
8000d546:	6e 28       	ld.w	r8,r7[0x8]
8000d548:	6e 39       	ld.w	r9,r7[0xc]
8000d54a:	c0 98       	rjmp	8000d55c <_realloc_r+0x188>
8000d54c:	00 00       	add	r0,r0
8000d54e:	02 fc       	st.b	--r1,r12
8000d550:	f8 00 00 03 	add	r3,r12,r0
8000d554:	0c 33       	cp.w	r3,r6
8000d556:	c3 35       	brlt	8000d5bc <_realloc_r+0x1e8>
8000d558:	6e 39       	ld.w	r9,r7[0xc]
8000d55a:	6e 28       	ld.w	r8,r7[0x8]
8000d55c:	93 28       	st.w	r9[0x8],r8
8000d55e:	91 39       	st.w	r8[0xc],r9
8000d560:	e0 ca 00 04 	sub	r10,r0,4
8000d564:	ee cc ff f8 	sub	r12,r7,-8
8000d568:	e0 4a 00 24 	cp.w	r10,36
8000d56c:	e0 8b 00 24 	brhi	8000d5b4 <_realloc_r+0x1e0>
8000d570:	59 3a       	cp.w	r10,19
8000d572:	e0 88 00 1a 	brls	8000d5a6 <_realloc_r+0x1d2>
8000d576:	09 08       	ld.w	r8,r4++
8000d578:	99 08       	st.w	r12[0x0],r8
8000d57a:	09 08       	ld.w	r8,r4++
8000d57c:	8f 38       	st.w	r7[0xc],r8
8000d57e:	ee cc ff f0 	sub	r12,r7,-16
8000d582:	59 ba       	cp.w	r10,27
8000d584:	e0 88 00 11 	brls	8000d5a6 <_realloc_r+0x1d2>
8000d588:	09 08       	ld.w	r8,r4++
8000d58a:	99 08       	st.w	r12[0x0],r8
8000d58c:	09 08       	ld.w	r8,r4++
8000d58e:	8f 58       	st.w	r7[0x14],r8
8000d590:	ee cc ff e8 	sub	r12,r7,-24
8000d594:	e0 4a 00 24 	cp.w	r10,36
8000d598:	c0 71       	brne	8000d5a6 <_realloc_r+0x1d2>
8000d59a:	09 08       	ld.w	r8,r4++
8000d59c:	99 08       	st.w	r12[0x0],r8
8000d59e:	ee cc ff e0 	sub	r12,r7,-32
8000d5a2:	09 08       	ld.w	r8,r4++
8000d5a4:	8f 78       	st.w	r7[0x1c],r8
8000d5a6:	09 08       	ld.w	r8,r4++
8000d5a8:	18 a8       	st.w	r12++,r8
8000d5aa:	68 08       	ld.w	r8,r4[0x0]
8000d5ac:	99 08       	st.w	r12[0x0],r8
8000d5ae:	68 18       	ld.w	r8,r4[0x4]
8000d5b0:	99 18       	st.w	r12[0x4],r8
8000d5b2:	c4 78       	rjmp	8000d640 <_realloc_r+0x26c>
8000d5b4:	08 9b       	mov	r11,r4
8000d5b6:	fe b0 fb f6 	rcall	8000cda2 <memmove>
8000d5ba:	c4 38       	rjmp	8000d640 <_realloc_r+0x26c>
8000d5bc:	04 9c       	mov	r12,r2
8000d5be:	fe b0 f9 cd 	rcall	8000c958 <_malloc_r>
8000d5c2:	18 95       	mov	r5,r12
8000d5c4:	c3 a0       	breq	8000d638 <_realloc_r+0x264>
8000d5c6:	62 18       	ld.w	r8,r1[0x4]
8000d5c8:	f8 c9 00 08 	sub	r9,r12,8
8000d5cc:	a1 c8       	cbr	r8,0x0
8000d5ce:	e2 08 00 08 	add	r8,r1,r8
8000d5d2:	10 39       	cp.w	r9,r8
8000d5d4:	c0 71       	brne	8000d5e2 <_realloc_r+0x20e>
8000d5d6:	72 13       	ld.w	r3,r9[0x4]
8000d5d8:	02 97       	mov	r7,r1
8000d5da:	e0 13 ff fc 	andl	r3,0xfffc
8000d5de:	00 03       	add	r3,r0
8000d5e0:	c3 08       	rjmp	8000d640 <_realloc_r+0x26c>
8000d5e2:	e0 ca 00 04 	sub	r10,r0,4
8000d5e6:	e0 4a 00 24 	cp.w	r10,36
8000d5ea:	e0 8b 00 20 	brhi	8000d62a <_realloc_r+0x256>
8000d5ee:	08 99       	mov	r9,r4
8000d5f0:	18 98       	mov	r8,r12
8000d5f2:	59 3a       	cp.w	r10,19
8000d5f4:	e0 88 00 14 	brls	8000d61c <_realloc_r+0x248>
8000d5f8:	13 0b       	ld.w	r11,r9++
8000d5fa:	10 ab       	st.w	r8++,r11
8000d5fc:	13 0b       	ld.w	r11,r9++
8000d5fe:	10 ab       	st.w	r8++,r11
8000d600:	59 ba       	cp.w	r10,27
8000d602:	e0 88 00 0d 	brls	8000d61c <_realloc_r+0x248>
8000d606:	13 0b       	ld.w	r11,r9++
8000d608:	10 ab       	st.w	r8++,r11
8000d60a:	13 0b       	ld.w	r11,r9++
8000d60c:	10 ab       	st.w	r8++,r11
8000d60e:	e0 4a 00 24 	cp.w	r10,36
8000d612:	c0 51       	brne	8000d61c <_realloc_r+0x248>
8000d614:	13 0a       	ld.w	r10,r9++
8000d616:	10 aa       	st.w	r8++,r10
8000d618:	13 0a       	ld.w	r10,r9++
8000d61a:	10 aa       	st.w	r8++,r10
8000d61c:	13 0a       	ld.w	r10,r9++
8000d61e:	10 aa       	st.w	r8++,r10
8000d620:	72 0a       	ld.w	r10,r9[0x0]
8000d622:	91 0a       	st.w	r8[0x0],r10
8000d624:	72 19       	ld.w	r9,r9[0x4]
8000d626:	91 19       	st.w	r8[0x4],r9
8000d628:	c0 48       	rjmp	8000d630 <_realloc_r+0x25c>
8000d62a:	08 9b       	mov	r11,r4
8000d62c:	fe b0 fb bb 	rcall	8000cda2 <memmove>
8000d630:	08 9b       	mov	r11,r4
8000d632:	04 9c       	mov	r12,r2
8000d634:	fe b0 f6 e4 	rcall	8000c3fc <_free_r>
8000d638:	04 9c       	mov	r12,r2
8000d63a:	c2 a8       	rjmp	8000d68e <_realloc_r+0x2ba>
8000d63c:	00 93       	mov	r3,r0
8000d63e:	02 97       	mov	r7,r1
8000d640:	e6 06 01 09 	sub	r9,r3,r6
8000d644:	6e 18       	ld.w	r8,r7[0x4]
8000d646:	58 f9       	cp.w	r9,15
8000d648:	e0 88 00 16 	brls	8000d674 <_realloc_r+0x2a0>
8000d64c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000d650:	ed e8 10 08 	or	r8,r6,r8
8000d654:	8f 18       	st.w	r7[0x4],r8
8000d656:	12 98       	mov	r8,r9
8000d658:	a1 a8       	sbr	r8,0x0
8000d65a:	ee 06 00 0b 	add	r11,r7,r6
8000d65e:	f6 09 00 09 	add	r9,r11,r9
8000d662:	97 18       	st.w	r11[0x4],r8
8000d664:	72 18       	ld.w	r8,r9[0x4]
8000d666:	a1 a8       	sbr	r8,0x0
8000d668:	2f 8b       	sub	r11,-8
8000d66a:	93 18       	st.w	r9[0x4],r8
8000d66c:	04 9c       	mov	r12,r2
8000d66e:	fe b0 f6 c7 	rcall	8000c3fc <_free_r>
8000d672:	c0 b8       	rjmp	8000d688 <_realloc_r+0x2b4>
8000d674:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000d678:	e7 e8 10 08 	or	r8,r3,r8
8000d67c:	8f 18       	st.w	r7[0x4],r8
8000d67e:	ee 03 00 03 	add	r3,r7,r3
8000d682:	66 18       	ld.w	r8,r3[0x4]
8000d684:	a1 a8       	sbr	r8,0x0
8000d686:	87 18       	st.w	r3[0x4],r8
8000d688:	04 9c       	mov	r12,r2
8000d68a:	ee c5 ff f8 	sub	r5,r7,-8
8000d68e:	fe b0 fb b1 	rcall	8000cdf0 <__malloc_unlock>
8000d692:	0a 9c       	mov	r12,r5
8000d694:	2f fd       	sub	sp,-4
8000d696:	d8 32       	popm	r0-r7,pc

8000d698 <_sbrk_r>:
8000d698:	d4 21       	pushm	r4-r7,lr
8000d69a:	30 08       	mov	r8,0
8000d69c:	18 97       	mov	r7,r12
8000d69e:	48 66       	lddpc	r6,8000d6b4 <_sbrk_r+0x1c>
8000d6a0:	16 9c       	mov	r12,r11
8000d6a2:	8d 08       	st.w	r6[0x0],r8
8000d6a4:	ce 4c       	rcall	8000d86c <_sbrk>
8000d6a6:	5b fc       	cp.w	r12,-1
8000d6a8:	c0 51       	brne	8000d6b2 <_sbrk_r+0x1a>
8000d6aa:	6c 08       	ld.w	r8,r6[0x0]
8000d6ac:	58 08       	cp.w	r8,0
8000d6ae:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000d6b2:	d8 22       	popm	r4-r7,pc
8000d6b4:	00 00       	add	r0,r0
8000d6b6:	95 e0       	st.w	r10[0x38],r0

8000d6b8 <__isinfd>:
8000d6b8:	14 98       	mov	r8,r10
8000d6ba:	fc 19 7f f0 	movh	r9,0x7ff0
8000d6be:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000d6c2:	f0 0b 11 00 	rsub	r11,r8,0
8000d6c6:	f7 e8 10 08 	or	r8,r11,r8
8000d6ca:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000d6ce:	f2 08 01 08 	sub	r8,r9,r8
8000d6d2:	f0 0c 11 00 	rsub	r12,r8,0
8000d6d6:	f9 e8 10 08 	or	r8,r12,r8
8000d6da:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000d6de:	2f fc       	sub	r12,-1
8000d6e0:	5e fc       	retal	r12

8000d6e2 <__isnand>:
8000d6e2:	14 98       	mov	r8,r10
8000d6e4:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000d6e8:	f0 0c 11 00 	rsub	r12,r8,0
8000d6ec:	10 4c       	or	r12,r8
8000d6ee:	fc 18 7f f0 	movh	r8,0x7ff0
8000d6f2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000d6f6:	f0 0c 01 0c 	sub	r12,r8,r12
8000d6fa:	bf 9c       	lsr	r12,0x1f
8000d6fc:	5e fc       	retal	r12
8000d6fe:	d7 03       	nop

8000d700 <__sclose>:
8000d700:	d4 01       	pushm	lr
8000d702:	96 7b       	ld.sh	r11,r11[0xe]
8000d704:	c1 2d       	rcall	8000d928 <_close_r>
8000d706:	d8 02       	popm	pc

8000d708 <__sseek>:
8000d708:	d4 21       	pushm	r4-r7,lr
8000d70a:	16 97       	mov	r7,r11
8000d70c:	96 7b       	ld.sh	r11,r11[0xe]
8000d70e:	c9 bd       	rcall	8000da44 <_lseek_r>
8000d710:	8e 68       	ld.sh	r8,r7[0xc]
8000d712:	10 99       	mov	r9,r8
8000d714:	ad c9       	cbr	r9,0xc
8000d716:	5b fc       	cp.w	r12,-1
8000d718:	ef f9 0c 06 	st.heq	r7[0xc],r9
8000d71c:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000d720:	e0 69 10 00 	mov	r9,4096
8000d724:	f1 d9 e1 38 	orne	r8,r8,r9
8000d728:	ef f8 1c 06 	st.hne	r7[0xc],r8
8000d72c:	d8 22       	popm	r4-r7,pc
8000d72e:	d7 03       	nop

8000d730 <__swrite>:
8000d730:	d4 21       	pushm	r4-r7,lr
8000d732:	96 68       	ld.sh	r8,r11[0xc]
8000d734:	16 97       	mov	r7,r11
8000d736:	14 95       	mov	r5,r10
8000d738:	12 94       	mov	r4,r9
8000d73a:	e2 18 01 00 	andl	r8,0x100,COH
8000d73e:	18 96       	mov	r6,r12
8000d740:	c0 50       	breq	8000d74a <__swrite+0x1a>
8000d742:	30 29       	mov	r9,2
8000d744:	30 0a       	mov	r10,0
8000d746:	96 7b       	ld.sh	r11,r11[0xe]
8000d748:	c7 ed       	rcall	8000da44 <_lseek_r>
8000d74a:	8e 68       	ld.sh	r8,r7[0xc]
8000d74c:	ad c8       	cbr	r8,0xc
8000d74e:	08 99       	mov	r9,r4
8000d750:	0a 9a       	mov	r10,r5
8000d752:	8e 7b       	ld.sh	r11,r7[0xe]
8000d754:	0c 9c       	mov	r12,r6
8000d756:	ae 68       	st.h	r7[0xc],r8
8000d758:	ca 8c       	rcall	8000d8a8 <_write_r>
8000d75a:	d8 22       	popm	r4-r7,pc

8000d75c <__sread>:
8000d75c:	d4 21       	pushm	r4-r7,lr
8000d75e:	16 97       	mov	r7,r11
8000d760:	96 7b       	ld.sh	r11,r11[0xe]
8000d762:	c8 5d       	rcall	8000da6c <_read_r>
8000d764:	c0 65       	brlt	8000d770 <__sread+0x14>
8000d766:	6f 58       	ld.w	r8,r7[0x54]
8000d768:	18 08       	add	r8,r12
8000d76a:	ef 48 00 54 	st.w	r7[84],r8
8000d76e:	d8 22       	popm	r4-r7,pc
8000d770:	8e 68       	ld.sh	r8,r7[0xc]
8000d772:	ad c8       	cbr	r8,0xc
8000d774:	ae 68       	st.h	r7[0xc],r8
8000d776:	d8 22       	popm	r4-r7,pc

8000d778 <strlen>:
8000d778:	30 09       	mov	r9,0
8000d77a:	18 98       	mov	r8,r12
8000d77c:	c0 28       	rjmp	8000d780 <strlen+0x8>
8000d77e:	2f f8       	sub	r8,-1
8000d780:	11 8a       	ld.ub	r10,r8[0x0]
8000d782:	f2 0a 18 00 	cp.b	r10,r9
8000d786:	cf c1       	brne	8000d77e <strlen+0x6>
8000d788:	f0 0c 01 0c 	sub	r12,r8,r12
8000d78c:	5e fc       	retal	r12
8000d78e:	d7 03       	nop

8000d790 <_close>:
8000d790:	30 28       	mov	r8,2
8000d792:	d6 73       	breakpoint
8000d794:	3f fc       	mov	r12,-1
8000d796:	35 8b       	mov	r11,88
8000d798:	58 0c       	cp.w	r12,0
8000d79a:	5e 4c       	retge	r12
8000d79c:	48 2a       	lddpc	r10,8000d7a4 <_close+0x14>
8000d79e:	95 0b       	st.w	r10[0x0],r11
8000d7a0:	5e fc       	retal	r12
8000d7a2:	d7 03       	nop
8000d7a4:	00 00       	add	r0,r0
8000d7a6:	95 e0       	st.w	r10[0x38],r0

8000d7a8 <_lseek>:
8000d7a8:	30 58       	mov	r8,5
8000d7aa:	d6 73       	breakpoint
8000d7ac:	3f fc       	mov	r12,-1
8000d7ae:	35 8b       	mov	r11,88
8000d7b0:	58 0c       	cp.w	r12,0
8000d7b2:	5e 4c       	retge	r12
8000d7b4:	48 2a       	lddpc	r10,8000d7bc <_lseek+0x14>
8000d7b6:	95 0b       	st.w	r10[0x0],r11
8000d7b8:	5e fc       	retal	r12
8000d7ba:	d7 03       	nop
8000d7bc:	00 00       	add	r0,r0
8000d7be:	95 e0       	st.w	r10[0x38],r0

8000d7c0 <_read>:
8000d7c0:	30 38       	mov	r8,3
8000d7c2:	d6 73       	breakpoint
8000d7c4:	3f fc       	mov	r12,-1
8000d7c6:	35 8b       	mov	r11,88
8000d7c8:	58 0c       	cp.w	r12,0
8000d7ca:	5e 4c       	retge	r12
8000d7cc:	48 2a       	lddpc	r10,8000d7d4 <_read+0x14>
8000d7ce:	95 0b       	st.w	r10[0x0],r11
8000d7d0:	5e fc       	retal	r12
8000d7d2:	d7 03       	nop
8000d7d4:	00 00       	add	r0,r0
8000d7d6:	95 e0       	st.w	r10[0x38],r0

8000d7d8 <_write>:
8000d7d8:	30 48       	mov	r8,4
8000d7da:	d6 73       	breakpoint
8000d7dc:	3f fc       	mov	r12,-1
8000d7de:	35 8b       	mov	r11,88
8000d7e0:	58 0c       	cp.w	r12,0
8000d7e2:	5e 4c       	retge	r12
8000d7e4:	48 2a       	lddpc	r10,8000d7ec <_write+0x14>
8000d7e6:	95 0b       	st.w	r10[0x0],r11
8000d7e8:	5e fc       	retal	r12
8000d7ea:	d7 03       	nop
8000d7ec:	00 00       	add	r0,r0
8000d7ee:	95 e0       	st.w	r10[0x38],r0

8000d7f0 <isatty>:
8000d7f0:	30 b8       	mov	r8,11
8000d7f2:	d6 73       	breakpoint
8000d7f4:	3f fc       	mov	r12,-1
8000d7f6:	35 8b       	mov	r11,88
8000d7f8:	58 0c       	cp.w	r12,0
8000d7fa:	5e 4c       	retge	r12
8000d7fc:	48 2a       	lddpc	r10,8000d804 <isatty+0x14>
8000d7fe:	95 0b       	st.w	r10[0x0],r11
8000d800:	5e fc       	retal	r12
8000d802:	d7 03       	nop
8000d804:	00 00       	add	r0,r0
8000d806:	95 e0       	st.w	r10[0x38],r0

8000d808 <_fstat_host>:
8000d808:	30 98       	mov	r8,9
8000d80a:	d6 73       	breakpoint
8000d80c:	3f fc       	mov	r12,-1
8000d80e:	35 8b       	mov	r11,88
8000d810:	58 0c       	cp.w	r12,0
8000d812:	5e 4c       	retge	r12
8000d814:	48 2a       	lddpc	r10,8000d81c <_fstat_host+0x14>
8000d816:	95 0b       	st.w	r10[0x0],r11
8000d818:	5e fc       	retal	r12
8000d81a:	d7 03       	nop
8000d81c:	00 00       	add	r0,r0
8000d81e:	95 e0       	st.w	r10[0x38],r0

8000d820 <_fstat>:
8000d820:	d4 21       	pushm	r4-r7,lr
8000d822:	21 0d       	sub	sp,64
8000d824:	16 97       	mov	r7,r11
8000d826:	1a 9b       	mov	r11,sp
8000d828:	cf 0f       	rcall	8000d808 <_fstat_host>
8000d82a:	c0 34       	brge	8000d830 <_fstat+0x10>
8000d82c:	3f fc       	mov	r12,-1
8000d82e:	c1 c8       	rjmp	8000d866 <_fstat+0x46>
8000d830:	40 08       	lddsp	r8,sp[0x0]
8000d832:	ae 08       	st.h	r7[0x0],r8
8000d834:	40 18       	lddsp	r8,sp[0x4]
8000d836:	ae 18       	st.h	r7[0x2],r8
8000d838:	40 28       	lddsp	r8,sp[0x8]
8000d83a:	8f 18       	st.w	r7[0x4],r8
8000d83c:	40 38       	lddsp	r8,sp[0xc]
8000d83e:	ae 48       	st.h	r7[0x8],r8
8000d840:	40 48       	lddsp	r8,sp[0x10]
8000d842:	ae 58       	st.h	r7[0xa],r8
8000d844:	40 58       	lddsp	r8,sp[0x14]
8000d846:	ae 68       	st.h	r7[0xc],r8
8000d848:	40 68       	lddsp	r8,sp[0x18]
8000d84a:	ae 78       	st.h	r7[0xe],r8
8000d84c:	40 88       	lddsp	r8,sp[0x20]
8000d84e:	8f 48       	st.w	r7[0x10],r8
8000d850:	40 a8       	lddsp	r8,sp[0x28]
8000d852:	8f b8       	st.w	r7[0x2c],r8
8000d854:	40 c8       	lddsp	r8,sp[0x30]
8000d856:	8f c8       	st.w	r7[0x30],r8
8000d858:	40 d8       	lddsp	r8,sp[0x34]
8000d85a:	8f 58       	st.w	r7[0x14],r8
8000d85c:	40 e8       	lddsp	r8,sp[0x38]
8000d85e:	30 0c       	mov	r12,0
8000d860:	8f 78       	st.w	r7[0x1c],r8
8000d862:	40 f8       	lddsp	r8,sp[0x3c]
8000d864:	8f 98       	st.w	r7[0x24],r8
8000d866:	2f 0d       	sub	sp,-64
8000d868:	d8 22       	popm	r4-r7,pc
8000d86a:	d7 03       	nop

8000d86c <_sbrk>:
8000d86c:	d4 01       	pushm	lr
8000d86e:	48 c8       	lddpc	r8,8000d89c <_sbrk+0x30>
8000d870:	70 09       	ld.w	r9,r8[0x0]
8000d872:	58 09       	cp.w	r9,0
8000d874:	c0 31       	brne	8000d87a <_sbrk+0xe>
8000d876:	48 b9       	lddpc	r9,8000d8a0 <_sbrk+0x34>
8000d878:	91 09       	st.w	r8[0x0],r9
8000d87a:	48 99       	lddpc	r9,8000d89c <_sbrk+0x30>
8000d87c:	48 aa       	lddpc	r10,8000d8a4 <_sbrk+0x38>
8000d87e:	72 08       	ld.w	r8,r9[0x0]
8000d880:	f0 0c 00 0c 	add	r12,r8,r12
8000d884:	14 3c       	cp.w	r12,r10
8000d886:	e0 8b 00 04 	brhi	8000d88e <_sbrk+0x22>
8000d88a:	93 0c       	st.w	r9[0x0],r12
8000d88c:	c0 58       	rjmp	8000d896 <_sbrk+0x2a>
8000d88e:	c5 dc       	rcall	8000d948 <__errno>
8000d890:	30 c8       	mov	r8,12
8000d892:	99 08       	st.w	r12[0x0],r8
8000d894:	3f f8       	mov	r8,-1
8000d896:	10 9c       	mov	r12,r8
8000d898:	d8 02       	popm	pc
8000d89a:	d7 03       	nop
8000d89c:	00 00       	add	r0,r0
8000d89e:	09 34       	ld.ub	r4,r4++
8000d8a0:	00 00       	add	r0,r0
8000d8a2:	95 e8       	st.w	r10[0x38],r8
8000d8a4:	00 00       	add	r0,r0
8000d8a6:	f0 00       	*unknown*

8000d8a8 <_write_r>:
8000d8a8:	d4 21       	pushm	r4-r7,lr
8000d8aa:	16 98       	mov	r8,r11
8000d8ac:	18 97       	mov	r7,r12
8000d8ae:	10 9c       	mov	r12,r8
8000d8b0:	30 08       	mov	r8,0
8000d8b2:	14 9b       	mov	r11,r10
8000d8b4:	48 66       	lddpc	r6,8000d8cc <_write_r+0x24>
8000d8b6:	12 9a       	mov	r10,r9
8000d8b8:	8d 08       	st.w	r6[0x0],r8
8000d8ba:	c8 ff       	rcall	8000d7d8 <_write>
8000d8bc:	5b fc       	cp.w	r12,-1
8000d8be:	c0 51       	brne	8000d8c8 <_write_r+0x20>
8000d8c0:	6c 08       	ld.w	r8,r6[0x0]
8000d8c2:	58 08       	cp.w	r8,0
8000d8c4:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000d8c8:	d8 22       	popm	r4-r7,pc
8000d8ca:	d7 03       	nop
8000d8cc:	00 00       	add	r0,r0
8000d8ce:	95 e0       	st.w	r10[0x38],r0

8000d8d0 <_calloc_r>:
8000d8d0:	d4 21       	pushm	r4-r7,lr
8000d8d2:	f4 0b 02 4b 	mul	r11,r10,r11
8000d8d6:	fe b0 f8 41 	rcall	8000c958 <_malloc_r>
8000d8da:	18 97       	mov	r7,r12
8000d8dc:	c2 30       	breq	8000d922 <_calloc_r+0x52>
8000d8de:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000d8e2:	e0 1a ff fc 	andl	r10,0xfffc
8000d8e6:	20 4a       	sub	r10,4
8000d8e8:	e0 4a 00 24 	cp.w	r10,36
8000d8ec:	e0 8b 00 18 	brhi	8000d91c <_calloc_r+0x4c>
8000d8f0:	18 98       	mov	r8,r12
8000d8f2:	59 3a       	cp.w	r10,19
8000d8f4:	e0 88 00 0f 	brls	8000d912 <_calloc_r+0x42>
8000d8f8:	30 09       	mov	r9,0
8000d8fa:	10 a9       	st.w	r8++,r9
8000d8fc:	10 a9       	st.w	r8++,r9
8000d8fe:	59 ba       	cp.w	r10,27
8000d900:	e0 88 00 09 	brls	8000d912 <_calloc_r+0x42>
8000d904:	10 a9       	st.w	r8++,r9
8000d906:	10 a9       	st.w	r8++,r9
8000d908:	e0 4a 00 24 	cp.w	r10,36
8000d90c:	c0 31       	brne	8000d912 <_calloc_r+0x42>
8000d90e:	10 a9       	st.w	r8++,r9
8000d910:	10 a9       	st.w	r8++,r9
8000d912:	30 09       	mov	r9,0
8000d914:	10 a9       	st.w	r8++,r9
8000d916:	91 19       	st.w	r8[0x4],r9
8000d918:	91 09       	st.w	r8[0x0],r9
8000d91a:	c0 48       	rjmp	8000d922 <_calloc_r+0x52>
8000d91c:	30 0b       	mov	r11,0
8000d91e:	fe b0 fa 61 	rcall	8000cde0 <memset>
8000d922:	0e 9c       	mov	r12,r7
8000d924:	d8 22       	popm	r4-r7,pc
8000d926:	d7 03       	nop

8000d928 <_close_r>:
8000d928:	d4 21       	pushm	r4-r7,lr
8000d92a:	30 08       	mov	r8,0
8000d92c:	18 97       	mov	r7,r12
8000d92e:	48 66       	lddpc	r6,8000d944 <_close_r+0x1c>
8000d930:	16 9c       	mov	r12,r11
8000d932:	8d 08       	st.w	r6[0x0],r8
8000d934:	c2 ef       	rcall	8000d790 <_close>
8000d936:	5b fc       	cp.w	r12,-1
8000d938:	c0 51       	brne	8000d942 <_close_r+0x1a>
8000d93a:	6c 08       	ld.w	r8,r6[0x0]
8000d93c:	58 08       	cp.w	r8,0
8000d93e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000d942:	d8 22       	popm	r4-r7,pc
8000d944:	00 00       	add	r0,r0
8000d946:	95 e0       	st.w	r10[0x38],r0

8000d948 <__errno>:
8000d948:	48 28       	lddpc	r8,8000d950 <__errno+0x8>
8000d94a:	70 0c       	ld.w	r12,r8[0x0]
8000d94c:	2f 4c       	sub	r12,-12
8000d94e:	5e fc       	retal	r12
8000d950:	00 00       	add	r0,r0
8000d952:	02 f8       	st.b	--r1,r8

8000d954 <_fclose_r>:
8000d954:	d4 21       	pushm	r4-r7,lr
8000d956:	18 96       	mov	r6,r12
8000d958:	16 97       	mov	r7,r11
8000d95a:	58 0b       	cp.w	r11,0
8000d95c:	c0 31       	brne	8000d962 <_fclose_r+0xe>
8000d95e:	16 95       	mov	r5,r11
8000d960:	c5 08       	rjmp	8000da00 <_fclose_r+0xac>
8000d962:	fe b0 f4 5d 	rcall	8000c21c <__sfp_lock_acquire>
8000d966:	58 06       	cp.w	r6,0
8000d968:	c0 70       	breq	8000d976 <_fclose_r+0x22>
8000d96a:	6c 68       	ld.w	r8,r6[0x18]
8000d96c:	58 08       	cp.w	r8,0
8000d96e:	c0 41       	brne	8000d976 <_fclose_r+0x22>
8000d970:	0c 9c       	mov	r12,r6
8000d972:	fe b0 f4 a9 	rcall	8000c2c4 <__sinit>
8000d976:	4a 48       	lddpc	r8,8000da04 <_fclose_r+0xb0>
8000d978:	10 37       	cp.w	r7,r8
8000d97a:	c0 31       	brne	8000d980 <_fclose_r+0x2c>
8000d97c:	6c 07       	ld.w	r7,r6[0x0]
8000d97e:	c0 a8       	rjmp	8000d992 <_fclose_r+0x3e>
8000d980:	4a 28       	lddpc	r8,8000da08 <_fclose_r+0xb4>
8000d982:	10 37       	cp.w	r7,r8
8000d984:	c0 31       	brne	8000d98a <_fclose_r+0x36>
8000d986:	6c 17       	ld.w	r7,r6[0x4]
8000d988:	c0 58       	rjmp	8000d992 <_fclose_r+0x3e>
8000d98a:	4a 18       	lddpc	r8,8000da0c <_fclose_r+0xb8>
8000d98c:	10 37       	cp.w	r7,r8
8000d98e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000d992:	8e 69       	ld.sh	r9,r7[0xc]
8000d994:	30 08       	mov	r8,0
8000d996:	f0 09 19 00 	cp.h	r9,r8
8000d99a:	c0 51       	brne	8000d9a4 <_fclose_r+0x50>
8000d99c:	fe b0 f4 41 	rcall	8000c21e <__sfp_lock_release>
8000d9a0:	30 05       	mov	r5,0
8000d9a2:	c2 f8       	rjmp	8000da00 <_fclose_r+0xac>
8000d9a4:	0e 9b       	mov	r11,r7
8000d9a6:	0c 9c       	mov	r12,r6
8000d9a8:	fe b0 f3 b2 	rcall	8000c10c <_fflush_r>
8000d9ac:	6e c8       	ld.w	r8,r7[0x30]
8000d9ae:	18 95       	mov	r5,r12
8000d9b0:	58 08       	cp.w	r8,0
8000d9b2:	c0 60       	breq	8000d9be <_fclose_r+0x6a>
8000d9b4:	6e 8b       	ld.w	r11,r7[0x20]
8000d9b6:	0c 9c       	mov	r12,r6
8000d9b8:	5d 18       	icall	r8
8000d9ba:	f9 b5 05 ff 	movlt	r5,-1
8000d9be:	8e 68       	ld.sh	r8,r7[0xc]
8000d9c0:	ed b8 00 07 	bld	r8,0x7
8000d9c4:	c0 51       	brne	8000d9ce <_fclose_r+0x7a>
8000d9c6:	6e 4b       	ld.w	r11,r7[0x10]
8000d9c8:	0c 9c       	mov	r12,r6
8000d9ca:	fe b0 f5 19 	rcall	8000c3fc <_free_r>
8000d9ce:	6e db       	ld.w	r11,r7[0x34]
8000d9d0:	58 0b       	cp.w	r11,0
8000d9d2:	c0 a0       	breq	8000d9e6 <_fclose_r+0x92>
8000d9d4:	ee c8 ff bc 	sub	r8,r7,-68
8000d9d8:	10 3b       	cp.w	r11,r8
8000d9da:	c0 40       	breq	8000d9e2 <_fclose_r+0x8e>
8000d9dc:	0c 9c       	mov	r12,r6
8000d9de:	fe b0 f5 0f 	rcall	8000c3fc <_free_r>
8000d9e2:	30 08       	mov	r8,0
8000d9e4:	8f d8       	st.w	r7[0x34],r8
8000d9e6:	6f 2b       	ld.w	r11,r7[0x48]
8000d9e8:	58 0b       	cp.w	r11,0
8000d9ea:	c0 70       	breq	8000d9f8 <_fclose_r+0xa4>
8000d9ec:	0c 9c       	mov	r12,r6
8000d9ee:	fe b0 f5 07 	rcall	8000c3fc <_free_r>
8000d9f2:	30 08       	mov	r8,0
8000d9f4:	ef 48 00 48 	st.w	r7[72],r8
8000d9f8:	30 08       	mov	r8,0
8000d9fa:	ae 68       	st.h	r7[0xc],r8
8000d9fc:	fe b0 f4 11 	rcall	8000c21e <__sfp_lock_release>
8000da00:	0a 9c       	mov	r12,r5
8000da02:	d8 22       	popm	r4-r7,pc
8000da04:	80 00       	ld.sh	r0,r0[0x0]
8000da06:	ea 28 80 00 	sub	r8,688128
8000da0a:	ea 48 80 00 	cp.w	r8,688128
8000da0e:	ea 68 d4 01 	mov	r8,709633

8000da10 <fclose>:
8000da10:	d4 01       	pushm	lr
8000da12:	48 38       	lddpc	r8,8000da1c <fclose+0xc>
8000da14:	18 9b       	mov	r11,r12
8000da16:	70 0c       	ld.w	r12,r8[0x0]
8000da18:	c9 ef       	rcall	8000d954 <_fclose_r>
8000da1a:	d8 02       	popm	pc
8000da1c:	00 00       	add	r0,r0
8000da1e:	02 f8       	st.b	--r1,r8

8000da20 <_fstat_r>:
8000da20:	d4 21       	pushm	r4-r7,lr
8000da22:	16 98       	mov	r8,r11
8000da24:	18 97       	mov	r7,r12
8000da26:	10 9c       	mov	r12,r8
8000da28:	30 08       	mov	r8,0
8000da2a:	48 66       	lddpc	r6,8000da40 <_fstat_r+0x20>
8000da2c:	14 9b       	mov	r11,r10
8000da2e:	8d 08       	st.w	r6[0x0],r8
8000da30:	cf 8e       	rcall	8000d820 <_fstat>
8000da32:	5b fc       	cp.w	r12,-1
8000da34:	c0 51       	brne	8000da3e <_fstat_r+0x1e>
8000da36:	6c 08       	ld.w	r8,r6[0x0]
8000da38:	58 08       	cp.w	r8,0
8000da3a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000da3e:	d8 22       	popm	r4-r7,pc
8000da40:	00 00       	add	r0,r0
8000da42:	95 e0       	st.w	r10[0x38],r0

8000da44 <_lseek_r>:
8000da44:	d4 21       	pushm	r4-r7,lr
8000da46:	16 98       	mov	r8,r11
8000da48:	18 97       	mov	r7,r12
8000da4a:	10 9c       	mov	r12,r8
8000da4c:	30 08       	mov	r8,0
8000da4e:	14 9b       	mov	r11,r10
8000da50:	48 66       	lddpc	r6,8000da68 <_lseek_r+0x24>
8000da52:	12 9a       	mov	r10,r9
8000da54:	8d 08       	st.w	r6[0x0],r8
8000da56:	ca 9e       	rcall	8000d7a8 <_lseek>
8000da58:	5b fc       	cp.w	r12,-1
8000da5a:	c0 51       	brne	8000da64 <_lseek_r+0x20>
8000da5c:	6c 08       	ld.w	r8,r6[0x0]
8000da5e:	58 08       	cp.w	r8,0
8000da60:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000da64:	d8 22       	popm	r4-r7,pc
8000da66:	d7 03       	nop
8000da68:	00 00       	add	r0,r0
8000da6a:	95 e0       	st.w	r10[0x38],r0

8000da6c <_read_r>:
8000da6c:	d4 21       	pushm	r4-r7,lr
8000da6e:	16 98       	mov	r8,r11
8000da70:	18 97       	mov	r7,r12
8000da72:	10 9c       	mov	r12,r8
8000da74:	30 08       	mov	r8,0
8000da76:	14 9b       	mov	r11,r10
8000da78:	48 66       	lddpc	r6,8000da90 <_read_r+0x24>
8000da7a:	12 9a       	mov	r10,r9
8000da7c:	8d 08       	st.w	r6[0x0],r8
8000da7e:	ca 1e       	rcall	8000d7c0 <_read>
8000da80:	5b fc       	cp.w	r12,-1
8000da82:	c0 51       	brne	8000da8c <_read_r+0x20>
8000da84:	6c 08       	ld.w	r8,r6[0x0]
8000da86:	58 08       	cp.w	r8,0
8000da88:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000da8c:	d8 22       	popm	r4-r7,pc
8000da8e:	d7 03       	nop
8000da90:	00 00       	add	r0,r0
8000da92:	95 e0       	st.w	r10[0x38],r0

8000da94 <__avr32_f64_to_u32>:
8000da94:	58 0b       	cp.w	r11,0
8000da96:	5e 6d       	retmi	0

8000da98 <__avr32_f64_to_s32>:
8000da98:	f6 0c 15 01 	lsl	r12,r11,0x1
8000da9c:	b5 9c       	lsr	r12,0x15
8000da9e:	e0 2c 03 ff 	sub	r12,1023
8000daa2:	5e 3d       	retlo	0
8000daa4:	f8 0c 11 1f 	rsub	r12,r12,31
8000daa8:	16 99       	mov	r9,r11
8000daaa:	ab 7b       	lsl	r11,0xb
8000daac:	bf bb       	sbr	r11,0x1f
8000daae:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000dab2:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000dab6:	a1 79       	lsl	r9,0x1
8000dab8:	5e 2b       	reths	r11
8000daba:	5c 3b       	neg	r11
8000dabc:	5e fb       	retal	r11

8000dabe <__avr32_u32_to_f64>:
8000dabe:	f8 cb 00 00 	sub	r11,r12,0
8000dac2:	30 0c       	mov	r12,0
8000dac4:	c0 38       	rjmp	8000daca <__avr32_s32_to_f64+0x4>

8000dac6 <__avr32_s32_to_f64>:
8000dac6:	18 9b       	mov	r11,r12
8000dac8:	5c 4b       	abs	r11
8000daca:	30 0a       	mov	r10,0
8000dacc:	5e 0b       	reteq	r11
8000dace:	d4 01       	pushm	lr
8000dad0:	e0 69 04 1e 	mov	r9,1054
8000dad4:	f6 08 12 00 	clz	r8,r11
8000dad8:	c1 70       	breq	8000db06 <__avr32_s32_to_f64+0x40>
8000dada:	c0 c3       	brcs	8000daf2 <__avr32_s32_to_f64+0x2c>
8000dadc:	f0 0e 11 20 	rsub	lr,r8,32
8000dae0:	f6 08 09 4b 	lsl	r11,r11,r8
8000dae4:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000dae8:	1c 4b       	or	r11,lr
8000daea:	f4 08 09 4a 	lsl	r10,r10,r8
8000daee:	10 19       	sub	r9,r8
8000daf0:	c0 b8       	rjmp	8000db06 <__avr32_s32_to_f64+0x40>
8000daf2:	f4 08 12 00 	clz	r8,r10
8000daf6:	f9 b8 03 00 	movlo	r8,0
8000dafa:	f7 b8 02 e0 	subhs	r8,-32
8000dafe:	f4 08 09 4b 	lsl	r11,r10,r8
8000db02:	30 0a       	mov	r10,0
8000db04:	10 19       	sub	r9,r8
8000db06:	58 09       	cp.w	r9,0
8000db08:	e0 89 00 30 	brgt	8000db68 <__avr32_s32_to_f64+0xa2>
8000db0c:	5c 39       	neg	r9
8000db0e:	2f f9       	sub	r9,-1
8000db10:	e0 49 00 36 	cp.w	r9,54
8000db14:	c0 43       	brcs	8000db1c <__avr32_s32_to_f64+0x56>
8000db16:	30 0b       	mov	r11,0
8000db18:	30 0a       	mov	r10,0
8000db1a:	c2 68       	rjmp	8000db66 <__avr32_s32_to_f64+0xa0>
8000db1c:	2f 69       	sub	r9,-10
8000db1e:	f2 08 11 20 	rsub	r8,r9,32
8000db22:	e0 49 00 20 	cp.w	r9,32
8000db26:	c0 b2       	brcc	8000db3c <__avr32_s32_to_f64+0x76>
8000db28:	f4 08 09 4e 	lsl	lr,r10,r8
8000db2c:	f6 08 09 48 	lsl	r8,r11,r8
8000db30:	f4 09 0a 4a 	lsr	r10,r10,r9
8000db34:	f6 09 0a 4b 	lsr	r11,r11,r9
8000db38:	10 4b       	or	r11,r8
8000db3a:	c0 88       	rjmp	8000db4a <__avr32_s32_to_f64+0x84>
8000db3c:	f6 08 09 4e 	lsl	lr,r11,r8
8000db40:	14 4e       	or	lr,r10
8000db42:	16 9a       	mov	r10,r11
8000db44:	30 0b       	mov	r11,0
8000db46:	f4 09 0a 4a 	lsr	r10,r10,r9
8000db4a:	ed ba 00 00 	bld	r10,0x0
8000db4e:	c0 92       	brcc	8000db60 <__avr32_s32_to_f64+0x9a>
8000db50:	1c 7e       	tst	lr,lr
8000db52:	c0 41       	brne	8000db5a <__avr32_s32_to_f64+0x94>
8000db54:	ed ba 00 01 	bld	r10,0x1
8000db58:	c0 42       	brcc	8000db60 <__avr32_s32_to_f64+0x9a>
8000db5a:	2f fa       	sub	r10,-1
8000db5c:	f7 bb 02 ff 	subhs	r11,-1
8000db60:	5c fc       	rol	r12
8000db62:	5d 0b       	ror	r11
8000db64:	5d 0a       	ror	r10
8000db66:	d8 02       	popm	pc
8000db68:	e0 68 03 ff 	mov	r8,1023
8000db6c:	ed ba 00 0b 	bld	r10,0xb
8000db70:	f7 b8 00 ff 	subeq	r8,-1
8000db74:	10 0a       	add	r10,r8
8000db76:	5c 0b       	acr	r11
8000db78:	f7 b9 03 fe 	sublo	r9,-2
8000db7c:	e0 49 07 ff 	cp.w	r9,2047
8000db80:	c0 55       	brlt	8000db8a <__avr32_s32_to_f64+0xc4>
8000db82:	30 0a       	mov	r10,0
8000db84:	fc 1b ff e0 	movh	r11,0xffe0
8000db88:	c0 c8       	rjmp	8000dba0 <__floatsidf_return_op1>
8000db8a:	ed bb 00 1f 	bld	r11,0x1f
8000db8e:	f7 b9 01 01 	subne	r9,1
8000db92:	ab 9a       	lsr	r10,0xb
8000db94:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000db98:	a1 7b       	lsl	r11,0x1
8000db9a:	ab 9b       	lsr	r11,0xb
8000db9c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000dba0 <__floatsidf_return_op1>:
8000dba0:	a1 7c       	lsl	r12,0x1
8000dba2:	5d 0b       	ror	r11
8000dba4:	d8 02       	popm	pc

8000dba6 <__avr32_f64_cmp_eq>:
8000dba6:	10 3a       	cp.w	r10,r8
8000dba8:	f2 0b 13 00 	cpc	r11,r9
8000dbac:	c0 80       	breq	8000dbbc <__avr32_f64_cmp_eq+0x16>
8000dbae:	a1 7b       	lsl	r11,0x1
8000dbb0:	a1 79       	lsl	r9,0x1
8000dbb2:	14 4b       	or	r11,r10
8000dbb4:	12 4b       	or	r11,r9
8000dbb6:	10 4b       	or	r11,r8
8000dbb8:	5e 0f       	reteq	1
8000dbba:	5e fd       	retal	0
8000dbbc:	a1 7b       	lsl	r11,0x1
8000dbbe:	fc 1c ff e0 	movh	r12,0xffe0
8000dbc2:	58 0a       	cp.w	r10,0
8000dbc4:	f8 0b 13 00 	cpc	r11,r12
8000dbc8:	5e 8f       	retls	1
8000dbca:	5e fd       	retal	0

8000dbcc <__avr32_f64_cmp_lt>:
8000dbcc:	1a de       	st.w	--sp,lr
8000dbce:	1a d7       	st.w	--sp,r7
8000dbd0:	a1 7b       	lsl	r11,0x1
8000dbd2:	5f 3c       	srlo	r12
8000dbd4:	a1 79       	lsl	r9,0x1
8000dbd6:	5f 37       	srlo	r7
8000dbd8:	5c fc       	rol	r12
8000dbda:	fc 1e ff e0 	movh	lr,0xffe0
8000dbde:	58 0a       	cp.w	r10,0
8000dbe0:	fc 0b 13 00 	cpc	r11,lr
8000dbe4:	e0 8b 00 1d 	brhi	8000dc1e <__avr32_f64_cmp_lt+0x52>
8000dbe8:	58 08       	cp.w	r8,0
8000dbea:	fc 09 13 00 	cpc	r9,lr
8000dbee:	e0 8b 00 18 	brhi	8000dc1e <__avr32_f64_cmp_lt+0x52>
8000dbf2:	58 0b       	cp.w	r11,0
8000dbf4:	f5 ba 00 00 	subfeq	r10,0
8000dbf8:	c1 50       	breq	8000dc22 <__avr32_f64_cmp_lt+0x56>
8000dbfa:	1b 07       	ld.w	r7,sp++
8000dbfc:	1b 0e       	ld.w	lr,sp++
8000dbfe:	58 3c       	cp.w	r12,3
8000dc00:	c0 a0       	breq	8000dc14 <__avr32_f64_cmp_lt+0x48>
8000dc02:	58 1c       	cp.w	r12,1
8000dc04:	c0 33       	brcs	8000dc0a <__avr32_f64_cmp_lt+0x3e>
8000dc06:	5e 0d       	reteq	0
8000dc08:	5e 1f       	retne	1
8000dc0a:	10 3a       	cp.w	r10,r8
8000dc0c:	f2 0b 13 00 	cpc	r11,r9
8000dc10:	5e 2d       	reths	0
8000dc12:	5e 3f       	retlo	1
8000dc14:	14 38       	cp.w	r8,r10
8000dc16:	f6 09 13 00 	cpc	r9,r11
8000dc1a:	5e 2d       	reths	0
8000dc1c:	5e 3f       	retlo	1
8000dc1e:	1b 07       	ld.w	r7,sp++
8000dc20:	d8 0a       	popm	pc,r12=0
8000dc22:	58 17       	cp.w	r7,1
8000dc24:	5f 1c       	srne	r12
8000dc26:	58 09       	cp.w	r9,0
8000dc28:	f5 b8 00 00 	subfeq	r8,0
8000dc2c:	1b 07       	ld.w	r7,sp++
8000dc2e:	1b 0e       	ld.w	lr,sp++
8000dc30:	5e 0d       	reteq	0
8000dc32:	5e fc       	retal	r12

8000dc34 <__avr32_umod64>:
8000dc34:	d4 31       	pushm	r0-r7,lr
8000dc36:	1a 97       	mov	r7,sp
8000dc38:	20 2d       	sub	sp,8
8000dc3a:	10 9c       	mov	r12,r8
8000dc3c:	12 95       	mov	r5,r9
8000dc3e:	14 9e       	mov	lr,r10
8000dc40:	16 93       	mov	r3,r11
8000dc42:	16 96       	mov	r6,r11
8000dc44:	58 09       	cp.w	r9,0
8000dc46:	c4 41       	brne	8000dcce <__avr32_umod64+0x9a>
8000dc48:	16 38       	cp.w	r8,r11
8000dc4a:	e0 88 00 5a 	brls	8000dcfe <__avr32_umod64+0xca>
8000dc4e:	f0 08 12 00 	clz	r8,r8
8000dc52:	c0 d0       	breq	8000dc6c <__avr32_umod64+0x38>
8000dc54:	f6 08 09 46 	lsl	r6,r11,r8
8000dc58:	f8 08 09 4c 	lsl	r12,r12,r8
8000dc5c:	f0 0b 11 20 	rsub	r11,r8,32
8000dc60:	f4 08 09 4e 	lsl	lr,r10,r8
8000dc64:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000dc68:	f7 e6 10 06 	or	r6,r11,r6
8000dc6c:	f8 0a 16 10 	lsr	r10,r12,0x10
8000dc70:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000dc74:	ec 0a 0d 02 	divu	r2,r6,r10
8000dc78:	fc 09 16 10 	lsr	r9,lr,0x10
8000dc7c:	ea 02 02 4b 	mul	r11,r5,r2
8000dc80:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000dc84:	12 3b       	cp.w	r11,r9
8000dc86:	e0 88 00 09 	brls	8000dc98 <__avr32_umod64+0x64>
8000dc8a:	18 09       	add	r9,r12
8000dc8c:	12 3c       	cp.w	r12,r9
8000dc8e:	e0 8b 00 05 	brhi	8000dc98 <__avr32_umod64+0x64>
8000dc92:	12 3b       	cp.w	r11,r9
8000dc94:	f3 dc eb 09 	addhi	r9,r9,r12
8000dc98:	f2 0b 01 0b 	sub	r11,r9,r11
8000dc9c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000dca0:	f6 0a 0d 0a 	divu	r10,r11,r10
8000dca4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000dca8:	ea 0a 02 4a 	mul	r10,r5,r10
8000dcac:	1c 3a       	cp.w	r10,lr
8000dcae:	e0 88 00 09 	brls	8000dcc0 <__avr32_umod64+0x8c>
8000dcb2:	18 0e       	add	lr,r12
8000dcb4:	1c 3c       	cp.w	r12,lr
8000dcb6:	e0 8b 00 05 	brhi	8000dcc0 <__avr32_umod64+0x8c>
8000dcba:	1c 3a       	cp.w	r10,lr
8000dcbc:	fd dc eb 0e 	addhi	lr,lr,r12
8000dcc0:	fc 0a 01 0a 	sub	r10,lr,r10
8000dcc4:	30 0b       	mov	r11,0
8000dcc6:	f4 08 0a 4a 	lsr	r10,r10,r8
8000dcca:	2f ed       	sub	sp,-8
8000dccc:	d8 32       	popm	r0-r7,pc
8000dcce:	16 39       	cp.w	r9,r11
8000dcd0:	fe 9b ff fd 	brhi	8000dcca <__avr32_umod64+0x96>
8000dcd4:	f2 09 12 00 	clz	r9,r9
8000dcd8:	c4 61       	brne	8000dd64 <__avr32_umod64+0x130>
8000dcda:	14 38       	cp.w	r8,r10
8000dcdc:	5f 8b       	srls	r11
8000dcde:	06 35       	cp.w	r5,r3
8000dce0:	5f 3a       	srlo	r10
8000dce2:	f7 ea 10 0a 	or	r10,r11,r10
8000dce6:	f2 0a 18 00 	cp.b	r10,r9
8000dcea:	c0 60       	breq	8000dcf6 <__avr32_umod64+0xc2>
8000dcec:	fc 08 01 0a 	sub	r10,lr,r8
8000dcf0:	e6 05 01 46 	sbc	r6,r3,r5
8000dcf4:	14 9e       	mov	lr,r10
8000dcf6:	0c 9b       	mov	r11,r6
8000dcf8:	1c 9a       	mov	r10,lr
8000dcfa:	2f ed       	sub	sp,-8
8000dcfc:	d8 32       	popm	r0-r7,pc
8000dcfe:	58 08       	cp.w	r8,0
8000dd00:	c0 51       	brne	8000dd0a <__avr32_umod64+0xd6>
8000dd02:	30 19       	mov	r9,1
8000dd04:	f2 08 0d 08 	divu	r8,r9,r8
8000dd08:	10 9c       	mov	r12,r8
8000dd0a:	f8 08 12 00 	clz	r8,r12
8000dd0e:	e0 81 00 84 	brne	8000de16 <__avr32_umod64+0x1e2>
8000dd12:	ec 0c 01 0b 	sub	r11,r6,r12
8000dd16:	f8 03 16 10 	lsr	r3,r12,0x10
8000dd1a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000dd1e:	f6 03 0d 0a 	divu	r10,r11,r3
8000dd22:	fc 09 16 10 	lsr	r9,lr,0x10
8000dd26:	ea 0a 02 4a 	mul	r10,r5,r10
8000dd2a:	f3 eb 11 09 	or	r9,r9,r11<<0x10
8000dd2e:	12 3a       	cp.w	r10,r9
8000dd30:	e0 88 00 09 	brls	8000dd42 <__avr32_umod64+0x10e>
8000dd34:	18 09       	add	r9,r12
8000dd36:	12 3c       	cp.w	r12,r9
8000dd38:	e0 8b 00 05 	brhi	8000dd42 <__avr32_umod64+0x10e>
8000dd3c:	12 3a       	cp.w	r10,r9
8000dd3e:	f3 dc eb 09 	addhi	r9,r9,r12
8000dd42:	14 19       	sub	r9,r10
8000dd44:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000dd48:	f2 03 0d 02 	divu	r2,r9,r3
8000dd4c:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000dd50:	ea 02 02 4a 	mul	r10,r5,r2
8000dd54:	1c 3a       	cp.w	r10,lr
8000dd56:	fe 98 ff b5 	brls	8000dcc0 <__avr32_umod64+0x8c>
8000dd5a:	18 0e       	add	lr,r12
8000dd5c:	1c 3c       	cp.w	r12,lr
8000dd5e:	fe 9b ff b1 	brhi	8000dcc0 <__avr32_umod64+0x8c>
8000dd62:	ca cb       	rjmp	8000dcba <__avr32_umod64+0x86>
8000dd64:	f2 0e 11 20 	rsub	lr,r9,32
8000dd68:	ea 09 09 45 	lsl	r5,r5,r9
8000dd6c:	f6 09 09 4b 	lsl	r11,r11,r9
8000dd70:	e6 0e 0a 43 	lsr	r3,r3,lr
8000dd74:	f0 09 09 41 	lsl	r1,r8,r9
8000dd78:	f4 09 09 42 	lsl	r2,r10,r9
8000dd7c:	f0 0e 0a 48 	lsr	r8,r8,lr
8000dd80:	f4 0e 0a 4a 	lsr	r10,r10,lr
8000dd84:	0a 48       	or	r8,r5
8000dd86:	16 4a       	or	r10,r11
8000dd88:	f0 06 16 10 	lsr	r6,r8,0x10
8000dd8c:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000dd90:	e6 06 0d 04 	divu	r4,r3,r6
8000dd94:	f4 03 16 10 	lsr	r3,r10,0x10
8000dd98:	08 9b       	mov	r11,r4
8000dd9a:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000dd9e:	e8 0c 02 45 	mul	r5,r4,r12
8000dda2:	06 35       	cp.w	r5,r3
8000dda4:	e0 88 00 07 	brls	8000ddb2 <__avr32_umod64+0x17e>
8000dda8:	20 1b       	sub	r11,1
8000ddaa:	10 03       	add	r3,r8
8000ddac:	06 38       	cp.w	r8,r3
8000ddae:	e0 88 00 72 	brls	8000de92 <__avr32_umod64+0x25e>
8000ddb2:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000ddb6:	0a 13       	sub	r3,r5
8000ddb8:	e6 06 0d 04 	divu	r4,r3,r6
8000ddbc:	f5 e5 11 06 	or	r6,r10,r5<<0x10
8000ddc0:	e8 0c 02 4c 	mul	r12,r4,r12
8000ddc4:	08 9a       	mov	r10,r4
8000ddc6:	0c 3c       	cp.w	r12,r6
8000ddc8:	e0 88 00 07 	brls	8000ddd6 <__avr32_umod64+0x1a2>
8000ddcc:	20 1a       	sub	r10,1
8000ddce:	10 06       	add	r6,r8
8000ddd0:	0c 38       	cp.w	r8,r6
8000ddd2:	e0 88 00 5a 	brls	8000de86 <__avr32_umod64+0x252>
8000ddd6:	f5 eb 11 0b 	or	r11,r10,r11<<0x10
8000ddda:	18 16       	sub	r6,r12
8000dddc:	f6 01 06 4a 	mulu.d	r10,r11,r1
8000dde0:	14 9c       	mov	r12,r10
8000dde2:	16 36       	cp.w	r6,r11
8000dde4:	c0 73       	brcs	8000ddf2 <__avr32_umod64+0x1be>
8000dde6:	5f 05       	sreq	r5
8000dde8:	14 32       	cp.w	r2,r10
8000ddea:	5f 3a       	srlo	r10
8000ddec:	eb ea 00 0a 	and	r10,r5,r10
8000ddf0:	c0 60       	breq	8000ddfc <__avr32_umod64+0x1c8>
8000ddf2:	f8 01 01 04 	sub	r4,r12,r1
8000ddf6:	f6 08 01 4b 	sbc	r11,r11,r8
8000ddfa:	08 9c       	mov	r12,r4
8000ddfc:	e4 0c 01 0a 	sub	r10,r2,r12
8000de00:	ec 0b 01 46 	sbc	r6,r6,r11
8000de04:	ec 09 0a 4b 	lsr	r11,r6,r9
8000de08:	f4 09 0a 4a 	lsr	r10,r10,r9
8000de0c:	ec 0e 09 46 	lsl	r6,r6,lr
8000de10:	0c 4a       	or	r10,r6
8000de12:	2f ed       	sub	sp,-8
8000de14:	d8 32       	popm	r0-r7,pc
8000de16:	f0 01 11 20 	rsub	r1,r8,32
8000de1a:	f4 01 0a 4b 	lsr	r11,r10,r1
8000de1e:	f8 08 09 4c 	lsl	r12,r12,r8
8000de22:	ec 08 09 49 	lsl	r9,r6,r8
8000de26:	ec 01 0a 41 	lsr	r1,r6,r1
8000de2a:	f7 e9 10 09 	or	r9,r11,r9
8000de2e:	f8 03 16 10 	lsr	r3,r12,0x10
8000de32:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000de36:	e2 03 0d 00 	divu	r0,r1,r3
8000de3a:	f2 0b 16 10 	lsr	r11,r9,0x10
8000de3e:	ea 00 02 4e 	mul	lr,r5,r0
8000de42:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000de46:	16 3e       	cp.w	lr,r11
8000de48:	e0 88 00 06 	brls	8000de54 <__avr32_umod64+0x220>
8000de4c:	18 0b       	add	r11,r12
8000de4e:	16 3c       	cp.w	r12,r11
8000de50:	e0 88 00 27 	brls	8000de9e <__avr32_umod64+0x26a>
8000de54:	f6 0e 01 01 	sub	r1,r11,lr
8000de58:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000de5c:	e2 03 0d 00 	divu	r0,r1,r3
8000de60:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000de64:	ea 00 02 4b 	mul	r11,r5,r0
8000de68:	12 3b       	cp.w	r11,r9
8000de6a:	e0 88 00 09 	brls	8000de7c <__avr32_umod64+0x248>
8000de6e:	18 09       	add	r9,r12
8000de70:	12 3c       	cp.w	r12,r9
8000de72:	e0 8b 00 05 	brhi	8000de7c <__avr32_umod64+0x248>
8000de76:	12 3b       	cp.w	r11,r9
8000de78:	f3 dc eb 09 	addhi	r9,r9,r12
8000de7c:	f2 0b 01 0b 	sub	r11,r9,r11
8000de80:	f4 08 09 4e 	lsl	lr,r10,r8
8000de84:	c4 db       	rjmp	8000dd1e <__avr32_umod64+0xea>
8000de86:	0c 3c       	cp.w	r12,r6
8000de88:	f7 ba 0b 01 	subhi	r10,1
8000de8c:	ed d8 eb 06 	addhi	r6,r6,r8
8000de90:	ca 3b       	rjmp	8000ddd6 <__avr32_umod64+0x1a2>
8000de92:	06 35       	cp.w	r5,r3
8000de94:	f7 bb 0b 01 	subhi	r11,1
8000de98:	e7 d8 eb 03 	addhi	r3,r3,r8
8000de9c:	c8 bb       	rjmp	8000ddb2 <__avr32_umod64+0x17e>
8000de9e:	16 3e       	cp.w	lr,r11
8000dea0:	f7 dc eb 0b 	addhi	r11,r11,r12
8000dea4:	cd 8b       	rjmp	8000de54 <__avr32_umod64+0x220>

Disassembly of section .exception:

8000e000 <_evba>:
8000e000:	c0 08       	rjmp	8000e000 <_evba>
	...

8000e004 <_handle_TLB_Multiple_Hit>:
8000e004:	c0 08       	rjmp	8000e004 <_handle_TLB_Multiple_Hit>
	...

8000e008 <_handle_Bus_Error_Data_Fetch>:
8000e008:	c0 08       	rjmp	8000e008 <_handle_Bus_Error_Data_Fetch>
	...

8000e00c <_handle_Bus_Error_Instruction_Fetch>:
8000e00c:	c0 08       	rjmp	8000e00c <_handle_Bus_Error_Instruction_Fetch>
	...

8000e010 <_handle_NMI>:
8000e010:	c0 08       	rjmp	8000e010 <_handle_NMI>
	...

8000e014 <_handle_Instruction_Address>:
8000e014:	c0 08       	rjmp	8000e014 <_handle_Instruction_Address>
	...

8000e018 <_handle_ITLB_Protection>:
8000e018:	c0 08       	rjmp	8000e018 <_handle_ITLB_Protection>
	...

8000e01c <_handle_Breakpoint>:
8000e01c:	c0 08       	rjmp	8000e01c <_handle_Breakpoint>
	...

8000e020 <_handle_Illegal_Opcode>:
8000e020:	c0 08       	rjmp	8000e020 <_handle_Illegal_Opcode>
	...

8000e024 <_handle_Unimplemented_Instruction>:
8000e024:	c0 08       	rjmp	8000e024 <_handle_Unimplemented_Instruction>
	...

8000e028 <_handle_Privilege_Violation>:
8000e028:	c0 08       	rjmp	8000e028 <_handle_Privilege_Violation>
	...

8000e02c <_handle_Floating_Point>:
8000e02c:	c0 08       	rjmp	8000e02c <_handle_Floating_Point>
	...

8000e030 <_handle_Coprocessor_Absent>:
8000e030:	c0 08       	rjmp	8000e030 <_handle_Coprocessor_Absent>
	...

8000e034 <_handle_Data_Address_Read>:
8000e034:	c0 08       	rjmp	8000e034 <_handle_Data_Address_Read>
	...

8000e038 <_handle_Data_Address_Write>:
8000e038:	c0 08       	rjmp	8000e038 <_handle_Data_Address_Write>
	...

8000e03c <_handle_DTLB_Protection_Read>:
8000e03c:	c0 08       	rjmp	8000e03c <_handle_DTLB_Protection_Read>
	...

8000e040 <_handle_DTLB_Protection_Write>:
8000e040:	c0 08       	rjmp	8000e040 <_handle_DTLB_Protection_Write>
	...

8000e044 <_handle_DTLB_Modified>:
8000e044:	c0 08       	rjmp	8000e044 <_handle_DTLB_Modified>
	...

8000e050 <_handle_ITLB_Miss>:
8000e050:	c0 08       	rjmp	8000e050 <_handle_ITLB_Miss>
	...

8000e060 <_handle_DTLB_Miss_Read>:
8000e060:	c0 08       	rjmp	8000e060 <_handle_DTLB_Miss_Read>
	...

8000e070 <_handle_DTLB_Miss_Write>:
8000e070:	c0 08       	rjmp	8000e070 <_handle_DTLB_Miss_Write>
	...

8000e100 <_handle_Supervisor_Call>:
8000e100:	c0 08       	rjmp	8000e100 <_handle_Supervisor_Call>
8000e102:	d7 03       	nop

8000e104 <_int0>:
8000e104:	30 0c       	mov	r12,0
8000e106:	fe b0 aa a7 	rcall	80003654 <_get_interrupt_handler>
8000e10a:	58 0c       	cp.w	r12,0
8000e10c:	f8 0f 17 10 	movne	pc,r12
8000e110:	d6 03       	rete

8000e112 <_int1>:
8000e112:	30 1c       	mov	r12,1
8000e114:	fe b0 aa a0 	rcall	80003654 <_get_interrupt_handler>
8000e118:	58 0c       	cp.w	r12,0
8000e11a:	f8 0f 17 10 	movne	pc,r12
8000e11e:	d6 03       	rete

8000e120 <_int2>:
8000e120:	30 2c       	mov	r12,2
8000e122:	fe b0 aa 99 	rcall	80003654 <_get_interrupt_handler>
8000e126:	58 0c       	cp.w	r12,0
8000e128:	f8 0f 17 10 	movne	pc,r12
8000e12c:	d6 03       	rete

8000e12e <_int3>:
8000e12e:	30 3c       	mov	r12,3
8000e130:	fe b0 aa 92 	rcall	80003654 <_get_interrupt_handler>
8000e134:	58 0c       	cp.w	r12,0
8000e136:	f8 0f 17 10 	movne	pc,r12
8000e13a:	d6 03       	rete
8000e13c:	d7 03       	nop
8000e13e:	d7 03       	nop
8000e140:	d7 03       	nop
8000e142:	d7 03       	nop
8000e144:	d7 03       	nop
8000e146:	d7 03       	nop
8000e148:	d7 03       	nop
8000e14a:	d7 03       	nop
8000e14c:	d7 03       	nop
8000e14e:	d7 03       	nop
8000e150:	d7 03       	nop
8000e152:	d7 03       	nop
8000e154:	d7 03       	nop
8000e156:	d7 03       	nop
8000e158:	d7 03       	nop
8000e15a:	d7 03       	nop
8000e15c:	d7 03       	nop
8000e15e:	d7 03       	nop
8000e160:	d7 03       	nop
8000e162:	d7 03       	nop
8000e164:	d7 03       	nop
8000e166:	d7 03       	nop
8000e168:	d7 03       	nop
8000e16a:	d7 03       	nop
8000e16c:	d7 03       	nop
8000e16e:	d7 03       	nop
8000e170:	d7 03       	nop
8000e172:	d7 03       	nop
8000e174:	d7 03       	nop
8000e176:	d7 03       	nop
8000e178:	d7 03       	nop
8000e17a:	d7 03       	nop
8000e17c:	d7 03       	nop
8000e17e:	d7 03       	nop
8000e180:	d7 03       	nop
8000e182:	d7 03       	nop
8000e184:	d7 03       	nop
8000e186:	d7 03       	nop
8000e188:	d7 03       	nop
8000e18a:	d7 03       	nop
8000e18c:	d7 03       	nop
8000e18e:	d7 03       	nop
8000e190:	d7 03       	nop
8000e192:	d7 03       	nop
8000e194:	d7 03       	nop
8000e196:	d7 03       	nop
8000e198:	d7 03       	nop
8000e19a:	d7 03       	nop
8000e19c:	d7 03       	nop
8000e19e:	d7 03       	nop
8000e1a0:	d7 03       	nop
8000e1a2:	d7 03       	nop
8000e1a4:	d7 03       	nop
8000e1a6:	d7 03       	nop
8000e1a8:	d7 03       	nop
8000e1aa:	d7 03       	nop
8000e1ac:	d7 03       	nop
8000e1ae:	d7 03       	nop
8000e1b0:	d7 03       	nop
8000e1b2:	d7 03       	nop
8000e1b4:	d7 03       	nop
8000e1b6:	d7 03       	nop
8000e1b8:	d7 03       	nop
8000e1ba:	d7 03       	nop
8000e1bc:	d7 03       	nop
8000e1be:	d7 03       	nop
8000e1c0:	d7 03       	nop
8000e1c2:	d7 03       	nop
8000e1c4:	d7 03       	nop
8000e1c6:	d7 03       	nop
8000e1c8:	d7 03       	nop
8000e1ca:	d7 03       	nop
8000e1cc:	d7 03       	nop
8000e1ce:	d7 03       	nop
8000e1d0:	d7 03       	nop
8000e1d2:	d7 03       	nop
8000e1d4:	d7 03       	nop
8000e1d6:	d7 03       	nop
8000e1d8:	d7 03       	nop
8000e1da:	d7 03       	nop
8000e1dc:	d7 03       	nop
8000e1de:	d7 03       	nop
8000e1e0:	d7 03       	nop
8000e1e2:	d7 03       	nop
8000e1e4:	d7 03       	nop
8000e1e6:	d7 03       	nop
8000e1e8:	d7 03       	nop
8000e1ea:	d7 03       	nop
8000e1ec:	d7 03       	nop
8000e1ee:	d7 03       	nop
8000e1f0:	d7 03       	nop
8000e1f2:	d7 03       	nop
8000e1f4:	d7 03       	nop
8000e1f6:	d7 03       	nop
8000e1f8:	d7 03       	nop
8000e1fa:	d7 03       	nop
8000e1fc:	d7 03       	nop
8000e1fe:	d7 03       	nop
